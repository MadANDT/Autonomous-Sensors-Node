
SLEEPOnExit_WL55_1CPU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002308  08000138  08000138  00001138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08002440  08002440  00003440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024dc  080024dc  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080024dc  080024dc  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080024dc  080024dc  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024dc  080024dc  000034dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080024e0  080024e0  000034e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080024e4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  2000000c  080024f0  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  080024f0  000040e8  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cc58  00000000  00000000  00004036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dc2  00000000  00000000  00010c8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f90  00000000  00000000  00012a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000be4  00000000  00000000  000139e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b5fb  00000000  00000000  000145c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d8cc  00000000  00000000  0002fbbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b1533  00000000  00000000  0003d48b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ee9be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004160  00000000  00000000  000eea04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000f2b64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	@ (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	@ (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000000c 	.word	0x2000000c
 8000154:	00000000 	.word	0x00000000
 8000158:	08002428 	.word	0x08002428

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	@ (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	@ (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	@ (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000010 	.word	0x20000010
 8000174:	08002428 	.word	0x08002428

08000178 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000178:	b480      	push	{r7}
 800017a:	b085      	sub	sp, #20
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000180:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000184:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000186:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	4313      	orrs	r3, r2
 800018e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000190:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000194:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	4013      	ands	r3, r2
 800019a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800019c:	68fb      	ldr	r3, [r7, #12]
}
 800019e:	bf00      	nop
 80001a0:	3714      	adds	r7, #20
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//char textApp[] = "Test du mode basse conso. SLEEP sur WL55\r\n";

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b082      	sub	sp, #8
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	6078      	str	r0, [r7, #4]
	HAL_ResumeTick();
 80001b0:	f000 fa68 	bl	8000684 <HAL_ResumeTick>

	// Check which version of the timer triggered this callback and toggle LED
	if (htim == &htim16){
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	4a07      	ldr	r2, [pc, #28]	@ (80001d4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80001b8:	4293      	cmp	r3, r2
 80001ba:	d104      	bne.n	80001c6 <HAL_TIM_PeriodElapsedCallback+0x1e>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);
 80001bc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80001c0:	4805      	ldr	r0, [pc, #20]	@ (80001d8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80001c2:	f000 fcf0 	bl	8000ba6 <HAL_GPIO_TogglePin>
				}
			}
		}*/
	}

	HAL_SuspendTick();
 80001c6:	f000 fa4f 	bl	8000668 <HAL_SuspendTick>
}
 80001ca:	bf00      	nop
 80001cc:	3708      	adds	r7, #8
 80001ce:	46bd      	mov	sp, r7
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	20000028 	.word	0x20000028
 80001d8:	48000400 	.word	0x48000400

080001dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001e0:	f000 f9cc 	bl	800057c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001e4:	f000 f814 	bl	8000210 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e8:	f000 f89c 	bl	8000324 <MX_GPIO_Init>
  MX_TIM16_Init();
 80001ec:	f000 f872 	bl	80002d4 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim16);
 80001f0:	4805      	ldr	r0, [pc, #20]	@ (8000208 <main+0x2c>)
 80001f2:	f001 fe3b 	bl	8001e6c <HAL_TIM_Base_Start_IT>
  //HAL_PWR_EnableSleepOnExit();
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 80001f6:	2201      	movs	r2, #1
 80001f8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <main+0x30>)
 80001fe:	f000 fcbb 	bl	8000b78 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000202:	bf00      	nop
 8000204:	e7fd      	b.n	8000202 <main+0x26>
 8000206:	bf00      	nop
 8000208:	20000028 	.word	0x20000028
 800020c:	48000400 	.word	0x48000400

08000210 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b09a      	sub	sp, #104	@ 0x68
 8000214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000216:	f107 0320 	add.w	r3, r7, #32
 800021a:	2248      	movs	r2, #72	@ 0x48
 800021c:	2100      	movs	r1, #0
 800021e:	4618      	mov	r0, r3
 8000220:	f002 f8d6 	bl	80023d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000224:	1d3b      	adds	r3, r7, #4
 8000226:	2200      	movs	r2, #0
 8000228:	601a      	str	r2, [r3, #0]
 800022a:	605a      	str	r2, [r3, #4]
 800022c:	609a      	str	r2, [r3, #8]
 800022e:	60da      	str	r2, [r3, #12]
 8000230:	611a      	str	r2, [r3, #16]
 8000232:	615a      	str	r2, [r3, #20]
 8000234:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000236:	4b26      	ldr	r3, [pc, #152]	@ (80002d0 <SystemClock_Config+0xc0>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800023e:	4a24      	ldr	r2, [pc, #144]	@ (80002d0 <SystemClock_Config+0xc0>)
 8000240:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000244:	6013      	str	r3, [r2, #0]
 8000246:	4b22      	ldr	r3, [pc, #136]	@ (80002d0 <SystemClock_Config+0xc0>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800024e:	603b      	str	r3, [r7, #0]
 8000250:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000252:	2320      	movs	r3, #32
 8000254:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000256:	2301      	movs	r3, #1
 8000258:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800025a:	2300      	movs	r3, #0
 800025c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800025e:	2360      	movs	r3, #96	@ 0x60
 8000260:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000262:	2302      	movs	r3, #2
 8000264:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000266:	2301      	movs	r3, #1
 8000268:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800026a:	2300      	movs	r3, #0
 800026c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 24;
 800026e:	2318      	movs	r3, #24
 8000270:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000272:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000276:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000278:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800027c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800027e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000282:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000284:	f107 0320 	add.w	r3, r7, #32
 8000288:	4618      	mov	r0, r3
 800028a:	f000 ff61 	bl	8001150 <HAL_RCC_OscConfig>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d001      	beq.n	8000298 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000294:	f000 f8cc 	bl	8000430 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8000298:	234f      	movs	r3, #79	@ 0x4f
 800029a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800029c:	2303      	movs	r3, #3
 800029e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80002a0:	2390      	movs	r3, #144	@ 0x90
 80002a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002a4:	2300      	movs	r3, #0
 80002a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 80002a8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80002ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80002ae:	2300      	movs	r3, #0
 80002b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	2102      	movs	r1, #2
 80002b6:	4618      	mov	r0, r3
 80002b8:	f001 facc 	bl	8001854 <HAL_RCC_ClockConfig>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d001      	beq.n	80002c6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80002c2:	f000 f8b5 	bl	8000430 <Error_Handler>
  }
}
 80002c6:	bf00      	nop
 80002c8:	3768      	adds	r7, #104	@ 0x68
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	bf00      	nop
 80002d0:	58000400 	.word	0x58000400

080002d4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80002d8:	4b10      	ldr	r3, [pc, #64]	@ (800031c <MX_TIM16_Init+0x48>)
 80002da:	4a11      	ldr	r2, [pc, #68]	@ (8000320 <MX_TIM16_Init+0x4c>)
 80002dc:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 300 - 1;
 80002de:	4b0f      	ldr	r3, [pc, #60]	@ (800031c <MX_TIM16_Init+0x48>)
 80002e0:	f240 122b 	movw	r2, #299	@ 0x12b
 80002e4:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002e6:	4b0d      	ldr	r3, [pc, #52]	@ (800031c <MX_TIM16_Init+0x48>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000 - 1;
 80002ec:	4b0b      	ldr	r3, [pc, #44]	@ (800031c <MX_TIM16_Init+0x48>)
 80002ee:	f242 720f 	movw	r2, #9999	@ 0x270f
 80002f2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002f4:	4b09      	ldr	r3, [pc, #36]	@ (800031c <MX_TIM16_Init+0x48>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80002fa:	4b08      	ldr	r3, [pc, #32]	@ (800031c <MX_TIM16_Init+0x48>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000300:	4b06      	ldr	r3, [pc, #24]	@ (800031c <MX_TIM16_Init+0x48>)
 8000302:	2200      	movs	r2, #0
 8000304:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000306:	4805      	ldr	r0, [pc, #20]	@ (800031c <MX_TIM16_Init+0x48>)
 8000308:	f001 fd4c 	bl	8001da4 <HAL_TIM_Base_Init>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8000312:	f000 f88d 	bl	8000430 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000316:	bf00      	nop
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	20000028 	.word	0x20000028
 8000320:	40014400 	.word	0x40014400

08000324 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b086      	sub	sp, #24
 8000328:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800032a:	1d3b      	adds	r3, r7, #4
 800032c:	2200      	movs	r2, #0
 800032e:	601a      	str	r2, [r3, #0]
 8000330:	605a      	str	r2, [r3, #4]
 8000332:	609a      	str	r2, [r3, #8]
 8000334:	60da      	str	r2, [r3, #12]
 8000336:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000338:	2001      	movs	r0, #1
 800033a:	f7ff ff1d 	bl	8000178 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800033e:	2002      	movs	r0, #2
 8000340:	f7ff ff1a 	bl	8000178 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000344:	2004      	movs	r0, #4
 8000346:	f7ff ff17 	bl	8000178 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800034a:	2080      	movs	r0, #128	@ 0x80
 800034c:	f7ff ff14 	bl	8000178 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, blue_LED_Pin|green_LED_Pin|red_LED_Pin, GPIO_PIN_RESET);
 8000350:	2200      	movs	r2, #0
 8000352:	f44f 410a 	mov.w	r1, #35328	@ 0x8a00
 8000356:	4833      	ldr	r0, [pc, #204]	@ (8000424 <MX_GPIO_Init+0x100>)
 8000358:	f000 fc0e 	bl	8000b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 800035c:	2200      	movs	r2, #0
 800035e:	2138      	movs	r1, #56	@ 0x38
 8000360:	4831      	ldr	r0, [pc, #196]	@ (8000428 <MX_GPIO_Init+0x104>)
 8000362:	f000 fc09 	bl	8000b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA12 PA15 PA11 PA10
                           PA0 PA9 PA6 PA1
                           PA7 PA4 PA5 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11|GPIO_PIN_10
 8000366:	f649 73f3 	movw	r3, #40947	@ 0x9ff3
 800036a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_7|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800036c:	2303      	movs	r3, #3
 800036e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000370:	2300      	movs	r3, #0
 8000372:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000374:	1d3b      	adds	r3, r7, #4
 8000376:	4619      	mov	r1, r3
 8000378:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800037c:	f000 fa9c 	bl	80008b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : blue_LED_Pin green_LED_Pin red_LED_Pin */
  GPIO_InitStruct.Pin = blue_LED_Pin|green_LED_Pin|red_LED_Pin;
 8000380:	f44f 430a 	mov.w	r3, #35328	@ 0x8a00
 8000384:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000386:	2301      	movs	r3, #1
 8000388:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800038a:	2300      	movs	r3, #0
 800038c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800038e:	2300      	movs	r3, #0
 8000390:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000392:	1d3b      	adds	r3, r7, #4
 8000394:	4619      	mov	r1, r3
 8000396:	4823      	ldr	r0, [pc, #140]	@ (8000424 <MX_GPIO_Init+0x100>)
 8000398:	f000 fa8e 	bl	80008b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB7 PB14
                           PB5 PB8 PB13 PB2
                           PB6 PB12 PB1 PB0
                           PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_14
 800039c:	f247 53ff 	movw	r3, #30207	@ 0x75ff
 80003a0:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_13|GPIO_PIN_2
                          |GPIO_PIN_6|GPIO_PIN_12|GPIO_PIN_1|GPIO_PIN_0
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003a2:	2303      	movs	r3, #3
 80003a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a6:	2300      	movs	r3, #0
 80003a8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003aa:	1d3b      	adds	r3, r7, #4
 80003ac:	4619      	mov	r1, r3
 80003ae:	481d      	ldr	r0, [pc, #116]	@ (8000424 <MX_GPIO_Init+0x100>)
 80003b0:	f000 fa82 	bl	80008b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC2 PC1 PC0
                           PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0
 80003b4:	f242 0347 	movw	r3, #8263	@ 0x2047
 80003b8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003ba:	2303      	movs	r3, #3
 80003bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003be:	2300      	movs	r3, #0
 80003c0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003c2:	1d3b      	adds	r3, r7, #4
 80003c4:	4619      	mov	r1, r3
 80003c6:	4818      	ldr	r0, [pc, #96]	@ (8000428 <MX_GPIO_Init+0x104>)
 80003c8:	f000 fa76 	bl	80008b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FE_CTRL3_Pin FE_CTRL2_Pin FE_CTRL1_Pin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 80003cc:	2338      	movs	r3, #56	@ 0x38
 80003ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003d0:	2301      	movs	r3, #1
 80003d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d4:	2300      	movs	r3, #0
 80003d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80003d8:	2303      	movs	r3, #3
 80003da:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003dc:	1d3b      	adds	r3, r7, #4
 80003de:	4619      	mov	r1, r3
 80003e0:	4811      	ldr	r0, [pc, #68]	@ (8000428 <MX_GPIO_Init+0x104>)
 80003e2:	f000 fa69 	bl	80008b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : T_VCP_RX_Pin T_VCP_RXA2_Pin */
  GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 80003e6:	230c      	movs	r3, #12
 80003e8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003ea:	2302      	movs	r3, #2
 80003ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ee:	2300      	movs	r3, #0
 80003f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003f2:	2300      	movs	r3, #0
 80003f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80003f6:	2307      	movs	r3, #7
 80003f8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003fa:	1d3b      	adds	r3, r7, #4
 80003fc:	4619      	mov	r1, r3
 80003fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000402:	f000 fa59 	bl	80008b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000406:	2308      	movs	r3, #8
 8000408:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800040a:	2303      	movs	r3, #3
 800040c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040e:	2300      	movs	r3, #0
 8000410:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000412:	1d3b      	adds	r3, r7, #4
 8000414:	4619      	mov	r1, r3
 8000416:	4805      	ldr	r0, [pc, #20]	@ (800042c <MX_GPIO_Init+0x108>)
 8000418:	f000 fa4e 	bl	80008b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800041c:	bf00      	nop
 800041e:	3718      	adds	r7, #24
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	48000400 	.word	0x48000400
 8000428:	48000800 	.word	0x48000800
 800042c:	48001c00 	.word	0x48001c00

08000430 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000434:	b672      	cpsid	i
}
 8000436:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000438:	bf00      	nop
 800043a:	e7fd      	b.n	8000438 <Error_Handler+0x8>

0800043c <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800043c:	b480      	push	{r7}
 800043e:	b085      	sub	sp, #20
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000444:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000448:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800044a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	4313      	orrs	r3, r2
 8000452:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000454:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000458:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	4013      	ands	r3, r2
 800045e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000460:	68fb      	ldr	r3, [r7, #12]
}
 8000462:	bf00      	nop
 8000464:	3714      	adds	r7, #20
 8000466:	46bd      	mov	sp, r7
 8000468:	bc80      	pop	{r7}
 800046a:	4770      	bx	lr

0800046c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000470:	bf00      	nop
 8000472:	46bd      	mov	sp, r7
 8000474:	bc80      	pop	{r7}
 8000476:	4770      	bx	lr

08000478 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4a09      	ldr	r2, [pc, #36]	@ (80004ac <HAL_TIM_Base_MspInit+0x34>)
 8000486:	4293      	cmp	r3, r2
 8000488:	d10b      	bne.n	80004a2 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM16_MspInit 0 */

    /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800048a:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800048e:	f7ff ffd5 	bl	800043c <LL_APB2_GRP1_EnableClock>
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8000492:	2200      	movs	r2, #0
 8000494:	2100      	movs	r1, #0
 8000496:	201c      	movs	r0, #28
 8000498:	f000 f9d9 	bl	800084e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 800049c:	201c      	movs	r0, #28
 800049e:	f000 f9f0 	bl	8000882 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM16_MspInit 1 */

  }

}
 80004a2:	bf00      	nop
 80004a4:	3708      	adds	r7, #8
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	40014400 	.word	0x40014400

080004b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004b4:	bf00      	nop
 80004b6:	e7fd      	b.n	80004b4 <NMI_Handler+0x4>

080004b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004bc:	bf00      	nop
 80004be:	e7fd      	b.n	80004bc <HardFault_Handler+0x4>

080004c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004c4:	bf00      	nop
 80004c6:	e7fd      	b.n	80004c4 <MemManage_Handler+0x4>

080004c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004cc:	bf00      	nop
 80004ce:	e7fd      	b.n	80004cc <BusFault_Handler+0x4>

080004d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004d4:	bf00      	nop
 80004d6:	e7fd      	b.n	80004d4 <UsageFault_Handler+0x4>

080004d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004dc:	bf00      	nop
 80004de:	46bd      	mov	sp, r7
 80004e0:	bc80      	pop	{r7}
 80004e2:	4770      	bx	lr

080004e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004e8:	bf00      	nop
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bc80      	pop	{r7}
 80004ee:	4770      	bx	lr

080004f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004f4:	bf00      	nop
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bc80      	pop	{r7}
 80004fa:	4770      	bx	lr

080004fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000500:	f000 f896 	bl	8000630 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000504:	bf00      	nop
 8000506:	bd80      	pop	{r7, pc}

08000508 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 Global Interrupt.
  */
void TIM16_IRQHandler(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800050c:	4802      	ldr	r0, [pc, #8]	@ (8000518 <TIM16_IRQHandler+0x10>)
 800050e:	f001 fcf9 	bl	8001f04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8000512:	bf00      	nop
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	20000028 	.word	0x20000028

0800051c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000520:	bf00      	nop
 8000522:	46bd      	mov	sp, r7
 8000524:	bc80      	pop	{r7}
 8000526:	4770      	bx	lr

08000528 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000528:	480d      	ldr	r0, [pc, #52]	@ (8000560 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800052a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800052c:	f7ff fff6 	bl	800051c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000530:	480c      	ldr	r0, [pc, #48]	@ (8000564 <LoopForever+0x6>)
  ldr r1, =_edata
 8000532:	490d      	ldr	r1, [pc, #52]	@ (8000568 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000534:	4a0d      	ldr	r2, [pc, #52]	@ (800056c <LoopForever+0xe>)
  movs r3, #0
 8000536:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000538:	e002      	b.n	8000540 <LoopCopyDataInit>

0800053a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800053a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800053c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800053e:	3304      	adds	r3, #4

08000540 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000540:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000542:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000544:	d3f9      	bcc.n	800053a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000546:	4a0a      	ldr	r2, [pc, #40]	@ (8000570 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000548:	4c0a      	ldr	r4, [pc, #40]	@ (8000574 <LoopForever+0x16>)
  movs r3, #0
 800054a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800054c:	e001      	b.n	8000552 <LoopFillZerobss>

0800054e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800054e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000550:	3204      	adds	r2, #4

08000552 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000552:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000554:	d3fb      	bcc.n	800054e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000556:	f001 ff43 	bl	80023e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800055a:	f7ff fe3f 	bl	80001dc <main>

0800055e <LoopForever>:

LoopForever:
    b LoopForever
 800055e:	e7fe      	b.n	800055e <LoopForever>
  ldr   r0, =_estack
 8000560:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000564:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000568:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800056c:	080024e4 	.word	0x080024e4
  ldr r2, =_sbss
 8000570:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000574:	200000e8 	.word	0x200000e8

08000578 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000578:	e7fe      	b.n	8000578 <ADC_IRQHandler>
	...

0800057c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000582:	2300      	movs	r3, #0
 8000584:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000586:	2003      	movs	r0, #3
 8000588:	f000 f956 	bl	8000838 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800058c:	f001 fb44 	bl	8001c18 <HAL_RCC_GetHCLKFreq>
 8000590:	4603      	mov	r3, r0
 8000592:	4a09      	ldr	r2, [pc, #36]	@ (80005b8 <HAL_Init+0x3c>)
 8000594:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000596:	2000      	movs	r0, #0
 8000598:	f000 f810 	bl	80005bc <HAL_InitTick>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d002      	beq.n	80005a8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80005a2:	2301      	movs	r3, #1
 80005a4:	71fb      	strb	r3, [r7, #7]
 80005a6:	e001      	b.n	80005ac <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005a8:	f7ff ff60 	bl	800046c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005ac:	79fb      	ldrb	r3, [r7, #7]
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	3708      	adds	r7, #8
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	20000000 	.word	0x20000000

080005bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80005c4:	2300      	movs	r3, #0
 80005c6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80005c8:	4b17      	ldr	r3, [pc, #92]	@ (8000628 <HAL_InitTick+0x6c>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d024      	beq.n	800061a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80005d0:	f001 fb22 	bl	8001c18 <HAL_RCC_GetHCLKFreq>
 80005d4:	4602      	mov	r2, r0
 80005d6:	4b14      	ldr	r3, [pc, #80]	@ (8000628 <HAL_InitTick+0x6c>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	4619      	mov	r1, r3
 80005dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005e0:	fbb3 f3f1 	udiv	r3, r3, r1
 80005e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80005e8:	4618      	mov	r0, r3
 80005ea:	f000 f958 	bl	800089e <HAL_SYSTICK_Config>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d10f      	bne.n	8000614 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	2b0f      	cmp	r3, #15
 80005f8:	d809      	bhi.n	800060e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005fa:	2200      	movs	r2, #0
 80005fc:	6879      	ldr	r1, [r7, #4]
 80005fe:	f04f 30ff 	mov.w	r0, #4294967295
 8000602:	f000 f924 	bl	800084e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000606:	4a09      	ldr	r2, [pc, #36]	@ (800062c <HAL_InitTick+0x70>)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	6013      	str	r3, [r2, #0]
 800060c:	e007      	b.n	800061e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800060e:	2301      	movs	r3, #1
 8000610:	73fb      	strb	r3, [r7, #15]
 8000612:	e004      	b.n	800061e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000614:	2301      	movs	r3, #1
 8000616:	73fb      	strb	r3, [r7, #15]
 8000618:	e001      	b.n	800061e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800061a:	2301      	movs	r3, #1
 800061c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800061e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000620:	4618      	mov	r0, r3
 8000622:	3710      	adds	r7, #16
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000008 	.word	0x20000008
 800062c:	20000004 	.word	0x20000004

08000630 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000634:	4b05      	ldr	r3, [pc, #20]	@ (800064c <HAL_IncTick+0x1c>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	461a      	mov	r2, r3
 800063a:	4b05      	ldr	r3, [pc, #20]	@ (8000650 <HAL_IncTick+0x20>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4413      	add	r3, r2
 8000640:	4a03      	ldr	r2, [pc, #12]	@ (8000650 <HAL_IncTick+0x20>)
 8000642:	6013      	str	r3, [r2, #0]
}
 8000644:	bf00      	nop
 8000646:	46bd      	mov	sp, r7
 8000648:	bc80      	pop	{r7}
 800064a:	4770      	bx	lr
 800064c:	20000008 	.word	0x20000008
 8000650:	200000e4 	.word	0x200000e4

08000654 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  return uwTick;
 8000658:	4b02      	ldr	r3, [pc, #8]	@ (8000664 <HAL_GetTick+0x10>)
 800065a:	681b      	ldr	r3, [r3, #0]
}
 800065c:	4618      	mov	r0, r3
 800065e:	46bd      	mov	sp, r7
 8000660:	bc80      	pop	{r7}
 8000662:	4770      	bx	lr
 8000664:	200000e4 	.word	0x200000e4

08000668 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800066c:	4b04      	ldr	r3, [pc, #16]	@ (8000680 <HAL_SuspendTick+0x18>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a03      	ldr	r2, [pc, #12]	@ (8000680 <HAL_SuspendTick+0x18>)
 8000672:	f023 0302 	bic.w	r3, r3, #2
 8000676:	6013      	str	r3, [r2, #0]
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	bc80      	pop	{r7}
 800067e:	4770      	bx	lr
 8000680:	e000e010 	.word	0xe000e010

08000684 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000688:	4b04      	ldr	r3, [pc, #16]	@ (800069c <HAL_ResumeTick+0x18>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a03      	ldr	r2, [pc, #12]	@ (800069c <HAL_ResumeTick+0x18>)
 800068e:	f043 0302 	orr.w	r3, r3, #2
 8000692:	6013      	str	r3, [r2, #0]
}
 8000694:	bf00      	nop
 8000696:	46bd      	mov	sp, r7
 8000698:	bc80      	pop	{r7}
 800069a:	4770      	bx	lr
 800069c:	e000e010 	.word	0xe000e010

080006a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b085      	sub	sp, #20
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	f003 0307 	and.w	r3, r3, #7
 80006ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006b0:	4b0c      	ldr	r3, [pc, #48]	@ (80006e4 <__NVIC_SetPriorityGrouping+0x44>)
 80006b2:	68db      	ldr	r3, [r3, #12]
 80006b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006b6:	68ba      	ldr	r2, [r7, #8]
 80006b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80006bc:	4013      	ands	r3, r2
 80006be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80006cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006d2:	4a04      	ldr	r2, [pc, #16]	@ (80006e4 <__NVIC_SetPriorityGrouping+0x44>)
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	60d3      	str	r3, [r2, #12]
}
 80006d8:	bf00      	nop
 80006da:	3714      	adds	r7, #20
 80006dc:	46bd      	mov	sp, r7
 80006de:	bc80      	pop	{r7}
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	e000ed00 	.word	0xe000ed00

080006e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006ec:	4b04      	ldr	r3, [pc, #16]	@ (8000700 <__NVIC_GetPriorityGrouping+0x18>)
 80006ee:	68db      	ldr	r3, [r3, #12]
 80006f0:	0a1b      	lsrs	r3, r3, #8
 80006f2:	f003 0307 	and.w	r3, r3, #7
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bc80      	pop	{r7}
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	e000ed00 	.word	0xe000ed00

08000704 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800070e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000712:	2b00      	cmp	r3, #0
 8000714:	db0b      	blt.n	800072e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	f003 021f 	and.w	r2, r3, #31
 800071c:	4906      	ldr	r1, [pc, #24]	@ (8000738 <__NVIC_EnableIRQ+0x34>)
 800071e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000722:	095b      	lsrs	r3, r3, #5
 8000724:	2001      	movs	r0, #1
 8000726:	fa00 f202 	lsl.w	r2, r0, r2
 800072a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800072e:	bf00      	nop
 8000730:	370c      	adds	r7, #12
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr
 8000738:	e000e100 	.word	0xe000e100

0800073c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	6039      	str	r1, [r7, #0]
 8000746:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074c:	2b00      	cmp	r3, #0
 800074e:	db0a      	blt.n	8000766 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	b2da      	uxtb	r2, r3
 8000754:	490c      	ldr	r1, [pc, #48]	@ (8000788 <__NVIC_SetPriority+0x4c>)
 8000756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075a:	0112      	lsls	r2, r2, #4
 800075c:	b2d2      	uxtb	r2, r2
 800075e:	440b      	add	r3, r1
 8000760:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000764:	e00a      	b.n	800077c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	b2da      	uxtb	r2, r3
 800076a:	4908      	ldr	r1, [pc, #32]	@ (800078c <__NVIC_SetPriority+0x50>)
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	f003 030f 	and.w	r3, r3, #15
 8000772:	3b04      	subs	r3, #4
 8000774:	0112      	lsls	r2, r2, #4
 8000776:	b2d2      	uxtb	r2, r2
 8000778:	440b      	add	r3, r1
 800077a:	761a      	strb	r2, [r3, #24]
}
 800077c:	bf00      	nop
 800077e:	370c      	adds	r7, #12
 8000780:	46bd      	mov	sp, r7
 8000782:	bc80      	pop	{r7}
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	e000e100 	.word	0xe000e100
 800078c:	e000ed00 	.word	0xe000ed00

08000790 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000790:	b480      	push	{r7}
 8000792:	b089      	sub	sp, #36	@ 0x24
 8000794:	af00      	add	r7, sp, #0
 8000796:	60f8      	str	r0, [r7, #12]
 8000798:	60b9      	str	r1, [r7, #8]
 800079a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	f003 0307 	and.w	r3, r3, #7
 80007a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007a4:	69fb      	ldr	r3, [r7, #28]
 80007a6:	f1c3 0307 	rsb	r3, r3, #7
 80007aa:	2b04      	cmp	r3, #4
 80007ac:	bf28      	it	cs
 80007ae:	2304      	movcs	r3, #4
 80007b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007b2:	69fb      	ldr	r3, [r7, #28]
 80007b4:	3304      	adds	r3, #4
 80007b6:	2b06      	cmp	r3, #6
 80007b8:	d902      	bls.n	80007c0 <NVIC_EncodePriority+0x30>
 80007ba:	69fb      	ldr	r3, [r7, #28]
 80007bc:	3b03      	subs	r3, #3
 80007be:	e000      	b.n	80007c2 <NVIC_EncodePriority+0x32>
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c4:	f04f 32ff 	mov.w	r2, #4294967295
 80007c8:	69bb      	ldr	r3, [r7, #24]
 80007ca:	fa02 f303 	lsl.w	r3, r2, r3
 80007ce:	43da      	mvns	r2, r3
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	401a      	ands	r2, r3
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007d8:	f04f 31ff 	mov.w	r1, #4294967295
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	fa01 f303 	lsl.w	r3, r1, r3
 80007e2:	43d9      	mvns	r1, r3
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e8:	4313      	orrs	r3, r2
         );
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3724      	adds	r7, #36	@ 0x24
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bc80      	pop	{r7}
 80007f2:	4770      	bx	lr

080007f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	3b01      	subs	r3, #1
 8000800:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000804:	d301      	bcc.n	800080a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000806:	2301      	movs	r3, #1
 8000808:	e00f      	b.n	800082a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800080a:	4a0a      	ldr	r2, [pc, #40]	@ (8000834 <SysTick_Config+0x40>)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	3b01      	subs	r3, #1
 8000810:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000812:	210f      	movs	r1, #15
 8000814:	f04f 30ff 	mov.w	r0, #4294967295
 8000818:	f7ff ff90 	bl	800073c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800081c:	4b05      	ldr	r3, [pc, #20]	@ (8000834 <SysTick_Config+0x40>)
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000822:	4b04      	ldr	r3, [pc, #16]	@ (8000834 <SysTick_Config+0x40>)
 8000824:	2207      	movs	r2, #7
 8000826:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000828:	2300      	movs	r3, #0
}
 800082a:	4618      	mov	r0, r3
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	e000e010 	.word	0xe000e010

08000838 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f7ff ff2d 	bl	80006a0 <__NVIC_SetPriorityGrouping>
}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}

0800084e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800084e:	b580      	push	{r7, lr}
 8000850:	b086      	sub	sp, #24
 8000852:	af00      	add	r7, sp, #0
 8000854:	4603      	mov	r3, r0
 8000856:	60b9      	str	r1, [r7, #8]
 8000858:	607a      	str	r2, [r7, #4]
 800085a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800085c:	f7ff ff44 	bl	80006e8 <__NVIC_GetPriorityGrouping>
 8000860:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000862:	687a      	ldr	r2, [r7, #4]
 8000864:	68b9      	ldr	r1, [r7, #8]
 8000866:	6978      	ldr	r0, [r7, #20]
 8000868:	f7ff ff92 	bl	8000790 <NVIC_EncodePriority>
 800086c:	4602      	mov	r2, r0
 800086e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000872:	4611      	mov	r1, r2
 8000874:	4618      	mov	r0, r3
 8000876:	f7ff ff61 	bl	800073c <__NVIC_SetPriority>
}
 800087a:	bf00      	nop
 800087c:	3718      	adds	r7, #24
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}

08000882 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000882:	b580      	push	{r7, lr}
 8000884:	b082      	sub	sp, #8
 8000886:	af00      	add	r7, sp, #0
 8000888:	4603      	mov	r3, r0
 800088a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800088c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000890:	4618      	mov	r0, r3
 8000892:	f7ff ff37 	bl	8000704 <__NVIC_EnableIRQ>
}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}

0800089e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800089e:	b580      	push	{r7, lr}
 80008a0:	b082      	sub	sp, #8
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80008a6:	6878      	ldr	r0, [r7, #4]
 80008a8:	f7ff ffa4 	bl	80007f4 <SysTick_Config>
 80008ac:	4603      	mov	r3, r0
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
	...

080008b8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b087      	sub	sp, #28
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
 80008c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008c2:	2300      	movs	r3, #0
 80008c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008c6:	e140      	b.n	8000b4a <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	2101      	movs	r1, #1
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	fa01 f303 	lsl.w	r3, r1, r3
 80008d4:	4013      	ands	r3, r2
 80008d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	f000 8132 	beq.w	8000b44 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	f003 0303 	and.w	r3, r3, #3
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d005      	beq.n	80008f8 <HAL_GPIO_Init+0x40>
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	f003 0303 	and.w	r3, r3, #3
 80008f4:	2b02      	cmp	r3, #2
 80008f6:	d130      	bne.n	800095a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	689b      	ldr	r3, [r3, #8]
 80008fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	005b      	lsls	r3, r3, #1
 8000902:	2203      	movs	r2, #3
 8000904:	fa02 f303 	lsl.w	r3, r2, r3
 8000908:	43db      	mvns	r3, r3
 800090a:	693a      	ldr	r2, [r7, #16]
 800090c:	4013      	ands	r3, r2
 800090e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	68da      	ldr	r2, [r3, #12]
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	005b      	lsls	r3, r3, #1
 8000918:	fa02 f303 	lsl.w	r3, r2, r3
 800091c:	693a      	ldr	r2, [r7, #16]
 800091e:	4313      	orrs	r3, r2
 8000920:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	693a      	ldr	r2, [r7, #16]
 8000926:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	685b      	ldr	r3, [r3, #4]
 800092c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800092e:	2201      	movs	r2, #1
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	fa02 f303 	lsl.w	r3, r2, r3
 8000936:	43db      	mvns	r3, r3
 8000938:	693a      	ldr	r2, [r7, #16]
 800093a:	4013      	ands	r3, r2
 800093c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	685b      	ldr	r3, [r3, #4]
 8000942:	091b      	lsrs	r3, r3, #4
 8000944:	f003 0201 	and.w	r2, r3, #1
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	fa02 f303 	lsl.w	r3, r2, r3
 800094e:	693a      	ldr	r2, [r7, #16]
 8000950:	4313      	orrs	r3, r2
 8000952:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	693a      	ldr	r2, [r7, #16]
 8000958:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	685b      	ldr	r3, [r3, #4]
 800095e:	f003 0303 	and.w	r3, r3, #3
 8000962:	2b03      	cmp	r3, #3
 8000964:	d017      	beq.n	8000996 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	68db      	ldr	r3, [r3, #12]
 800096a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	005b      	lsls	r3, r3, #1
 8000970:	2203      	movs	r2, #3
 8000972:	fa02 f303 	lsl.w	r3, r2, r3
 8000976:	43db      	mvns	r3, r3
 8000978:	693a      	ldr	r2, [r7, #16]
 800097a:	4013      	ands	r3, r2
 800097c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	689a      	ldr	r2, [r3, #8]
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	005b      	lsls	r3, r3, #1
 8000986:	fa02 f303 	lsl.w	r3, r2, r3
 800098a:	693a      	ldr	r2, [r7, #16]
 800098c:	4313      	orrs	r3, r2
 800098e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	693a      	ldr	r2, [r7, #16]
 8000994:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	685b      	ldr	r3, [r3, #4]
 800099a:	f003 0303 	and.w	r3, r3, #3
 800099e:	2b02      	cmp	r3, #2
 80009a0:	d123      	bne.n	80009ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	08da      	lsrs	r2, r3, #3
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	3208      	adds	r2, #8
 80009aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	f003 0307 	and.w	r3, r3, #7
 80009b6:	009b      	lsls	r3, r3, #2
 80009b8:	220f      	movs	r2, #15
 80009ba:	fa02 f303 	lsl.w	r3, r2, r3
 80009be:	43db      	mvns	r3, r3
 80009c0:	693a      	ldr	r2, [r7, #16]
 80009c2:	4013      	ands	r3, r2
 80009c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	691a      	ldr	r2, [r3, #16]
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	f003 0307 	and.w	r3, r3, #7
 80009d0:	009b      	lsls	r3, r3, #2
 80009d2:	fa02 f303 	lsl.w	r3, r2, r3
 80009d6:	693a      	ldr	r2, [r7, #16]
 80009d8:	4313      	orrs	r3, r2
 80009da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	08da      	lsrs	r2, r3, #3
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	3208      	adds	r2, #8
 80009e4:	6939      	ldr	r1, [r7, #16]
 80009e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	005b      	lsls	r3, r3, #1
 80009f4:	2203      	movs	r2, #3
 80009f6:	fa02 f303 	lsl.w	r3, r2, r3
 80009fa:	43db      	mvns	r3, r3
 80009fc:	693a      	ldr	r2, [r7, #16]
 80009fe:	4013      	ands	r3, r2
 8000a00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	f003 0203 	and.w	r2, r3, #3
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	005b      	lsls	r3, r3, #1
 8000a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a12:	693a      	ldr	r2, [r7, #16]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	693a      	ldr	r2, [r7, #16]
 8000a1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	f000 808c 	beq.w	8000b44 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000a2c:	4a4e      	ldr	r2, [pc, #312]	@ (8000b68 <HAL_GPIO_Init+0x2b0>)
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	089b      	lsrs	r3, r3, #2
 8000a32:	3302      	adds	r3, #2
 8000a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	f003 0303 	and.w	r3, r3, #3
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	2207      	movs	r2, #7
 8000a44:	fa02 f303 	lsl.w	r3, r2, r3
 8000a48:	43db      	mvns	r3, r3
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000a56:	d00d      	beq.n	8000a74 <HAL_GPIO_Init+0x1bc>
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	4a44      	ldr	r2, [pc, #272]	@ (8000b6c <HAL_GPIO_Init+0x2b4>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d007      	beq.n	8000a70 <HAL_GPIO_Init+0x1b8>
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	4a43      	ldr	r2, [pc, #268]	@ (8000b70 <HAL_GPIO_Init+0x2b8>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d101      	bne.n	8000a6c <HAL_GPIO_Init+0x1b4>
 8000a68:	2302      	movs	r3, #2
 8000a6a:	e004      	b.n	8000a76 <HAL_GPIO_Init+0x1be>
 8000a6c:	2307      	movs	r3, #7
 8000a6e:	e002      	b.n	8000a76 <HAL_GPIO_Init+0x1be>
 8000a70:	2301      	movs	r3, #1
 8000a72:	e000      	b.n	8000a76 <HAL_GPIO_Init+0x1be>
 8000a74:	2300      	movs	r3, #0
 8000a76:	697a      	ldr	r2, [r7, #20]
 8000a78:	f002 0203 	and.w	r2, r2, #3
 8000a7c:	0092      	lsls	r2, r2, #2
 8000a7e:	4093      	lsls	r3, r2
 8000a80:	693a      	ldr	r2, [r7, #16]
 8000a82:	4313      	orrs	r3, r2
 8000a84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a86:	4938      	ldr	r1, [pc, #224]	@ (8000b68 <HAL_GPIO_Init+0x2b0>)
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	089b      	lsrs	r3, r3, #2
 8000a8c:	3302      	adds	r3, #2
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a94:	4b37      	ldr	r3, [pc, #220]	@ (8000b74 <HAL_GPIO_Init+0x2bc>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	43db      	mvns	r3, r3
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d003      	beq.n	8000ab8 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8000ab0:	693a      	ldr	r2, [r7, #16]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ab8:	4a2e      	ldr	r2, [pc, #184]	@ (8000b74 <HAL_GPIO_Init+0x2bc>)
 8000aba:	693b      	ldr	r3, [r7, #16]
 8000abc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000abe:	4b2d      	ldr	r3, [pc, #180]	@ (8000b74 <HAL_GPIO_Init+0x2bc>)
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	43db      	mvns	r3, r3
 8000ac8:	693a      	ldr	r2, [r7, #16]
 8000aca:	4013      	ands	r3, r2
 8000acc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d003      	beq.n	8000ae2 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ae2:	4a24      	ldr	r2, [pc, #144]	@ (8000b74 <HAL_GPIO_Init+0x2bc>)
 8000ae4:	693b      	ldr	r3, [r7, #16]
 8000ae6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8000ae8:	4b22      	ldr	r3, [pc, #136]	@ (8000b74 <HAL_GPIO_Init+0x2bc>)
 8000aea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000aee:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	43db      	mvns	r3, r3
 8000af4:	693a      	ldr	r2, [r7, #16]
 8000af6:	4013      	ands	r3, r2
 8000af8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d003      	beq.n	8000b0e <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8000b0e:	4a19      	ldr	r2, [pc, #100]	@ (8000b74 <HAL_GPIO_Init+0x2bc>)
 8000b10:	693b      	ldr	r3, [r7, #16]
 8000b12:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8000b16:	4b17      	ldr	r3, [pc, #92]	@ (8000b74 <HAL_GPIO_Init+0x2bc>)
 8000b18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000b1c:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	43db      	mvns	r3, r3
 8000b22:	693a      	ldr	r2, [r7, #16]
 8000b24:	4013      	ands	r3, r2
 8000b26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d003      	beq.n	8000b3c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000b34:	693a      	ldr	r2, [r7, #16]
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8000b3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b74 <HAL_GPIO_Init+0x2bc>)
 8000b3e:	693b      	ldr	r3, [r7, #16]
 8000b40:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	3301      	adds	r3, #1
 8000b48:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	fa22 f303 	lsr.w	r3, r2, r3
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	f47f aeb7 	bne.w	80008c8 <HAL_GPIO_Init+0x10>
  }
}
 8000b5a:	bf00      	nop
 8000b5c:	bf00      	nop
 8000b5e:	371c      	adds	r7, #28
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bc80      	pop	{r7}
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	40010000 	.word	0x40010000
 8000b6c:	48000400 	.word	0x48000400
 8000b70:	48000800 	.word	0x48000800
 8000b74:	58000800 	.word	0x58000800

08000b78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	460b      	mov	r3, r1
 8000b82:	807b      	strh	r3, [r7, #2]
 8000b84:	4613      	mov	r3, r2
 8000b86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b88:	787b      	ldrb	r3, [r7, #1]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d003      	beq.n	8000b96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b8e:	887a      	ldrh	r2, [r7, #2]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b94:	e002      	b.n	8000b9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b96:	887a      	ldrh	r2, [r7, #2]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000b9c:	bf00      	nop
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bc80      	pop	{r7}
 8000ba4:	4770      	bx	lr

08000ba6 <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	b085      	sub	sp, #20
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
 8000bae:	460b      	mov	r3, r1
 8000bb0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	695b      	ldr	r3, [r3, #20]
 8000bb6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000bb8:	887a      	ldrh	r2, [r7, #2]
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	041a      	lsls	r2, r3, #16
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	43d9      	mvns	r1, r3
 8000bc4:	887b      	ldrh	r3, [r7, #2]
 8000bc6:	400b      	ands	r3, r1
 8000bc8:	431a      	orrs	r2, r3
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	619a      	str	r2, [r3, #24]
}
 8000bce:	bf00      	nop
 8000bd0:	3714      	adds	r7, #20
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bc80      	pop	{r7}
 8000bd6:	4770      	bx	lr

08000bd8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000bdc:	4b04      	ldr	r3, [pc, #16]	@ (8000bf0 <HAL_PWR_EnableBkUpAccess+0x18>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a03      	ldr	r2, [pc, #12]	@ (8000bf0 <HAL_PWR_EnableBkUpAccess+0x18>)
 8000be2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000be6:	6013      	str	r3, [r2, #0]
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bc80      	pop	{r7}
 8000bee:	4770      	bx	lr
 8000bf0:	58000400 	.word	0x58000400

08000bf4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8000bf8:	4b03      	ldr	r3, [pc, #12]	@ (8000c08 <HAL_PWREx_GetVoltageRange+0x14>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bc80      	pop	{r7}
 8000c06:	4770      	bx	lr
 8000c08:	58000400 	.word	0x58000400

08000c0c <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8000c10:	4b06      	ldr	r3, [pc, #24]	@ (8000c2c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000c1c:	d101      	bne.n	8000c22 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e000      	b.n	8000c24 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8000c22:	2300      	movs	r3, #0
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bc80      	pop	{r7}
 8000c2a:	4770      	bx	lr
 8000c2c:	58000400 	.word	0x58000400

08000c30 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8000c34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000c3e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c42:	6013      	str	r3, [r2, #0]
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bc80      	pop	{r7}
 8000c4a:	4770      	bx	lr

08000c4c <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8000c50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000c5a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000c5e:	6013      	str	r3, [r2, #0]
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr

08000c68 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8000c6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8000c7a:	d101      	bne.n	8000c80 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	e000      	b.n	8000c82 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8000c80:	2300      	movs	r3, #0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bc80      	pop	{r7}
 8000c88:	4770      	bx	lr

08000c8a <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000c8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000c98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c9c:	6013      	str	r3, [r2, #0]
}
 8000c9e:	bf00      	nop
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bc80      	pop	{r7}
 8000ca4:	4770      	bx	lr

08000ca6 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8000caa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000cb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000cb8:	6013      	str	r3, [r2, #0]
}
 8000cba:	bf00      	nop
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bc80      	pop	{r7}
 8000cc0:	4770      	bx	lr

08000cc2 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8000cc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cd0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8000cd4:	d101      	bne.n	8000cda <LL_RCC_HSE_IsReady+0x18>
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e000      	b.n	8000cdc <LL_RCC_HSE_IsReady+0x1a>
 8000cda:	2300      	movs	r3, #0
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bc80      	pop	{r7}
 8000ce2:	4770      	bx	lr

08000ce4 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000ce8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000cf2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cf6:	6013      	str	r3, [r2, #0]
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bc80      	pop	{r7}
 8000cfe:	4770      	bx	lr

08000d00 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8000d04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000d0e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000d12:	6013      	str	r3, [r2, #0]
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr

08000d1c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000d20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d2e:	d101      	bne.n	8000d34 <LL_RCC_HSI_IsReady+0x18>
 8000d30:	2301      	movs	r3, #1
 8000d32:	e000      	b.n	8000d36 <LL_RCC_HSI_IsReady+0x1a>
 8000d34:	2300      	movs	r3, #0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bc80      	pop	{r7}
 8000d3c:	4770      	bx	lr

08000d3e <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	b083      	sub	sp, #12
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000d46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	061b      	lsls	r3, r3, #24
 8000d54:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	604b      	str	r3, [r1, #4]
}
 8000d5c:	bf00      	nop
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bc80      	pop	{r7}
 8000d64:	4770      	bx	lr

08000d66 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8000d6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000d72:	f003 0302 	and.w	r3, r3, #2
 8000d76:	2b02      	cmp	r3, #2
 8000d78:	d101      	bne.n	8000d7e <LL_RCC_LSE_IsReady+0x18>
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e000      	b.n	8000d80 <LL_RCC_LSE_IsReady+0x1a>
 8000d7e:	2300      	movs	r3, #0
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bc80      	pop	{r7}
 8000d86:	4770      	bx	lr

08000d88 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8000d8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000d94:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000d98:	f043 0301 	orr.w	r3, r3, #1
 8000d9c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bc80      	pop	{r7}
 8000da6:	4770      	bx	lr

08000da8 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8000dac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000db0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000db4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000db8:	f023 0301 	bic.w	r3, r3, #1
 8000dbc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bc80      	pop	{r7}
 8000dc6:	4770      	bx	lr

08000dc8 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8000dcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000dd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000dd4:	f003 0302 	and.w	r3, r3, #2
 8000dd8:	2b02      	cmp	r3, #2
 8000dda:	d101      	bne.n	8000de0 <LL_RCC_LSI_IsReady+0x18>
 8000ddc:	2301      	movs	r3, #1
 8000dde:	e000      	b.n	8000de2 <LL_RCC_LSI_IsReady+0x1a>
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bc80      	pop	{r7}
 8000de8:	4770      	bx	lr

08000dea <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000dee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000df8:	f043 0301 	orr.w	r3, r3, #1
 8000dfc:	6013      	str	r3, [r2, #0]
}
 8000dfe:	bf00      	nop
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bc80      	pop	{r7}
 8000e04:	4770      	bx	lr

08000e06 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8000e0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000e14:	f023 0301 	bic.w	r3, r3, #1
 8000e18:	6013      	str	r3, [r2, #0]
}
 8000e1a:	bf00      	nop
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bc80      	pop	{r7}
 8000e20:	4770      	bx	lr

08000e22 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8000e26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f003 0302 	and.w	r3, r3, #2
 8000e30:	2b02      	cmp	r3, #2
 8000e32:	d101      	bne.n	8000e38 <LL_RCC_MSI_IsReady+0x16>
 8000e34:	2301      	movs	r3, #1
 8000e36:	e000      	b.n	8000e3a <LL_RCC_MSI_IsReady+0x18>
 8000e38:	2300      	movs	r3, #0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bc80      	pop	{r7}
 8000e40:	4770      	bx	lr

08000e42 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8000e46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f003 0308 	and.w	r3, r3, #8
 8000e50:	2b08      	cmp	r3, #8
 8000e52:	d101      	bne.n	8000e58 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8000e54:	2301      	movs	r3, #1
 8000e56:	e000      	b.n	8000e5a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bc80      	pop	{r7}
 8000e60:	4770      	bx	lr

08000e62 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8000e66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bc80      	pop	{r7}
 8000e76:	4770      	bx	lr

08000e78 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8000e7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000e84:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr

08000e90 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8000e98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	021b      	lsls	r3, r3, #8
 8000ea6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	604b      	str	r3, [r1, #4]
}
 8000eae:	bf00      	nop
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr

08000eb8 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000ec0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	f023 0203 	bic.w	r2, r3, #3
 8000eca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	608b      	str	r3, [r1, #8]
}
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bc80      	pop	{r7}
 8000edc:	4770      	bx	lr

08000ede <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000ee2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	f003 030c 	and.w	r3, r3, #12
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bc80      	pop	{r7}
 8000ef2:	4770      	bx	lr

08000ef4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000efc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000f06:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	608b      	str	r3, [r1, #8]
}
 8000f10:	bf00      	nop
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bc80      	pop	{r7}
 8000f18:	4770      	bx	lr

08000f1a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	b083      	sub	sp, #12
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8000f22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f26:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8000f2a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000f2e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bc80      	pop	{r7}
 8000f42:	4770      	bx	lr

08000f44 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8000f4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f50:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8000f54:	f023 020f 	bic.w	r2, r3, #15
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	091b      	lsrs	r3, r3, #4
 8000f5c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000f60:	4313      	orrs	r3, r2
 8000f62:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr

08000f70 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000f78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8000f82:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	608b      	str	r3, [r1, #8]
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bc80      	pop	{r7}
 8000f94:	4770      	bx	lr

08000f96 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000f96:	b480      	push	{r7}
 8000f98:	b083      	sub	sp, #12
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000f9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8000fa8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	608b      	str	r3, [r1, #8]
}
 8000fb2:	bf00      	nop
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bc80      	pop	{r7}
 8000fba:	4770      	bx	lr

08000fbc <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8000fc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bc80      	pop	{r7}
 8000fd0:	4770      	bx	lr

08000fd2 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8000fd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fda:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8000fde:	011b      	lsls	r3, r3, #4
 8000fe0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr

08000fec <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000ff0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000ffa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000ffe:	6013      	str	r3, [r2, #0]
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	bc80      	pop	{r7}
 8001006:	4770      	bx	lr

08001008 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800100c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001016:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800101a:	6013      	str	r3, [r2, #0]
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr

08001024 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001028:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001032:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001036:	d101      	bne.n	800103c <LL_RCC_PLL_IsReady+0x18>
 8001038:	2301      	movs	r3, #1
 800103a:	e000      	b.n	800103e <LL_RCC_PLL_IsReady+0x1a>
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	46bd      	mov	sp, r7
 8001042:	bc80      	pop	{r7}
 8001044:	4770      	bx	lr

08001046 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800104a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	0a1b      	lsrs	r3, r3, #8
 8001052:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8001056:	4618      	mov	r0, r3
 8001058:	46bd      	mov	sp, r7
 800105a:	bc80      	pop	{r7}
 800105c:	4770      	bx	lr

0800105e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800105e:	b480      	push	{r7}
 8001060:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001062:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800106c:	4618      	mov	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr

08001074 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001078:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800107c:	68db      	ldr	r3, [r3, #12]
 800107e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8001082:	4618      	mov	r0, r3
 8001084:	46bd      	mov	sp, r7
 8001086:	bc80      	pop	{r7}
 8001088:	4770      	bx	lr

0800108a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800108e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	f003 0303 	and.w	r3, r3, #3
}
 8001098:	4618      	mov	r0, r3
 800109a:	46bd      	mov	sp, r7
 800109c:	bc80      	pop	{r7}
 800109e:	4770      	bx	lr

080010a0 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80010a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010b2:	d101      	bne.n	80010b8 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80010b4:	2301      	movs	r3, #1
 80010b6:	e000      	b.n	80010ba <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	46bd      	mov	sp, r7
 80010be:	bc80      	pop	{r7}
 80010c0:	4770      	bx	lr

080010c2 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80010c2:	b480      	push	{r7}
 80010c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80010c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010ca:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80010ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80010d6:	d101      	bne.n	80010dc <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80010d8:	2301      	movs	r3, #1
 80010da:	e000      	b.n	80010de <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80010dc:	2300      	movs	r3, #0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bc80      	pop	{r7}
 80010e4:	4770      	bx	lr

080010e6 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80010e6:	b480      	push	{r7}
 80010e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80010ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010ee:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80010f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010fa:	d101      	bne.n	8001100 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80010fc:	2301      	movs	r3, #1
 80010fe:	e000      	b.n	8001102 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	46bd      	mov	sp, r7
 8001106:	bc80      	pop	{r7}
 8001108:	4770      	bx	lr

0800110a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800110a:	b480      	push	{r7}
 800110c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800110e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001118:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800111c:	d101      	bne.n	8001122 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800111e:	2301      	movs	r3, #1
 8001120:	e000      	b.n	8001124 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001122:	2300      	movs	r3, #0
}
 8001124:	4618      	mov	r0, r3
 8001126:	46bd      	mov	sp, r7
 8001128:	bc80      	pop	{r7}
 800112a:	4770      	bx	lr

0800112c <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001130:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800113a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800113e:	d101      	bne.n	8001144 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001140:	2301      	movs	r3, #1
 8001142:	e000      	b.n	8001146 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	46bd      	mov	sp, r7
 800114a:	bc80      	pop	{r7}
 800114c:	4770      	bx	lr
	...

08001150 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b088      	sub	sp, #32
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d101      	bne.n	8001162 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e36f      	b.n	8001842 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001162:	f7ff febc 	bl	8000ede <LL_RCC_GetSysClkSource>
 8001166:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001168:	f7ff ff8f 	bl	800108a <LL_RCC_PLL_GetMainSource>
 800116c:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 0320 	and.w	r3, r3, #32
 8001176:	2b00      	cmp	r3, #0
 8001178:	f000 80c4 	beq.w	8001304 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d005      	beq.n	800118e <HAL_RCC_OscConfig+0x3e>
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	2b0c      	cmp	r3, #12
 8001186:	d176      	bne.n	8001276 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d173      	bne.n	8001276 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6a1b      	ldr	r3, [r3, #32]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d101      	bne.n	800119a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e353      	b.n	8001842 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800119e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 0308 	and.w	r3, r3, #8
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d005      	beq.n	80011b8 <HAL_RCC_OscConfig+0x68>
 80011ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80011b6:	e006      	b.n	80011c6 <HAL_RCC_OscConfig+0x76>
 80011b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80011c0:	091b      	lsrs	r3, r3, #4
 80011c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d222      	bcs.n	8001210 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011ce:	4618      	mov	r0, r3
 80011d0:	f000 fd36 	bl	8001c40 <RCC_SetFlashLatencyFromMSIRange>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e331      	b.n	8001842 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80011e8:	f043 0308 	orr.w	r3, r3, #8
 80011ec:	6013      	str	r3, [r2, #0]
 80011ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011fc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001200:	4313      	orrs	r3, r2
 8001202:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff fe41 	bl	8000e90 <LL_RCC_MSI_SetCalibTrimming>
 800120e:	e021      	b.n	8001254 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001210:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800121a:	f043 0308 	orr.w	r3, r3, #8
 800121e:	6013      	str	r3, [r2, #0]
 8001220:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800122e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001232:	4313      	orrs	r3, r2
 8001234:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff fe28 	bl	8000e90 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001244:	4618      	mov	r0, r3
 8001246:	f000 fcfb 	bl	8001c40 <RCC_SetFlashLatencyFromMSIRange>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	e2f6      	b.n	8001842 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001254:	f000 fce0 	bl	8001c18 <HAL_RCC_GetHCLKFreq>
 8001258:	4603      	mov	r3, r0
 800125a:	4aa7      	ldr	r2, [pc, #668]	@ (80014f8 <HAL_RCC_OscConfig+0x3a8>)
 800125c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 800125e:	4ba7      	ldr	r3, [pc, #668]	@ (80014fc <HAL_RCC_OscConfig+0x3ac>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff f9aa 	bl	80005bc <HAL_InitTick>
 8001268:	4603      	mov	r3, r0
 800126a:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 800126c:	7cfb      	ldrb	r3, [r7, #19]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d047      	beq.n	8001302 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8001272:	7cfb      	ldrb	r3, [r7, #19]
 8001274:	e2e5      	b.n	8001842 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6a1b      	ldr	r3, [r3, #32]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d02c      	beq.n	80012d8 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800127e:	f7ff fdb4 	bl	8000dea <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001282:	f7ff f9e7 	bl	8000654 <HAL_GetTick>
 8001286:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001288:	e008      	b.n	800129c <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800128a:	f7ff f9e3 	bl	8000654 <HAL_GetTick>
 800128e:	4602      	mov	r2, r0
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	2b02      	cmp	r3, #2
 8001296:	d901      	bls.n	800129c <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8001298:	2303      	movs	r3, #3
 800129a:	e2d2      	b.n	8001842 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 800129c:	f7ff fdc1 	bl	8000e22 <LL_RCC_MSI_IsReady>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d0f1      	beq.n	800128a <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80012b0:	f043 0308 	orr.w	r3, r3, #8
 80012b4:	6013      	str	r3, [r2, #0]
 80012b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012c4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80012c8:	4313      	orrs	r3, r2
 80012ca:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff fddd 	bl	8000e90 <LL_RCC_MSI_SetCalibTrimming>
 80012d6:	e015      	b.n	8001304 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80012d8:	f7ff fd95 	bl	8000e06 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80012dc:	f7ff f9ba 	bl	8000654 <HAL_GetTick>
 80012e0:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80012e2:	e008      	b.n	80012f6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012e4:	f7ff f9b6 	bl	8000654 <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d901      	bls.n	80012f6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e2a5      	b.n	8001842 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 80012f6:	f7ff fd94 	bl	8000e22 <LL_RCC_MSI_IsReady>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d1f1      	bne.n	80012e4 <HAL_RCC_OscConfig+0x194>
 8001300:	e000      	b.n	8001304 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001302:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 0301 	and.w	r3, r3, #1
 800130c:	2b00      	cmp	r3, #0
 800130e:	d058      	beq.n	80013c2 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	2b08      	cmp	r3, #8
 8001314:	d005      	beq.n	8001322 <HAL_RCC_OscConfig+0x1d2>
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	2b0c      	cmp	r3, #12
 800131a:	d108      	bne.n	800132e <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	2b03      	cmp	r3, #3
 8001320:	d105      	bne.n	800132e <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d14b      	bne.n	80013c2 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e289      	b.n	8001842 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800132e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001340:	4313      	orrs	r3, r2
 8001342:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800134c:	d102      	bne.n	8001354 <HAL_RCC_OscConfig+0x204>
 800134e:	f7ff fc9c 	bl	8000c8a <LL_RCC_HSE_Enable>
 8001352:	e00d      	b.n	8001370 <HAL_RCC_OscConfig+0x220>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 800135c:	d104      	bne.n	8001368 <HAL_RCC_OscConfig+0x218>
 800135e:	f7ff fc67 	bl	8000c30 <LL_RCC_HSE_EnableTcxo>
 8001362:	f7ff fc92 	bl	8000c8a <LL_RCC_HSE_Enable>
 8001366:	e003      	b.n	8001370 <HAL_RCC_OscConfig+0x220>
 8001368:	f7ff fc9d 	bl	8000ca6 <LL_RCC_HSE_Disable>
 800136c:	f7ff fc6e 	bl	8000c4c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d012      	beq.n	800139e <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001378:	f7ff f96c 	bl	8000654 <HAL_GetTick>
 800137c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800137e:	e008      	b.n	8001392 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001380:	f7ff f968 	bl	8000654 <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b64      	cmp	r3, #100	@ 0x64
 800138c:	d901      	bls.n	8001392 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e257      	b.n	8001842 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001392:	f7ff fc96 	bl	8000cc2 <LL_RCC_HSE_IsReady>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d0f1      	beq.n	8001380 <HAL_RCC_OscConfig+0x230>
 800139c:	e011      	b.n	80013c2 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800139e:	f7ff f959 	bl	8000654 <HAL_GetTick>
 80013a2:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80013a4:	e008      	b.n	80013b8 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013a6:	f7ff f955 	bl	8000654 <HAL_GetTick>
 80013aa:	4602      	mov	r2, r0
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	2b64      	cmp	r3, #100	@ 0x64
 80013b2:	d901      	bls.n	80013b8 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80013b4:	2303      	movs	r3, #3
 80013b6:	e244      	b.n	8001842 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 80013b8:	f7ff fc83 	bl	8000cc2 <LL_RCC_HSE_IsReady>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d1f1      	bne.n	80013a6 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d046      	beq.n	800145c <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	2b04      	cmp	r3, #4
 80013d2:	d005      	beq.n	80013e0 <HAL_RCC_OscConfig+0x290>
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	2b0c      	cmp	r3, #12
 80013d8:	d10e      	bne.n	80013f8 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d10b      	bne.n	80013f8 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	691b      	ldr	r3, [r3, #16]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d101      	bne.n	80013ec <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	e22a      	b.n	8001842 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	695b      	ldr	r3, [r3, #20]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff fca4 	bl	8000d3e <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80013f6:	e031      	b.n	800145c <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	691b      	ldr	r3, [r3, #16]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d019      	beq.n	8001434 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001400:	f7ff fc70 	bl	8000ce4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001404:	f7ff f926 	bl	8000654 <HAL_GetTick>
 8001408:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800140a:	e008      	b.n	800141e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800140c:	f7ff f922 	bl	8000654 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e211      	b.n	8001842 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 800141e:	f7ff fc7d 	bl	8000d1c <LL_RCC_HSI_IsReady>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d0f1      	beq.n	800140c <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	695b      	ldr	r3, [r3, #20]
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff fc86 	bl	8000d3e <LL_RCC_HSI_SetCalibTrimming>
 8001432:	e013      	b.n	800145c <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001434:	f7ff fc64 	bl	8000d00 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001438:	f7ff f90c 	bl	8000654 <HAL_GetTick>
 800143c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001440:	f7ff f908 	bl	8000654 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b02      	cmp	r3, #2
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e1f7      	b.n	8001842 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001452:	f7ff fc63 	bl	8000d1c <LL_RCC_HSI_IsReady>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d1f1      	bne.n	8001440 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0308 	and.w	r3, r3, #8
 8001464:	2b00      	cmp	r3, #0
 8001466:	d06e      	beq.n	8001546 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d056      	beq.n	800151e <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8001470:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001474:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001478:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	69da      	ldr	r2, [r3, #28]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	f003 0310 	and.w	r3, r3, #16
 8001484:	429a      	cmp	r2, r3
 8001486:	d031      	beq.n	80014ec <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d006      	beq.n	80014a0 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001498:	2b00      	cmp	r3, #0
 800149a:	d101      	bne.n	80014a0 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e1d0      	b.n	8001842 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d013      	beq.n	80014d2 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 80014aa:	f7ff fc7d 	bl	8000da8 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80014ae:	f7ff f8d1 	bl	8000654 <HAL_GetTick>
 80014b2:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80014b4:	e008      	b.n	80014c8 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014b6:	f7ff f8cd 	bl	8000654 <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b11      	cmp	r3, #17
 80014c2:	d901      	bls.n	80014c8 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e1bc      	b.n	8001842 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 80014c8:	f7ff fc7e 	bl	8000dc8 <LL_RCC_LSI_IsReady>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1f1      	bne.n	80014b6 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80014d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014da:	f023 0210 	bic.w	r2, r3, #16
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	69db      	ldr	r3, [r3, #28]
 80014e2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80014e6:	4313      	orrs	r3, r2
 80014e8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014ec:	f7ff fc4c 	bl	8000d88 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014f0:	f7ff f8b0 	bl	8000654 <HAL_GetTick>
 80014f4:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80014f6:	e00c      	b.n	8001512 <HAL_RCC_OscConfig+0x3c2>
 80014f8:	20000000 	.word	0x20000000
 80014fc:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001500:	f7ff f8a8 	bl	8000654 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b11      	cmp	r3, #17
 800150c:	d901      	bls.n	8001512 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e197      	b.n	8001842 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8001512:	f7ff fc59 	bl	8000dc8 <LL_RCC_LSI_IsReady>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d0f1      	beq.n	8001500 <HAL_RCC_OscConfig+0x3b0>
 800151c:	e013      	b.n	8001546 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800151e:	f7ff fc43 	bl	8000da8 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001522:	f7ff f897 	bl	8000654 <HAL_GetTick>
 8001526:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8001528:	e008      	b.n	800153c <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800152a:	f7ff f893 	bl	8000654 <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	2b11      	cmp	r3, #17
 8001536:	d901      	bls.n	800153c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e182      	b.n	8001842 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 800153c:	f7ff fc44 	bl	8000dc8 <LL_RCC_LSI_IsReady>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d1f1      	bne.n	800152a <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0304 	and.w	r3, r3, #4
 800154e:	2b00      	cmp	r3, #0
 8001550:	f000 80d8 	beq.w	8001704 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001554:	f7ff fb5a 	bl	8000c0c <LL_PWR_IsEnabledBkUpAccess>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d113      	bne.n	8001586 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800155e:	f7ff fb3b 	bl	8000bd8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001562:	f7ff f877 	bl	8000654 <HAL_GetTick>
 8001566:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001568:	e008      	b.n	800157c <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800156a:	f7ff f873 	bl	8000654 <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d901      	bls.n	800157c <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e162      	b.n	8001842 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800157c:	f7ff fb46 	bl	8000c0c <LL_PWR_IsEnabledBkUpAccess>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d0f1      	beq.n	800156a <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d07b      	beq.n	8001686 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	68db      	ldr	r3, [r3, #12]
 8001592:	2b85      	cmp	r3, #133	@ 0x85
 8001594:	d003      	beq.n	800159e <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	2b05      	cmp	r3, #5
 800159c:	d109      	bne.n	80015b2 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800159e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015a6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80015aa:	f043 0304 	orr.w	r3, r3, #4
 80015ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015b2:	f7ff f84f 	bl	8000654 <HAL_GetTick>
 80015b6:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80015b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015c0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80015c4:	f043 0301 	orr.w	r3, r3, #1
 80015c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80015cc:	e00a      	b.n	80015e4 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015ce:	f7ff f841 	bl	8000654 <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015dc:	4293      	cmp	r3, r2
 80015de:	d901      	bls.n	80015e4 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e12e      	b.n	8001842 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 80015e4:	f7ff fbbf 	bl	8000d66 <LL_RCC_LSE_IsReady>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d0ef      	beq.n	80015ce <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	2b81      	cmp	r3, #129	@ 0x81
 80015f4:	d003      	beq.n	80015fe <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	2b85      	cmp	r3, #133	@ 0x85
 80015fc:	d121      	bne.n	8001642 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015fe:	f7ff f829 	bl	8000654 <HAL_GetTick>
 8001602:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001604:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001608:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800160c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001610:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001614:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001618:	e00a      	b.n	8001630 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800161a:	f7ff f81b 	bl	8000654 <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001628:	4293      	cmp	r3, r2
 800162a:	d901      	bls.n	8001630 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e108      	b.n	8001842 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001630:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001634:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001638:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800163c:	2b00      	cmp	r3, #0
 800163e:	d0ec      	beq.n	800161a <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001640:	e060      	b.n	8001704 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001642:	f7ff f807 	bl	8000654 <HAL_GetTick>
 8001646:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001648:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800164c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001650:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001654:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001658:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800165c:	e00a      	b.n	8001674 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800165e:	f7fe fff9 	bl	8000654 <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	f241 3288 	movw	r2, #5000	@ 0x1388
 800166c:	4293      	cmp	r3, r2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e0e6      	b.n	8001842 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001674:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001678:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800167c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001680:	2b00      	cmp	r3, #0
 8001682:	d1ec      	bne.n	800165e <HAL_RCC_OscConfig+0x50e>
 8001684:	e03e      	b.n	8001704 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001686:	f7fe ffe5 	bl	8000654 <HAL_GetTick>
 800168a:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800168c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001690:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001694:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001698:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800169c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80016a0:	e00a      	b.n	80016b8 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016a2:	f7fe ffd7 	bl	8000654 <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d901      	bls.n	80016b8 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e0c4      	b.n	8001842 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80016b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d1ec      	bne.n	80016a2 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c8:	f7fe ffc4 	bl	8000654 <HAL_GetTick>
 80016cc:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80016ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80016da:	f023 0301 	bic.w	r3, r3, #1
 80016de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80016e2:	e00a      	b.n	80016fa <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016e4:	f7fe ffb6 	bl	8000654 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e0a3      	b.n	8001842 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 80016fa:	f7ff fb34 	bl	8000d66 <LL_RCC_LSE_IsReady>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d1ef      	bne.n	80016e4 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001708:	2b00      	cmp	r3, #0
 800170a:	f000 8099 	beq.w	8001840 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	2b0c      	cmp	r3, #12
 8001712:	d06c      	beq.n	80017ee <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001718:	2b02      	cmp	r3, #2
 800171a:	d14b      	bne.n	80017b4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800171c:	f7ff fc74 	bl	8001008 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001720:	f7fe ff98 	bl	8000654 <HAL_GetTick>
 8001724:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001726:	e008      	b.n	800173a <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001728:	f7fe ff94 	bl	8000654 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b0a      	cmp	r3, #10
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e083      	b.n	8001842 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800173a:	f7ff fc73 	bl	8001024 <LL_RCC_PLL_IsReady>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d1f1      	bne.n	8001728 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001744:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001748:	68da      	ldr	r2, [r3, #12]
 800174a:	4b40      	ldr	r3, [pc, #256]	@ (800184c <HAL_RCC_OscConfig+0x6fc>)
 800174c:	4013      	ands	r3, r2
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001756:	4311      	orrs	r1, r2
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800175c:	0212      	lsls	r2, r2, #8
 800175e:	4311      	orrs	r1, r2
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001764:	4311      	orrs	r1, r2
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800176a:	4311      	orrs	r1, r2
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001770:	430a      	orrs	r2, r1
 8001772:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001776:	4313      	orrs	r3, r2
 8001778:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800177a:	f7ff fc37 	bl	8000fec <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800177e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001788:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800178c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800178e:	f7fe ff61 	bl	8000654 <HAL_GetTick>
 8001792:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8001794:	e008      	b.n	80017a8 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001796:	f7fe ff5d 	bl	8000654 <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	2b0a      	cmp	r3, #10
 80017a2:	d901      	bls.n	80017a8 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e04c      	b.n	8001842 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80017a8:	f7ff fc3c 	bl	8001024 <LL_RCC_PLL_IsReady>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d0f1      	beq.n	8001796 <HAL_RCC_OscConfig+0x646>
 80017b2:	e045      	b.n	8001840 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017b4:	f7ff fc28 	bl	8001008 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b8:	f7fe ff4c 	bl	8000654 <HAL_GetTick>
 80017bc:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80017be:	e008      	b.n	80017d2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017c0:	f7fe ff48 	bl	8000654 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b0a      	cmp	r3, #10
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e037      	b.n	8001842 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80017d2:	f7ff fc27 	bl	8001024 <LL_RCC_PLL_IsReady>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1f1      	bne.n	80017c0 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80017dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017e0:	68da      	ldr	r2, [r3, #12]
 80017e2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80017e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001850 <HAL_RCC_OscConfig+0x700>)
 80017e8:	4013      	ands	r3, r2
 80017ea:	60cb      	str	r3, [r1, #12]
 80017ec:	e028      	b.n	8001840 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d101      	bne.n	80017fa <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e023      	b.n	8001842 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	f003 0203 	and.w	r2, r3, #3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180c:	429a      	cmp	r2, r3
 800180e:	d115      	bne.n	800183c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800181a:	429a      	cmp	r2, r3
 800181c:	d10e      	bne.n	800183c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001828:	021b      	lsls	r3, r3, #8
 800182a:	429a      	cmp	r2, r3
 800182c:	d106      	bne.n	800183c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001838:	429a      	cmp	r2, r3
 800183a:	d001      	beq.n	8001840 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e000      	b.n	8001842 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3720      	adds	r7, #32
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	11c1808c 	.word	0x11c1808c
 8001850:	eefefffc 	.word	0xeefefffc

08001854 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d101      	bne.n	8001868 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e12c      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001868:	4b98      	ldr	r3, [pc, #608]	@ (8001acc <HAL_RCC_ClockConfig+0x278>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0307 	and.w	r3, r3, #7
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	429a      	cmp	r2, r3
 8001874:	d91b      	bls.n	80018ae <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001876:	4b95      	ldr	r3, [pc, #596]	@ (8001acc <HAL_RCC_ClockConfig+0x278>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f023 0207 	bic.w	r2, r3, #7
 800187e:	4993      	ldr	r1, [pc, #588]	@ (8001acc <HAL_RCC_ClockConfig+0x278>)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	4313      	orrs	r3, r2
 8001884:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001886:	f7fe fee5 	bl	8000654 <HAL_GetTick>
 800188a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800188c:	e008      	b.n	80018a0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800188e:	f7fe fee1 	bl	8000654 <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	2b02      	cmp	r3, #2
 800189a:	d901      	bls.n	80018a0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	e110      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018a0:	4b8a      	ldr	r3, [pc, #552]	@ (8001acc <HAL_RCC_ClockConfig+0x278>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0307 	and.w	r3, r3, #7
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d1ef      	bne.n	800188e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d016      	beq.n	80018e8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	4618      	mov	r0, r3
 80018c0:	f7ff fb18 	bl	8000ef4 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80018c4:	f7fe fec6 	bl	8000654 <HAL_GetTick>
 80018c8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80018ca:	e008      	b.n	80018de <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80018cc:	f7fe fec2 	bl	8000654 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e0f1      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80018de:	f7ff fbdf 	bl	80010a0 <LL_RCC_IsActiveFlag_HPRE>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d0f1      	beq.n	80018cc <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0320 	and.w	r3, r3, #32
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d016      	beq.n	8001922 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	695b      	ldr	r3, [r3, #20]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff fb0e 	bl	8000f1a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80018fe:	f7fe fea9 	bl	8000654 <HAL_GetTick>
 8001902:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001904:	e008      	b.n	8001918 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001906:	f7fe fea5 	bl	8000654 <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	2b02      	cmp	r3, #2
 8001912:	d901      	bls.n	8001918 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e0d4      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001918:	f7ff fbd3 	bl	80010c2 <LL_RCC_IsActiveFlag_C2HPRE>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d0f1      	beq.n	8001906 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800192a:	2b00      	cmp	r3, #0
 800192c:	d016      	beq.n	800195c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	699b      	ldr	r3, [r3, #24]
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff fb06 	bl	8000f44 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001938:	f7fe fe8c 	bl	8000654 <HAL_GetTick>
 800193c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800193e:	e008      	b.n	8001952 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001940:	f7fe fe88 	bl	8000654 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b02      	cmp	r3, #2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e0b7      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001952:	f7ff fbc8 	bl	80010e6 <LL_RCC_IsActiveFlag_SHDHPRE>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d0f1      	beq.n	8001940 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0304 	and.w	r3, r3, #4
 8001964:	2b00      	cmp	r3, #0
 8001966:	d016      	beq.n	8001996 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff faff 	bl	8000f70 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001972:	f7fe fe6f 	bl	8000654 <HAL_GetTick>
 8001976:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001978:	e008      	b.n	800198c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800197a:	f7fe fe6b 	bl	8000654 <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d901      	bls.n	800198c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e09a      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800198c:	f7ff fbbd 	bl	800110a <LL_RCC_IsActiveFlag_PPRE1>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d0f1      	beq.n	800197a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0308 	and.w	r3, r3, #8
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d017      	beq.n	80019d2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	691b      	ldr	r3, [r3, #16]
 80019a6:	00db      	lsls	r3, r3, #3
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff faf4 	bl	8000f96 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80019ae:	f7fe fe51 	bl	8000654 <HAL_GetTick>
 80019b2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80019b4:	e008      	b.n	80019c8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80019b6:	f7fe fe4d 	bl	8000654 <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e07c      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80019c8:	f7ff fbb0 	bl	800112c <LL_RCC_IsActiveFlag_PPRE2>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d0f1      	beq.n	80019b6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d043      	beq.n	8001a66 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d106      	bne.n	80019f4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80019e6:	f7ff f96c 	bl	8000cc2 <LL_RCC_HSE_IsReady>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d11e      	bne.n	8001a2e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e066      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	2b03      	cmp	r3, #3
 80019fa:	d106      	bne.n	8001a0a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80019fc:	f7ff fb12 	bl	8001024 <LL_RCC_PLL_IsReady>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d113      	bne.n	8001a2e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e05b      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d106      	bne.n	8001a20 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8001a12:	f7ff fa06 	bl	8000e22 <LL_RCC_MSI_IsReady>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d108      	bne.n	8001a2e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e050      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8001a20:	f7ff f97c 	bl	8000d1c <LL_RCC_HSI_IsReady>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d101      	bne.n	8001a2e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e049      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff fa40 	bl	8000eb8 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a38:	f7fe fe0c 	bl	8000654 <HAL_GetTick>
 8001a3c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a3e:	e00a      	b.n	8001a56 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a40:	f7fe fe08 	bl	8000654 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e035      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a56:	f7ff fa42 	bl	8000ede <LL_RCC_GetSysClkSource>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d1ec      	bne.n	8001a40 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a66:	4b19      	ldr	r3, [pc, #100]	@ (8001acc <HAL_RCC_ClockConfig+0x278>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	683a      	ldr	r2, [r7, #0]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d21b      	bcs.n	8001aac <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a74:	4b15      	ldr	r3, [pc, #84]	@ (8001acc <HAL_RCC_ClockConfig+0x278>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f023 0207 	bic.w	r2, r3, #7
 8001a7c:	4913      	ldr	r1, [pc, #76]	@ (8001acc <HAL_RCC_ClockConfig+0x278>)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a84:	f7fe fde6 	bl	8000654 <HAL_GetTick>
 8001a88:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a8a:	e008      	b.n	8001a9e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001a8c:	f7fe fde2 	bl	8000654 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e011      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8001acc <HAL_RCC_ClockConfig+0x278>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0307 	and.w	r3, r3, #7
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d1ef      	bne.n	8001a8c <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001aac:	f000 f8b4 	bl	8001c18 <HAL_RCC_GetHCLKFreq>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	4a07      	ldr	r2, [pc, #28]	@ (8001ad0 <HAL_RCC_ClockConfig+0x27c>)
 8001ab4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8001ab6:	4b07      	ldr	r3, [pc, #28]	@ (8001ad4 <HAL_RCC_ClockConfig+0x280>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7fe fd7e 	bl	80005bc <HAL_InitTick>
 8001ac0:	4603      	mov	r3, r0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	58004000 	.word	0x58004000
 8001ad0:	20000000 	.word	0x20000000
 8001ad4:	20000004 	.word	0x20000004

08001ad8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ad8:	b590      	push	{r4, r7, lr}
 8001ada:	b087      	sub	sp, #28
 8001adc:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ae6:	f7ff f9fa 	bl	8000ede <LL_RCC_GetSysClkSource>
 8001aea:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001aec:	f7ff facd 	bl	800108a <LL_RCC_PLL_GetMainSource>
 8001af0:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d005      	beq.n	8001b04 <HAL_RCC_GetSysClockFreq+0x2c>
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	2b0c      	cmp	r3, #12
 8001afc:	d139      	bne.n	8001b72 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d136      	bne.n	8001b72 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8001b04:	f7ff f99d 	bl	8000e42 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d115      	bne.n	8001b3a <HAL_RCC_GetSysClockFreq+0x62>
 8001b0e:	f7ff f998 	bl	8000e42 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d106      	bne.n	8001b26 <HAL_RCC_GetSysClockFreq+0x4e>
 8001b18:	f7ff f9a3 	bl	8000e62 <LL_RCC_MSI_GetRange>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	0a1b      	lsrs	r3, r3, #8
 8001b20:	f003 030f 	and.w	r3, r3, #15
 8001b24:	e005      	b.n	8001b32 <HAL_RCC_GetSysClockFreq+0x5a>
 8001b26:	f7ff f9a7 	bl	8000e78 <LL_RCC_MSI_GetRangeAfterStandby>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	0a1b      	lsrs	r3, r3, #8
 8001b2e:	f003 030f 	and.w	r3, r3, #15
 8001b32:	4a36      	ldr	r2, [pc, #216]	@ (8001c0c <HAL_RCC_GetSysClockFreq+0x134>)
 8001b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b38:	e014      	b.n	8001b64 <HAL_RCC_GetSysClockFreq+0x8c>
 8001b3a:	f7ff f982 	bl	8000e42 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d106      	bne.n	8001b52 <HAL_RCC_GetSysClockFreq+0x7a>
 8001b44:	f7ff f98d 	bl	8000e62 <LL_RCC_MSI_GetRange>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	091b      	lsrs	r3, r3, #4
 8001b4c:	f003 030f 	and.w	r3, r3, #15
 8001b50:	e005      	b.n	8001b5e <HAL_RCC_GetSysClockFreq+0x86>
 8001b52:	f7ff f991 	bl	8000e78 <LL_RCC_MSI_GetRangeAfterStandby>
 8001b56:	4603      	mov	r3, r0
 8001b58:	091b      	lsrs	r3, r3, #4
 8001b5a:	f003 030f 	and.w	r3, r3, #15
 8001b5e:	4a2b      	ldr	r2, [pc, #172]	@ (8001c0c <HAL_RCC_GetSysClockFreq+0x134>)
 8001b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b64:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d115      	bne.n	8001b98 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001b70:	e012      	b.n	8001b98 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	2b04      	cmp	r3, #4
 8001b76:	d102      	bne.n	8001b7e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b78:	4b25      	ldr	r3, [pc, #148]	@ (8001c10 <HAL_RCC_GetSysClockFreq+0x138>)
 8001b7a:	617b      	str	r3, [r7, #20]
 8001b7c:	e00c      	b.n	8001b98 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	2b08      	cmp	r3, #8
 8001b82:	d109      	bne.n	8001b98 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001b84:	f7ff f870 	bl	8000c68 <LL_RCC_HSE_IsEnabledDiv2>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d102      	bne.n	8001b94 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8001b8e:	4b20      	ldr	r3, [pc, #128]	@ (8001c10 <HAL_RCC_GetSysClockFreq+0x138>)
 8001b90:	617b      	str	r3, [r7, #20]
 8001b92:	e001      	b.n	8001b98 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8001b94:	4b1f      	ldr	r3, [pc, #124]	@ (8001c14 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001b96:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b98:	f7ff f9a1 	bl	8000ede <LL_RCC_GetSysClkSource>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b0c      	cmp	r3, #12
 8001ba0:	d12f      	bne.n	8001c02 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8001ba2:	f7ff fa72 	bl	800108a <LL_RCC_PLL_GetMainSource>
 8001ba6:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d003      	beq.n	8001bb6 <HAL_RCC_GetSysClockFreq+0xde>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2b03      	cmp	r3, #3
 8001bb2:	d003      	beq.n	8001bbc <HAL_RCC_GetSysClockFreq+0xe4>
 8001bb4:	e00d      	b.n	8001bd2 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8001bb6:	4b16      	ldr	r3, [pc, #88]	@ (8001c10 <HAL_RCC_GetSysClockFreq+0x138>)
 8001bb8:	60fb      	str	r3, [r7, #12]
        break;
 8001bba:	e00d      	b.n	8001bd8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001bbc:	f7ff f854 	bl	8000c68 <LL_RCC_HSE_IsEnabledDiv2>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d102      	bne.n	8001bcc <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8001bc6:	4b12      	ldr	r3, [pc, #72]	@ (8001c10 <HAL_RCC_GetSysClockFreq+0x138>)
 8001bc8:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8001bca:	e005      	b.n	8001bd8 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8001bcc:	4b11      	ldr	r3, [pc, #68]	@ (8001c14 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001bce:	60fb      	str	r3, [r7, #12]
        break;
 8001bd0:	e002      	b.n	8001bd8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	60fb      	str	r3, [r7, #12]
        break;
 8001bd6:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8001bd8:	f7ff fa35 	bl	8001046 <LL_RCC_PLL_GetN>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	fb03 f402 	mul.w	r4, r3, r2
 8001be4:	f7ff fa46 	bl	8001074 <LL_RCC_PLL_GetDivider>
 8001be8:	4603      	mov	r3, r0
 8001bea:	091b      	lsrs	r3, r3, #4
 8001bec:	3301      	adds	r3, #1
 8001bee:	fbb4 f4f3 	udiv	r4, r4, r3
 8001bf2:	f7ff fa34 	bl	800105e <LL_RCC_PLL_GetR>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	0f5b      	lsrs	r3, r3, #29
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	fbb4 f3f3 	udiv	r3, r4, r3
 8001c00:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8001c02:	697b      	ldr	r3, [r7, #20]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	371c      	adds	r7, #28
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd90      	pop	{r4, r7, pc}
 8001c0c:	0800249c 	.word	0x0800249c
 8001c10:	00f42400 	.word	0x00f42400
 8001c14:	01e84800 	.word	0x01e84800

08001c18 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c18:	b598      	push	{r3, r4, r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8001c1c:	f7ff ff5c 	bl	8001ad8 <HAL_RCC_GetSysClockFreq>
 8001c20:	4604      	mov	r4, r0
 8001c22:	f7ff f9cb 	bl	8000fbc <LL_RCC_GetAHBPrescaler>
 8001c26:	4603      	mov	r3, r0
 8001c28:	091b      	lsrs	r3, r3, #4
 8001c2a:	f003 030f 	and.w	r3, r3, #15
 8001c2e:	4a03      	ldr	r2, [pc, #12]	@ (8001c3c <HAL_RCC_GetHCLKFreq+0x24>)
 8001c30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c34:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	bd98      	pop	{r3, r4, r7, pc}
 8001c3c:	0800245c 	.word	0x0800245c

08001c40 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8001c40:	b590      	push	{r4, r7, lr}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	091b      	lsrs	r3, r3, #4
 8001c4c:	f003 030f 	and.w	r3, r3, #15
 8001c50:	4a10      	ldr	r2, [pc, #64]	@ (8001c94 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8001c52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c56:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8001c58:	f7ff f9bb 	bl	8000fd2 <LL_RCC_GetAHB3Prescaler>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	091b      	lsrs	r3, r3, #4
 8001c60:	f003 030f 	and.w	r3, r3, #15
 8001c64:	4a0c      	ldr	r2, [pc, #48]	@ (8001c98 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8001c66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c6a:	68fa      	ldr	r2, [r7, #12]
 8001c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c70:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	4a09      	ldr	r2, [pc, #36]	@ (8001c9c <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8001c76:	fba2 2303 	umull	r2, r3, r2, r3
 8001c7a:	0c9c      	lsrs	r4, r3, #18
 8001c7c:	f7fe ffba 	bl	8000bf4 <HAL_PWREx_GetVoltageRange>
 8001c80:	4603      	mov	r3, r0
 8001c82:	4619      	mov	r1, r3
 8001c84:	4620      	mov	r0, r4
 8001c86:	f000 f80b 	bl	8001ca0 <RCC_SetFlashLatency>
 8001c8a:	4603      	mov	r3, r0
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3714      	adds	r7, #20
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd90      	pop	{r4, r7, pc}
 8001c94:	0800249c 	.word	0x0800249c
 8001c98:	0800245c 	.word	0x0800245c
 8001c9c:	431bde83 	.word	0x431bde83

08001ca0 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b08e      	sub	sp, #56	@ 0x38
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8001caa:	4a3a      	ldr	r2, [pc, #232]	@ (8001d94 <RCC_SetFlashLatency+0xf4>)
 8001cac:	f107 0320 	add.w	r3, r7, #32
 8001cb0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cb4:	6018      	str	r0, [r3, #0]
 8001cb6:	3304      	adds	r3, #4
 8001cb8:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8001cba:	4a37      	ldr	r2, [pc, #220]	@ (8001d98 <RCC_SetFlashLatency+0xf8>)
 8001cbc:	f107 0318 	add.w	r3, r7, #24
 8001cc0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cc4:	6018      	str	r0, [r3, #0]
 8001cc6:	3304      	adds	r3, #4
 8001cc8:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8001cca:	4a34      	ldr	r2, [pc, #208]	@ (8001d9c <RCC_SetFlashLatency+0xfc>)
 8001ccc:	f107 030c 	add.w	r3, r7, #12
 8001cd0:	ca07      	ldmia	r2, {r0, r1, r2}
 8001cd2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ce0:	d11b      	bne.n	8001d1a <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	633b      	str	r3, [r7, #48]	@ 0x30
 8001ce6:	e014      	b.n	8001d12 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8001ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	3338      	adds	r3, #56	@ 0x38
 8001cee:	443b      	add	r3, r7
 8001cf0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d807      	bhi.n	8001d0c <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	3338      	adds	r3, #56	@ 0x38
 8001d02:	443b      	add	r3, r7
 8001d04:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001d08:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8001d0a:	e021      	b.n	8001d50 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d0e:	3301      	adds	r3, #1
 8001d10:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d9e7      	bls.n	8001ce8 <RCC_SetFlashLatency+0x48>
 8001d18:	e01a      	b.n	8001d50 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d1e:	e014      	b.n	8001d4a <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8001d20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	3338      	adds	r3, #56	@ 0x38
 8001d26:	443b      	add	r3, r7
 8001d28:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d807      	bhi.n	8001d44 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001d34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	3338      	adds	r3, #56	@ 0x38
 8001d3a:	443b      	add	r3, r7
 8001d3c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001d40:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8001d42:	e005      	b.n	8001d50 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001d44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d46:	3301      	adds	r3, #1
 8001d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d9e7      	bls.n	8001d20 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d50:	4b13      	ldr	r3, [pc, #76]	@ (8001da0 <RCC_SetFlashLatency+0x100>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f023 0207 	bic.w	r2, r3, #7
 8001d58:	4911      	ldr	r1, [pc, #68]	@ (8001da0 <RCC_SetFlashLatency+0x100>)
 8001d5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001d60:	f7fe fc78 	bl	8000654 <HAL_GetTick>
 8001d64:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001d66:	e008      	b.n	8001d7a <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001d68:	f7fe fc74 	bl	8000654 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d901      	bls.n	8001d7a <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e007      	b.n	8001d8a <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001d7a:	4b09      	ldr	r3, [pc, #36]	@ (8001da0 <RCC_SetFlashLatency+0x100>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0307 	and.w	r3, r3, #7
 8001d82:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d1ef      	bne.n	8001d68 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3738      	adds	r7, #56	@ 0x38
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	08002440 	.word	0x08002440
 8001d98:	08002448 	.word	0x08002448
 8001d9c:	08002450 	.word	0x08002450
 8001da0:	58004000 	.word	0x58004000

08001da4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d101      	bne.n	8001db6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e054      	b.n	8001e60 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d111      	bne.n	8001de6 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 fa7e 	bl	80022cc <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d102      	bne.n	8001dde <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	4a23      	ldr	r2, [pc, #140]	@ (8001e68 <HAL_TIM_Base_Init+0xc4>)
 8001ddc:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2202      	movs	r2, #2
 8001dea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	3304      	adds	r3, #4
 8001df6:	4619      	mov	r1, r3
 8001df8:	4610      	mov	r0, r2
 8001dfa:	f000 f9f9 	bl	80021f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2201      	movs	r2, #1
 8001e02:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2201      	movs	r2, #1
 8001e12:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2201      	movs	r2, #1
 8001e22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2201      	movs	r2, #1
 8001e32:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2201      	movs	r2, #1
 8001e42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001e5e:	2300      	movs	r3, #0
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3708      	adds	r7, #8
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	08000479 	.word	0x08000479

08001e6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d001      	beq.n	8001e84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e036      	b.n	8001ef2 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2202      	movs	r2, #2
 8001e88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	68da      	ldr	r2, [r3, #12]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f042 0201 	orr.w	r2, r2, #1
 8001e9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a16      	ldr	r2, [pc, #88]	@ (8001efc <HAL_TIM_Base_Start_IT+0x90>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d004      	beq.n	8001eb0 <HAL_TIM_Base_Start_IT+0x44>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001eae:	d115      	bne.n	8001edc <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	689a      	ldr	r2, [r3, #8]
 8001eb6:	4b12      	ldr	r3, [pc, #72]	@ (8001f00 <HAL_TIM_Base_Start_IT+0x94>)
 8001eb8:	4013      	ands	r3, r2
 8001eba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2b06      	cmp	r3, #6
 8001ec0:	d015      	beq.n	8001eee <HAL_TIM_Base_Start_IT+0x82>
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ec8:	d011      	beq.n	8001eee <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f042 0201 	orr.w	r2, r2, #1
 8001ed8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eda:	e008      	b.n	8001eee <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f042 0201 	orr.w	r2, r2, #1
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	e000      	b.n	8001ef0 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3714      	adds	r7, #20
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bc80      	pop	{r7}
 8001efa:	4770      	bx	lr
 8001efc:	40012c00 	.word	0x40012c00
 8001f00:	00010007 	.word	0x00010007

08001f04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d026      	beq.n	8001f74 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d021      	beq.n	8001f74 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f06f 0202 	mvn.w	r2, #2
 8001f38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	699b      	ldr	r3, [r3, #24]
 8001f46:	f003 0303 	and.w	r3, r3, #3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d005      	beq.n	8001f5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	4798      	blx	r3
 8001f58:	e009      	b.n	8001f6e <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	f003 0304 	and.w	r3, r3, #4
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d026      	beq.n	8001fcc <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	f003 0304 	and.w	r3, r3, #4
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d021      	beq.n	8001fcc <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f06f 0204 	mvn.w	r2, #4
 8001f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2202      	movs	r2, #2
 8001f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d005      	beq.n	8001fb2 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	4798      	blx	r3
 8001fb0:	e009      	b.n	8001fc6 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	f003 0308 	and.w	r3, r3, #8
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d026      	beq.n	8002024 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f003 0308 	and.w	r3, r3, #8
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d021      	beq.n	8002024 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f06f 0208 	mvn.w	r2, #8
 8001fe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2204      	movs	r2, #4
 8001fee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	f003 0303 	and.w	r3, r3, #3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d005      	beq.n	800200a <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	4798      	blx	r3
 8002008:	e009      	b.n	800201e <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	f003 0310 	and.w	r3, r3, #16
 800202a:	2b00      	cmp	r3, #0
 800202c:	d026      	beq.n	800207c <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f003 0310 	and.w	r3, r3, #16
 8002034:	2b00      	cmp	r3, #0
 8002036:	d021      	beq.n	800207c <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f06f 0210 	mvn.w	r2, #16
 8002040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2208      	movs	r2, #8
 8002046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002052:	2b00      	cmp	r3, #0
 8002054:	d005      	beq.n	8002062 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	4798      	blx	r3
 8002060:	e009      	b.n	8002076 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00e      	beq.n	80020a4 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f003 0301 	and.w	r3, r3, #1
 800208c:	2b00      	cmp	r3, #0
 800208e:	d009      	beq.n	80020a4 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f06f 0201 	mvn.w	r2, #1
 8002098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d00e      	beq.n	80020cc <HAL_TIM_IRQHandler+0x1c8>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d009      	beq.n	80020cc <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80020c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d00e      	beq.n	80020f4 <HAL_TIM_IRQHandler+0x1f0>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d009      	beq.n	80020f4 <HAL_TIM_IRQHandler+0x1f0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80020e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00e      	beq.n	800211c <HAL_TIM_IRQHandler+0x218>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002104:	2b00      	cmp	r3, #0
 8002106:	d009      	beq.n	800211c <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	f003 0320 	and.w	r3, r3, #32
 8002122:	2b00      	cmp	r3, #0
 8002124:	d00e      	beq.n	8002144 <HAL_TIM_IRQHandler+0x240>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f003 0320 	and.w	r3, r3, #32
 800212c:	2b00      	cmp	r3, #0
 800212e:	d009      	beq.n	8002144 <HAL_TIM_IRQHandler+0x240>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f06f 0220 	mvn.w	r2, #32
 8002138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002144:	bf00      	nop
 8002146:	3710      	adds	r7, #16
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	bc80      	pop	{r7}
 800215c:	4770      	bx	lr

0800215e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800215e:	b480      	push	{r7}
 8002160:	b083      	sub	sp, #12
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr

08002170 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	bc80      	pop	{r7}
 8002180:	4770      	bx	lr

08002182 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002182:	b480      	push	{r7}
 8002184:	b083      	sub	sp, #12
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800218a:	bf00      	nop
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	bc80      	pop	{r7}
 8002192:	4770      	bx	lr

08002194 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bc80      	pop	{r7}
 80021a4:	4770      	bx	lr

080021a6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80021a6:	b480      	push	{r7}
 80021a8:	b083      	sub	sp, #12
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80021ae:	bf00      	nop
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bc80      	pop	{r7}
 80021b6:	4770      	bx	lr

080021b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bc80      	pop	{r7}
 80021c8:	4770      	bx	lr

080021ca <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80021ca:	b480      	push	{r7}
 80021cc:	b083      	sub	sp, #12
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bc80      	pop	{r7}
 80021da:	4770      	bx	lr

080021dc <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bc80      	pop	{r7}
 80021ec:	4770      	bx	lr
	...

080021f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a2f      	ldr	r2, [pc, #188]	@ (80022c0 <TIM_Base_SetConfig+0xd0>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d003      	beq.n	8002210 <TIM_Base_SetConfig+0x20>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800220e:	d108      	bne.n	8002222 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002216:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	68fa      	ldr	r2, [r7, #12]
 800221e:	4313      	orrs	r3, r2
 8002220:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a26      	ldr	r2, [pc, #152]	@ (80022c0 <TIM_Base_SetConfig+0xd0>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d00b      	beq.n	8002242 <TIM_Base_SetConfig+0x52>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002230:	d007      	beq.n	8002242 <TIM_Base_SetConfig+0x52>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a23      	ldr	r2, [pc, #140]	@ (80022c4 <TIM_Base_SetConfig+0xd4>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d003      	beq.n	8002242 <TIM_Base_SetConfig+0x52>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a22      	ldr	r2, [pc, #136]	@ (80022c8 <TIM_Base_SetConfig+0xd8>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d108      	bne.n	8002254 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002248:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	4313      	orrs	r3, r2
 8002252:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	695b      	ldr	r3, [r3, #20]
 800225e:	4313      	orrs	r3, r2
 8002260:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	68fa      	ldr	r2, [r7, #12]
 8002266:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	689a      	ldr	r2, [r3, #8]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4a11      	ldr	r2, [pc, #68]	@ (80022c0 <TIM_Base_SetConfig+0xd0>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d007      	beq.n	8002290 <TIM_Base_SetConfig+0xa0>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a10      	ldr	r2, [pc, #64]	@ (80022c4 <TIM_Base_SetConfig+0xd4>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d003      	beq.n	8002290 <TIM_Base_SetConfig+0xa0>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4a0f      	ldr	r2, [pc, #60]	@ (80022c8 <TIM_Base_SetConfig+0xd8>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d103      	bne.n	8002298 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	691a      	ldr	r2, [r3, #16]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d105      	bne.n	80022b6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	f023 0201 	bic.w	r2, r3, #1
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	611a      	str	r2, [r3, #16]
  }
}
 80022b6:	bf00      	nop
 80022b8:	3714      	adds	r7, #20
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bc80      	pop	{r7}
 80022be:	4770      	bx	lr
 80022c0:	40012c00 	.word	0x40012c00
 80022c4:	40014400 	.word	0x40014400
 80022c8:	40014800 	.word	0x40014800

080022cc <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4a1e      	ldr	r2, [pc, #120]	@ (8002350 <TIM_ResetCallback+0x84>)
 80022d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4a1d      	ldr	r2, [pc, #116]	@ (8002354 <TIM_ResetCallback+0x88>)
 80022e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4a1c      	ldr	r2, [pc, #112]	@ (8002358 <TIM_ResetCallback+0x8c>)
 80022e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4a1b      	ldr	r2, [pc, #108]	@ (800235c <TIM_ResetCallback+0x90>)
 80022f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4a1a      	ldr	r2, [pc, #104]	@ (8002360 <TIM_ResetCallback+0x94>)
 80022f8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a19      	ldr	r2, [pc, #100]	@ (8002364 <TIM_ResetCallback+0x98>)
 8002300:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a18      	ldr	r2, [pc, #96]	@ (8002368 <TIM_ResetCallback+0x9c>)
 8002308:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4a17      	ldr	r2, [pc, #92]	@ (800236c <TIM_ResetCallback+0xa0>)
 8002310:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4a16      	ldr	r2, [pc, #88]	@ (8002370 <TIM_ResetCallback+0xa4>)
 8002318:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4a15      	ldr	r2, [pc, #84]	@ (8002374 <TIM_ResetCallback+0xa8>)
 8002320:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4a14      	ldr	r2, [pc, #80]	@ (8002378 <TIM_ResetCallback+0xac>)
 8002328:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a13      	ldr	r2, [pc, #76]	@ (800237c <TIM_ResetCallback+0xb0>)
 8002330:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	4a12      	ldr	r2, [pc, #72]	@ (8002380 <TIM_ResetCallback+0xb4>)
 8002338:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4a11      	ldr	r2, [pc, #68]	@ (8002384 <TIM_ResetCallback+0xb8>)
 8002340:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	bc80      	pop	{r7}
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	080001a9 	.word	0x080001a9
 8002354:	0800214d 	.word	0x0800214d
 8002358:	080021b9 	.word	0x080021b9
 800235c:	080021cb 	.word	0x080021cb
 8002360:	08002171 	.word	0x08002171
 8002364:	08002183 	.word	0x08002183
 8002368:	0800215f 	.word	0x0800215f
 800236c:	08002195 	.word	0x08002195
 8002370:	080021a7 	.word	0x080021a7
 8002374:	080021dd 	.word	0x080021dd
 8002378:	08002389 	.word	0x08002389
 800237c:	0800239b 	.word	0x0800239b
 8002380:	080023ad 	.word	0x080023ad
 8002384:	080023bf 	.word	0x080023bf

08002388 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	bc80      	pop	{r7}
 8002398:	4770      	bx	lr

0800239a <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800239a:	b480      	push	{r7}
 800239c:	b083      	sub	sp, #12
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 80023a2:	bf00      	nop
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bc80      	pop	{r7}
 80023aa:	4770      	bx	lr

080023ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bc80      	pop	{r7}
 80023bc:	4770      	bx	lr

080023be <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80023be:	b480      	push	{r7}
 80023c0:	b083      	sub	sp, #12
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80023c6:	bf00      	nop
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bc80      	pop	{r7}
 80023ce:	4770      	bx	lr

080023d0 <memset>:
 80023d0:	4402      	add	r2, r0
 80023d2:	4603      	mov	r3, r0
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d100      	bne.n	80023da <memset+0xa>
 80023d8:	4770      	bx	lr
 80023da:	f803 1b01 	strb.w	r1, [r3], #1
 80023de:	e7f9      	b.n	80023d4 <memset+0x4>

080023e0 <__libc_init_array>:
 80023e0:	b570      	push	{r4, r5, r6, lr}
 80023e2:	4d0d      	ldr	r5, [pc, #52]	@ (8002418 <__libc_init_array+0x38>)
 80023e4:	4c0d      	ldr	r4, [pc, #52]	@ (800241c <__libc_init_array+0x3c>)
 80023e6:	1b64      	subs	r4, r4, r5
 80023e8:	10a4      	asrs	r4, r4, #2
 80023ea:	2600      	movs	r6, #0
 80023ec:	42a6      	cmp	r6, r4
 80023ee:	d109      	bne.n	8002404 <__libc_init_array+0x24>
 80023f0:	4d0b      	ldr	r5, [pc, #44]	@ (8002420 <__libc_init_array+0x40>)
 80023f2:	4c0c      	ldr	r4, [pc, #48]	@ (8002424 <__libc_init_array+0x44>)
 80023f4:	f000 f818 	bl	8002428 <_init>
 80023f8:	1b64      	subs	r4, r4, r5
 80023fa:	10a4      	asrs	r4, r4, #2
 80023fc:	2600      	movs	r6, #0
 80023fe:	42a6      	cmp	r6, r4
 8002400:	d105      	bne.n	800240e <__libc_init_array+0x2e>
 8002402:	bd70      	pop	{r4, r5, r6, pc}
 8002404:	f855 3b04 	ldr.w	r3, [r5], #4
 8002408:	4798      	blx	r3
 800240a:	3601      	adds	r6, #1
 800240c:	e7ee      	b.n	80023ec <__libc_init_array+0xc>
 800240e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002412:	4798      	blx	r3
 8002414:	3601      	adds	r6, #1
 8002416:	e7f2      	b.n	80023fe <__libc_init_array+0x1e>
 8002418:	080024dc 	.word	0x080024dc
 800241c:	080024dc 	.word	0x080024dc
 8002420:	080024dc 	.word	0x080024dc
 8002424:	080024e0 	.word	0x080024e0

08002428 <_init>:
 8002428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800242a:	bf00      	nop
 800242c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800242e:	bc08      	pop	{r3}
 8002430:	469e      	mov	lr, r3
 8002432:	4770      	bx	lr

08002434 <_fini>:
 8002434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002436:	bf00      	nop
 8002438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800243a:	bc08      	pop	{r3}
 800243c:	469e      	mov	lr, r3
 800243e:	4770      	bx	lr
