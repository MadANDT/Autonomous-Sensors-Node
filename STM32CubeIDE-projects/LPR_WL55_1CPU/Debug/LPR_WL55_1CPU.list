
LPR_WL55_1CPU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000407c  08000138  08000138  00001138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  080041b4  080041b4  000051b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800438c  0800438c  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800438c  0800438c  0000538c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004394  08004394  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004394  08004394  00005394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004398  08004398  00005398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800439c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  20000068  08004404  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  08004404  0000626c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ecc6  00000000  00000000  00006092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002364  00000000  00000000  00014d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001010  00000000  00000000  000170c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c25  00000000  00000000  000180d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ce2a  00000000  00000000  00018cf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e8ab  00000000  00000000  00035b1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b2255  00000000  00000000  000443ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f661f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004864  00000000  00000000  000f6664  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000faec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	@ (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	@ (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000068 	.word	0x20000068
 8000154:	00000000 	.word	0x00000000
 8000158:	0800419c 	.word	0x0800419c

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	@ (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	@ (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	@ (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	2000006c 	.word	0x2000006c
 8000174:	0800419c 	.word	0x0800419c

08000178 <__aeabi_uldivmod>:
 8000178:	b953      	cbnz	r3, 8000190 <__aeabi_uldivmod+0x18>
 800017a:	b94a      	cbnz	r2, 8000190 <__aeabi_uldivmod+0x18>
 800017c:	2900      	cmp	r1, #0
 800017e:	bf08      	it	eq
 8000180:	2800      	cmpeq	r0, #0
 8000182:	bf1c      	itt	ne
 8000184:	f04f 31ff 	movne.w	r1, #4294967295
 8000188:	f04f 30ff 	movne.w	r0, #4294967295
 800018c:	f000 b988 	b.w	80004a0 <__aeabi_idiv0>
 8000190:	f1ad 0c08 	sub.w	ip, sp, #8
 8000194:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000198:	f000 f806 	bl	80001a8 <__udivmoddi4>
 800019c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a4:	b004      	add	sp, #16
 80001a6:	4770      	bx	lr

080001a8 <__udivmoddi4>:
 80001a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001ac:	9d08      	ldr	r5, [sp, #32]
 80001ae:	468e      	mov	lr, r1
 80001b0:	4604      	mov	r4, r0
 80001b2:	4688      	mov	r8, r1
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d14a      	bne.n	800024e <__udivmoddi4+0xa6>
 80001b8:	428a      	cmp	r2, r1
 80001ba:	4617      	mov	r7, r2
 80001bc:	d962      	bls.n	8000284 <__udivmoddi4+0xdc>
 80001be:	fab2 f682 	clz	r6, r2
 80001c2:	b14e      	cbz	r6, 80001d8 <__udivmoddi4+0x30>
 80001c4:	f1c6 0320 	rsb	r3, r6, #32
 80001c8:	fa01 f806 	lsl.w	r8, r1, r6
 80001cc:	fa20 f303 	lsr.w	r3, r0, r3
 80001d0:	40b7      	lsls	r7, r6
 80001d2:	ea43 0808 	orr.w	r8, r3, r8
 80001d6:	40b4      	lsls	r4, r6
 80001d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80001dc:	fa1f fc87 	uxth.w	ip, r7
 80001e0:	fbb8 f1fe 	udiv	r1, r8, lr
 80001e4:	0c23      	lsrs	r3, r4, #16
 80001e6:	fb0e 8811 	mls	r8, lr, r1, r8
 80001ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001ee:	fb01 f20c 	mul.w	r2, r1, ip
 80001f2:	429a      	cmp	r2, r3
 80001f4:	d909      	bls.n	800020a <__udivmoddi4+0x62>
 80001f6:	18fb      	adds	r3, r7, r3
 80001f8:	f101 30ff 	add.w	r0, r1, #4294967295
 80001fc:	f080 80ea 	bcs.w	80003d4 <__udivmoddi4+0x22c>
 8000200:	429a      	cmp	r2, r3
 8000202:	f240 80e7 	bls.w	80003d4 <__udivmoddi4+0x22c>
 8000206:	3902      	subs	r1, #2
 8000208:	443b      	add	r3, r7
 800020a:	1a9a      	subs	r2, r3, r2
 800020c:	b2a3      	uxth	r3, r4
 800020e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000212:	fb0e 2210 	mls	r2, lr, r0, r2
 8000216:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800021a:	fb00 fc0c 	mul.w	ip, r0, ip
 800021e:	459c      	cmp	ip, r3
 8000220:	d909      	bls.n	8000236 <__udivmoddi4+0x8e>
 8000222:	18fb      	adds	r3, r7, r3
 8000224:	f100 32ff 	add.w	r2, r0, #4294967295
 8000228:	f080 80d6 	bcs.w	80003d8 <__udivmoddi4+0x230>
 800022c:	459c      	cmp	ip, r3
 800022e:	f240 80d3 	bls.w	80003d8 <__udivmoddi4+0x230>
 8000232:	443b      	add	r3, r7
 8000234:	3802      	subs	r0, #2
 8000236:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800023a:	eba3 030c 	sub.w	r3, r3, ip
 800023e:	2100      	movs	r1, #0
 8000240:	b11d      	cbz	r5, 800024a <__udivmoddi4+0xa2>
 8000242:	40f3      	lsrs	r3, r6
 8000244:	2200      	movs	r2, #0
 8000246:	e9c5 3200 	strd	r3, r2, [r5]
 800024a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800024e:	428b      	cmp	r3, r1
 8000250:	d905      	bls.n	800025e <__udivmoddi4+0xb6>
 8000252:	b10d      	cbz	r5, 8000258 <__udivmoddi4+0xb0>
 8000254:	e9c5 0100 	strd	r0, r1, [r5]
 8000258:	2100      	movs	r1, #0
 800025a:	4608      	mov	r0, r1
 800025c:	e7f5      	b.n	800024a <__udivmoddi4+0xa2>
 800025e:	fab3 f183 	clz	r1, r3
 8000262:	2900      	cmp	r1, #0
 8000264:	d146      	bne.n	80002f4 <__udivmoddi4+0x14c>
 8000266:	4573      	cmp	r3, lr
 8000268:	d302      	bcc.n	8000270 <__udivmoddi4+0xc8>
 800026a:	4282      	cmp	r2, r0
 800026c:	f200 8105 	bhi.w	800047a <__udivmoddi4+0x2d2>
 8000270:	1a84      	subs	r4, r0, r2
 8000272:	eb6e 0203 	sbc.w	r2, lr, r3
 8000276:	2001      	movs	r0, #1
 8000278:	4690      	mov	r8, r2
 800027a:	2d00      	cmp	r5, #0
 800027c:	d0e5      	beq.n	800024a <__udivmoddi4+0xa2>
 800027e:	e9c5 4800 	strd	r4, r8, [r5]
 8000282:	e7e2      	b.n	800024a <__udivmoddi4+0xa2>
 8000284:	2a00      	cmp	r2, #0
 8000286:	f000 8090 	beq.w	80003aa <__udivmoddi4+0x202>
 800028a:	fab2 f682 	clz	r6, r2
 800028e:	2e00      	cmp	r6, #0
 8000290:	f040 80a4 	bne.w	80003dc <__udivmoddi4+0x234>
 8000294:	1a8a      	subs	r2, r1, r2
 8000296:	0c03      	lsrs	r3, r0, #16
 8000298:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800029c:	b280      	uxth	r0, r0
 800029e:	b2bc      	uxth	r4, r7
 80002a0:	2101      	movs	r1, #1
 80002a2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002a6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ae:	fb04 f20c 	mul.w	r2, r4, ip
 80002b2:	429a      	cmp	r2, r3
 80002b4:	d907      	bls.n	80002c6 <__udivmoddi4+0x11e>
 80002b6:	18fb      	adds	r3, r7, r3
 80002b8:	f10c 38ff 	add.w	r8, ip, #4294967295
 80002bc:	d202      	bcs.n	80002c4 <__udivmoddi4+0x11c>
 80002be:	429a      	cmp	r2, r3
 80002c0:	f200 80e0 	bhi.w	8000484 <__udivmoddi4+0x2dc>
 80002c4:	46c4      	mov	ip, r8
 80002c6:	1a9b      	subs	r3, r3, r2
 80002c8:	fbb3 f2fe 	udiv	r2, r3, lr
 80002cc:	fb0e 3312 	mls	r3, lr, r2, r3
 80002d0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80002d4:	fb02 f404 	mul.w	r4, r2, r4
 80002d8:	429c      	cmp	r4, r3
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0x144>
 80002dc:	18fb      	adds	r3, r7, r3
 80002de:	f102 30ff 	add.w	r0, r2, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0x142>
 80002e4:	429c      	cmp	r4, r3
 80002e6:	f200 80ca 	bhi.w	800047e <__udivmoddi4+0x2d6>
 80002ea:	4602      	mov	r2, r0
 80002ec:	1b1b      	subs	r3, r3, r4
 80002ee:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80002f2:	e7a5      	b.n	8000240 <__udivmoddi4+0x98>
 80002f4:	f1c1 0620 	rsb	r6, r1, #32
 80002f8:	408b      	lsls	r3, r1
 80002fa:	fa22 f706 	lsr.w	r7, r2, r6
 80002fe:	431f      	orrs	r7, r3
 8000300:	fa0e f401 	lsl.w	r4, lr, r1
 8000304:	fa20 f306 	lsr.w	r3, r0, r6
 8000308:	fa2e fe06 	lsr.w	lr, lr, r6
 800030c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000310:	4323      	orrs	r3, r4
 8000312:	fa00 f801 	lsl.w	r8, r0, r1
 8000316:	fa1f fc87 	uxth.w	ip, r7
 800031a:	fbbe f0f9 	udiv	r0, lr, r9
 800031e:	0c1c      	lsrs	r4, r3, #16
 8000320:	fb09 ee10 	mls	lr, r9, r0, lr
 8000324:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000328:	fb00 fe0c 	mul.w	lr, r0, ip
 800032c:	45a6      	cmp	lr, r4
 800032e:	fa02 f201 	lsl.w	r2, r2, r1
 8000332:	d909      	bls.n	8000348 <__udivmoddi4+0x1a0>
 8000334:	193c      	adds	r4, r7, r4
 8000336:	f100 3aff 	add.w	sl, r0, #4294967295
 800033a:	f080 809c 	bcs.w	8000476 <__udivmoddi4+0x2ce>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f240 8099 	bls.w	8000476 <__udivmoddi4+0x2ce>
 8000344:	3802      	subs	r0, #2
 8000346:	443c      	add	r4, r7
 8000348:	eba4 040e 	sub.w	r4, r4, lr
 800034c:	fa1f fe83 	uxth.w	lr, r3
 8000350:	fbb4 f3f9 	udiv	r3, r4, r9
 8000354:	fb09 4413 	mls	r4, r9, r3, r4
 8000358:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800035c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000360:	45a4      	cmp	ip, r4
 8000362:	d908      	bls.n	8000376 <__udivmoddi4+0x1ce>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f103 3eff 	add.w	lr, r3, #4294967295
 800036a:	f080 8082 	bcs.w	8000472 <__udivmoddi4+0x2ca>
 800036e:	45a4      	cmp	ip, r4
 8000370:	d97f      	bls.n	8000472 <__udivmoddi4+0x2ca>
 8000372:	3b02      	subs	r3, #2
 8000374:	443c      	add	r4, r7
 8000376:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800037a:	eba4 040c 	sub.w	r4, r4, ip
 800037e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000382:	4564      	cmp	r4, ip
 8000384:	4673      	mov	r3, lr
 8000386:	46e1      	mov	r9, ip
 8000388:	d362      	bcc.n	8000450 <__udivmoddi4+0x2a8>
 800038a:	d05f      	beq.n	800044c <__udivmoddi4+0x2a4>
 800038c:	b15d      	cbz	r5, 80003a6 <__udivmoddi4+0x1fe>
 800038e:	ebb8 0203 	subs.w	r2, r8, r3
 8000392:	eb64 0409 	sbc.w	r4, r4, r9
 8000396:	fa04 f606 	lsl.w	r6, r4, r6
 800039a:	fa22 f301 	lsr.w	r3, r2, r1
 800039e:	431e      	orrs	r6, r3
 80003a0:	40cc      	lsrs	r4, r1
 80003a2:	e9c5 6400 	strd	r6, r4, [r5]
 80003a6:	2100      	movs	r1, #0
 80003a8:	e74f      	b.n	800024a <__udivmoddi4+0xa2>
 80003aa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003ae:	0c01      	lsrs	r1, r0, #16
 80003b0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80003ba:	463b      	mov	r3, r7
 80003bc:	4638      	mov	r0, r7
 80003be:	463c      	mov	r4, r7
 80003c0:	46b8      	mov	r8, r7
 80003c2:	46be      	mov	lr, r7
 80003c4:	2620      	movs	r6, #32
 80003c6:	fbb1 f1f7 	udiv	r1, r1, r7
 80003ca:	eba2 0208 	sub.w	r2, r2, r8
 80003ce:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80003d2:	e766      	b.n	80002a2 <__udivmoddi4+0xfa>
 80003d4:	4601      	mov	r1, r0
 80003d6:	e718      	b.n	800020a <__udivmoddi4+0x62>
 80003d8:	4610      	mov	r0, r2
 80003da:	e72c      	b.n	8000236 <__udivmoddi4+0x8e>
 80003dc:	f1c6 0220 	rsb	r2, r6, #32
 80003e0:	fa2e f302 	lsr.w	r3, lr, r2
 80003e4:	40b7      	lsls	r7, r6
 80003e6:	40b1      	lsls	r1, r6
 80003e8:	fa20 f202 	lsr.w	r2, r0, r2
 80003ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f0:	430a      	orrs	r2, r1
 80003f2:	fbb3 f8fe 	udiv	r8, r3, lr
 80003f6:	b2bc      	uxth	r4, r7
 80003f8:	fb0e 3318 	mls	r3, lr, r8, r3
 80003fc:	0c11      	lsrs	r1, r2, #16
 80003fe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000402:	fb08 f904 	mul.w	r9, r8, r4
 8000406:	40b0      	lsls	r0, r6
 8000408:	4589      	cmp	r9, r1
 800040a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800040e:	b280      	uxth	r0, r0
 8000410:	d93e      	bls.n	8000490 <__udivmoddi4+0x2e8>
 8000412:	1879      	adds	r1, r7, r1
 8000414:	f108 3cff 	add.w	ip, r8, #4294967295
 8000418:	d201      	bcs.n	800041e <__udivmoddi4+0x276>
 800041a:	4589      	cmp	r9, r1
 800041c:	d81f      	bhi.n	800045e <__udivmoddi4+0x2b6>
 800041e:	eba1 0109 	sub.w	r1, r1, r9
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fb09 f804 	mul.w	r8, r9, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	b292      	uxth	r2, r2
 8000430:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000434:	4542      	cmp	r2, r8
 8000436:	d229      	bcs.n	800048c <__udivmoddi4+0x2e4>
 8000438:	18ba      	adds	r2, r7, r2
 800043a:	f109 31ff 	add.w	r1, r9, #4294967295
 800043e:	d2c4      	bcs.n	80003ca <__udivmoddi4+0x222>
 8000440:	4542      	cmp	r2, r8
 8000442:	d2c2      	bcs.n	80003ca <__udivmoddi4+0x222>
 8000444:	f1a9 0102 	sub.w	r1, r9, #2
 8000448:	443a      	add	r2, r7
 800044a:	e7be      	b.n	80003ca <__udivmoddi4+0x222>
 800044c:	45f0      	cmp	r8, lr
 800044e:	d29d      	bcs.n	800038c <__udivmoddi4+0x1e4>
 8000450:	ebbe 0302 	subs.w	r3, lr, r2
 8000454:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000458:	3801      	subs	r0, #1
 800045a:	46e1      	mov	r9, ip
 800045c:	e796      	b.n	800038c <__udivmoddi4+0x1e4>
 800045e:	eba7 0909 	sub.w	r9, r7, r9
 8000462:	4449      	add	r1, r9
 8000464:	f1a8 0c02 	sub.w	ip, r8, #2
 8000468:	fbb1 f9fe 	udiv	r9, r1, lr
 800046c:	fb09 f804 	mul.w	r8, r9, r4
 8000470:	e7db      	b.n	800042a <__udivmoddi4+0x282>
 8000472:	4673      	mov	r3, lr
 8000474:	e77f      	b.n	8000376 <__udivmoddi4+0x1ce>
 8000476:	4650      	mov	r0, sl
 8000478:	e766      	b.n	8000348 <__udivmoddi4+0x1a0>
 800047a:	4608      	mov	r0, r1
 800047c:	e6fd      	b.n	800027a <__udivmoddi4+0xd2>
 800047e:	443b      	add	r3, r7
 8000480:	3a02      	subs	r2, #2
 8000482:	e733      	b.n	80002ec <__udivmoddi4+0x144>
 8000484:	f1ac 0c02 	sub.w	ip, ip, #2
 8000488:	443b      	add	r3, r7
 800048a:	e71c      	b.n	80002c6 <__udivmoddi4+0x11e>
 800048c:	4649      	mov	r1, r9
 800048e:	e79c      	b.n	80003ca <__udivmoddi4+0x222>
 8000490:	eba1 0109 	sub.w	r1, r1, r9
 8000494:	46c4      	mov	ip, r8
 8000496:	fbb1 f9fe 	udiv	r9, r1, lr
 800049a:	fb09 f804 	mul.w	r8, r9, r4
 800049e:	e7c4      	b.n	800042a <__udivmoddi4+0x282>

080004a0 <__aeabi_idiv0>:
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop

080004a4 <LL_PWR_IsActiveFlag_REGLPS>:
  * @note   Take care, return value "0" means the regulator is ready. Return value "1" means the output voltage range is still changing.
  * @rmtoll SR2          REGLPS        LL_PWR_IsActiveFlag_REGLPS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_REGLPS(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_REGLPS) == (PWR_SR2_REGLPS)) ? 1UL : 0UL);
 80004a8:	4b06      	ldr	r3, [pc, #24]	@ (80004c4 <LL_PWR_IsActiveFlag_REGLPS+0x20>)
 80004aa:	695b      	ldr	r3, [r3, #20]
 80004ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80004b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80004b4:	d101      	bne.n	80004ba <LL_PWR_IsActiveFlag_REGLPS+0x16>
 80004b6:	2301      	movs	r3, #1
 80004b8:	e000      	b.n	80004bc <LL_PWR_IsActiveFlag_REGLPS+0x18>
 80004ba:	2300      	movs	r3, #0
}
 80004bc:	4618      	mov	r0, r3
 80004be:	46bd      	mov	sp, r7
 80004c0:	bc80      	pop	{r7}
 80004c2:	4770      	bx	lr
 80004c4:	58000400 	.word	0x58000400

080004c8 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80004cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80004d0:	689b      	ldr	r3, [r3, #8]
 80004d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80004d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80004da:	d101      	bne.n	80004e0 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80004dc:	2301      	movs	r3, #1
 80004de:	e000      	b.n	80004e2 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80004e0:	2300      	movs	r3, #0
}
 80004e2:	4618      	mov	r0, r3
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bc80      	pop	{r7}
 80004e8:	4770      	bx	lr

080004ea <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004ea:	b480      	push	{r7}
 80004ec:	b085      	sub	sp, #20
 80004ee:	af00      	add	r7, sp, #0
 80004f0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80004f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80004f8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	4313      	orrs	r3, r2
 8000500:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000502:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000506:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	4013      	ands	r3, r2
 800050c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800050e:	68fb      	ldr	r3, [r7, #12]
}
 8000510:	bf00      	nop
 8000512:	3714      	adds	r7, #20
 8000514:	46bd      	mov	sp, r7
 8000516:	bc80      	pop	{r7}
 8000518:	4770      	bx	lr

0800051a <LL_APB2_GRP1_DisableClockSleep>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClockSleep(uint32_t Periphs)
{
 800051a:	b480      	push	{r7}
 800051c:	b083      	sub	sp, #12
 800051e:	af00      	add	r7, sp, #0
 8000520:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2SMENR, Periphs);
 8000522:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000526:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	43db      	mvns	r3, r3
 800052e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000532:	4013      	ands	r3, r2
 8000534:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8000538:	bf00      	nop
 800053a:	370c      	adds	r7, #12
 800053c:	46bd      	mov	sp, r7
 800053e:	bc80      	pop	{r7}
 8000540:	4770      	bx	lr
	...

08000544 <__io_putchar>:

/**
  * @brief Redirect the output of printf to USART2
  * @retval int
  */
int __io_putchar(int ch){
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, &ch, 1, 1000);
 800054c:	1d39      	adds	r1, r7, #4
 800054e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000552:	2201      	movs	r2, #1
 8000554:	4803      	ldr	r0, [pc, #12]	@ (8000564 <__io_putchar+0x20>)
 8000556:	f002 fbc0 	bl	8002cda <HAL_UART_Transmit>
}
 800055a:	bf00      	nop
 800055c:	4618      	mov	r0, r3
 800055e:	3708      	adds	r7, #8
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	20000084 	.word	0x20000084

08000568 <Divide_HCLK1_By_X>:
 * 2, 3, 4, 5, 6, 8, 10, 16, 32, 64, 128, 256, 512.
 * Any other value does not divide SYSCLK (1 does not divide, >512 divides too much,
 * and by default, any unusual value will not divide).
 * @retval None
 */
void Divide_HCLK1_By_X(uint16_t dividerX){
 8000568:	b580      	push	{r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af00      	add	r7, sp, #0
 800056e:	4603      	mov	r3, r0
 8000570:	80fb      	strh	r3, [r7, #6]
    uint8_t HCLK1_prescaler;
    if (dividerX >= 2 || dividerX <= 512){
 8000572:	88fb      	ldrh	r3, [r7, #6]
 8000574:	2b01      	cmp	r3, #1
 8000576:	d804      	bhi.n	8000582 <Divide_HCLK1_By_X+0x1a>
 8000578:	88fb      	ldrh	r3, [r7, #6]
 800057a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800057e:	f200 80cb 	bhi.w	8000718 <Divide_HCLK1_By_X+0x1b0>
      switch(dividerX){
 8000582:	88fb      	ldrh	r3, [r7, #6]
 8000584:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000588:	f000 80bf 	beq.w	800070a <Divide_HCLK1_By_X+0x1a2>
 800058c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000590:	f300 80be 	bgt.w	8000710 <Divide_HCLK1_By_X+0x1a8>
 8000594:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000598:	f000 80b4 	beq.w	8000704 <Divide_HCLK1_By_X+0x19c>
 800059c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80005a0:	f300 80b6 	bgt.w	8000710 <Divide_HCLK1_By_X+0x1a8>
 80005a4:	2b40      	cmp	r3, #64	@ 0x40
 80005a6:	f300 8089 	bgt.w	80006bc <Divide_HCLK1_By_X+0x154>
 80005aa:	2b02      	cmp	r3, #2
 80005ac:	f2c0 80b0 	blt.w	8000710 <Divide_HCLK1_By_X+0x1a8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	2b3e      	cmp	r3, #62	@ 0x3e
 80005b4:	f200 80ac 	bhi.w	8000710 <Divide_HCLK1_By_X+0x1a8>
 80005b8:	a201      	add	r2, pc, #4	@ (adr r2, 80005c0 <Divide_HCLK1_By_X+0x58>)
 80005ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005be:	bf00      	nop
 80005c0:	080006c3 	.word	0x080006c3
 80005c4:	080006c9 	.word	0x080006c9
 80005c8:	080006cf 	.word	0x080006cf
 80005cc:	080006d5 	.word	0x080006d5
 80005d0:	080006db 	.word	0x080006db
 80005d4:	08000711 	.word	0x08000711
 80005d8:	080006e1 	.word	0x080006e1
 80005dc:	08000711 	.word	0x08000711
 80005e0:	080006e7 	.word	0x080006e7
 80005e4:	08000711 	.word	0x08000711
 80005e8:	08000711 	.word	0x08000711
 80005ec:	08000711 	.word	0x08000711
 80005f0:	08000711 	.word	0x08000711
 80005f4:	08000711 	.word	0x08000711
 80005f8:	080006ed 	.word	0x080006ed
 80005fc:	08000711 	.word	0x08000711
 8000600:	08000711 	.word	0x08000711
 8000604:	08000711 	.word	0x08000711
 8000608:	08000711 	.word	0x08000711
 800060c:	08000711 	.word	0x08000711
 8000610:	08000711 	.word	0x08000711
 8000614:	08000711 	.word	0x08000711
 8000618:	08000711 	.word	0x08000711
 800061c:	08000711 	.word	0x08000711
 8000620:	08000711 	.word	0x08000711
 8000624:	08000711 	.word	0x08000711
 8000628:	08000711 	.word	0x08000711
 800062c:	08000711 	.word	0x08000711
 8000630:	08000711 	.word	0x08000711
 8000634:	08000711 	.word	0x08000711
 8000638:	080006f3 	.word	0x080006f3
 800063c:	08000711 	.word	0x08000711
 8000640:	08000711 	.word	0x08000711
 8000644:	08000711 	.word	0x08000711
 8000648:	08000711 	.word	0x08000711
 800064c:	08000711 	.word	0x08000711
 8000650:	08000711 	.word	0x08000711
 8000654:	08000711 	.word	0x08000711
 8000658:	08000711 	.word	0x08000711
 800065c:	08000711 	.word	0x08000711
 8000660:	08000711 	.word	0x08000711
 8000664:	08000711 	.word	0x08000711
 8000668:	08000711 	.word	0x08000711
 800066c:	08000711 	.word	0x08000711
 8000670:	08000711 	.word	0x08000711
 8000674:	08000711 	.word	0x08000711
 8000678:	08000711 	.word	0x08000711
 800067c:	08000711 	.word	0x08000711
 8000680:	08000711 	.word	0x08000711
 8000684:	08000711 	.word	0x08000711
 8000688:	08000711 	.word	0x08000711
 800068c:	08000711 	.word	0x08000711
 8000690:	08000711 	.word	0x08000711
 8000694:	08000711 	.word	0x08000711
 8000698:	08000711 	.word	0x08000711
 800069c:	08000711 	.word	0x08000711
 80006a0:	08000711 	.word	0x08000711
 80006a4:	08000711 	.word	0x08000711
 80006a8:	08000711 	.word	0x08000711
 80006ac:	08000711 	.word	0x08000711
 80006b0:	08000711 	.word	0x08000711
 80006b4:	08000711 	.word	0x08000711
 80006b8:	080006f9 	.word	0x080006f9
 80006bc:	2b80      	cmp	r3, #128	@ 0x80
 80006be:	d01e      	beq.n	80006fe <Divide_HCLK1_By_X+0x196>
 80006c0:	e026      	b.n	8000710 <Divide_HCLK1_By_X+0x1a8>
        case 2:   HCLK1_prescaler = 8;    break; // "1000"
 80006c2:	2308      	movs	r3, #8
 80006c4:	73fb      	strb	r3, [r7, #15]
 80006c6:	e026      	b.n	8000716 <Divide_HCLK1_By_X+0x1ae>
        case 3:   HCLK1_prescaler = 1;    break; // "0001"
 80006c8:	2301      	movs	r3, #1
 80006ca:	73fb      	strb	r3, [r7, #15]
 80006cc:	e023      	b.n	8000716 <Divide_HCLK1_By_X+0x1ae>
        case 4:   HCLK1_prescaler = 9;    break; // "1001"
 80006ce:	2309      	movs	r3, #9
 80006d0:	73fb      	strb	r3, [r7, #15]
 80006d2:	e020      	b.n	8000716 <Divide_HCLK1_By_X+0x1ae>
        case 5:   HCLK1_prescaler = 2;    break; // "0010"
 80006d4:	2302      	movs	r3, #2
 80006d6:	73fb      	strb	r3, [r7, #15]
 80006d8:	e01d      	b.n	8000716 <Divide_HCLK1_By_X+0x1ae>
        case 6:   HCLK1_prescaler = 5;    break; // "0101"
 80006da:	2305      	movs	r3, #5
 80006dc:	73fb      	strb	r3, [r7, #15]
 80006de:	e01a      	b.n	8000716 <Divide_HCLK1_By_X+0x1ae>
        case 8:   HCLK1_prescaler = 10;   break; // "1010"
 80006e0:	230a      	movs	r3, #10
 80006e2:	73fb      	strb	r3, [r7, #15]
 80006e4:	e017      	b.n	8000716 <Divide_HCLK1_By_X+0x1ae>
        case 10:  HCLK1_prescaler = 6;    break; // "0110"
 80006e6:	2306      	movs	r3, #6
 80006e8:	73fb      	strb	r3, [r7, #15]
 80006ea:	e014      	b.n	8000716 <Divide_HCLK1_By_X+0x1ae>
        case 16:  HCLK1_prescaler = 11;   break; // "1011"
 80006ec:	230b      	movs	r3, #11
 80006ee:	73fb      	strb	r3, [r7, #15]
 80006f0:	e011      	b.n	8000716 <Divide_HCLK1_By_X+0x1ae>
        case 32:  HCLK1_prescaler = 7;    break; // "0111"
 80006f2:	2307      	movs	r3, #7
 80006f4:	73fb      	strb	r3, [r7, #15]
 80006f6:	e00e      	b.n	8000716 <Divide_HCLK1_By_X+0x1ae>
        case 64:  HCLK1_prescaler = 12;   break; // "1100"
 80006f8:	230c      	movs	r3, #12
 80006fa:	73fb      	strb	r3, [r7, #15]
 80006fc:	e00b      	b.n	8000716 <Divide_HCLK1_By_X+0x1ae>
        case 128: HCLK1_prescaler = 13;   break; // "1101"
 80006fe:	230d      	movs	r3, #13
 8000700:	73fb      	strb	r3, [r7, #15]
 8000702:	e008      	b.n	8000716 <Divide_HCLK1_By_X+0x1ae>
        case 256: HCLK1_prescaler = 14;   break; // "1110"
 8000704:	230e      	movs	r3, #14
 8000706:	73fb      	strb	r3, [r7, #15]
 8000708:	e005      	b.n	8000716 <Divide_HCLK1_By_X+0x1ae>
        case 512: HCLK1_prescaler = 15;   break; // "1111"
 800070a:	230f      	movs	r3, #15
 800070c:	73fb      	strb	r3, [r7, #15]
 800070e:	e002      	b.n	8000716 <Divide_HCLK1_By_X+0x1ae>
        default:  HCLK1_prescaler = 0; break; // "0000", no division
 8000710:	2300      	movs	r3, #0
 8000712:	73fb      	strb	r3, [r7, #15]
 8000714:	bf00      	nop
      switch(dividerX){
 8000716:	e001      	b.n	800071c <Divide_HCLK1_By_X+0x1b4>
      }
    } else HCLK1_prescaler = 0; // no division
 8000718:	2300      	movs	r3, #0
 800071a:	73fb      	strb	r3, [r7, #15]

    // Reset the current prescaler value into bits 7 to 4 (HPRE)
    RCC -> CFGR &= ~(0xF << 4);
 800071c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000720:	689b      	ldr	r3, [r3, #8]
 8000722:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000726:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800072a:	6093      	str	r3, [r2, #8]
    // Insert the new prescaler value
    RCC -> CFGR |= (HCLK1_prescaler << 4);
 800072c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000730:	689a      	ldr	r2, [r3, #8]
 8000732:	7bfb      	ldrb	r3, [r7, #15]
 8000734:	011b      	lsls	r3, r3, #4
 8000736:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800073a:	4313      	orrs	r3, r2
 800073c:	608b      	str	r3, [r1, #8]
    /* Wait for the hardware to aknowledge the new prescaler value
     * using HCLK1 prescaler flag (HPREF) on bit 16:
     * 0 → HCLK1 prescaler value not yet applied
     * 1 → HCLK1 prescaler value applied (RCC -> CFGR & (1 << 16))
     * OR using LL function `LL_RCC_IsActiveFlag_HPRE(void)`
     */ while(!(LL_RCC_IsActiveFlag_HPRE())){}
 800073e:	bf00      	nop
 8000740:	f7ff fec2 	bl	80004c8 <LL_RCC_IsActiveFlag_HPRE>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d0fa      	beq.n	8000740 <Divide_HCLK1_By_X+0x1d8>
}
 800074a:	bf00      	nop
 800074c:	bf00      	nop
 800074e:	3710      	adds	r7, #16
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <Enter_LowPowerRunMode>:
/** @brief Makes the CPU goes into low power run mode,
  * according to the datasheet guidance.
  * For this first test, HSE32 is not used.
  * @retval None
  */
void Enter_LowPowerRunMode(void){
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	// 1. set the FPDR bit in PWR_CR1.
	HAL_PWREx_EnableFlashPowerDown(PWR_FLASHPD_LPRUN);
 8000758:	2010      	movs	r0, #16
 800075a:	f000 fedb 	bl	8001514 <HAL_PWREx_EnableFlashPowerDown>

	// 3. Decrease the HCLK clock frequencies below 2 MHz.
	// 48 MHz / X ≤ 2 MHz → X ≥ 24; but 24 is not a usual value of divider
	// among 1, 2, 3, 4, 5, 6, 8, 10, 16, 32, 64, 128, 256 and 512.
	// So we take the next higher value, 32.
	Divide_HCLK1_By_X(32);
 800075e:	2020      	movs	r0, #32
 8000760:	f7ff ff02 	bl	8000568 <Divide_HCLK1_By_X>

	// 4. Set the LPR bit in PWR_CR1.
	HAL_PWREx_EnableLowPowerRunMode();
 8000764:	f000 fef0 	bl	8001548 <HAL_PWREx_EnableLowPowerRunMode>

	// 5. Check if the low-power regulator is ready,
	// by checking the REGLPS bit (PWR_SR2, bit 8)
	while(!(LL_PWR_IsActiveFlag_REGLPS())){}
 8000768:	bf00      	nop
 800076a:	f7ff fe9b 	bl	80004a4 <LL_PWR_IsActiveFlag_REGLPS>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d0fa      	beq.n	800076a <Enter_LowPowerRunMode+0x16>
}
 8000774:	bf00      	nop
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}

0800077a <Exit_LowPowerRunMode>:
  * HCLK frequency over 2 MHz, can take the following values:
  * 1, 2, 3, 4, 5, 6, 8, 10, 16, 32, 64, 128, 256, 512, but MUST BE lower than 24;
  * e.g. among the nine first values.
  * @retval None
  */
void Exit_LowPowerRunMode(uint8_t newHCLKFreq){
 800077a:	b580      	push	{r7, lr}
 800077c:	b082      	sub	sp, #8
 800077e:	af00      	add	r7, sp, #0
 8000780:	4603      	mov	r3, r0
 8000782:	71fb      	strb	r3, [r7, #7]
	// 1. Clear the LPR bit in PWR_CR1, and,
	// 2. wait until REGLPF bit is cleared in PWR_SR2.
	HAL_PWREx_DisableLowPowerRunMode();
 8000784:	f000 feee 	bl	8001564 <HAL_PWREx_DisableLowPowerRunMode>

	// 3. Increase the HCLK clock frequencies over 2 MHz.
	// 48 MHz / X ≥ 2 MHz → X ≤ 24; but 24 is not
	// a usual value of divider (1, 2, 3, 4, 5, 6, 8, 10, 16, 32, 64, 128, 256, 512).
	// So we can take one of the nine lower values, 1 to 16.
	Divide_HCLK1_By_X(newHCLKFreq);
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	b29b      	uxth	r3, r3
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff feeb 	bl	8000568 <Divide_HCLK1_By_X>
	// (HSE32 is not used here, so we skip this optionnal step.)

	// 4. Reinitialize the USART2 peripheral (since changing the HCLK frequency
	// impacts the related peripherals, such as USART2).
	MX_USART2_UART_Init();
 8000792:	f000 f8a5 	bl	80008e0 <MX_USART2_UART_Init>
}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
	...

080007a0 <delay>:

void delay(uint32_t ms)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
    uint32_t freq = HAL_RCC_GetHCLKFreq();
 80007a8:	f001 ff2e 	bl	8002608 <HAL_RCC_GetHCLKFreq>
 80007ac:	60b8      	str	r0, [r7, #8]
    uint32_t count = (freq / 4000) * ms; // 4 cycles per loop (approx.)
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	4a09      	ldr	r2, [pc, #36]	@ (80007d8 <delay+0x38>)
 80007b2:	fba2 2303 	umull	r2, r3, r2, r3
 80007b6:	0a1a      	lsrs	r2, r3, #8
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	fb02 f303 	mul.w	r3, r2, r3
 80007be:	60fb      	str	r3, [r7, #12]
    while(count--) {
 80007c0:	e000      	b.n	80007c4 <delay+0x24>
        __NOP();
 80007c2:	bf00      	nop
    while(count--) {
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	1e5a      	subs	r2, r3, #1
 80007c8:	60fa      	str	r2, [r7, #12]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d1f9      	bne.n	80007c2 <delay+0x22>
    }
}
 80007ce:	bf00      	nop
 80007d0:	bf00      	nop
 80007d2:	3710      	adds	r7, #16
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	10624dd3 	.word	0x10624dd3

080007dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e0:	f000 fb54 	bl	8000e8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e4:	f000 f81c 	bl	8000820 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007e8:	f000 f8c6 	bl	8000978 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007ec:	f000 f878 	bl	80008e0 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	  printf("\r\n\r\nTest d'une appli mode veille sur STM32\r\n");
 80007f0:	4808      	ldr	r0, [pc, #32]	@ (8000814 <main+0x38>)
 80007f2:	f003 f943 	bl	8003a7c <puts>

  while (1)
  {
	  printf("Exécution de la boucle While\r\n");
 80007f6:	4808      	ldr	r0, [pc, #32]	@ (8000818 <main+0x3c>)
 80007f8:	f003 f940 	bl	8003a7c <puts>
	  printf("Le µCU entre en mode Low Power Run pendant x secondes\r\n\r\n");
 80007fc:	4807      	ldr	r0, [pc, #28]	@ (800081c <main+0x40>)
 80007fe:	f003 f93d 	bl	8003a7c <puts>
	  __HAL_RCC_USART1_CLK_SLEEP_DISABLE(); // Clock-gating the USART2 peripheral
 8000802:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000806:	f7ff fe88 	bl	800051a <LL_APB2_GRP1_DisableClockSleep>

	  Enter_LowPowerRunMode();
 800080a:	f7ff ffa3 	bl	8000754 <Enter_LowPowerRunMode>
	  printf("Exécution de la boucle While\r\n");
 800080e:	bf00      	nop
 8000810:	e7f1      	b.n	80007f6 <main+0x1a>
 8000812:	bf00      	nop
 8000814:	080041b4 	.word	0x080041b4
 8000818:	080041e0 	.word	0x080041e0
 800081c:	08004200 	.word	0x08004200

08000820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b09a      	sub	sp, #104	@ 0x68
 8000824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000826:	f107 0320 	add.w	r3, r7, #32
 800082a:	2248      	movs	r2, #72	@ 0x48
 800082c:	2100      	movs	r1, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f003 fa04 	bl	8003c3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
 8000840:	611a      	str	r2, [r3, #16]
 8000842:	615a      	str	r2, [r3, #20]
 8000844:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000846:	4b25      	ldr	r3, [pc, #148]	@ (80008dc <SystemClock_Config+0xbc>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800084e:	4a23      	ldr	r2, [pc, #140]	@ (80008dc <SystemClock_Config+0xbc>)
 8000850:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000854:	6013      	str	r3, [r2, #0]
 8000856:	4b21      	ldr	r3, [pc, #132]	@ (80008dc <SystemClock_Config+0xbc>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800085e:	603b      	str	r3, [r7, #0]
 8000860:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000862:	2320      	movs	r3, #32
 8000864:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000866:	2301      	movs	r3, #1
 8000868:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800086a:	2300      	movs	r3, #0
 800086c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800086e:	2360      	movs	r3, #96	@ 0x60
 8000870:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000872:	2302      	movs	r3, #2
 8000874:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000876:	2301      	movs	r3, #1
 8000878:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800087a:	2300      	movs	r3, #0
 800087c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 24;
 800087e:	2318      	movs	r3, #24
 8000880:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000882:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000886:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000888:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800088c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800088e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000892:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000894:	f107 0320 	add.w	r3, r7, #32
 8000898:	4618      	mov	r0, r3
 800089a:	f001 f951 	bl	8001b40 <HAL_RCC_OscConfig>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80008a4:	f000 f960 	bl	8000b68 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80008a8:	234f      	movs	r3, #79	@ 0x4f
 80008aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ac:	2303      	movs	r3, #3
 80008ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b0:	2300      	movs	r3, #0
 80008b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008b4:	2300      	movs	r3, #0
 80008b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008b8:	2300      	movs	r3, #0
 80008ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80008bc:	2300      	movs	r3, #0
 80008be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	2102      	movs	r1, #2
 80008c4:	4618      	mov	r0, r3
 80008c6:	f001 fcbd 	bl	8002244 <HAL_RCC_ClockConfig>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80008d0:	f000 f94a 	bl	8000b68 <Error_Handler>
  }
}
 80008d4:	bf00      	nop
 80008d6:	3768      	adds	r7, #104	@ 0x68
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	58000400 	.word	0x58000400

080008e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008e4:	4b22      	ldr	r3, [pc, #136]	@ (8000970 <MX_USART2_UART_Init+0x90>)
 80008e6:	4a23      	ldr	r2, [pc, #140]	@ (8000974 <MX_USART2_UART_Init+0x94>)
 80008e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008ea:	4b21      	ldr	r3, [pc, #132]	@ (8000970 <MX_USART2_UART_Init+0x90>)
 80008ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008f2:	4b1f      	ldr	r3, [pc, #124]	@ (8000970 <MX_USART2_UART_Init+0x90>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008f8:	4b1d      	ldr	r3, [pc, #116]	@ (8000970 <MX_USART2_UART_Init+0x90>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008fe:	4b1c      	ldr	r3, [pc, #112]	@ (8000970 <MX_USART2_UART_Init+0x90>)
 8000900:	2200      	movs	r2, #0
 8000902:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000904:	4b1a      	ldr	r3, [pc, #104]	@ (8000970 <MX_USART2_UART_Init+0x90>)
 8000906:	220c      	movs	r2, #12
 8000908:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090a:	4b19      	ldr	r3, [pc, #100]	@ (8000970 <MX_USART2_UART_Init+0x90>)
 800090c:	2200      	movs	r2, #0
 800090e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000910:	4b17      	ldr	r3, [pc, #92]	@ (8000970 <MX_USART2_UART_Init+0x90>)
 8000912:	2200      	movs	r2, #0
 8000914:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000916:	4b16      	ldr	r3, [pc, #88]	@ (8000970 <MX_USART2_UART_Init+0x90>)
 8000918:	2200      	movs	r2, #0
 800091a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800091c:	4b14      	ldr	r3, [pc, #80]	@ (8000970 <MX_USART2_UART_Init+0x90>)
 800091e:	2200      	movs	r2, #0
 8000920:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000922:	4b13      	ldr	r3, [pc, #76]	@ (8000970 <MX_USART2_UART_Init+0x90>)
 8000924:	2200      	movs	r2, #0
 8000926:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000928:	4811      	ldr	r0, [pc, #68]	@ (8000970 <MX_USART2_UART_Init+0x90>)
 800092a:	f002 f986 	bl	8002c3a <HAL_UART_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000934:	f000 f918 	bl	8000b68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000938:	2100      	movs	r1, #0
 800093a:	480d      	ldr	r0, [pc, #52]	@ (8000970 <MX_USART2_UART_Init+0x90>)
 800093c:	f002 febd 	bl	80036ba <HAL_UARTEx_SetTxFifoThreshold>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000946:	f000 f90f 	bl	8000b68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800094a:	2100      	movs	r1, #0
 800094c:	4808      	ldr	r0, [pc, #32]	@ (8000970 <MX_USART2_UART_Init+0x90>)
 800094e:	f002 fef2 	bl	8003736 <HAL_UARTEx_SetRxFifoThreshold>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000958:	f000 f906 	bl	8000b68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800095c:	4804      	ldr	r0, [pc, #16]	@ (8000970 <MX_USART2_UART_Init+0x90>)
 800095e:	f002 fe74 	bl	800364a <HAL_UARTEx_DisableFifoMode>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000968:	f000 f8fe 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20000084 	.word	0x20000084
 8000974:	40004400 	.word	0x40004400

08000978 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b086      	sub	sp, #24
 800097c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098c:	2001      	movs	r0, #1
 800098e:	f7ff fdac 	bl	80004ea <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000992:	2002      	movs	r0, #2
 8000994:	f7ff fda9 	bl	80004ea <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000998:	2004      	movs	r0, #4
 800099a:	f7ff fda6 	bl	80004ea <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, blue_LED_Pin|green_LED_Pin, GPIO_PIN_RESET);
 800099e:	2200      	movs	r2, #0
 80009a0:	f44f 4102 	mov.w	r1, #33280	@ 0x8200
 80009a4:	482b      	ldr	r0, [pc, #172]	@ (8000a54 <MX_GPIO_Init+0xdc>)
 80009a6:	f000 fd53 	bl	8001450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2138      	movs	r1, #56	@ 0x38
 80009ae:	482a      	ldr	r0, [pc, #168]	@ (8000a58 <MX_GPIO_Init+0xe0>)
 80009b0:	f000 fd4e 	bl	8001450 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : blue_LED_Pin green_LED_Pin */
  GPIO_InitStruct.Pin = blue_LED_Pin|green_LED_Pin;
 80009b4:	f44f 4302 	mov.w	r3, #33280	@ 0x8200
 80009b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ba:	2301      	movs	r3, #1
 80009bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	2300      	movs	r3, #0
 80009c4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c6:	1d3b      	adds	r3, r7, #4
 80009c8:	4619      	mov	r1, r3
 80009ca:	4822      	ldr	r0, [pc, #136]	@ (8000a54 <MX_GPIO_Init+0xdc>)
 80009cc:	f000 fbe0 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : FE_CTRL3_Pin FE_CTRL2_Pin FE_CTRL1_Pin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 80009d0:	2338      	movs	r3, #56	@ 0x38
 80009d2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d4:	2301      	movs	r3, #1
 80009d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009dc:	2303      	movs	r3, #3
 80009de:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009e0:	1d3b      	adds	r3, r7, #4
 80009e2:	4619      	mov	r1, r3
 80009e4:	481c      	ldr	r0, [pc, #112]	@ (8000a58 <MX_GPIO_Init+0xe0>)
 80009e6:	f000 fbd3 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : UB1_Pin UB2_Pin */
  GPIO_InitStruct.Pin = UB1_Pin|UB2_Pin;
 80009ea:	2303      	movs	r3, #3
 80009ec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009ee:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80009f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009f4:	2301      	movs	r3, #1
 80009f6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f8:	1d3b      	adds	r3, r7, #4
 80009fa:	4619      	mov	r1, r3
 80009fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a00:	f000 fbc6 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pin : UB3_Pin */
  GPIO_InitStruct.Pin = UB3_Pin;
 8000a04:	2340      	movs	r3, #64	@ 0x40
 8000a06:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a08:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a0c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(UB3_GPIO_Port, &GPIO_InitStruct);
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	4619      	mov	r1, r3
 8000a16:	4810      	ldr	r0, [pc, #64]	@ (8000a58 <MX_GPIO_Init+0xe0>)
 8000a18:	f000 fbba 	bl	8001190 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	2100      	movs	r1, #0
 8000a20:	2006      	movs	r0, #6
 8000a22:	f000 fb80 	bl	8001126 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a26:	2006      	movs	r0, #6
 8000a28:	f000 fb97 	bl	800115a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	2100      	movs	r1, #0
 8000a30:	2007      	movs	r0, #7
 8000a32:	f000 fb78 	bl	8001126 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000a36:	2007      	movs	r0, #7
 8000a38:	f000 fb8f 	bl	800115a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2100      	movs	r1, #0
 8000a40:	2016      	movs	r0, #22
 8000a42:	f000 fb70 	bl	8001126 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a46:	2016      	movs	r0, #22
 8000a48:	f000 fb87 	bl	800115a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a4c:	bf00      	nop
 8000a4e:	3718      	adds	r7, #24
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	48000400 	.word	0x48000400
 8000a58:	48000800 	.word	0x48000800

08000a5c <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 4 */
/** @brief User-defined ISR when pressing any of the buttons,
  * text is displayed
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	80fb      	strh	r3, [r7, #6]
	// Exit the low power run mode before doing anything else;
	// we're going back to 48 MHz, for this first test.
	Exit_LowPowerRunMode(1);
 8000a66:	2001      	movs	r0, #1
 8000a68:	f7ff fe87 	bl	800077a <Exit_LowPowerRunMode>

	// If user button 1 (UB1, on PA0) is pressed,
	// the according text is displayed
	if (GPIO_Pin == UB1_Pin){ printf("Sortie par pression du Bouton 1\r\n");
 8000a6c:	88fb      	ldrh	r3, [r7, #6]
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	d122      	bne.n	8000ab8 <HAL_GPIO_EXTI_Callback+0x5c>
 8000a72:	4839      	ldr	r0, [pc, #228]	@ (8000b58 <HAL_GPIO_EXTI_Callback+0xfc>)
 8000a74:	f003 f802 	bl	8003a7c <puts>
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15); delay(200);
 8000a78:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a7c:	4837      	ldr	r0, [pc, #220]	@ (8000b5c <HAL_GPIO_EXTI_Callback+0x100>)
 8000a7e:	f000 fcfe 	bl	800147e <HAL_GPIO_TogglePin>
 8000a82:	20c8      	movs	r0, #200	@ 0xc8
 8000a84:	f7ff fe8c 	bl	80007a0 <delay>
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15); delay(200);
 8000a88:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a8c:	4833      	ldr	r0, [pc, #204]	@ (8000b5c <HAL_GPIO_EXTI_Callback+0x100>)
 8000a8e:	f000 fcf6 	bl	800147e <HAL_GPIO_TogglePin>
 8000a92:	20c8      	movs	r0, #200	@ 0xc8
 8000a94:	f7ff fe84 	bl	80007a0 <delay>
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15); delay(200);
 8000a98:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a9c:	482f      	ldr	r0, [pc, #188]	@ (8000b5c <HAL_GPIO_EXTI_Callback+0x100>)
 8000a9e:	f000 fcee 	bl	800147e <HAL_GPIO_TogglePin>
 8000aa2:	20c8      	movs	r0, #200	@ 0xc8
 8000aa4:	f7ff fe7c 	bl	80007a0 <delay>
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15); delay(200);
 8000aa8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000aac:	482b      	ldr	r0, [pc, #172]	@ (8000b5c <HAL_GPIO_EXTI_Callback+0x100>)
 8000aae:	f000 fce6 	bl	800147e <HAL_GPIO_TogglePin>
 8000ab2:	20c8      	movs	r0, #200	@ 0xc8
 8000ab4:	f7ff fe74 	bl	80007a0 <delay>
	}

	// If user button 2 (UB2, on PA1) is pressed,
	// the according text is displayed
	if (GPIO_Pin == UB2_Pin){ printf("Sortie par pression du Bouton 2\r\n");
 8000ab8:	88fb      	ldrh	r3, [r7, #6]
 8000aba:	2b02      	cmp	r3, #2
 8000abc:	d122      	bne.n	8000b04 <HAL_GPIO_EXTI_Callback+0xa8>
 8000abe:	4828      	ldr	r0, [pc, #160]	@ (8000b60 <HAL_GPIO_EXTI_Callback+0x104>)
 8000ac0:	f002 ffdc 	bl	8003a7c <puts>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15); delay(200);
 8000ac4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ac8:	4824      	ldr	r0, [pc, #144]	@ (8000b5c <HAL_GPIO_EXTI_Callback+0x100>)
 8000aca:	f000 fcd8 	bl	800147e <HAL_GPIO_TogglePin>
 8000ace:	20c8      	movs	r0, #200	@ 0xc8
 8000ad0:	f7ff fe66 	bl	80007a0 <delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15); delay(200);
 8000ad4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ad8:	4820      	ldr	r0, [pc, #128]	@ (8000b5c <HAL_GPIO_EXTI_Callback+0x100>)
 8000ada:	f000 fcd0 	bl	800147e <HAL_GPIO_TogglePin>
 8000ade:	20c8      	movs	r0, #200	@ 0xc8
 8000ae0:	f7ff fe5e 	bl	80007a0 <delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9); delay(200);
 8000ae4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ae8:	481c      	ldr	r0, [pc, #112]	@ (8000b5c <HAL_GPIO_EXTI_Callback+0x100>)
 8000aea:	f000 fcc8 	bl	800147e <HAL_GPIO_TogglePin>
 8000aee:	20c8      	movs	r0, #200	@ 0xc8
 8000af0:	f7ff fe56 	bl	80007a0 <delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9); delay(200);
 8000af4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000af8:	4818      	ldr	r0, [pc, #96]	@ (8000b5c <HAL_GPIO_EXTI_Callback+0x100>)
 8000afa:	f000 fcc0 	bl	800147e <HAL_GPIO_TogglePin>
 8000afe:	20c8      	movs	r0, #200	@ 0xc8
 8000b00:	f7ff fe4e 	bl	80007a0 <delay>
	}

	// If user button 3 (UB3, on PC6) is pressed,
	// the according text is displayed
	if (GPIO_Pin == UB3_Pin){ printf("Sortie par pression du Bouton 3\r\n");
 8000b04:	88fb      	ldrh	r3, [r7, #6]
 8000b06:	2b40      	cmp	r3, #64	@ 0x40
 8000b08:	d122      	bne.n	8000b50 <HAL_GPIO_EXTI_Callback+0xf4>
 8000b0a:	4816      	ldr	r0, [pc, #88]	@ (8000b64 <HAL_GPIO_EXTI_Callback+0x108>)
 8000b0c:	f002 ffb6 	bl	8003a7c <puts>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9); delay(200);
 8000b10:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b14:	4811      	ldr	r0, [pc, #68]	@ (8000b5c <HAL_GPIO_EXTI_Callback+0x100>)
 8000b16:	f000 fcb2 	bl	800147e <HAL_GPIO_TogglePin>
 8000b1a:	20c8      	movs	r0, #200	@ 0xc8
 8000b1c:	f7ff fe40 	bl	80007a0 <delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9); delay(200);
 8000b20:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b24:	480d      	ldr	r0, [pc, #52]	@ (8000b5c <HAL_GPIO_EXTI_Callback+0x100>)
 8000b26:	f000 fcaa 	bl	800147e <HAL_GPIO_TogglePin>
 8000b2a:	20c8      	movs	r0, #200	@ 0xc8
 8000b2c:	f7ff fe38 	bl	80007a0 <delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9); delay(200);
 8000b30:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b34:	4809      	ldr	r0, [pc, #36]	@ (8000b5c <HAL_GPIO_EXTI_Callback+0x100>)
 8000b36:	f000 fca2 	bl	800147e <HAL_GPIO_TogglePin>
 8000b3a:	20c8      	movs	r0, #200	@ 0xc8
 8000b3c:	f7ff fe30 	bl	80007a0 <delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9); delay(200);
 8000b40:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b44:	4805      	ldr	r0, [pc, #20]	@ (8000b5c <HAL_GPIO_EXTI_Callback+0x100>)
 8000b46:	f000 fc9a 	bl	800147e <HAL_GPIO_TogglePin>
 8000b4a:	20c8      	movs	r0, #200	@ 0xc8
 8000b4c:	f7ff fe28 	bl	80007a0 <delay>
	}
}
 8000b50:	bf00      	nop
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	0800423c 	.word	0x0800423c
 8000b5c:	48000400 	.word	0x48000400
 8000b60:	08004260 	.word	0x08004260
 8000b64:	08004284 	.word	0x08004284

08000b68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b6c:	b672      	cpsid	i
}
 8000b6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <Error_Handler+0x8>

08000b74 <LL_AHB2_GRP1_EnableClock>:
{
 8000b74:	b480      	push	{r7}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b80:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b82:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b90:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4013      	ands	r3, r2
 8000b96:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b98:	68fb      	ldr	r3, [r7, #12]
}
 8000b9a:	bf00      	nop
 8000b9c:	3714      	adds	r7, #20
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bc80      	pop	{r7}
 8000ba2:	4770      	bx	lr

08000ba4 <LL_APB1_GRP1_EnableClock>:
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000bac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000bb0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000bb2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000bbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000bc0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bc8:	68fb      	ldr	r3, [r7, #12]
}
 8000bca:	bf00      	nop
 8000bcc:	3714      	adds	r7, #20
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc80      	pop	{r7}
 8000bd2:	4770      	bx	lr

08000bd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bc80      	pop	{r7}
 8000bde:	4770      	bx	lr

08000be0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b096      	sub	sp, #88	@ 0x58
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
 8000bf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bf8:	f107 030c 	add.w	r3, r7, #12
 8000bfc:	2238      	movs	r2, #56	@ 0x38
 8000bfe:	2100      	movs	r1, #0
 8000c00:	4618      	mov	r0, r3
 8000c02:	f003 f81b 	bl	8003c3c <memset>
  if(huart->Instance==USART2)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a17      	ldr	r2, [pc, #92]	@ (8000c68 <HAL_UART_MspInit+0x88>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d126      	bne.n	8000c5e <HAL_UART_MspInit+0x7e>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c10:	2302      	movs	r3, #2
 8000c12:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c14:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 8000c18:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c1a:	f107 030c 	add.w	r3, r7, #12
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f001 fed0 	bl	80029c4 <HAL_RCCEx_PeriphCLKConfig>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c2a:	f7ff ff9d 	bl	8000b68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c2e:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000c32:	f7ff ffb7 	bl	8000ba4 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c36:	2001      	movs	r0, #1
 8000c38:	f7ff ff9c 	bl	8000b74 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8000c3c:	230c      	movs	r3, #12
 8000c3e:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c40:	2302      	movs	r3, #2
 8000c42:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c4c:	2307      	movs	r3, #7
 8000c4e:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c50:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000c54:	4619      	mov	r1, r3
 8000c56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c5a:	f000 fa99 	bl	8001190 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000c5e:	bf00      	nop
 8000c60:	3758      	adds	r7, #88	@ 0x58
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40004400 	.word	0x40004400

08000c6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c70:	bf00      	nop
 8000c72:	e7fd      	b.n	8000c70 <NMI_Handler+0x4>

08000c74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c78:	bf00      	nop
 8000c7a:	e7fd      	b.n	8000c78 <HardFault_Handler+0x4>

08000c7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c80:	bf00      	nop
 8000c82:	e7fd      	b.n	8000c80 <MemManage_Handler+0x4>

08000c84 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c88:	bf00      	nop
 8000c8a:	e7fd      	b.n	8000c88 <BusFault_Handler+0x4>

08000c8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c90:	bf00      	nop
 8000c92:	e7fd      	b.n	8000c90 <UsageFault_Handler+0x4>

08000c94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bc80      	pop	{r7}
 8000c9e:	4770      	bx	lr

08000ca0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bc80      	pop	{r7}
 8000caa:	4770      	bx	lr

08000cac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bc80      	pop	{r7}
 8000cb6:	4770      	bx	lr

08000cb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cbc:	f000 f940 	bl	8000f40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line 0 Interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UB1_Pin);
 8000cc8:	2001      	movs	r0, #1
 8000cca:	f000 fbf1 	bl	80014b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UB2_Pin);
 8000cd6:	2002      	movs	r0, #2
 8000cd8:	f000 fbea 	bl	80014b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [9:5] Interrupt.
  */
void EXTI9_5_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UB3_Pin);
 8000ce4:	2040      	movs	r0, #64	@ 0x40
 8000ce6:	f000 fbe3 	bl	80014b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}

08000cee <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b086      	sub	sp, #24
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	60f8      	str	r0, [r7, #12]
 8000cf6:	60b9      	str	r1, [r7, #8]
 8000cf8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	617b      	str	r3, [r7, #20]
 8000cfe:	e00a      	b.n	8000d16 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d00:	f3af 8000 	nop.w
 8000d04:	4601      	mov	r1, r0
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	1c5a      	adds	r2, r3, #1
 8000d0a:	60ba      	str	r2, [r7, #8]
 8000d0c:	b2ca      	uxtb	r2, r1
 8000d0e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	3301      	adds	r3, #1
 8000d14:	617b      	str	r3, [r7, #20]
 8000d16:	697a      	ldr	r2, [r7, #20]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	429a      	cmp	r2, r3
 8000d1c:	dbf0      	blt.n	8000d00 <_read+0x12>
  }

  return len;
 8000d1e:	687b      	ldr	r3, [r7, #4]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3718      	adds	r7, #24
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]
 8000d38:	e009      	b.n	8000d4e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	1c5a      	adds	r2, r3, #1
 8000d3e:	60ba      	str	r2, [r7, #8]
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff fbfe 	bl	8000544 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	617b      	str	r3, [r7, #20]
 8000d4e:	697a      	ldr	r2, [r7, #20]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	429a      	cmp	r2, r3
 8000d54:	dbf1      	blt.n	8000d3a <_write+0x12>
  }
  return len;
 8000d56:	687b      	ldr	r3, [r7, #4]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3718      	adds	r7, #24
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <_close>:

int _close(int file)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bc80      	pop	{r7}
 8000d74:	4770      	bx	lr

08000d76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d76:	b480      	push	{r7}
 8000d78:	b083      	sub	sp, #12
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
 8000d7e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d86:	605a      	str	r2, [r3, #4]
  return 0;
 8000d88:	2300      	movs	r3, #0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bc80      	pop	{r7}
 8000d92:	4770      	bx	lr

08000d94 <_isatty>:

int _isatty(int file)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d9c:	2301      	movs	r3, #1
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bc80      	pop	{r7}
 8000da6:	4770      	bx	lr

08000da8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3714      	adds	r7, #20
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr

08000dc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dc8:	4a14      	ldr	r2, [pc, #80]	@ (8000e1c <_sbrk+0x5c>)
 8000dca:	4b15      	ldr	r3, [pc, #84]	@ (8000e20 <_sbrk+0x60>)
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dd4:	4b13      	ldr	r3, [pc, #76]	@ (8000e24 <_sbrk+0x64>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d102      	bne.n	8000de2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ddc:	4b11      	ldr	r3, [pc, #68]	@ (8000e24 <_sbrk+0x64>)
 8000dde:	4a12      	ldr	r2, [pc, #72]	@ (8000e28 <_sbrk+0x68>)
 8000de0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000de2:	4b10      	ldr	r3, [pc, #64]	@ (8000e24 <_sbrk+0x64>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4413      	add	r3, r2
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d207      	bcs.n	8000e00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000df0:	f002 ff72 	bl	8003cd8 <__errno>
 8000df4:	4603      	mov	r3, r0
 8000df6:	220c      	movs	r2, #12
 8000df8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8000dfe:	e009      	b.n	8000e14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e00:	4b08      	ldr	r3, [pc, #32]	@ (8000e24 <_sbrk+0x64>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e06:	4b07      	ldr	r3, [pc, #28]	@ (8000e24 <_sbrk+0x64>)
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4413      	add	r3, r2
 8000e0e:	4a05      	ldr	r2, [pc, #20]	@ (8000e24 <_sbrk+0x64>)
 8000e10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e12:	68fb      	ldr	r3, [r7, #12]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3718      	adds	r7, #24
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	20010000 	.word	0x20010000
 8000e20:	00000400 	.word	0x00000400
 8000e24:	20000118 	.word	0x20000118
 8000e28:	20000270 	.word	0x20000270

08000e2c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bc80      	pop	{r7}
 8000e36:	4770      	bx	lr

08000e38 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e38:	480d      	ldr	r0, [pc, #52]	@ (8000e70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e3a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e3c:	f7ff fff6 	bl	8000e2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e40:	480c      	ldr	r0, [pc, #48]	@ (8000e74 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e42:	490d      	ldr	r1, [pc, #52]	@ (8000e78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e44:	4a0d      	ldr	r2, [pc, #52]	@ (8000e7c <LoopForever+0xe>)
  movs r3, #0
 8000e46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e48:	e002      	b.n	8000e50 <LoopCopyDataInit>

08000e4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e4e:	3304      	adds	r3, #4

08000e50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e54:	d3f9      	bcc.n	8000e4a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e56:	4a0a      	ldr	r2, [pc, #40]	@ (8000e80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e58:	4c0a      	ldr	r4, [pc, #40]	@ (8000e84 <LoopForever+0x16>)
  movs r3, #0
 8000e5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e5c:	e001      	b.n	8000e62 <LoopFillZerobss>

08000e5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e60:	3204      	adds	r2, #4

08000e62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e64:	d3fb      	bcc.n	8000e5e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e66:	f002 ff3d 	bl	8003ce4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e6a:	f7ff fcb7 	bl	80007dc <main>

08000e6e <LoopForever>:

LoopForever:
    b LoopForever
 8000e6e:	e7fe      	b.n	8000e6e <LoopForever>
  ldr   r0, =_estack
 8000e70:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000e74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e78:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e7c:	0800439c 	.word	0x0800439c
  ldr r2, =_sbss
 8000e80:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e84:	2000026c 	.word	0x2000026c

08000e88 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e88:	e7fe      	b.n	8000e88 <ADC_IRQHandler>
	...

08000e8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e92:	2300      	movs	r3, #0
 8000e94:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e96:	2003      	movs	r0, #3
 8000e98:	f000 f93a 	bl	8001110 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000e9c:	f001 fbb4 	bl	8002608 <HAL_RCC_GetHCLKFreq>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	4a09      	ldr	r2, [pc, #36]	@ (8000ec8 <HAL_Init+0x3c>)
 8000ea4:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ea6:	2000      	movs	r0, #0
 8000ea8:	f000 f810 	bl	8000ecc <HAL_InitTick>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d002      	beq.n	8000eb8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	71fb      	strb	r3, [r7, #7]
 8000eb6:	e001      	b.n	8000ebc <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000eb8:	f7ff fe8c 	bl	8000bd4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ebc:	79fb      	ldrb	r3, [r7, #7]
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000000 	.word	0x20000000

08000ecc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ed8:	4b17      	ldr	r3, [pc, #92]	@ (8000f38 <HAL_InitTick+0x6c>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d024      	beq.n	8000f2a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ee0:	f001 fb92 	bl	8002608 <HAL_RCC_GetHCLKFreq>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	4b14      	ldr	r3, [pc, #80]	@ (8000f38 <HAL_InitTick+0x6c>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	4619      	mov	r1, r3
 8000eec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ef0:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f000 f93c 	bl	8001176 <HAL_SYSTICK_Config>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d10f      	bne.n	8000f24 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2b0f      	cmp	r3, #15
 8000f08:	d809      	bhi.n	8000f1e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	6879      	ldr	r1, [r7, #4]
 8000f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8000f12:	f000 f908 	bl	8001126 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f16:	4a09      	ldr	r2, [pc, #36]	@ (8000f3c <HAL_InitTick+0x70>)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6013      	str	r3, [r2, #0]
 8000f1c:	e007      	b.n	8000f2e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	73fb      	strb	r3, [r7, #15]
 8000f22:	e004      	b.n	8000f2e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f24:	2301      	movs	r3, #1
 8000f26:	73fb      	strb	r3, [r7, #15]
 8000f28:	e001      	b.n	8000f2e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3710      	adds	r7, #16
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000008 	.word	0x20000008
 8000f3c:	20000004 	.word	0x20000004

08000f40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f44:	4b05      	ldr	r3, [pc, #20]	@ (8000f5c <HAL_IncTick+0x1c>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	461a      	mov	r2, r3
 8000f4a:	4b05      	ldr	r3, [pc, #20]	@ (8000f60 <HAL_IncTick+0x20>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4413      	add	r3, r2
 8000f50:	4a03      	ldr	r2, [pc, #12]	@ (8000f60 <HAL_IncTick+0x20>)
 8000f52:	6013      	str	r3, [r2, #0]
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bc80      	pop	{r7}
 8000f5a:	4770      	bx	lr
 8000f5c:	20000008 	.word	0x20000008
 8000f60:	2000011c 	.word	0x2000011c

08000f64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  return uwTick;
 8000f68:	4b02      	ldr	r3, [pc, #8]	@ (8000f74 <HAL_GetTick+0x10>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bc80      	pop	{r7}
 8000f72:	4770      	bx	lr
 8000f74:	2000011c 	.word	0x2000011c

08000f78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f003 0307 	and.w	r3, r3, #7
 8000f86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f88:	4b0c      	ldr	r3, [pc, #48]	@ (8000fbc <__NVIC_SetPriorityGrouping+0x44>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f8e:	68ba      	ldr	r2, [r7, #8]
 8000f90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f94:	4013      	ands	r3, r2
 8000f96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fa0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fa4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000faa:	4a04      	ldr	r2, [pc, #16]	@ (8000fbc <__NVIC_SetPriorityGrouping+0x44>)
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	60d3      	str	r3, [r2, #12]
}
 8000fb0:	bf00      	nop
 8000fb2:	3714      	adds	r7, #20
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bc80      	pop	{r7}
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc4:	4b04      	ldr	r3, [pc, #16]	@ (8000fd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	0a1b      	lsrs	r3, r3, #8
 8000fca:	f003 0307 	and.w	r3, r3, #7
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bc80      	pop	{r7}
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	db0b      	blt.n	8001006 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	f003 021f 	and.w	r2, r3, #31
 8000ff4:	4906      	ldr	r1, [pc, #24]	@ (8001010 <__NVIC_EnableIRQ+0x34>)
 8000ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffa:	095b      	lsrs	r3, r3, #5
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	fa00 f202 	lsl.w	r2, r0, r2
 8001002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	bc80      	pop	{r7}
 800100e:	4770      	bx	lr
 8001010:	e000e100 	.word	0xe000e100

08001014 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	6039      	str	r1, [r7, #0]
 800101e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001024:	2b00      	cmp	r3, #0
 8001026:	db0a      	blt.n	800103e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	b2da      	uxtb	r2, r3
 800102c:	490c      	ldr	r1, [pc, #48]	@ (8001060 <__NVIC_SetPriority+0x4c>)
 800102e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001032:	0112      	lsls	r2, r2, #4
 8001034:	b2d2      	uxtb	r2, r2
 8001036:	440b      	add	r3, r1
 8001038:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800103c:	e00a      	b.n	8001054 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	b2da      	uxtb	r2, r3
 8001042:	4908      	ldr	r1, [pc, #32]	@ (8001064 <__NVIC_SetPriority+0x50>)
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	f003 030f 	and.w	r3, r3, #15
 800104a:	3b04      	subs	r3, #4
 800104c:	0112      	lsls	r2, r2, #4
 800104e:	b2d2      	uxtb	r2, r2
 8001050:	440b      	add	r3, r1
 8001052:	761a      	strb	r2, [r3, #24]
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	bc80      	pop	{r7}
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	e000e100 	.word	0xe000e100
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001068:	b480      	push	{r7}
 800106a:	b089      	sub	sp, #36	@ 0x24
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	f003 0307 	and.w	r3, r3, #7
 800107a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	f1c3 0307 	rsb	r3, r3, #7
 8001082:	2b04      	cmp	r3, #4
 8001084:	bf28      	it	cs
 8001086:	2304      	movcs	r3, #4
 8001088:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	3304      	adds	r3, #4
 800108e:	2b06      	cmp	r3, #6
 8001090:	d902      	bls.n	8001098 <NVIC_EncodePriority+0x30>
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	3b03      	subs	r3, #3
 8001096:	e000      	b.n	800109a <NVIC_EncodePriority+0x32>
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800109c:	f04f 32ff 	mov.w	r2, #4294967295
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43da      	mvns	r2, r3
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	401a      	ands	r2, r3
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010b0:	f04f 31ff 	mov.w	r1, #4294967295
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ba:	43d9      	mvns	r1, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c0:	4313      	orrs	r3, r2
         );
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3724      	adds	r7, #36	@ 0x24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bc80      	pop	{r7}
 80010ca:	4770      	bx	lr

080010cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3b01      	subs	r3, #1
 80010d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010dc:	d301      	bcc.n	80010e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010de:	2301      	movs	r3, #1
 80010e0:	e00f      	b.n	8001102 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010e2:	4a0a      	ldr	r2, [pc, #40]	@ (800110c <SysTick_Config+0x40>)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	3b01      	subs	r3, #1
 80010e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ea:	210f      	movs	r1, #15
 80010ec:	f04f 30ff 	mov.w	r0, #4294967295
 80010f0:	f7ff ff90 	bl	8001014 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010f4:	4b05      	ldr	r3, [pc, #20]	@ (800110c <SysTick_Config+0x40>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010fa:	4b04      	ldr	r3, [pc, #16]	@ (800110c <SysTick_Config+0x40>)
 80010fc:	2207      	movs	r2, #7
 80010fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	e000e010 	.word	0xe000e010

08001110 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f7ff ff2d 	bl	8000f78 <__NVIC_SetPriorityGrouping>
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b086      	sub	sp, #24
 800112a:	af00      	add	r7, sp, #0
 800112c:	4603      	mov	r3, r0
 800112e:	60b9      	str	r1, [r7, #8]
 8001130:	607a      	str	r2, [r7, #4]
 8001132:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001134:	f7ff ff44 	bl	8000fc0 <__NVIC_GetPriorityGrouping>
 8001138:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	68b9      	ldr	r1, [r7, #8]
 800113e:	6978      	ldr	r0, [r7, #20]
 8001140:	f7ff ff92 	bl	8001068 <NVIC_EncodePriority>
 8001144:	4602      	mov	r2, r0
 8001146:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800114a:	4611      	mov	r1, r2
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff ff61 	bl	8001014 <__NVIC_SetPriority>
}
 8001152:	bf00      	nop
 8001154:	3718      	adds	r7, #24
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b082      	sub	sp, #8
 800115e:	af00      	add	r7, sp, #0
 8001160:	4603      	mov	r3, r0
 8001162:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff ff37 	bl	8000fdc <__NVIC_EnableIRQ>
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b082      	sub	sp, #8
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff ffa4 	bl	80010cc <SysTick_Config>
 8001184:	4603      	mov	r3, r0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
	...

08001190 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001190:	b480      	push	{r7}
 8001192:	b087      	sub	sp, #28
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800119a:	2300      	movs	r3, #0
 800119c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800119e:	e140      	b.n	8001422 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	2101      	movs	r1, #1
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	fa01 f303 	lsl.w	r3, r1, r3
 80011ac:	4013      	ands	r3, r2
 80011ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	f000 8132 	beq.w	800141c <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f003 0303 	and.w	r3, r3, #3
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d005      	beq.n	80011d0 <HAL_GPIO_Init+0x40>
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f003 0303 	and.w	r3, r3, #3
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d130      	bne.n	8001232 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	2203      	movs	r2, #3
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	43db      	mvns	r3, r3
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	4013      	ands	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	68da      	ldr	r2, [r3, #12]
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001206:	2201      	movs	r2, #1
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43db      	mvns	r3, r3
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	4013      	ands	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	091b      	lsrs	r3, r3, #4
 800121c:	f003 0201 	and.w	r2, r3, #1
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	4313      	orrs	r3, r2
 800122a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f003 0303 	and.w	r3, r3, #3
 800123a:	2b03      	cmp	r3, #3
 800123c:	d017      	beq.n	800126e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	68db      	ldr	r3, [r3, #12]
 8001242:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	2203      	movs	r2, #3
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	43db      	mvns	r3, r3
 8001250:	693a      	ldr	r2, [r7, #16]
 8001252:	4013      	ands	r3, r2
 8001254:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	689a      	ldr	r2, [r3, #8]
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	4313      	orrs	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f003 0303 	and.w	r3, r3, #3
 8001276:	2b02      	cmp	r3, #2
 8001278:	d123      	bne.n	80012c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	08da      	lsrs	r2, r3, #3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	3208      	adds	r2, #8
 8001282:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001286:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	f003 0307 	and.w	r3, r3, #7
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	220f      	movs	r2, #15
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	43db      	mvns	r3, r3
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	4013      	ands	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	691a      	ldr	r2, [r3, #16]
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	f003 0307 	and.w	r3, r3, #7
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	08da      	lsrs	r2, r3, #3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3208      	adds	r2, #8
 80012bc:	6939      	ldr	r1, [r7, #16]
 80012be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	2203      	movs	r2, #3
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	43db      	mvns	r3, r3
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	4013      	ands	r3, r2
 80012d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f003 0203 	and.w	r2, r3, #3
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	f000 808c 	beq.w	800141c <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001304:	4a4e      	ldr	r2, [pc, #312]	@ (8001440 <HAL_GPIO_Init+0x2b0>)
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	089b      	lsrs	r3, r3, #2
 800130a:	3302      	adds	r3, #2
 800130c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001310:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	f003 0303 	and.w	r3, r3, #3
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	2207      	movs	r2, #7
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	43db      	mvns	r3, r3
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	4013      	ands	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800132e:	d00d      	beq.n	800134c <HAL_GPIO_Init+0x1bc>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4a44      	ldr	r2, [pc, #272]	@ (8001444 <HAL_GPIO_Init+0x2b4>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d007      	beq.n	8001348 <HAL_GPIO_Init+0x1b8>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4a43      	ldr	r2, [pc, #268]	@ (8001448 <HAL_GPIO_Init+0x2b8>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d101      	bne.n	8001344 <HAL_GPIO_Init+0x1b4>
 8001340:	2302      	movs	r3, #2
 8001342:	e004      	b.n	800134e <HAL_GPIO_Init+0x1be>
 8001344:	2307      	movs	r3, #7
 8001346:	e002      	b.n	800134e <HAL_GPIO_Init+0x1be>
 8001348:	2301      	movs	r3, #1
 800134a:	e000      	b.n	800134e <HAL_GPIO_Init+0x1be>
 800134c:	2300      	movs	r3, #0
 800134e:	697a      	ldr	r2, [r7, #20]
 8001350:	f002 0203 	and.w	r2, r2, #3
 8001354:	0092      	lsls	r2, r2, #2
 8001356:	4093      	lsls	r3, r2
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	4313      	orrs	r3, r2
 800135c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800135e:	4938      	ldr	r1, [pc, #224]	@ (8001440 <HAL_GPIO_Init+0x2b0>)
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	089b      	lsrs	r3, r3, #2
 8001364:	3302      	adds	r3, #2
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800136c:	4b37      	ldr	r3, [pc, #220]	@ (800144c <HAL_GPIO_Init+0x2bc>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	43db      	mvns	r3, r3
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	4013      	ands	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d003      	beq.n	8001390 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	4313      	orrs	r3, r2
 800138e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001390:	4a2e      	ldr	r2, [pc, #184]	@ (800144c <HAL_GPIO_Init+0x2bc>)
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001396:	4b2d      	ldr	r3, [pc, #180]	@ (800144c <HAL_GPIO_Init+0x2bc>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	43db      	mvns	r3, r3
 80013a0:	693a      	ldr	r2, [r7, #16]
 80013a2:	4013      	ands	r3, r2
 80013a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d003      	beq.n	80013ba <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013ba:	4a24      	ldr	r2, [pc, #144]	@ (800144c <HAL_GPIO_Init+0x2bc>)
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80013c0:	4b22      	ldr	r3, [pc, #136]	@ (800144c <HAL_GPIO_Init+0x2bc>)
 80013c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80013c6:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	43db      	mvns	r3, r3
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	4013      	ands	r3, r2
 80013d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d003      	beq.n	80013e6 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80013e6:	4a19      	ldr	r2, [pc, #100]	@ (800144c <HAL_GPIO_Init+0x2bc>)
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80013ee:	4b17      	ldr	r3, [pc, #92]	@ (800144c <HAL_GPIO_Init+0x2bc>)
 80013f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80013f4:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	43db      	mvns	r3, r3
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	4013      	ands	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d003      	beq.n	8001414 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	4313      	orrs	r3, r2
 8001412:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001414:	4a0d      	ldr	r2, [pc, #52]	@ (800144c <HAL_GPIO_Init+0x2bc>)
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	3301      	adds	r3, #1
 8001420:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	fa22 f303 	lsr.w	r3, r2, r3
 800142c:	2b00      	cmp	r3, #0
 800142e:	f47f aeb7 	bne.w	80011a0 <HAL_GPIO_Init+0x10>
  }
}
 8001432:	bf00      	nop
 8001434:	bf00      	nop
 8001436:	371c      	adds	r7, #28
 8001438:	46bd      	mov	sp, r7
 800143a:	bc80      	pop	{r7}
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	40010000 	.word	0x40010000
 8001444:	48000400 	.word	0x48000400
 8001448:	48000800 	.word	0x48000800
 800144c:	58000800 	.word	0x58000800

08001450 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	460b      	mov	r3, r1
 800145a:	807b      	strh	r3, [r7, #2]
 800145c:	4613      	mov	r3, r2
 800145e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001460:	787b      	ldrb	r3, [r7, #1]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d003      	beq.n	800146e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001466:	887a      	ldrh	r2, [r7, #2]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800146c:	e002      	b.n	8001474 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800146e:	887a      	ldrh	r2, [r7, #2]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	bc80      	pop	{r7}
 800147c:	4770      	bx	lr

0800147e <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800147e:	b480      	push	{r7}
 8001480:	b085      	sub	sp, #20
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
 8001486:	460b      	mov	r3, r1
 8001488:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	695b      	ldr	r3, [r3, #20]
 800148e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001490:	887a      	ldrh	r2, [r7, #2]
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	4013      	ands	r3, r2
 8001496:	041a      	lsls	r2, r3, #16
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	43d9      	mvns	r1, r3
 800149c:	887b      	ldrh	r3, [r7, #2]
 800149e:	400b      	ands	r3, r1
 80014a0:	431a      	orrs	r2, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	619a      	str	r2, [r3, #24]
}
 80014a6:	bf00      	nop
 80014a8:	3714      	adds	r7, #20
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bc80      	pop	{r7}
 80014ae:	4770      	bx	lr

080014b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80014ba:	4b08      	ldr	r3, [pc, #32]	@ (80014dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014bc:	68da      	ldr	r2, [r3, #12]
 80014be:	88fb      	ldrh	r3, [r7, #6]
 80014c0:	4013      	ands	r3, r2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d006      	beq.n	80014d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014c6:	4a05      	ldr	r2, [pc, #20]	@ (80014dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014c8:	88fb      	ldrh	r3, [r7, #6]
 80014ca:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014cc:	88fb      	ldrh	r3, [r7, #6]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff fac4 	bl	8000a5c <HAL_GPIO_EXTI_Callback>
  }
}
 80014d4:	bf00      	nop
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	58000800 	.word	0x58000800

080014e0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014e4:	4b04      	ldr	r3, [pc, #16]	@ (80014f8 <HAL_PWR_EnableBkUpAccess+0x18>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a03      	ldr	r2, [pc, #12]	@ (80014f8 <HAL_PWR_EnableBkUpAccess+0x18>)
 80014ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014ee:	6013      	str	r3, [r2, #0]
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr
 80014f8:	58000400 	.word	0x58000400

080014fc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001500:	4b03      	ldr	r3, [pc, #12]	@ (8001510 <HAL_PWREx_GetVoltageRange+0x14>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8001508:	4618      	mov	r0, r3
 800150a:	46bd      	mov	sp, r7
 800150c:	bc80      	pop	{r7}
 800150e:	4770      	bx	lr
 8001510:	58000400 	.word	0x58000400

08001514 <HAL_PWREx_EnableFlashPowerDown>:
  *           @arg @ref PWR_FLASHPD_LPRUN
  *           @arg @ref PWR_FLASHPD_LPSLEEP
  * @retval None
  */
void HAL_PWREx_EnableFlashPowerDown(uint32_t PowerMode)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  }

  /* Set flash power down mode */
  SET_BIT(PWR->C2CR1, PowerMode);
#else
  if ((PowerMode & PWR_FLASHPD_LPRUN) != 0U)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f003 0310 	and.w	r3, r3, #16
 8001522:	2b00      	cmp	r3, #0
 8001524:	d003      	beq.n	800152e <HAL_PWREx_EnableFlashPowerDown+0x1a>
  {
    /* Unlock bit FPDR */
    WRITE_REG(PWR->CR1, PWR_FLASH_POWER_MODE_UNLOCK_CODE);
 8001526:	4b07      	ldr	r3, [pc, #28]	@ (8001544 <HAL_PWREx_EnableFlashPowerDown+0x30>)
 8001528:	f24c 12b0 	movw	r2, #49584	@ 0xc1b0
 800152c:	601a      	str	r2, [r3, #0]
  }

  /* Set flash power down mode */
  SET_BIT(PWR->CR1, PowerMode);
 800152e:	4b05      	ldr	r3, [pc, #20]	@ (8001544 <HAL_PWREx_EnableFlashPowerDown+0x30>)
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	4904      	ldr	r1, [pc, #16]	@ (8001544 <HAL_PWREx_EnableFlashPowerDown+0x30>)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	4313      	orrs	r3, r2
 8001538:	600b      	str	r3, [r1, #0]
#endif
}
 800153a:	bf00      	nop
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr
 8001544:	58000400 	.word	0x58000400

08001548 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 800154c:	4b04      	ldr	r3, [pc, #16]	@ (8001560 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a03      	ldr	r2, [pc, #12]	@ (8001560 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8001552:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001556:	6013      	str	r3, [r2, #0]
}
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr
 8001560:	58000400 	.word	0x58000400

08001564 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800156a:	4b16      	ldr	r3, [pc, #88]	@ (80015c4 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a15      	ldr	r2, [pc, #84]	@ (80015c4 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8001570:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001574:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8001576:	4b14      	ldr	r3, [pc, #80]	@ (80015c8 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2232      	movs	r2, #50	@ 0x32
 800157c:	fb02 f303 	mul.w	r3, r2, r3
 8001580:	4a12      	ldr	r2, [pc, #72]	@ (80015cc <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8001582:	fba2 2303 	umull	r2, r3, r2, r3
 8001586:	0c9b      	lsrs	r3, r3, #18
 8001588:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800158a:	e002      	b.n	8001592 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3b01      	subs	r3, #1
 8001590:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8001592:	4b0c      	ldr	r3, [pc, #48]	@ (80015c4 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8001594:	695b      	ldr	r3, [r3, #20]
 8001596:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800159a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800159e:	d102      	bne.n	80015a6 <HAL_PWREx_DisableLowPowerRunMode+0x42>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1f2      	bne.n	800158c <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80015a6:	4b07      	ldr	r3, [pc, #28]	@ (80015c4 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80015a8:	695b      	ldr	r3, [r3, #20]
 80015aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80015ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80015b2:	d101      	bne.n	80015b8 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 80015b4:	2303      	movs	r3, #3
 80015b6:	e000      	b.n	80015ba <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	bc80      	pop	{r7}
 80015c2:	4770      	bx	lr
 80015c4:	58000400 	.word	0x58000400
 80015c8:	20000000 	.word	0x20000000
 80015cc:	431bde83 	.word	0x431bde83

080015d0 <LL_PWR_IsEnabledBkUpAccess>:
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80015d4:	4b06      	ldr	r3, [pc, #24]	@ (80015f0 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80015e0:	d101      	bne.n	80015e6 <LL_PWR_IsEnabledBkUpAccess+0x16>
 80015e2:	2301      	movs	r3, #1
 80015e4:	e000      	b.n	80015e8 <LL_PWR_IsEnabledBkUpAccess+0x18>
 80015e6:	2300      	movs	r3, #0
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr
 80015f0:	58000400 	.word	0x58000400

080015f4 <LL_RCC_HSE_EnableTcxo>:
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80015f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001602:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001606:	6013      	str	r3, [r2, #0]
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	bc80      	pop	{r7}
 800160e:	4770      	bx	lr

08001610 <LL_RCC_HSE_DisableTcxo>:
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001614:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800161e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001622:	6013      	str	r3, [r2, #0]
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	bc80      	pop	{r7}
 800162a:	4770      	bx	lr

0800162c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001630:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800163a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800163e:	d101      	bne.n	8001644 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001640:	2301      	movs	r3, #1
 8001642:	e000      	b.n	8001646 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	46bd      	mov	sp, r7
 800164a:	bc80      	pop	{r7}
 800164c:	4770      	bx	lr

0800164e <LL_RCC_HSE_Enable>:
{
 800164e:	b480      	push	{r7}
 8001650:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001652:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800165c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001660:	6013      	str	r3, [r2, #0]
}
 8001662:	bf00      	nop
 8001664:	46bd      	mov	sp, r7
 8001666:	bc80      	pop	{r7}
 8001668:	4770      	bx	lr

0800166a <LL_RCC_HSE_Disable>:
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800166e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001678:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800167c:	6013      	str	r3, [r2, #0]
}
 800167e:	bf00      	nop
 8001680:	46bd      	mov	sp, r7
 8001682:	bc80      	pop	{r7}
 8001684:	4770      	bx	lr

08001686 <LL_RCC_HSE_IsReady>:
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800168a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001694:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001698:	d101      	bne.n	800169e <LL_RCC_HSE_IsReady+0x18>
 800169a:	2301      	movs	r3, #1
 800169c:	e000      	b.n	80016a0 <LL_RCC_HSE_IsReady+0x1a>
 800169e:	2300      	movs	r3, #0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bc80      	pop	{r7}
 80016a6:	4770      	bx	lr

080016a8 <LL_RCC_HSI_Enable>:
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80016ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80016b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016ba:	6013      	str	r3, [r2, #0]
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr

080016c4 <LL_RCC_HSI_Disable>:
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80016c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80016d2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80016d6:	6013      	str	r3, [r2, #0]
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc80      	pop	{r7}
 80016de:	4770      	bx	lr

080016e0 <LL_RCC_HSI_IsReady>:
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80016e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016f2:	d101      	bne.n	80016f8 <LL_RCC_HSI_IsReady+0x18>
 80016f4:	2301      	movs	r3, #1
 80016f6:	e000      	b.n	80016fa <LL_RCC_HSI_IsReady+0x1a>
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bc80      	pop	{r7}
 8001700:	4770      	bx	lr

08001702 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800170a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	061b      	lsls	r3, r3, #24
 8001718:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800171c:	4313      	orrs	r3, r2
 800171e:	604b      	str	r3, [r1, #4]
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	bc80      	pop	{r7}
 8001728:	4770      	bx	lr

0800172a <LL_RCC_LSE_IsReady>:
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800172e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001732:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b02      	cmp	r3, #2
 800173c:	d101      	bne.n	8001742 <LL_RCC_LSE_IsReady+0x18>
 800173e:	2301      	movs	r3, #1
 8001740:	e000      	b.n	8001744 <LL_RCC_LSE_IsReady+0x1a>
 8001742:	2300      	movs	r3, #0
}
 8001744:	4618      	mov	r0, r3
 8001746:	46bd      	mov	sp, r7
 8001748:	bc80      	pop	{r7}
 800174a:	4770      	bx	lr

0800174c <LL_RCC_LSI_Enable>:
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001750:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001754:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001758:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr

0800176c <LL_RCC_LSI_Disable>:
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001770:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001774:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001778:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800177c:	f023 0301 	bic.w	r3, r3, #1
 8001780:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	bc80      	pop	{r7}
 800178a:	4770      	bx	lr

0800178c <LL_RCC_LSI_IsReady>:
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8001790:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001794:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001798:	f003 0302 	and.w	r3, r3, #2
 800179c:	2b02      	cmp	r3, #2
 800179e:	d101      	bne.n	80017a4 <LL_RCC_LSI_IsReady+0x18>
 80017a0:	2301      	movs	r3, #1
 80017a2:	e000      	b.n	80017a6 <LL_RCC_LSI_IsReady+0x1a>
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bc80      	pop	{r7}
 80017ac:	4770      	bx	lr

080017ae <LL_RCC_MSI_Enable>:
{
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80017b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80017bc:	f043 0301 	orr.w	r3, r3, #1
 80017c0:	6013      	str	r3, [r2, #0]
}
 80017c2:	bf00      	nop
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bc80      	pop	{r7}
 80017c8:	4770      	bx	lr

080017ca <LL_RCC_MSI_Disable>:
{
 80017ca:	b480      	push	{r7}
 80017cc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80017ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80017d8:	f023 0301 	bic.w	r3, r3, #1
 80017dc:	6013      	str	r3, [r2, #0]
}
 80017de:	bf00      	nop
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bc80      	pop	{r7}
 80017e4:	4770      	bx	lr

080017e6 <LL_RCC_MSI_IsReady>:
{
 80017e6:	b480      	push	{r7}
 80017e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80017ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d101      	bne.n	80017fc <LL_RCC_MSI_IsReady+0x16>
 80017f8:	2301      	movs	r3, #1
 80017fa:	e000      	b.n	80017fe <LL_RCC_MSI_IsReady+0x18>
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	46bd      	mov	sp, r7
 8001802:	bc80      	pop	{r7}
 8001804:	4770      	bx	lr

08001806 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8001806:	b480      	push	{r7}
 8001808:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800180a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0308 	and.w	r3, r3, #8
 8001814:	2b08      	cmp	r3, #8
 8001816:	d101      	bne.n	800181c <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001818:	2301      	movs	r3, #1
 800181a:	e000      	b.n	800181e <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	46bd      	mov	sp, r7
 8001822:	bc80      	pop	{r7}
 8001824:	4770      	bx	lr

08001826 <LL_RCC_MSI_GetRange>:
{
 8001826:	b480      	push	{r7}
 8001828:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800182a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001834:	4618      	mov	r0, r3
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr

0800183c <LL_RCC_MSI_GetRangeAfterStandby>:
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001840:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001844:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001848:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 800184c:	4618      	mov	r0, r3
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr

08001854 <LL_RCC_MSI_SetCalibTrimming>:
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800185c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	021b      	lsls	r3, r3, #8
 800186a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800186e:	4313      	orrs	r3, r2
 8001870:	604b      	str	r3, [r1, #4]
}
 8001872:	bf00      	nop
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr

0800187c <LL_RCC_SetSysClkSource>:
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001884:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f023 0203 	bic.w	r2, r3, #3
 800188e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4313      	orrs	r3, r2
 8001896:	608b      	str	r3, [r1, #8]
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	bc80      	pop	{r7}
 80018a0:	4770      	bx	lr

080018a2 <LL_RCC_GetSysClkSource>:
{
 80018a2:	b480      	push	{r7}
 80018a4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80018a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f003 030c 	and.w	r3, r3, #12
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc80      	pop	{r7}
 80018b6:	4770      	bx	lr

080018b8 <LL_RCC_SetAHBPrescaler>:
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80018c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	608b      	str	r3, [r1, #8]
}
 80018d4:	bf00      	nop
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	bc80      	pop	{r7}
 80018dc:	4770      	bx	lr

080018de <LL_C2_RCC_SetAHBPrescaler>:
{
 80018de:	b480      	push	{r7}
 80018e0:	b083      	sub	sp, #12
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80018e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018ea:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80018ee:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80018fe:	bf00      	nop
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	bc80      	pop	{r7}
 8001906:	4770      	bx	lr

08001908 <LL_RCC_SetAHB3Prescaler>:
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001910:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001914:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001918:	f023 020f 	bic.w	r2, r3, #15
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	091b      	lsrs	r3, r3, #4
 8001920:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001924:	4313      	orrs	r3, r2
 8001926:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	bc80      	pop	{r7}
 8001932:	4770      	bx	lr

08001934 <LL_RCC_SetAPB1Prescaler>:
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800193c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001946:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4313      	orrs	r3, r2
 800194e:	608b      	str	r3, [r1, #8]
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	bc80      	pop	{r7}
 8001958:	4770      	bx	lr

0800195a <LL_RCC_SetAPB2Prescaler>:
{
 800195a:	b480      	push	{r7}
 800195c:	b083      	sub	sp, #12
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001962:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800196c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4313      	orrs	r3, r2
 8001974:	608b      	str	r3, [r1, #8]
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	bc80      	pop	{r7}
 800197e:	4770      	bx	lr

08001980 <LL_RCC_GetAHBPrescaler>:
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001984:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800198e:	4618      	mov	r0, r3
 8001990:	46bd      	mov	sp, r7
 8001992:	bc80      	pop	{r7}
 8001994:	4770      	bx	lr

08001996 <LL_RCC_GetAHB3Prescaler>:
{
 8001996:	b480      	push	{r7}
 8001998:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800199a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800199e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80019a2:	011b      	lsls	r3, r3, #4
 80019a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bc80      	pop	{r7}
 80019ae:	4770      	bx	lr

080019b0 <LL_RCC_GetAPB1Prescaler>:
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80019b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80019be:	4618      	mov	r0, r3
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bc80      	pop	{r7}
 80019c4:	4770      	bx	lr

080019c6 <LL_RCC_GetAPB2Prescaler>:
{
 80019c6:	b480      	push	{r7}
 80019c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80019ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bc80      	pop	{r7}
 80019da:	4770      	bx	lr

080019dc <LL_RCC_PLL_Enable>:
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80019e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80019ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019ee:	6013      	str	r3, [r2, #0]
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr

080019f8 <LL_RCC_PLL_Disable>:
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80019fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a0a:	6013      	str	r3, [r2, #0]
}
 8001a0c:	bf00      	nop
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bc80      	pop	{r7}
 8001a12:	4770      	bx	lr

08001a14 <LL_RCC_PLL_IsReady>:
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001a18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a22:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001a26:	d101      	bne.n	8001a2c <LL_RCC_PLL_IsReady+0x18>
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e000      	b.n	8001a2e <LL_RCC_PLL_IsReady+0x1a>
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bc80      	pop	{r7}
 8001a34:	4770      	bx	lr

08001a36 <LL_RCC_PLL_GetN>:
{
 8001a36:	b480      	push	{r7}
 8001a38:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001a3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	0a1b      	lsrs	r3, r3, #8
 8001a42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bc80      	pop	{r7}
 8001a4c:	4770      	bx	lr

08001a4e <LL_RCC_PLL_GetR>:
{
 8001a4e:	b480      	push	{r7}
 8001a50:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001a52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr

08001a64 <LL_RCC_PLL_GetDivider>:
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001a68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bc80      	pop	{r7}
 8001a78:	4770      	bx	lr

08001a7a <LL_RCC_PLL_GetMainSource>:
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001a7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	f003 0303 	and.w	r3, r3, #3
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bc80      	pop	{r7}
 8001a8e:	4770      	bx	lr

08001a90 <LL_RCC_IsActiveFlag_HPRE>:
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001a94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001aa2:	d101      	bne.n	8001aa8 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e000      	b.n	8001aaa <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bc80      	pop	{r7}
 8001ab0:	4770      	bx	lr

08001ab2 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001ab6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001aba:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001abe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ac2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001ac6:	d101      	bne.n	8001acc <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e000      	b.n	8001ace <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bc80      	pop	{r7}
 8001ad4:	4770      	bx	lr

08001ad6 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001ada:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ade:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001ae2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ae6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001aea:	d101      	bne.n	8001af0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001aec:	2301      	movs	r3, #1
 8001aee:	e000      	b.n	8001af2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bc80      	pop	{r7}
 8001af8:	4770      	bx	lr

08001afa <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001afa:	b480      	push	{r7}
 8001afc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001afe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001b0c:	d101      	bne.n	8001b12 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e000      	b.n	8001b14 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc80      	pop	{r7}
 8001b1a:	4770      	bx	lr

08001b1c <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001b20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b2a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001b2e:	d101      	bne.n	8001b34 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001b30:	2301      	movs	r3, #1
 8001b32:	e000      	b.n	8001b36 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bc80      	pop	{r7}
 8001b3c:	4770      	bx	lr
	...

08001b40 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b088      	sub	sp, #32
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d101      	bne.n	8001b52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e36f      	b.n	8002232 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b52:	f7ff fea6 	bl	80018a2 <LL_RCC_GetSysClkSource>
 8001b56:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b58:	f7ff ff8f 	bl	8001a7a <LL_RCC_PLL_GetMainSource>
 8001b5c:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0320 	and.w	r3, r3, #32
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f000 80c4 	beq.w	8001cf4 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d005      	beq.n	8001b7e <HAL_RCC_OscConfig+0x3e>
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	2b0c      	cmp	r3, #12
 8001b76:	d176      	bne.n	8001c66 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d173      	bne.n	8001c66 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a1b      	ldr	r3, [r3, #32]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d101      	bne.n	8001b8a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e353      	b.n	8002232 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0308 	and.w	r3, r3, #8
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d005      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x68>
 8001b9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ba6:	e006      	b.n	8001bb6 <HAL_RCC_OscConfig+0x76>
 8001ba8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bb0:	091b      	lsrs	r3, r3, #4
 8001bb2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d222      	bcs.n	8001c00 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f000 fd5a 	bl	8002678 <RCC_SetFlashLatencyFromMSIRange>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e331      	b.n	8002232 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001bd8:	f043 0308 	orr.w	r3, r3, #8
 8001bdc:	6013      	str	r3, [r2, #0]
 8001bde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff fe2b 	bl	8001854 <LL_RCC_MSI_SetCalibTrimming>
 8001bfe:	e021      	b.n	8001c44 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c0a:	f043 0308 	orr.w	r3, r3, #8
 8001c0e:	6013      	str	r3, [r2, #0]
 8001c10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c1e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c22:	4313      	orrs	r3, r2
 8001c24:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff fe12 	bl	8001854 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c34:	4618      	mov	r0, r3
 8001c36:	f000 fd1f 	bl	8002678 <RCC_SetFlashLatencyFromMSIRange>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e2f6      	b.n	8002232 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001c44:	f000 fce0 	bl	8002608 <HAL_RCC_GetHCLKFreq>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	4aa7      	ldr	r2, [pc, #668]	@ (8001ee8 <HAL_RCC_OscConfig+0x3a8>)
 8001c4c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8001c4e:	4ba7      	ldr	r3, [pc, #668]	@ (8001eec <HAL_RCC_OscConfig+0x3ac>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff f93a 	bl	8000ecc <HAL_InitTick>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8001c5c:	7cfb      	ldrb	r3, [r7, #19]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d047      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8001c62:	7cfb      	ldrb	r3, [r7, #19]
 8001c64:	e2e5      	b.n	8002232 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a1b      	ldr	r3, [r3, #32]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d02c      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c6e:	f7ff fd9e 	bl	80017ae <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c72:	f7ff f977 	bl	8000f64 <HAL_GetTick>
 8001c76:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001c78:	e008      	b.n	8001c8c <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c7a:	f7ff f973 	bl	8000f64 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e2d2      	b.n	8002232 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001c8c:	f7ff fdab 	bl	80017e6 <LL_RCC_MSI_IsReady>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d0f1      	beq.n	8001c7a <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ca0:	f043 0308 	orr.w	r3, r3, #8
 8001ca4:	6013      	str	r3, [r2, #0]
 8001ca6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cb4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff fdc7 	bl	8001854 <LL_RCC_MSI_SetCalibTrimming>
 8001cc6:	e015      	b.n	8001cf4 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001cc8:	f7ff fd7f 	bl	80017ca <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ccc:	f7ff f94a 	bl	8000f64 <HAL_GetTick>
 8001cd0:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001cd2:	e008      	b.n	8001ce6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cd4:	f7ff f946 	bl	8000f64 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e2a5      	b.n	8002232 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001ce6:	f7ff fd7e 	bl	80017e6 <LL_RCC_MSI_IsReady>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1f1      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x194>
 8001cf0:	e000      	b.n	8001cf4 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001cf2:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0301 	and.w	r3, r3, #1
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d058      	beq.n	8001db2 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	2b08      	cmp	r3, #8
 8001d04:	d005      	beq.n	8001d12 <HAL_RCC_OscConfig+0x1d2>
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	2b0c      	cmp	r3, #12
 8001d0a:	d108      	bne.n	8001d1e <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	2b03      	cmp	r3, #3
 8001d10:	d105      	bne.n	8001d1e <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d14b      	bne.n	8001db2 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e289      	b.n	8002232 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8001d1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d30:	4313      	orrs	r3, r2
 8001d32:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d3c:	d102      	bne.n	8001d44 <HAL_RCC_OscConfig+0x204>
 8001d3e:	f7ff fc86 	bl	800164e <LL_RCC_HSE_Enable>
 8001d42:	e00d      	b.n	8001d60 <HAL_RCC_OscConfig+0x220>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8001d4c:	d104      	bne.n	8001d58 <HAL_RCC_OscConfig+0x218>
 8001d4e:	f7ff fc51 	bl	80015f4 <LL_RCC_HSE_EnableTcxo>
 8001d52:	f7ff fc7c 	bl	800164e <LL_RCC_HSE_Enable>
 8001d56:	e003      	b.n	8001d60 <HAL_RCC_OscConfig+0x220>
 8001d58:	f7ff fc87 	bl	800166a <LL_RCC_HSE_Disable>
 8001d5c:	f7ff fc58 	bl	8001610 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d012      	beq.n	8001d8e <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d68:	f7ff f8fc 	bl	8000f64 <HAL_GetTick>
 8001d6c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d70:	f7ff f8f8 	bl	8000f64 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b64      	cmp	r3, #100	@ 0x64
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e257      	b.n	8002232 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001d82:	f7ff fc80 	bl	8001686 <LL_RCC_HSE_IsReady>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d0f1      	beq.n	8001d70 <HAL_RCC_OscConfig+0x230>
 8001d8c:	e011      	b.n	8001db2 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d8e:	f7ff f8e9 	bl	8000f64 <HAL_GetTick>
 8001d92:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001d94:	e008      	b.n	8001da8 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d96:	f7ff f8e5 	bl	8000f64 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b64      	cmp	r3, #100	@ 0x64
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e244      	b.n	8002232 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001da8:	f7ff fc6d 	bl	8001686 <LL_RCC_HSE_IsReady>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d1f1      	bne.n	8001d96 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d046      	beq.n	8001e4c <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	2b04      	cmp	r3, #4
 8001dc2:	d005      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x290>
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	2b0c      	cmp	r3, #12
 8001dc8:	d10e      	bne.n	8001de8 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d10b      	bne.n	8001de8 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	691b      	ldr	r3, [r3, #16]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d101      	bne.n	8001ddc <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e22a      	b.n	8002232 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	695b      	ldr	r3, [r3, #20]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff fc8e 	bl	8001702 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001de6:	e031      	b.n	8001e4c <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d019      	beq.n	8001e24 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001df0:	f7ff fc5a 	bl	80016a8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df4:	f7ff f8b6 	bl	8000f64 <HAL_GetTick>
 8001df8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dfc:	f7ff f8b2 	bl	8000f64 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e211      	b.n	8002232 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001e0e:	f7ff fc67 	bl	80016e0 <LL_RCC_HSI_IsReady>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d0f1      	beq.n	8001dfc <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	695b      	ldr	r3, [r3, #20]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff fc70 	bl	8001702 <LL_RCC_HSI_SetCalibTrimming>
 8001e22:	e013      	b.n	8001e4c <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e24:	f7ff fc4e 	bl	80016c4 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e28:	f7ff f89c 	bl	8000f64 <HAL_GetTick>
 8001e2c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001e2e:	e008      	b.n	8001e42 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e30:	f7ff f898 	bl	8000f64 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e1f7      	b.n	8002232 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001e42:	f7ff fc4d 	bl	80016e0 <LL_RCC_HSI_IsReady>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1f1      	bne.n	8001e30 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0308 	and.w	r3, r3, #8
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d06e      	beq.n	8001f36 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d056      	beq.n	8001f0e <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8001e60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e68:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	69da      	ldr	r2, [r3, #28]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f003 0310 	and.w	r3, r3, #16
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d031      	beq.n	8001edc <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d006      	beq.n	8001e90 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d101      	bne.n	8001e90 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e1d0      	b.n	8002232 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d013      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8001e9a:	f7ff fc67 	bl	800176c <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e9e:	f7ff f861 	bl	8000f64 <HAL_GetTick>
 8001ea2:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8001ea4:	e008      	b.n	8001eb8 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ea6:	f7ff f85d 	bl	8000f64 <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	2b11      	cmp	r3, #17
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e1bc      	b.n	8002232 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8001eb8:	f7ff fc68 	bl	800178c <LL_RCC_LSI_IsReady>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d1f1      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8001ec2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ec6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001eca:	f023 0210 	bic.w	r2, r3, #16
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	69db      	ldr	r3, [r3, #28]
 8001ed2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001edc:	f7ff fc36 	bl	800174c <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ee0:	f7ff f840 	bl	8000f64 <HAL_GetTick>
 8001ee4:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8001ee6:	e00c      	b.n	8001f02 <HAL_RCC_OscConfig+0x3c2>
 8001ee8:	20000000 	.word	0x20000000
 8001eec:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ef0:	f7ff f838 	bl	8000f64 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b11      	cmp	r3, #17
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e197      	b.n	8002232 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8001f02:	f7ff fc43 	bl	800178c <LL_RCC_LSI_IsReady>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d0f1      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x3b0>
 8001f0c:	e013      	b.n	8001f36 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f0e:	f7ff fc2d 	bl	800176c <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f12:	f7ff f827 	bl	8000f64 <HAL_GetTick>
 8001f16:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8001f18:	e008      	b.n	8001f2c <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f1a:	f7ff f823 	bl	8000f64 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b11      	cmp	r3, #17
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e182      	b.n	8002232 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8001f2c:	f7ff fc2e 	bl	800178c <LL_RCC_LSI_IsReady>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1f1      	bne.n	8001f1a <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0304 	and.w	r3, r3, #4
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f000 80d8 	beq.w	80020f4 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001f44:	f7ff fb44 	bl	80015d0 <LL_PWR_IsEnabledBkUpAccess>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d113      	bne.n	8001f76 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001f4e:	f7ff fac7 	bl	80014e0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f52:	f7ff f807 	bl	8000f64 <HAL_GetTick>
 8001f56:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001f58:	e008      	b.n	8001f6c <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f5a:	f7ff f803 	bl	8000f64 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d901      	bls.n	8001f6c <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e162      	b.n	8002232 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001f6c:	f7ff fb30 	bl	80015d0 <LL_PWR_IsEnabledBkUpAccess>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d0f1      	beq.n	8001f5a <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d07b      	beq.n	8002076 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	2b85      	cmp	r3, #133	@ 0x85
 8001f84:	d003      	beq.n	8001f8e <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	2b05      	cmp	r3, #5
 8001f8c:	d109      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001f8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f96:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f9a:	f043 0304 	orr.w	r3, r3, #4
 8001f9e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fa2:	f7fe ffdf 	bl	8000f64 <HAL_GetTick>
 8001fa6:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001fa8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fb0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001fbc:	e00a      	b.n	8001fd4 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fbe:	f7fe ffd1 	bl	8000f64 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e12e      	b.n	8002232 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001fd4:	f7ff fba9 	bl	800172a <LL_RCC_LSE_IsReady>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d0ef      	beq.n	8001fbe <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	2b81      	cmp	r3, #129	@ 0x81
 8001fe4:	d003      	beq.n	8001fee <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	2b85      	cmp	r3, #133	@ 0x85
 8001fec:	d121      	bne.n	8002032 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fee:	f7fe ffb9 	bl	8000f64 <HAL_GetTick>
 8001ff2:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001ff4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ffc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002000:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002004:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002008:	e00a      	b.n	8002020 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800200a:	f7fe ffab 	bl	8000f64 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002018:	4293      	cmp	r3, r2
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e108      	b.n	8002232 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002020:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002024:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002028:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800202c:	2b00      	cmp	r3, #0
 800202e:	d0ec      	beq.n	800200a <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002030:	e060      	b.n	80020f4 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002032:	f7fe ff97 	bl	8000f64 <HAL_GetTick>
 8002036:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002038:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800203c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002040:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002044:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002048:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800204c:	e00a      	b.n	8002064 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800204e:	f7fe ff89 	bl	8000f64 <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	f241 3288 	movw	r2, #5000	@ 0x1388
 800205c:	4293      	cmp	r3, r2
 800205e:	d901      	bls.n	8002064 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e0e6      	b.n	8002232 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002064:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002068:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800206c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002070:	2b00      	cmp	r3, #0
 8002072:	d1ec      	bne.n	800204e <HAL_RCC_OscConfig+0x50e>
 8002074:	e03e      	b.n	80020f4 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002076:	f7fe ff75 	bl	8000f64 <HAL_GetTick>
 800207a:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800207c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002080:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002084:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002088:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800208c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002090:	e00a      	b.n	80020a8 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002092:	f7fe ff67 	bl	8000f64 <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e0c4      	b.n	8002232 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80020a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1ec      	bne.n	8002092 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020b8:	f7fe ff54 	bl	8000f64 <HAL_GetTick>
 80020bc:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80020be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020c6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020ca:	f023 0301 	bic.w	r3, r3, #1
 80020ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80020d2:	e00a      	b.n	80020ea <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020d4:	f7fe ff46 	bl	8000f64 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e0a3      	b.n	8002232 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 80020ea:	f7ff fb1e 	bl	800172a <LL_RCC_LSE_IsReady>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d1ef      	bne.n	80020d4 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f000 8099 	beq.w	8002230 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	2b0c      	cmp	r3, #12
 8002102:	d06c      	beq.n	80021de <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002108:	2b02      	cmp	r3, #2
 800210a:	d14b      	bne.n	80021a4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800210c:	f7ff fc74 	bl	80019f8 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002110:	f7fe ff28 	bl	8000f64 <HAL_GetTick>
 8002114:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002118:	f7fe ff24 	bl	8000f64 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b0a      	cmp	r3, #10
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e083      	b.n	8002232 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800212a:	f7ff fc73 	bl	8001a14 <LL_RCC_PLL_IsReady>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d1f1      	bne.n	8002118 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002134:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002138:	68da      	ldr	r2, [r3, #12]
 800213a:	4b40      	ldr	r3, [pc, #256]	@ (800223c <HAL_RCC_OscConfig+0x6fc>)
 800213c:	4013      	ands	r3, r2
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002146:	4311      	orrs	r1, r2
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800214c:	0212      	lsls	r2, r2, #8
 800214e:	4311      	orrs	r1, r2
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002154:	4311      	orrs	r1, r2
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800215a:	4311      	orrs	r1, r2
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002160:	430a      	orrs	r2, r1
 8002162:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002166:	4313      	orrs	r3, r2
 8002168:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800216a:	f7ff fc37 	bl	80019dc <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800216e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002178:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800217c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217e:	f7fe fef1 	bl	8000f64 <HAL_GetTick>
 8002182:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8002184:	e008      	b.n	8002198 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002186:	f7fe feed 	bl	8000f64 <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b0a      	cmp	r3, #10
 8002192:	d901      	bls.n	8002198 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e04c      	b.n	8002232 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8002198:	f7ff fc3c 	bl	8001a14 <LL_RCC_PLL_IsReady>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d0f1      	beq.n	8002186 <HAL_RCC_OscConfig+0x646>
 80021a2:	e045      	b.n	8002230 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021a4:	f7ff fc28 	bl	80019f8 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a8:	f7fe fedc 	bl	8000f64 <HAL_GetTick>
 80021ac:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021b0:	f7fe fed8 	bl	8000f64 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b0a      	cmp	r3, #10
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e037      	b.n	8002232 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80021c2:	f7ff fc27 	bl	8001a14 <LL_RCC_PLL_IsReady>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1f1      	bne.n	80021b0 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80021cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021d0:	68da      	ldr	r2, [r3, #12]
 80021d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80021d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002240 <HAL_RCC_OscConfig+0x700>)
 80021d8:	4013      	ands	r3, r2
 80021da:	60cb      	str	r3, [r1, #12]
 80021dc:	e028      	b.n	8002230 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d101      	bne.n	80021ea <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e023      	b.n	8002232 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80021ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	f003 0203 	and.w	r2, r3, #3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d115      	bne.n	800222c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800220a:	429a      	cmp	r2, r3
 800220c:	d10e      	bne.n	800222c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002218:	021b      	lsls	r3, r3, #8
 800221a:	429a      	cmp	r2, r3
 800221c:	d106      	bne.n	800222c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002228:	429a      	cmp	r2, r3
 800222a:	d001      	beq.n	8002230 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e000      	b.n	8002232 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	3720      	adds	r7, #32
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	11c1808c 	.word	0x11c1808c
 8002240:	eefefffc 	.word	0xeefefffc

08002244 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d101      	bne.n	8002258 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e12c      	b.n	80024b2 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002258:	4b98      	ldr	r3, [pc, #608]	@ (80024bc <HAL_RCC_ClockConfig+0x278>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0307 	and.w	r3, r3, #7
 8002260:	683a      	ldr	r2, [r7, #0]
 8002262:	429a      	cmp	r2, r3
 8002264:	d91b      	bls.n	800229e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002266:	4b95      	ldr	r3, [pc, #596]	@ (80024bc <HAL_RCC_ClockConfig+0x278>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f023 0207 	bic.w	r2, r3, #7
 800226e:	4993      	ldr	r1, [pc, #588]	@ (80024bc <HAL_RCC_ClockConfig+0x278>)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	4313      	orrs	r3, r2
 8002274:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002276:	f7fe fe75 	bl	8000f64 <HAL_GetTick>
 800227a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800227c:	e008      	b.n	8002290 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800227e:	f7fe fe71 	bl	8000f64 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d901      	bls.n	8002290 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e110      	b.n	80024b2 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002290:	4b8a      	ldr	r3, [pc, #552]	@ (80024bc <HAL_RCC_ClockConfig+0x278>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0307 	and.w	r3, r3, #7
 8002298:	683a      	ldr	r2, [r7, #0]
 800229a:	429a      	cmp	r2, r3
 800229c:	d1ef      	bne.n	800227e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d016      	beq.n	80022d8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7ff fb02 	bl	80018b8 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80022b4:	f7fe fe56 	bl	8000f64 <HAL_GetTick>
 80022b8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80022ba:	e008      	b.n	80022ce <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80022bc:	f7fe fe52 	bl	8000f64 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e0f1      	b.n	80024b2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80022ce:	f7ff fbdf 	bl	8001a90 <LL_RCC_IsActiveFlag_HPRE>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d0f1      	beq.n	80022bc <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0320 	and.w	r3, r3, #32
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d016      	beq.n	8002312 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	695b      	ldr	r3, [r3, #20]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff faf8 	bl	80018de <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80022ee:	f7fe fe39 	bl	8000f64 <HAL_GetTick>
 80022f2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80022f4:	e008      	b.n	8002308 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80022f6:	f7fe fe35 	bl	8000f64 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	2b02      	cmp	r3, #2
 8002302:	d901      	bls.n	8002308 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e0d4      	b.n	80024b2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002308:	f7ff fbd3 	bl	8001ab2 <LL_RCC_IsActiveFlag_C2HPRE>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d0f1      	beq.n	80022f6 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800231a:	2b00      	cmp	r3, #0
 800231c:	d016      	beq.n	800234c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff faf0 	bl	8001908 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002328:	f7fe fe1c 	bl	8000f64 <HAL_GetTick>
 800232c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800232e:	e008      	b.n	8002342 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002330:	f7fe fe18 	bl	8000f64 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b02      	cmp	r3, #2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e0b7      	b.n	80024b2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002342:	f7ff fbc8 	bl	8001ad6 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d0f1      	beq.n	8002330 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0304 	and.w	r3, r3, #4
 8002354:	2b00      	cmp	r3, #0
 8002356:	d016      	beq.n	8002386 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff fae9 	bl	8001934 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002362:	f7fe fdff 	bl	8000f64 <HAL_GetTick>
 8002366:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002368:	e008      	b.n	800237c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800236a:	f7fe fdfb 	bl	8000f64 <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	2b02      	cmp	r3, #2
 8002376:	d901      	bls.n	800237c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e09a      	b.n	80024b2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800237c:	f7ff fbbd 	bl	8001afa <LL_RCC_IsActiveFlag_PPRE1>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d0f1      	beq.n	800236a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0308 	and.w	r3, r3, #8
 800238e:	2b00      	cmp	r3, #0
 8002390:	d017      	beq.n	80023c2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff fade 	bl	800195a <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800239e:	f7fe fde1 	bl	8000f64 <HAL_GetTick>
 80023a2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80023a4:	e008      	b.n	80023b8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80023a6:	f7fe fddd 	bl	8000f64 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e07c      	b.n	80024b2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80023b8:	f7ff fbb0 	bl	8001b1c <LL_RCC_IsActiveFlag_PPRE2>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d0f1      	beq.n	80023a6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d043      	beq.n	8002456 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d106      	bne.n	80023e4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80023d6:	f7ff f956 	bl	8001686 <LL_RCC_HSE_IsReady>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d11e      	bne.n	800241e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e066      	b.n	80024b2 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	2b03      	cmp	r3, #3
 80023ea:	d106      	bne.n	80023fa <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80023ec:	f7ff fb12 	bl	8001a14 <LL_RCC_PLL_IsReady>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d113      	bne.n	800241e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e05b      	b.n	80024b2 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d106      	bne.n	8002410 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002402:	f7ff f9f0 	bl	80017e6 <LL_RCC_MSI_IsReady>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d108      	bne.n	800241e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e050      	b.n	80024b2 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002410:	f7ff f966 	bl	80016e0 <LL_RCC_HSI_IsReady>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e049      	b.n	80024b2 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff fa2a 	bl	800187c <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002428:	f7fe fd9c 	bl	8000f64 <HAL_GetTick>
 800242c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800242e:	e00a      	b.n	8002446 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002430:	f7fe fd98 	bl	8000f64 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800243e:	4293      	cmp	r3, r2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e035      	b.n	80024b2 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002446:	f7ff fa2c 	bl	80018a2 <LL_RCC_GetSysClkSource>
 800244a:	4602      	mov	r2, r0
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	429a      	cmp	r2, r3
 8002454:	d1ec      	bne.n	8002430 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002456:	4b19      	ldr	r3, [pc, #100]	@ (80024bc <HAL_RCC_ClockConfig+0x278>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0307 	and.w	r3, r3, #7
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	429a      	cmp	r2, r3
 8002462:	d21b      	bcs.n	800249c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002464:	4b15      	ldr	r3, [pc, #84]	@ (80024bc <HAL_RCC_ClockConfig+0x278>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f023 0207 	bic.w	r2, r3, #7
 800246c:	4913      	ldr	r1, [pc, #76]	@ (80024bc <HAL_RCC_ClockConfig+0x278>)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	4313      	orrs	r3, r2
 8002472:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002474:	f7fe fd76 	bl	8000f64 <HAL_GetTick>
 8002478:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800247a:	e008      	b.n	800248e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800247c:	f7fe fd72 	bl	8000f64 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d901      	bls.n	800248e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e011      	b.n	80024b2 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800248e:	4b0b      	ldr	r3, [pc, #44]	@ (80024bc <HAL_RCC_ClockConfig+0x278>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0307 	and.w	r3, r3, #7
 8002496:	683a      	ldr	r2, [r7, #0]
 8002498:	429a      	cmp	r2, r3
 800249a:	d1ef      	bne.n	800247c <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800249c:	f000 f8b4 	bl	8002608 <HAL_RCC_GetHCLKFreq>
 80024a0:	4603      	mov	r3, r0
 80024a2:	4a07      	ldr	r2, [pc, #28]	@ (80024c0 <HAL_RCC_ClockConfig+0x27c>)
 80024a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 80024a6:	4b07      	ldr	r3, [pc, #28]	@ (80024c4 <HAL_RCC_ClockConfig+0x280>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7fe fd0e 	bl	8000ecc <HAL_InitTick>
 80024b0:	4603      	mov	r3, r0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	58004000 	.word	0x58004000
 80024c0:	20000000 	.word	0x20000000
 80024c4:	20000004 	.word	0x20000004

080024c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024c8:	b590      	push	{r4, r7, lr}
 80024ca:	b087      	sub	sp, #28
 80024cc:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80024ce:	2300      	movs	r3, #0
 80024d0:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80024d2:	2300      	movs	r3, #0
 80024d4:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024d6:	f7ff f9e4 	bl	80018a2 <LL_RCC_GetSysClkSource>
 80024da:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024dc:	f7ff facd 	bl	8001a7a <LL_RCC_PLL_GetMainSource>
 80024e0:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d005      	beq.n	80024f4 <HAL_RCC_GetSysClockFreq+0x2c>
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	2b0c      	cmp	r3, #12
 80024ec:	d139      	bne.n	8002562 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d136      	bne.n	8002562 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80024f4:	f7ff f987 	bl	8001806 <LL_RCC_MSI_IsEnabledRangeSelect>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d115      	bne.n	800252a <HAL_RCC_GetSysClockFreq+0x62>
 80024fe:	f7ff f982 	bl	8001806 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002502:	4603      	mov	r3, r0
 8002504:	2b01      	cmp	r3, #1
 8002506:	d106      	bne.n	8002516 <HAL_RCC_GetSysClockFreq+0x4e>
 8002508:	f7ff f98d 	bl	8001826 <LL_RCC_MSI_GetRange>
 800250c:	4603      	mov	r3, r0
 800250e:	0a1b      	lsrs	r3, r3, #8
 8002510:	f003 030f 	and.w	r3, r3, #15
 8002514:	e005      	b.n	8002522 <HAL_RCC_GetSysClockFreq+0x5a>
 8002516:	f7ff f991 	bl	800183c <LL_RCC_MSI_GetRangeAfterStandby>
 800251a:	4603      	mov	r3, r0
 800251c:	0a1b      	lsrs	r3, r3, #8
 800251e:	f003 030f 	and.w	r3, r3, #15
 8002522:	4a36      	ldr	r2, [pc, #216]	@ (80025fc <HAL_RCC_GetSysClockFreq+0x134>)
 8002524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002528:	e014      	b.n	8002554 <HAL_RCC_GetSysClockFreq+0x8c>
 800252a:	f7ff f96c 	bl	8001806 <LL_RCC_MSI_IsEnabledRangeSelect>
 800252e:	4603      	mov	r3, r0
 8002530:	2b01      	cmp	r3, #1
 8002532:	d106      	bne.n	8002542 <HAL_RCC_GetSysClockFreq+0x7a>
 8002534:	f7ff f977 	bl	8001826 <LL_RCC_MSI_GetRange>
 8002538:	4603      	mov	r3, r0
 800253a:	091b      	lsrs	r3, r3, #4
 800253c:	f003 030f 	and.w	r3, r3, #15
 8002540:	e005      	b.n	800254e <HAL_RCC_GetSysClockFreq+0x86>
 8002542:	f7ff f97b 	bl	800183c <LL_RCC_MSI_GetRangeAfterStandby>
 8002546:	4603      	mov	r3, r0
 8002548:	091b      	lsrs	r3, r3, #4
 800254a:	f003 030f 	and.w	r3, r3, #15
 800254e:	4a2b      	ldr	r2, [pc, #172]	@ (80025fc <HAL_RCC_GetSysClockFreq+0x134>)
 8002550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002554:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d115      	bne.n	8002588 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002560:	e012      	b.n	8002588 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	2b04      	cmp	r3, #4
 8002566:	d102      	bne.n	800256e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002568:	4b25      	ldr	r3, [pc, #148]	@ (8002600 <HAL_RCC_GetSysClockFreq+0x138>)
 800256a:	617b      	str	r3, [r7, #20]
 800256c:	e00c      	b.n	8002588 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	2b08      	cmp	r3, #8
 8002572:	d109      	bne.n	8002588 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002574:	f7ff f85a 	bl	800162c <LL_RCC_HSE_IsEnabledDiv2>
 8002578:	4603      	mov	r3, r0
 800257a:	2b01      	cmp	r3, #1
 800257c:	d102      	bne.n	8002584 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800257e:	4b20      	ldr	r3, [pc, #128]	@ (8002600 <HAL_RCC_GetSysClockFreq+0x138>)
 8002580:	617b      	str	r3, [r7, #20]
 8002582:	e001      	b.n	8002588 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002584:	4b1f      	ldr	r3, [pc, #124]	@ (8002604 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002586:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002588:	f7ff f98b 	bl	80018a2 <LL_RCC_GetSysClkSource>
 800258c:	4603      	mov	r3, r0
 800258e:	2b0c      	cmp	r3, #12
 8002590:	d12f      	bne.n	80025f2 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002592:	f7ff fa72 	bl	8001a7a <LL_RCC_PLL_GetMainSource>
 8002596:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b02      	cmp	r3, #2
 800259c:	d003      	beq.n	80025a6 <HAL_RCC_GetSysClockFreq+0xde>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2b03      	cmp	r3, #3
 80025a2:	d003      	beq.n	80025ac <HAL_RCC_GetSysClockFreq+0xe4>
 80025a4:	e00d      	b.n	80025c2 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80025a6:	4b16      	ldr	r3, [pc, #88]	@ (8002600 <HAL_RCC_GetSysClockFreq+0x138>)
 80025a8:	60fb      	str	r3, [r7, #12]
        break;
 80025aa:	e00d      	b.n	80025c8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80025ac:	f7ff f83e 	bl	800162c <LL_RCC_HSE_IsEnabledDiv2>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d102      	bne.n	80025bc <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80025b6:	4b12      	ldr	r3, [pc, #72]	@ (8002600 <HAL_RCC_GetSysClockFreq+0x138>)
 80025b8:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80025ba:	e005      	b.n	80025c8 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80025bc:	4b11      	ldr	r3, [pc, #68]	@ (8002604 <HAL_RCC_GetSysClockFreq+0x13c>)
 80025be:	60fb      	str	r3, [r7, #12]
        break;
 80025c0:	e002      	b.n	80025c8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	60fb      	str	r3, [r7, #12]
        break;
 80025c6:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80025c8:	f7ff fa35 	bl	8001a36 <LL_RCC_PLL_GetN>
 80025cc:	4602      	mov	r2, r0
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	fb03 f402 	mul.w	r4, r3, r2
 80025d4:	f7ff fa46 	bl	8001a64 <LL_RCC_PLL_GetDivider>
 80025d8:	4603      	mov	r3, r0
 80025da:	091b      	lsrs	r3, r3, #4
 80025dc:	3301      	adds	r3, #1
 80025de:	fbb4 f4f3 	udiv	r4, r4, r3
 80025e2:	f7ff fa34 	bl	8001a4e <LL_RCC_PLL_GetR>
 80025e6:	4603      	mov	r3, r0
 80025e8:	0f5b      	lsrs	r3, r3, #29
 80025ea:	3301      	adds	r3, #1
 80025ec:	fbb4 f3f3 	udiv	r3, r4, r3
 80025f0:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80025f2:	697b      	ldr	r3, [r7, #20]
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	371c      	adds	r7, #28
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd90      	pop	{r4, r7, pc}
 80025fc:	08004324 	.word	0x08004324
 8002600:	00f42400 	.word	0x00f42400
 8002604:	01e84800 	.word	0x01e84800

08002608 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002608:	b598      	push	{r3, r4, r7, lr}
 800260a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800260c:	f7ff ff5c 	bl	80024c8 <HAL_RCC_GetSysClockFreq>
 8002610:	4604      	mov	r4, r0
 8002612:	f7ff f9b5 	bl	8001980 <LL_RCC_GetAHBPrescaler>
 8002616:	4603      	mov	r3, r0
 8002618:	091b      	lsrs	r3, r3, #4
 800261a:	f003 030f 	and.w	r3, r3, #15
 800261e:	4a03      	ldr	r2, [pc, #12]	@ (800262c <HAL_RCC_GetHCLKFreq+0x24>)
 8002620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002624:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002628:	4618      	mov	r0, r3
 800262a:	bd98      	pop	{r3, r4, r7, pc}
 800262c:	080042c4 	.word	0x080042c4

08002630 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002630:	b598      	push	{r3, r4, r7, lr}
 8002632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002634:	f7ff ffe8 	bl	8002608 <HAL_RCC_GetHCLKFreq>
 8002638:	4604      	mov	r4, r0
 800263a:	f7ff f9b9 	bl	80019b0 <LL_RCC_GetAPB1Prescaler>
 800263e:	4603      	mov	r3, r0
 8002640:	0a1b      	lsrs	r3, r3, #8
 8002642:	4a03      	ldr	r2, [pc, #12]	@ (8002650 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002648:	fa24 f303 	lsr.w	r3, r4, r3
}
 800264c:	4618      	mov	r0, r3
 800264e:	bd98      	pop	{r3, r4, r7, pc}
 8002650:	08004304 	.word	0x08004304

08002654 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002654:	b598      	push	{r3, r4, r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002658:	f7ff ffd6 	bl	8002608 <HAL_RCC_GetHCLKFreq>
 800265c:	4604      	mov	r4, r0
 800265e:	f7ff f9b2 	bl	80019c6 <LL_RCC_GetAPB2Prescaler>
 8002662:	4603      	mov	r3, r0
 8002664:	0adb      	lsrs	r3, r3, #11
 8002666:	4a03      	ldr	r2, [pc, #12]	@ (8002674 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800266c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002670:	4618      	mov	r0, r3
 8002672:	bd98      	pop	{r3, r4, r7, pc}
 8002674:	08004304 	.word	0x08004304

08002678 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002678:	b590      	push	{r4, r7, lr}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	091b      	lsrs	r3, r3, #4
 8002684:	f003 030f 	and.w	r3, r3, #15
 8002688:	4a10      	ldr	r2, [pc, #64]	@ (80026cc <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800268a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800268e:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8002690:	f7ff f981 	bl	8001996 <LL_RCC_GetAHB3Prescaler>
 8002694:	4603      	mov	r3, r0
 8002696:	091b      	lsrs	r3, r3, #4
 8002698:	f003 030f 	and.w	r3, r3, #15
 800269c:	4a0c      	ldr	r2, [pc, #48]	@ (80026d0 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800269e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a8:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	4a09      	ldr	r2, [pc, #36]	@ (80026d4 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80026ae:	fba2 2303 	umull	r2, r3, r2, r3
 80026b2:	0c9c      	lsrs	r4, r3, #18
 80026b4:	f7fe ff22 	bl	80014fc <HAL_PWREx_GetVoltageRange>
 80026b8:	4603      	mov	r3, r0
 80026ba:	4619      	mov	r1, r3
 80026bc:	4620      	mov	r0, r4
 80026be:	f000 f80b 	bl	80026d8 <RCC_SetFlashLatency>
 80026c2:	4603      	mov	r3, r0
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3714      	adds	r7, #20
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd90      	pop	{r4, r7, pc}
 80026cc:	08004324 	.word	0x08004324
 80026d0:	080042c4 	.word	0x080042c4
 80026d4:	431bde83 	.word	0x431bde83

080026d8 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b08e      	sub	sp, #56	@ 0x38
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80026e2:	4a3a      	ldr	r2, [pc, #232]	@ (80027cc <RCC_SetFlashLatency+0xf4>)
 80026e4:	f107 0320 	add.w	r3, r7, #32
 80026e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80026ec:	6018      	str	r0, [r3, #0]
 80026ee:	3304      	adds	r3, #4
 80026f0:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80026f2:	4a37      	ldr	r2, [pc, #220]	@ (80027d0 <RCC_SetFlashLatency+0xf8>)
 80026f4:	f107 0318 	add.w	r3, r7, #24
 80026f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80026fc:	6018      	str	r0, [r3, #0]
 80026fe:	3304      	adds	r3, #4
 8002700:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8002702:	4a34      	ldr	r2, [pc, #208]	@ (80027d4 <RCC_SetFlashLatency+0xfc>)
 8002704:	f107 030c 	add.w	r3, r7, #12
 8002708:	ca07      	ldmia	r2, {r0, r1, r2}
 800270a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800270e:	2300      	movs	r3, #0
 8002710:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002718:	d11b      	bne.n	8002752 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800271a:	2300      	movs	r3, #0
 800271c:	633b      	str	r3, [r7, #48]	@ 0x30
 800271e:	e014      	b.n	800274a <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	3338      	adds	r3, #56	@ 0x38
 8002726:	443b      	add	r3, r7
 8002728:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800272c:	461a      	mov	r2, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4293      	cmp	r3, r2
 8002732:	d807      	bhi.n	8002744 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	3338      	adds	r3, #56	@ 0x38
 800273a:	443b      	add	r3, r7
 800273c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002740:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002742:	e021      	b.n	8002788 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002746:	3301      	adds	r3, #1
 8002748:	633b      	str	r3, [r7, #48]	@ 0x30
 800274a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800274c:	2b02      	cmp	r3, #2
 800274e:	d9e7      	bls.n	8002720 <RCC_SetFlashLatency+0x48>
 8002750:	e01a      	b.n	8002788 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002752:	2300      	movs	r3, #0
 8002754:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002756:	e014      	b.n	8002782 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	3338      	adds	r3, #56	@ 0x38
 800275e:	443b      	add	r3, r7
 8002760:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8002764:	461a      	mov	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4293      	cmp	r3, r2
 800276a:	d807      	bhi.n	800277c <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800276c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	3338      	adds	r3, #56	@ 0x38
 8002772:	443b      	add	r3, r7
 8002774:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002778:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800277a:	e005      	b.n	8002788 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800277c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800277e:	3301      	adds	r3, #1
 8002780:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002784:	2b02      	cmp	r3, #2
 8002786:	d9e7      	bls.n	8002758 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002788:	4b13      	ldr	r3, [pc, #76]	@ (80027d8 <RCC_SetFlashLatency+0x100>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f023 0207 	bic.w	r2, r3, #7
 8002790:	4911      	ldr	r1, [pc, #68]	@ (80027d8 <RCC_SetFlashLatency+0x100>)
 8002792:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002794:	4313      	orrs	r3, r2
 8002796:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002798:	f7fe fbe4 	bl	8000f64 <HAL_GetTick>
 800279c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800279e:	e008      	b.n	80027b2 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80027a0:	f7fe fbe0 	bl	8000f64 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d901      	bls.n	80027b2 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e007      	b.n	80027c2 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80027b2:	4b09      	ldr	r3, [pc, #36]	@ (80027d8 <RCC_SetFlashLatency+0x100>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0307 	and.w	r3, r3, #7
 80027ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80027bc:	429a      	cmp	r2, r3
 80027be:	d1ef      	bne.n	80027a0 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3738      	adds	r7, #56	@ 0x38
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	080042a8 	.word	0x080042a8
 80027d0:	080042b0 	.word	0x080042b0
 80027d4:	080042b8 	.word	0x080042b8
 80027d8:	58004000 	.word	0x58004000

080027dc <LL_RCC_LSE_IsReady>:
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80027e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027e8:	f003 0302 	and.w	r3, r3, #2
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d101      	bne.n	80027f4 <LL_RCC_LSE_IsReady+0x18>
 80027f0:	2301      	movs	r3, #1
 80027f2:	e000      	b.n	80027f6 <LL_RCC_LSE_IsReady+0x1a>
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bc80      	pop	{r7}
 80027fc:	4770      	bx	lr

080027fe <LL_RCC_SetUSARTClockSource>:
{
 80027fe:	b480      	push	{r7}
 8002800:	b083      	sub	sp, #12
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8002806:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800280a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	0c1b      	lsrs	r3, r3, #16
 8002812:	43db      	mvns	r3, r3
 8002814:	401a      	ands	r2, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	b29b      	uxth	r3, r3
 800281a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800281e:	4313      	orrs	r3, r2
 8002820:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002824:	bf00      	nop
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	bc80      	pop	{r7}
 800282c:	4770      	bx	lr

0800282e <LL_RCC_SetI2SClockSource>:
{
 800282e:	b480      	push	{r7}
 8002830:	b083      	sub	sp, #12
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8002836:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800283a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800283e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002842:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4313      	orrs	r3, r2
 800284a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800284e:	bf00      	nop
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr

08002858 <LL_RCC_SetLPUARTClockSource>:
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002860:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002864:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002868:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800286c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4313      	orrs	r3, r2
 8002874:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	bc80      	pop	{r7}
 8002880:	4770      	bx	lr

08002882 <LL_RCC_SetI2CClockSource>:
{
 8002882:	b480      	push	{r7}
 8002884:	b083      	sub	sp, #12
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800288a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800288e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	091b      	lsrs	r3, r3, #4
 8002896:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800289a:	43db      	mvns	r3, r3
 800289c:	401a      	ands	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	011b      	lsls	r3, r3, #4
 80028a2:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80028a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80028aa:	4313      	orrs	r3, r2
 80028ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80028b0:	bf00      	nop
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bc80      	pop	{r7}
 80028b8:	4770      	bx	lr

080028ba <LL_RCC_SetLPTIMClockSource>:
{
 80028ba:	b480      	push	{r7}
 80028bc:	b083      	sub	sp, #12
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80028c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028c6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	0c1b      	lsrs	r3, r3, #16
 80028ce:	041b      	lsls	r3, r3, #16
 80028d0:	43db      	mvns	r3, r3
 80028d2:	401a      	ands	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	041b      	lsls	r3, r3, #16
 80028d8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80028dc:	4313      	orrs	r3, r2
 80028de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80028e2:	bf00      	nop
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bc80      	pop	{r7}
 80028ea:	4770      	bx	lr

080028ec <LL_RCC_SetRNGClockSource>:
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80028f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028fc:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002900:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4313      	orrs	r3, r2
 8002908:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	bc80      	pop	{r7}
 8002914:	4770      	bx	lr

08002916 <LL_RCC_SetADCClockSource>:
{
 8002916:	b480      	push	{r7}
 8002918:	b083      	sub	sp, #12
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800291e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002926:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800292a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4313      	orrs	r3, r2
 8002932:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002936:	bf00      	nop
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	bc80      	pop	{r7}
 800293e:	4770      	bx	lr

08002940 <LL_RCC_SetRTCClockSource>:
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002948:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800294c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002950:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002954:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4313      	orrs	r3, r2
 800295c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002960:	bf00      	nop
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	bc80      	pop	{r7}
 8002968:	4770      	bx	lr

0800296a <LL_RCC_GetRTCClockSource>:
{
 800296a:	b480      	push	{r7}
 800296c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800296e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002972:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002976:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800297a:	4618      	mov	r0, r3
 800297c:	46bd      	mov	sp, r7
 800297e:	bc80      	pop	{r7}
 8002980:	4770      	bx	lr

08002982 <LL_RCC_ForceBackupDomainReset>:
{
 8002982:	b480      	push	{r7}
 8002984:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002986:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800298a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800298e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002992:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002996:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800299a:	bf00      	nop
 800299c:	46bd      	mov	sp, r7
 800299e:	bc80      	pop	{r7}
 80029a0:	4770      	bx	lr

080029a2 <LL_RCC_ReleaseBackupDomainReset>:
{
 80029a2:	b480      	push	{r7}
 80029a4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80029a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80029b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80029ba:	bf00      	nop
 80029bc:	46bd      	mov	sp, r7
 80029be:	bc80      	pop	{r7}
 80029c0:	4770      	bx	lr
	...

080029c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80029cc:	2300      	movs	r3, #0
 80029ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80029d0:	2300      	movs	r3, #0
 80029d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80029d4:	2300      	movs	r3, #0
 80029d6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d058      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80029e4:	f7fe fd7c 	bl	80014e0 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029e8:	f7fe fabc 	bl	8000f64 <HAL_GetTick>
 80029ec:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80029ee:	e009      	b.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029f0:	f7fe fab8 	bl	8000f64 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d902      	bls.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	74fb      	strb	r3, [r7, #19]
        break;
 8002a02:	e006      	b.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002a04:	4b7b      	ldr	r3, [pc, #492]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a10:	d1ee      	bne.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8002a12:	7cfb      	ldrb	r3, [r7, #19]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d13c      	bne.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002a18:	f7ff ffa7 	bl	800296a <LL_RCC_GetRTCClockSource>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d00f      	beq.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a32:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a34:	f7ff ffa5 	bl	8002982 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a38:	f7ff ffb3 	bl	80029a2 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a3c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d014      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a50:	f7fe fa88 	bl	8000f64 <HAL_GetTick>
 8002a54:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8002a56:	e00b      	b.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a58:	f7fe fa84 	bl	8000f64 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d902      	bls.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	74fb      	strb	r3, [r7, #19]
            break;
 8002a6e:	e004      	b.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8002a70:	f7ff feb4 	bl	80027dc <LL_RCC_LSE_IsReady>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d1ee      	bne.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8002a7a:	7cfb      	ldrb	r3, [r7, #19]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d105      	bne.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7ff ff5b 	bl	8002940 <LL_RCC_SetRTCClockSource>
 8002a8a:	e004      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a8c:	7cfb      	ldrb	r3, [r7, #19]
 8002a8e:	74bb      	strb	r3, [r7, #18]
 8002a90:	e001      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a92:	7cfb      	ldrb	r3, [r7, #19]
 8002a94:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d004      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7ff fea9 	bl	80027fe <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d004      	beq.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff fe9e 	bl	80027fe <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0320 	and.w	r3, r3, #32
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d004      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7ff fec0 	bl	8002858 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d004      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a1b      	ldr	r3, [r3, #32]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7ff fee6 	bl	80028ba <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d004      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7ff fedb 	bl	80028ba <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d004      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff fed0 	bl	80028ba <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d004      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7ff fea9 	bl	8002882 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d004      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7ff fe9e 	bl	8002882 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d004      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	69db      	ldr	r3, [r3, #28]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7ff fe93 	bl	8002882 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0310 	and.w	r3, r3, #16
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d011      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7ff fe5e 	bl	800282e <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b7a:	d107      	bne.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8002b7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b8a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d010      	beq.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7ff fea5 	bl	80028ec <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d107      	bne.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002baa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002bb4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bb8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d011      	beq.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7ff fea3 	bl	8002916 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bd4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002bd8:	d107      	bne.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002bda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002be4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002be8:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8002bea:	7cbb      	ldrb	r3, [r7, #18]
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3718      	adds	r7, #24
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	58000400 	.word	0x58000400

08002bf8 <LL_RCC_GetUSARTClockSource>:
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8002c00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c04:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	401a      	ands	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	041b      	lsls	r3, r3, #16
 8002c10:	4313      	orrs	r3, r2
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bc80      	pop	{r7}
 8002c1a:	4770      	bx	lr

08002c1c <LL_RCC_GetLPUARTClockSource>:
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8002c24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c28:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4013      	ands	r3, r2
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bc80      	pop	{r7}
 8002c38:	4770      	bx	lr

08002c3a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b082      	sub	sp, #8
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d101      	bne.n	8002c4c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e042      	b.n	8002cd2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d106      	bne.n	8002c64 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f7fd ffbe 	bl	8000be0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2224      	movs	r2, #36	@ 0x24
 8002c68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f022 0201 	bic.w	r2, r2, #1
 8002c7a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d002      	beq.n	8002c8a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f000 fb23 	bl	80032d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 f8ac 	bl	8002de8 <UART_SetConfig>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d101      	bne.n	8002c9a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e01b      	b.n	8002cd2 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	685a      	ldr	r2, [r3, #4]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ca8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	689a      	ldr	r2, [r3, #8]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002cb8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f042 0201 	orr.w	r2, r2, #1
 8002cc8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 fba1 	bl	8003412 <UART_CheckIdleState>
 8002cd0:	4603      	mov	r3, r0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3708      	adds	r7, #8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b08a      	sub	sp, #40	@ 0x28
 8002cde:	af02      	add	r7, sp, #8
 8002ce0:	60f8      	str	r0, [r7, #12]
 8002ce2:	60b9      	str	r1, [r7, #8]
 8002ce4:	603b      	str	r3, [r7, #0]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cf0:	2b20      	cmp	r3, #32
 8002cf2:	d173      	bne.n	8002ddc <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d002      	beq.n	8002d00 <HAL_UART_Transmit+0x26>
 8002cfa:	88fb      	ldrh	r3, [r7, #6]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d101      	bne.n	8002d04 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e06c      	b.n	8002dde <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2221      	movs	r2, #33	@ 0x21
 8002d10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d14:	f7fe f926 	bl	8000f64 <HAL_GetTick>
 8002d18:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	88fa      	ldrh	r2, [r7, #6]
 8002d1e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	88fa      	ldrh	r2, [r7, #6]
 8002d26:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d32:	d108      	bne.n	8002d46 <HAL_UART_Transmit+0x6c>
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d104      	bne.n	8002d46 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	61bb      	str	r3, [r7, #24]
 8002d44:	e003      	b.n	8002d4e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d4e:	e02c      	b.n	8002daa <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	9300      	str	r3, [sp, #0]
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	2200      	movs	r2, #0
 8002d58:	2180      	movs	r1, #128	@ 0x80
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f000 fba7 	bl	80034ae <UART_WaitOnFlagUntilTimeout>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e039      	b.n	8002dde <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d10b      	bne.n	8002d88 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	881b      	ldrh	r3, [r3, #0]
 8002d74:	461a      	mov	r2, r3
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d7e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	3302      	adds	r3, #2
 8002d84:	61bb      	str	r3, [r7, #24]
 8002d86:	e007      	b.n	8002d98 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	781a      	ldrb	r2, [r3, #0]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	3301      	adds	r3, #1
 8002d96:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	3b01      	subs	r3, #1
 8002da2:	b29a      	uxth	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d1cc      	bne.n	8002d50 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	9300      	str	r3, [sp, #0]
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	2140      	movs	r1, #64	@ 0x40
 8002dc0:	68f8      	ldr	r0, [r7, #12]
 8002dc2:	f000 fb74 	bl	80034ae <UART_WaitOnFlagUntilTimeout>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e006      	b.n	8002dde <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	e000      	b.n	8002dde <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8002ddc:	2302      	movs	r3, #2
  }
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3720      	adds	r7, #32
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
	...

08002de8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002de8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dec:	b08c      	sub	sp, #48	@ 0x30
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002df2:	2300      	movs	r3, #0
 8002df4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	689a      	ldr	r2, [r3, #8]
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	431a      	orrs	r2, r3
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	431a      	orrs	r2, r3
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	69db      	ldr	r3, [r3, #28]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	4b94      	ldr	r3, [pc, #592]	@ (8003068 <UART_SetConfig+0x280>)
 8002e18:	4013      	ands	r3, r2
 8002e1a:	697a      	ldr	r2, [r7, #20]
 8002e1c:	6812      	ldr	r2, [r2, #0]
 8002e1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002e20:	430b      	orrs	r3, r1
 8002e22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	68da      	ldr	r2, [r3, #12]
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	430a      	orrs	r2, r1
 8002e38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a89      	ldr	r2, [pc, #548]	@ (800306c <UART_SetConfig+0x284>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d004      	beq.n	8002e54 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e50:	4313      	orrs	r3, r2
 8002e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002e5e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	6812      	ldr	r2, [r2, #0]
 8002e66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002e68:	430b      	orrs	r3, r1
 8002e6a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e72:	f023 010f 	bic.w	r1, r3, #15
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a7a      	ldr	r2, [pc, #488]	@ (8003070 <UART_SetConfig+0x288>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d127      	bne.n	8002edc <UART_SetConfig+0xf4>
 8002e8c:	2003      	movs	r0, #3
 8002e8e:	f7ff feb3 	bl	8002bf8 <LL_RCC_GetUSARTClockSource>
 8002e92:	4603      	mov	r3, r0
 8002e94:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8002e98:	2b03      	cmp	r3, #3
 8002e9a:	d81b      	bhi.n	8002ed4 <UART_SetConfig+0xec>
 8002e9c:	a201      	add	r2, pc, #4	@ (adr r2, 8002ea4 <UART_SetConfig+0xbc>)
 8002e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea2:	bf00      	nop
 8002ea4:	08002eb5 	.word	0x08002eb5
 8002ea8:	08002ec5 	.word	0x08002ec5
 8002eac:	08002ebd 	.word	0x08002ebd
 8002eb0:	08002ecd 	.word	0x08002ecd
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002eba:	e080      	b.n	8002fbe <UART_SetConfig+0x1d6>
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ec2:	e07c      	b.n	8002fbe <UART_SetConfig+0x1d6>
 8002ec4:	2304      	movs	r3, #4
 8002ec6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002eca:	e078      	b.n	8002fbe <UART_SetConfig+0x1d6>
 8002ecc:	2308      	movs	r3, #8
 8002ece:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ed2:	e074      	b.n	8002fbe <UART_SetConfig+0x1d6>
 8002ed4:	2310      	movs	r3, #16
 8002ed6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002eda:	e070      	b.n	8002fbe <UART_SetConfig+0x1d6>
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a64      	ldr	r2, [pc, #400]	@ (8003074 <UART_SetConfig+0x28c>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d138      	bne.n	8002f58 <UART_SetConfig+0x170>
 8002ee6:	200c      	movs	r0, #12
 8002ee8:	f7ff fe86 	bl	8002bf8 <LL_RCC_GetUSARTClockSource>
 8002eec:	4603      	mov	r3, r0
 8002eee:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8002ef2:	2b0c      	cmp	r3, #12
 8002ef4:	d82c      	bhi.n	8002f50 <UART_SetConfig+0x168>
 8002ef6:	a201      	add	r2, pc, #4	@ (adr r2, 8002efc <UART_SetConfig+0x114>)
 8002ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002efc:	08002f31 	.word	0x08002f31
 8002f00:	08002f51 	.word	0x08002f51
 8002f04:	08002f51 	.word	0x08002f51
 8002f08:	08002f51 	.word	0x08002f51
 8002f0c:	08002f41 	.word	0x08002f41
 8002f10:	08002f51 	.word	0x08002f51
 8002f14:	08002f51 	.word	0x08002f51
 8002f18:	08002f51 	.word	0x08002f51
 8002f1c:	08002f39 	.word	0x08002f39
 8002f20:	08002f51 	.word	0x08002f51
 8002f24:	08002f51 	.word	0x08002f51
 8002f28:	08002f51 	.word	0x08002f51
 8002f2c:	08002f49 	.word	0x08002f49
 8002f30:	2300      	movs	r3, #0
 8002f32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f36:	e042      	b.n	8002fbe <UART_SetConfig+0x1d6>
 8002f38:	2302      	movs	r3, #2
 8002f3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f3e:	e03e      	b.n	8002fbe <UART_SetConfig+0x1d6>
 8002f40:	2304      	movs	r3, #4
 8002f42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f46:	e03a      	b.n	8002fbe <UART_SetConfig+0x1d6>
 8002f48:	2308      	movs	r3, #8
 8002f4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f4e:	e036      	b.n	8002fbe <UART_SetConfig+0x1d6>
 8002f50:	2310      	movs	r3, #16
 8002f52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f56:	e032      	b.n	8002fbe <UART_SetConfig+0x1d6>
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a43      	ldr	r2, [pc, #268]	@ (800306c <UART_SetConfig+0x284>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d12a      	bne.n	8002fb8 <UART_SetConfig+0x1d0>
 8002f62:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8002f66:	f7ff fe59 	bl	8002c1c <LL_RCC_GetLPUARTClockSource>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002f70:	d01a      	beq.n	8002fa8 <UART_SetConfig+0x1c0>
 8002f72:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002f76:	d81b      	bhi.n	8002fb0 <UART_SetConfig+0x1c8>
 8002f78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f7c:	d00c      	beq.n	8002f98 <UART_SetConfig+0x1b0>
 8002f7e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f82:	d815      	bhi.n	8002fb0 <UART_SetConfig+0x1c8>
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d003      	beq.n	8002f90 <UART_SetConfig+0x1a8>
 8002f88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f8c:	d008      	beq.n	8002fa0 <UART_SetConfig+0x1b8>
 8002f8e:	e00f      	b.n	8002fb0 <UART_SetConfig+0x1c8>
 8002f90:	2300      	movs	r3, #0
 8002f92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f96:	e012      	b.n	8002fbe <UART_SetConfig+0x1d6>
 8002f98:	2302      	movs	r3, #2
 8002f9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f9e:	e00e      	b.n	8002fbe <UART_SetConfig+0x1d6>
 8002fa0:	2304      	movs	r3, #4
 8002fa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fa6:	e00a      	b.n	8002fbe <UART_SetConfig+0x1d6>
 8002fa8:	2308      	movs	r3, #8
 8002faa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fae:	e006      	b.n	8002fbe <UART_SetConfig+0x1d6>
 8002fb0:	2310      	movs	r3, #16
 8002fb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fb6:	e002      	b.n	8002fbe <UART_SetConfig+0x1d6>
 8002fb8:	2310      	movs	r3, #16
 8002fba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a2a      	ldr	r2, [pc, #168]	@ (800306c <UART_SetConfig+0x284>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	f040 80a4 	bne.w	8003112 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002fca:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002fce:	2b08      	cmp	r3, #8
 8002fd0:	d823      	bhi.n	800301a <UART_SetConfig+0x232>
 8002fd2:	a201      	add	r2, pc, #4	@ (adr r2, 8002fd8 <UART_SetConfig+0x1f0>)
 8002fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd8:	08002ffd 	.word	0x08002ffd
 8002fdc:	0800301b 	.word	0x0800301b
 8002fe0:	08003005 	.word	0x08003005
 8002fe4:	0800301b 	.word	0x0800301b
 8002fe8:	0800300b 	.word	0x0800300b
 8002fec:	0800301b 	.word	0x0800301b
 8002ff0:	0800301b 	.word	0x0800301b
 8002ff4:	0800301b 	.word	0x0800301b
 8002ff8:	08003013 	.word	0x08003013
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ffc:	f7ff fb18 	bl	8002630 <HAL_RCC_GetPCLK1Freq>
 8003000:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003002:	e010      	b.n	8003026 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003004:	4b1c      	ldr	r3, [pc, #112]	@ (8003078 <UART_SetConfig+0x290>)
 8003006:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003008:	e00d      	b.n	8003026 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800300a:	f7ff fa5d 	bl	80024c8 <HAL_RCC_GetSysClockFreq>
 800300e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003010:	e009      	b.n	8003026 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003012:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003016:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003018:	e005      	b.n	8003026 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800301a:	2300      	movs	r3, #0
 800301c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003024:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003028:	2b00      	cmp	r3, #0
 800302a:	f000 8137 	beq.w	800329c <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003032:	4a12      	ldr	r2, [pc, #72]	@ (800307c <UART_SetConfig+0x294>)
 8003034:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003038:	461a      	mov	r2, r3
 800303a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800303c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003040:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	685a      	ldr	r2, [r3, #4]
 8003046:	4613      	mov	r3, r2
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	4413      	add	r3, r2
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	429a      	cmp	r2, r3
 8003050:	d305      	bcc.n	800305e <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	429a      	cmp	r2, r3
 800305c:	d910      	bls.n	8003080 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003064:	e11a      	b.n	800329c <UART_SetConfig+0x4b4>
 8003066:	bf00      	nop
 8003068:	cfff69f3 	.word	0xcfff69f3
 800306c:	40008000 	.word	0x40008000
 8003070:	40013800 	.word	0x40013800
 8003074:	40004400 	.word	0x40004400
 8003078:	00f42400 	.word	0x00f42400
 800307c:	08004364 	.word	0x08004364
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003082:	2200      	movs	r2, #0
 8003084:	60bb      	str	r3, [r7, #8]
 8003086:	60fa      	str	r2, [r7, #12]
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800308c:	4a8e      	ldr	r2, [pc, #568]	@ (80032c8 <UART_SetConfig+0x4e0>)
 800308e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003092:	b29b      	uxth	r3, r3
 8003094:	2200      	movs	r2, #0
 8003096:	603b      	str	r3, [r7, #0]
 8003098:	607a      	str	r2, [r7, #4]
 800309a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800309e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80030a2:	f7fd f869 	bl	8000178 <__aeabi_uldivmod>
 80030a6:	4602      	mov	r2, r0
 80030a8:	460b      	mov	r3, r1
 80030aa:	4610      	mov	r0, r2
 80030ac:	4619      	mov	r1, r3
 80030ae:	f04f 0200 	mov.w	r2, #0
 80030b2:	f04f 0300 	mov.w	r3, #0
 80030b6:	020b      	lsls	r3, r1, #8
 80030b8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80030bc:	0202      	lsls	r2, r0, #8
 80030be:	6979      	ldr	r1, [r7, #20]
 80030c0:	6849      	ldr	r1, [r1, #4]
 80030c2:	0849      	lsrs	r1, r1, #1
 80030c4:	2000      	movs	r0, #0
 80030c6:	460c      	mov	r4, r1
 80030c8:	4605      	mov	r5, r0
 80030ca:	eb12 0804 	adds.w	r8, r2, r4
 80030ce:	eb43 0905 	adc.w	r9, r3, r5
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	469a      	mov	sl, r3
 80030da:	4693      	mov	fp, r2
 80030dc:	4652      	mov	r2, sl
 80030de:	465b      	mov	r3, fp
 80030e0:	4640      	mov	r0, r8
 80030e2:	4649      	mov	r1, r9
 80030e4:	f7fd f848 	bl	8000178 <__aeabi_uldivmod>
 80030e8:	4602      	mov	r2, r0
 80030ea:	460b      	mov	r3, r1
 80030ec:	4613      	mov	r3, r2
 80030ee:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80030f0:	6a3b      	ldr	r3, [r7, #32]
 80030f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80030f6:	d308      	bcc.n	800310a <UART_SetConfig+0x322>
 80030f8:	6a3b      	ldr	r3, [r7, #32]
 80030fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80030fe:	d204      	bcs.n	800310a <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	6a3a      	ldr	r2, [r7, #32]
 8003106:	60da      	str	r2, [r3, #12]
 8003108:	e0c8      	b.n	800329c <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003110:	e0c4      	b.n	800329c <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	69db      	ldr	r3, [r3, #28]
 8003116:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800311a:	d167      	bne.n	80031ec <UART_SetConfig+0x404>
  {
    switch (clocksource)
 800311c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003120:	2b08      	cmp	r3, #8
 8003122:	d828      	bhi.n	8003176 <UART_SetConfig+0x38e>
 8003124:	a201      	add	r2, pc, #4	@ (adr r2, 800312c <UART_SetConfig+0x344>)
 8003126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800312a:	bf00      	nop
 800312c:	08003151 	.word	0x08003151
 8003130:	08003159 	.word	0x08003159
 8003134:	08003161 	.word	0x08003161
 8003138:	08003177 	.word	0x08003177
 800313c:	08003167 	.word	0x08003167
 8003140:	08003177 	.word	0x08003177
 8003144:	08003177 	.word	0x08003177
 8003148:	08003177 	.word	0x08003177
 800314c:	0800316f 	.word	0x0800316f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003150:	f7ff fa6e 	bl	8002630 <HAL_RCC_GetPCLK1Freq>
 8003154:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003156:	e014      	b.n	8003182 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003158:	f7ff fa7c 	bl	8002654 <HAL_RCC_GetPCLK2Freq>
 800315c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800315e:	e010      	b.n	8003182 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003160:	4b5a      	ldr	r3, [pc, #360]	@ (80032cc <UART_SetConfig+0x4e4>)
 8003162:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003164:	e00d      	b.n	8003182 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003166:	f7ff f9af 	bl	80024c8 <HAL_RCC_GetSysClockFreq>
 800316a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800316c:	e009      	b.n	8003182 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800316e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003172:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003174:	e005      	b.n	8003182 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8003176:	2300      	movs	r3, #0
 8003178:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003180:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003184:	2b00      	cmp	r3, #0
 8003186:	f000 8089 	beq.w	800329c <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800318e:	4a4e      	ldr	r2, [pc, #312]	@ (80032c8 <UART_SetConfig+0x4e0>)
 8003190:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003194:	461a      	mov	r2, r3
 8003196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003198:	fbb3 f3f2 	udiv	r3, r3, r2
 800319c:	005a      	lsls	r2, r3, #1
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	085b      	lsrs	r3, r3, #1
 80031a4:	441a      	add	r2, r3
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031b0:	6a3b      	ldr	r3, [r7, #32]
 80031b2:	2b0f      	cmp	r3, #15
 80031b4:	d916      	bls.n	80031e4 <UART_SetConfig+0x3fc>
 80031b6:	6a3b      	ldr	r3, [r7, #32]
 80031b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031bc:	d212      	bcs.n	80031e4 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031be:	6a3b      	ldr	r3, [r7, #32]
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	f023 030f 	bic.w	r3, r3, #15
 80031c6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031c8:	6a3b      	ldr	r3, [r7, #32]
 80031ca:	085b      	lsrs	r3, r3, #1
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	f003 0307 	and.w	r3, r3, #7
 80031d2:	b29a      	uxth	r2, r3
 80031d4:	8bfb      	ldrh	r3, [r7, #30]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	8bfa      	ldrh	r2, [r7, #30]
 80031e0:	60da      	str	r2, [r3, #12]
 80031e2:	e05b      	b.n	800329c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80031ea:	e057      	b.n	800329c <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80031ec:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80031f0:	2b08      	cmp	r3, #8
 80031f2:	d828      	bhi.n	8003246 <UART_SetConfig+0x45e>
 80031f4:	a201      	add	r2, pc, #4	@ (adr r2, 80031fc <UART_SetConfig+0x414>)
 80031f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031fa:	bf00      	nop
 80031fc:	08003221 	.word	0x08003221
 8003200:	08003229 	.word	0x08003229
 8003204:	08003231 	.word	0x08003231
 8003208:	08003247 	.word	0x08003247
 800320c:	08003237 	.word	0x08003237
 8003210:	08003247 	.word	0x08003247
 8003214:	08003247 	.word	0x08003247
 8003218:	08003247 	.word	0x08003247
 800321c:	0800323f 	.word	0x0800323f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003220:	f7ff fa06 	bl	8002630 <HAL_RCC_GetPCLK1Freq>
 8003224:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003226:	e014      	b.n	8003252 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003228:	f7ff fa14 	bl	8002654 <HAL_RCC_GetPCLK2Freq>
 800322c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800322e:	e010      	b.n	8003252 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003230:	4b26      	ldr	r3, [pc, #152]	@ (80032cc <UART_SetConfig+0x4e4>)
 8003232:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003234:	e00d      	b.n	8003252 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003236:	f7ff f947 	bl	80024c8 <HAL_RCC_GetSysClockFreq>
 800323a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800323c:	e009      	b.n	8003252 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800323e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003242:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003244:	e005      	b.n	8003252 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8003246:	2300      	movs	r3, #0
 8003248:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003250:	bf00      	nop
    }

    if (pclk != 0U)
 8003252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003254:	2b00      	cmp	r3, #0
 8003256:	d021      	beq.n	800329c <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800325c:	4a1a      	ldr	r2, [pc, #104]	@ (80032c8 <UART_SetConfig+0x4e0>)
 800325e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003262:	461a      	mov	r2, r3
 8003264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003266:	fbb3 f2f2 	udiv	r2, r3, r2
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	085b      	lsrs	r3, r3, #1
 8003270:	441a      	add	r2, r3
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	fbb2 f3f3 	udiv	r3, r2, r3
 800327a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800327c:	6a3b      	ldr	r3, [r7, #32]
 800327e:	2b0f      	cmp	r3, #15
 8003280:	d909      	bls.n	8003296 <UART_SetConfig+0x4ae>
 8003282:	6a3b      	ldr	r3, [r7, #32]
 8003284:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003288:	d205      	bcs.n	8003296 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800328a:	6a3b      	ldr	r3, [r7, #32]
 800328c:	b29a      	uxth	r2, r3
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	60da      	str	r2, [r3, #12]
 8003294:	e002      	b.n	800329c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	2201      	movs	r2, #1
 80032a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	2200      	movs	r2, #0
 80032b0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	2200      	movs	r2, #0
 80032b6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80032b8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3730      	adds	r7, #48	@ 0x30
 80032c0:	46bd      	mov	sp, r7
 80032c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032c6:	bf00      	nop
 80032c8:	08004364 	.word	0x08004364
 80032cc:	00f42400 	.word	0x00f42400

080032d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032dc:	f003 0308 	and.w	r3, r3, #8
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d00a      	beq.n	80032fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	430a      	orrs	r2, r1
 80032f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00a      	beq.n	800331c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	430a      	orrs	r2, r1
 800331a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d00a      	beq.n	800333e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	430a      	orrs	r2, r1
 800333c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003342:	f003 0304 	and.w	r3, r3, #4
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00a      	beq.n	8003360 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	430a      	orrs	r2, r1
 800335e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003364:	f003 0310 	and.w	r3, r3, #16
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00a      	beq.n	8003382 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	430a      	orrs	r2, r1
 8003380:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003386:	f003 0320 	and.w	r3, r3, #32
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00a      	beq.n	80033a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	430a      	orrs	r2, r1
 80033a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d01a      	beq.n	80033e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033ce:	d10a      	bne.n	80033e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	430a      	orrs	r2, r1
 80033e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00a      	beq.n	8003408 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	430a      	orrs	r2, r1
 8003406:	605a      	str	r2, [r3, #4]
  }
}
 8003408:	bf00      	nop
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	bc80      	pop	{r7}
 8003410:	4770      	bx	lr

08003412 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b086      	sub	sp, #24
 8003416:	af02      	add	r7, sp, #8
 8003418:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003422:	f7fd fd9f 	bl	8000f64 <HAL_GetTick>
 8003426:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0308 	and.w	r3, r3, #8
 8003432:	2b08      	cmp	r3, #8
 8003434:	d10e      	bne.n	8003454 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003436:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800343a:	9300      	str	r3, [sp, #0]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2200      	movs	r2, #0
 8003440:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f000 f832 	bl	80034ae <UART_WaitOnFlagUntilTimeout>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d001      	beq.n	8003454 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e028      	b.n	80034a6 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0304 	and.w	r3, r3, #4
 800345e:	2b04      	cmp	r3, #4
 8003460:	d10e      	bne.n	8003480 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003462:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003466:	9300      	str	r3, [sp, #0]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2200      	movs	r2, #0
 800346c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f000 f81c 	bl	80034ae <UART_WaitOnFlagUntilTimeout>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d001      	beq.n	8003480 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e012      	b.n	80034a6 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2220      	movs	r2, #32
 8003484:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2220      	movs	r2, #32
 800348c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b09c      	sub	sp, #112	@ 0x70
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	60f8      	str	r0, [r7, #12]
 80034b6:	60b9      	str	r1, [r7, #8]
 80034b8:	603b      	str	r3, [r7, #0]
 80034ba:	4613      	mov	r3, r2
 80034bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034be:	e0af      	b.n	8003620 <UART_WaitOnFlagUntilTimeout+0x172>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80034c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c6:	f000 80ab 	beq.w	8003620 <UART_WaitOnFlagUntilTimeout+0x172>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ca:	f7fd fd4b 	bl	8000f64 <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d302      	bcc.n	80034e0 <UART_WaitOnFlagUntilTimeout+0x32>
 80034da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d140      	bne.n	8003562 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80034e8:	e853 3f00 	ldrex	r3, [r3]
 80034ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80034ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034f0:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80034f4:	667b      	str	r3, [r7, #100]	@ 0x64
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	461a      	mov	r2, r3
 80034fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80034fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003500:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003502:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003504:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003506:	e841 2300 	strex	r3, r2, [r1]
 800350a:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800350c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1e6      	bne.n	80034e0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	3308      	adds	r3, #8
 8003518:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800351a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800351c:	e853 3f00 	ldrex	r3, [r3]
 8003520:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003524:	f023 0301 	bic.w	r3, r3, #1
 8003528:	663b      	str	r3, [r7, #96]	@ 0x60
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	3308      	adds	r3, #8
 8003530:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003532:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003534:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003536:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003538:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800353a:	e841 2300 	strex	r3, r2, [r1]
 800353e:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003540:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1e5      	bne.n	8003512 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2220      	movs	r2, #32
 800354a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2220      	movs	r2, #32
 8003552:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e06f      	b.n	8003642 <UART_WaitOnFlagUntilTimeout+0x194>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0304 	and.w	r3, r3, #4
 800356c:	2b00      	cmp	r3, #0
 800356e:	d057      	beq.n	8003620 <UART_WaitOnFlagUntilTimeout+0x172>
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	2b80      	cmp	r3, #128	@ 0x80
 8003574:	d054      	beq.n	8003620 <UART_WaitOnFlagUntilTimeout+0x172>
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	2b40      	cmp	r3, #64	@ 0x40
 800357a:	d051      	beq.n	8003620 <UART_WaitOnFlagUntilTimeout+0x172>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003586:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800358a:	d149      	bne.n	8003620 <UART_WaitOnFlagUntilTimeout+0x172>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003594:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800359c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800359e:	e853 3f00 	ldrex	r3, [r3]
 80035a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80035a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035a6:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80035aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	461a      	mov	r2, r3
 80035b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80035b6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80035ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80035bc:	e841 2300 	strex	r3, r2, [r1]
 80035c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80035c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1e6      	bne.n	8003596 <UART_WaitOnFlagUntilTimeout+0xe8>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	3308      	adds	r3, #8
 80035ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	e853 3f00 	ldrex	r3, [r3]
 80035d6:	613b      	str	r3, [r7, #16]
   return(result);
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	f023 0301 	bic.w	r3, r3, #1
 80035de:	66bb      	str	r3, [r7, #104]	@ 0x68
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	3308      	adds	r3, #8
 80035e6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80035e8:	623a      	str	r2, [r7, #32]
 80035ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ec:	69f9      	ldr	r1, [r7, #28]
 80035ee:	6a3a      	ldr	r2, [r7, #32]
 80035f0:	e841 2300 	strex	r3, r2, [r1]
 80035f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d1e5      	bne.n	80035c8 <UART_WaitOnFlagUntilTimeout+0x11a>

          huart->gState = HAL_UART_STATE_READY;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2220      	movs	r2, #32
 8003600:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2220      	movs	r2, #32
 8003608:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2220      	movs	r2, #32
 8003610:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e010      	b.n	8003642 <UART_WaitOnFlagUntilTimeout+0x194>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	69da      	ldr	r2, [r3, #28]
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	4013      	ands	r3, r2
 800362a:	68ba      	ldr	r2, [r7, #8]
 800362c:	429a      	cmp	r2, r3
 800362e:	bf0c      	ite	eq
 8003630:	2301      	moveq	r3, #1
 8003632:	2300      	movne	r3, #0
 8003634:	b2db      	uxtb	r3, r3
 8003636:	461a      	mov	r2, r3
 8003638:	79fb      	ldrb	r3, [r7, #7]
 800363a:	429a      	cmp	r2, r3
 800363c:	f43f af40 	beq.w	80034c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3770      	adds	r7, #112	@ 0x70
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800364a:	b480      	push	{r7}
 800364c:	b085      	sub	sp, #20
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003658:	2b01      	cmp	r3, #1
 800365a:	d101      	bne.n	8003660 <HAL_UARTEx_DisableFifoMode+0x16>
 800365c:	2302      	movs	r3, #2
 800365e:	e027      	b.n	80036b0 <HAL_UARTEx_DisableFifoMode+0x66>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2224      	movs	r2, #36	@ 0x24
 800366c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f022 0201 	bic.w	r2, r2, #1
 8003686:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800368e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2220      	movs	r2, #32
 80036a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3714      	adds	r7, #20
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bc80      	pop	{r7}
 80036b8:	4770      	bx	lr

080036ba <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b084      	sub	sp, #16
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
 80036c2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d101      	bne.n	80036d2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80036ce:	2302      	movs	r3, #2
 80036d0:	e02d      	b.n	800372e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2201      	movs	r2, #1
 80036d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2224      	movs	r2, #36	@ 0x24
 80036de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f022 0201 	bic.w	r2, r2, #1
 80036f8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	683a      	ldr	r2, [r7, #0]
 800370a:	430a      	orrs	r2, r1
 800370c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 f850 	bl	80037b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68fa      	ldr	r2, [r7, #12]
 800371a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2220      	movs	r2, #32
 8003720:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003736:	b580      	push	{r7, lr}
 8003738:	b084      	sub	sp, #16
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
 800373e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003746:	2b01      	cmp	r3, #1
 8003748:	d101      	bne.n	800374e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800374a:	2302      	movs	r3, #2
 800374c:	e02d      	b.n	80037aa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2201      	movs	r2, #1
 8003752:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2224      	movs	r2, #36	@ 0x24
 800375a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f022 0201 	bic.w	r2, r2, #1
 8003774:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	683a      	ldr	r2, [r7, #0]
 8003786:	430a      	orrs	r2, r1
 8003788:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 f812 	bl	80037b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2220      	movs	r2, #32
 800379c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
	...

080037b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b085      	sub	sp, #20
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d108      	bne.n	80037d6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80037d4:	e031      	b.n	800383a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80037d6:	2308      	movs	r3, #8
 80037d8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80037da:	2308      	movs	r3, #8
 80037dc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	0e5b      	lsrs	r3, r3, #25
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	f003 0307 	and.w	r3, r3, #7
 80037ec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	0f5b      	lsrs	r3, r3, #29
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	f003 0307 	and.w	r3, r3, #7
 80037fc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80037fe:	7bbb      	ldrb	r3, [r7, #14]
 8003800:	7b3a      	ldrb	r2, [r7, #12]
 8003802:	4910      	ldr	r1, [pc, #64]	@ (8003844 <UARTEx_SetNbDataToProcess+0x90>)
 8003804:	5c8a      	ldrb	r2, [r1, r2]
 8003806:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800380a:	7b3a      	ldrb	r2, [r7, #12]
 800380c:	490e      	ldr	r1, [pc, #56]	@ (8003848 <UARTEx_SetNbDataToProcess+0x94>)
 800380e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003810:	fb93 f3f2 	sdiv	r3, r3, r2
 8003814:	b29a      	uxth	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800381c:	7bfb      	ldrb	r3, [r7, #15]
 800381e:	7b7a      	ldrb	r2, [r7, #13]
 8003820:	4908      	ldr	r1, [pc, #32]	@ (8003844 <UARTEx_SetNbDataToProcess+0x90>)
 8003822:	5c8a      	ldrb	r2, [r1, r2]
 8003824:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003828:	7b7a      	ldrb	r2, [r7, #13]
 800382a:	4907      	ldr	r1, [pc, #28]	@ (8003848 <UARTEx_SetNbDataToProcess+0x94>)
 800382c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800382e:	fb93 f3f2 	sdiv	r3, r3, r2
 8003832:	b29a      	uxth	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800383a:	bf00      	nop
 800383c:	3714      	adds	r7, #20
 800383e:	46bd      	mov	sp, r7
 8003840:	bc80      	pop	{r7}
 8003842:	4770      	bx	lr
 8003844:	0800437c 	.word	0x0800437c
 8003848:	08004384 	.word	0x08004384

0800384c <std>:
 800384c:	2300      	movs	r3, #0
 800384e:	b510      	push	{r4, lr}
 8003850:	4604      	mov	r4, r0
 8003852:	e9c0 3300 	strd	r3, r3, [r0]
 8003856:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800385a:	6083      	str	r3, [r0, #8]
 800385c:	8181      	strh	r1, [r0, #12]
 800385e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003860:	81c2      	strh	r2, [r0, #14]
 8003862:	6183      	str	r3, [r0, #24]
 8003864:	4619      	mov	r1, r3
 8003866:	2208      	movs	r2, #8
 8003868:	305c      	adds	r0, #92	@ 0x5c
 800386a:	f000 f9e7 	bl	8003c3c <memset>
 800386e:	4b0d      	ldr	r3, [pc, #52]	@ (80038a4 <std+0x58>)
 8003870:	6263      	str	r3, [r4, #36]	@ 0x24
 8003872:	4b0d      	ldr	r3, [pc, #52]	@ (80038a8 <std+0x5c>)
 8003874:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003876:	4b0d      	ldr	r3, [pc, #52]	@ (80038ac <std+0x60>)
 8003878:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800387a:	4b0d      	ldr	r3, [pc, #52]	@ (80038b0 <std+0x64>)
 800387c:	6323      	str	r3, [r4, #48]	@ 0x30
 800387e:	4b0d      	ldr	r3, [pc, #52]	@ (80038b4 <std+0x68>)
 8003880:	6224      	str	r4, [r4, #32]
 8003882:	429c      	cmp	r4, r3
 8003884:	d006      	beq.n	8003894 <std+0x48>
 8003886:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800388a:	4294      	cmp	r4, r2
 800388c:	d002      	beq.n	8003894 <std+0x48>
 800388e:	33d0      	adds	r3, #208	@ 0xd0
 8003890:	429c      	cmp	r4, r3
 8003892:	d105      	bne.n	80038a0 <std+0x54>
 8003894:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800389c:	f000 ba46 	b.w	8003d2c <__retarget_lock_init_recursive>
 80038a0:	bd10      	pop	{r4, pc}
 80038a2:	bf00      	nop
 80038a4:	08003a8d 	.word	0x08003a8d
 80038a8:	08003aaf 	.word	0x08003aaf
 80038ac:	08003ae7 	.word	0x08003ae7
 80038b0:	08003b0b 	.word	0x08003b0b
 80038b4:	20000120 	.word	0x20000120

080038b8 <stdio_exit_handler>:
 80038b8:	4a02      	ldr	r2, [pc, #8]	@ (80038c4 <stdio_exit_handler+0xc>)
 80038ba:	4903      	ldr	r1, [pc, #12]	@ (80038c8 <stdio_exit_handler+0x10>)
 80038bc:	4803      	ldr	r0, [pc, #12]	@ (80038cc <stdio_exit_handler+0x14>)
 80038be:	f000 b869 	b.w	8003994 <_fwalk_sglue>
 80038c2:	bf00      	nop
 80038c4:	2000000c 	.word	0x2000000c
 80038c8:	08004025 	.word	0x08004025
 80038cc:	2000001c 	.word	0x2000001c

080038d0 <cleanup_stdio>:
 80038d0:	6841      	ldr	r1, [r0, #4]
 80038d2:	4b0c      	ldr	r3, [pc, #48]	@ (8003904 <cleanup_stdio+0x34>)
 80038d4:	4299      	cmp	r1, r3
 80038d6:	b510      	push	{r4, lr}
 80038d8:	4604      	mov	r4, r0
 80038da:	d001      	beq.n	80038e0 <cleanup_stdio+0x10>
 80038dc:	f000 fba2 	bl	8004024 <_fflush_r>
 80038e0:	68a1      	ldr	r1, [r4, #8]
 80038e2:	4b09      	ldr	r3, [pc, #36]	@ (8003908 <cleanup_stdio+0x38>)
 80038e4:	4299      	cmp	r1, r3
 80038e6:	d002      	beq.n	80038ee <cleanup_stdio+0x1e>
 80038e8:	4620      	mov	r0, r4
 80038ea:	f000 fb9b 	bl	8004024 <_fflush_r>
 80038ee:	68e1      	ldr	r1, [r4, #12]
 80038f0:	4b06      	ldr	r3, [pc, #24]	@ (800390c <cleanup_stdio+0x3c>)
 80038f2:	4299      	cmp	r1, r3
 80038f4:	d004      	beq.n	8003900 <cleanup_stdio+0x30>
 80038f6:	4620      	mov	r0, r4
 80038f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038fc:	f000 bb92 	b.w	8004024 <_fflush_r>
 8003900:	bd10      	pop	{r4, pc}
 8003902:	bf00      	nop
 8003904:	20000120 	.word	0x20000120
 8003908:	20000188 	.word	0x20000188
 800390c:	200001f0 	.word	0x200001f0

08003910 <global_stdio_init.part.0>:
 8003910:	b510      	push	{r4, lr}
 8003912:	4b0b      	ldr	r3, [pc, #44]	@ (8003940 <global_stdio_init.part.0+0x30>)
 8003914:	4c0b      	ldr	r4, [pc, #44]	@ (8003944 <global_stdio_init.part.0+0x34>)
 8003916:	4a0c      	ldr	r2, [pc, #48]	@ (8003948 <global_stdio_init.part.0+0x38>)
 8003918:	601a      	str	r2, [r3, #0]
 800391a:	4620      	mov	r0, r4
 800391c:	2200      	movs	r2, #0
 800391e:	2104      	movs	r1, #4
 8003920:	f7ff ff94 	bl	800384c <std>
 8003924:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003928:	2201      	movs	r2, #1
 800392a:	2109      	movs	r1, #9
 800392c:	f7ff ff8e 	bl	800384c <std>
 8003930:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003934:	2202      	movs	r2, #2
 8003936:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800393a:	2112      	movs	r1, #18
 800393c:	f7ff bf86 	b.w	800384c <std>
 8003940:	20000258 	.word	0x20000258
 8003944:	20000120 	.word	0x20000120
 8003948:	080038b9 	.word	0x080038b9

0800394c <__sfp_lock_acquire>:
 800394c:	4801      	ldr	r0, [pc, #4]	@ (8003954 <__sfp_lock_acquire+0x8>)
 800394e:	f000 b9ee 	b.w	8003d2e <__retarget_lock_acquire_recursive>
 8003952:	bf00      	nop
 8003954:	20000261 	.word	0x20000261

08003958 <__sfp_lock_release>:
 8003958:	4801      	ldr	r0, [pc, #4]	@ (8003960 <__sfp_lock_release+0x8>)
 800395a:	f000 b9e9 	b.w	8003d30 <__retarget_lock_release_recursive>
 800395e:	bf00      	nop
 8003960:	20000261 	.word	0x20000261

08003964 <__sinit>:
 8003964:	b510      	push	{r4, lr}
 8003966:	4604      	mov	r4, r0
 8003968:	f7ff fff0 	bl	800394c <__sfp_lock_acquire>
 800396c:	6a23      	ldr	r3, [r4, #32]
 800396e:	b11b      	cbz	r3, 8003978 <__sinit+0x14>
 8003970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003974:	f7ff bff0 	b.w	8003958 <__sfp_lock_release>
 8003978:	4b04      	ldr	r3, [pc, #16]	@ (800398c <__sinit+0x28>)
 800397a:	6223      	str	r3, [r4, #32]
 800397c:	4b04      	ldr	r3, [pc, #16]	@ (8003990 <__sinit+0x2c>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d1f5      	bne.n	8003970 <__sinit+0xc>
 8003984:	f7ff ffc4 	bl	8003910 <global_stdio_init.part.0>
 8003988:	e7f2      	b.n	8003970 <__sinit+0xc>
 800398a:	bf00      	nop
 800398c:	080038d1 	.word	0x080038d1
 8003990:	20000258 	.word	0x20000258

08003994 <_fwalk_sglue>:
 8003994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003998:	4607      	mov	r7, r0
 800399a:	4688      	mov	r8, r1
 800399c:	4614      	mov	r4, r2
 800399e:	2600      	movs	r6, #0
 80039a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80039a4:	f1b9 0901 	subs.w	r9, r9, #1
 80039a8:	d505      	bpl.n	80039b6 <_fwalk_sglue+0x22>
 80039aa:	6824      	ldr	r4, [r4, #0]
 80039ac:	2c00      	cmp	r4, #0
 80039ae:	d1f7      	bne.n	80039a0 <_fwalk_sglue+0xc>
 80039b0:	4630      	mov	r0, r6
 80039b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039b6:	89ab      	ldrh	r3, [r5, #12]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d907      	bls.n	80039cc <_fwalk_sglue+0x38>
 80039bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80039c0:	3301      	adds	r3, #1
 80039c2:	d003      	beq.n	80039cc <_fwalk_sglue+0x38>
 80039c4:	4629      	mov	r1, r5
 80039c6:	4638      	mov	r0, r7
 80039c8:	47c0      	blx	r8
 80039ca:	4306      	orrs	r6, r0
 80039cc:	3568      	adds	r5, #104	@ 0x68
 80039ce:	e7e9      	b.n	80039a4 <_fwalk_sglue+0x10>

080039d0 <_puts_r>:
 80039d0:	6a03      	ldr	r3, [r0, #32]
 80039d2:	b570      	push	{r4, r5, r6, lr}
 80039d4:	6884      	ldr	r4, [r0, #8]
 80039d6:	4605      	mov	r5, r0
 80039d8:	460e      	mov	r6, r1
 80039da:	b90b      	cbnz	r3, 80039e0 <_puts_r+0x10>
 80039dc:	f7ff ffc2 	bl	8003964 <__sinit>
 80039e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80039e2:	07db      	lsls	r3, r3, #31
 80039e4:	d405      	bmi.n	80039f2 <_puts_r+0x22>
 80039e6:	89a3      	ldrh	r3, [r4, #12]
 80039e8:	0598      	lsls	r0, r3, #22
 80039ea:	d402      	bmi.n	80039f2 <_puts_r+0x22>
 80039ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80039ee:	f000 f99e 	bl	8003d2e <__retarget_lock_acquire_recursive>
 80039f2:	89a3      	ldrh	r3, [r4, #12]
 80039f4:	0719      	lsls	r1, r3, #28
 80039f6:	d502      	bpl.n	80039fe <_puts_r+0x2e>
 80039f8:	6923      	ldr	r3, [r4, #16]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d135      	bne.n	8003a6a <_puts_r+0x9a>
 80039fe:	4621      	mov	r1, r4
 8003a00:	4628      	mov	r0, r5
 8003a02:	f000 f8c5 	bl	8003b90 <__swsetup_r>
 8003a06:	b380      	cbz	r0, 8003a6a <_puts_r+0x9a>
 8003a08:	f04f 35ff 	mov.w	r5, #4294967295
 8003a0c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003a0e:	07da      	lsls	r2, r3, #31
 8003a10:	d405      	bmi.n	8003a1e <_puts_r+0x4e>
 8003a12:	89a3      	ldrh	r3, [r4, #12]
 8003a14:	059b      	lsls	r3, r3, #22
 8003a16:	d402      	bmi.n	8003a1e <_puts_r+0x4e>
 8003a18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003a1a:	f000 f989 	bl	8003d30 <__retarget_lock_release_recursive>
 8003a1e:	4628      	mov	r0, r5
 8003a20:	bd70      	pop	{r4, r5, r6, pc}
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	da04      	bge.n	8003a30 <_puts_r+0x60>
 8003a26:	69a2      	ldr	r2, [r4, #24]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	dc17      	bgt.n	8003a5c <_puts_r+0x8c>
 8003a2c:	290a      	cmp	r1, #10
 8003a2e:	d015      	beq.n	8003a5c <_puts_r+0x8c>
 8003a30:	6823      	ldr	r3, [r4, #0]
 8003a32:	1c5a      	adds	r2, r3, #1
 8003a34:	6022      	str	r2, [r4, #0]
 8003a36:	7019      	strb	r1, [r3, #0]
 8003a38:	68a3      	ldr	r3, [r4, #8]
 8003a3a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	60a3      	str	r3, [r4, #8]
 8003a42:	2900      	cmp	r1, #0
 8003a44:	d1ed      	bne.n	8003a22 <_puts_r+0x52>
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	da11      	bge.n	8003a6e <_puts_r+0x9e>
 8003a4a:	4622      	mov	r2, r4
 8003a4c:	210a      	movs	r1, #10
 8003a4e:	4628      	mov	r0, r5
 8003a50:	f000 f85f 	bl	8003b12 <__swbuf_r>
 8003a54:	3001      	adds	r0, #1
 8003a56:	d0d7      	beq.n	8003a08 <_puts_r+0x38>
 8003a58:	250a      	movs	r5, #10
 8003a5a:	e7d7      	b.n	8003a0c <_puts_r+0x3c>
 8003a5c:	4622      	mov	r2, r4
 8003a5e:	4628      	mov	r0, r5
 8003a60:	f000 f857 	bl	8003b12 <__swbuf_r>
 8003a64:	3001      	adds	r0, #1
 8003a66:	d1e7      	bne.n	8003a38 <_puts_r+0x68>
 8003a68:	e7ce      	b.n	8003a08 <_puts_r+0x38>
 8003a6a:	3e01      	subs	r6, #1
 8003a6c:	e7e4      	b.n	8003a38 <_puts_r+0x68>
 8003a6e:	6823      	ldr	r3, [r4, #0]
 8003a70:	1c5a      	adds	r2, r3, #1
 8003a72:	6022      	str	r2, [r4, #0]
 8003a74:	220a      	movs	r2, #10
 8003a76:	701a      	strb	r2, [r3, #0]
 8003a78:	e7ee      	b.n	8003a58 <_puts_r+0x88>
	...

08003a7c <puts>:
 8003a7c:	4b02      	ldr	r3, [pc, #8]	@ (8003a88 <puts+0xc>)
 8003a7e:	4601      	mov	r1, r0
 8003a80:	6818      	ldr	r0, [r3, #0]
 8003a82:	f7ff bfa5 	b.w	80039d0 <_puts_r>
 8003a86:	bf00      	nop
 8003a88:	20000018 	.word	0x20000018

08003a8c <__sread>:
 8003a8c:	b510      	push	{r4, lr}
 8003a8e:	460c      	mov	r4, r1
 8003a90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a94:	f000 f8fc 	bl	8003c90 <_read_r>
 8003a98:	2800      	cmp	r0, #0
 8003a9a:	bfab      	itete	ge
 8003a9c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003a9e:	89a3      	ldrhlt	r3, [r4, #12]
 8003aa0:	181b      	addge	r3, r3, r0
 8003aa2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003aa6:	bfac      	ite	ge
 8003aa8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003aaa:	81a3      	strhlt	r3, [r4, #12]
 8003aac:	bd10      	pop	{r4, pc}

08003aae <__swrite>:
 8003aae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ab2:	461f      	mov	r7, r3
 8003ab4:	898b      	ldrh	r3, [r1, #12]
 8003ab6:	05db      	lsls	r3, r3, #23
 8003ab8:	4605      	mov	r5, r0
 8003aba:	460c      	mov	r4, r1
 8003abc:	4616      	mov	r6, r2
 8003abe:	d505      	bpl.n	8003acc <__swrite+0x1e>
 8003ac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ac4:	2302      	movs	r3, #2
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f000 f8d0 	bl	8003c6c <_lseek_r>
 8003acc:	89a3      	ldrh	r3, [r4, #12]
 8003ace:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ad2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003ad6:	81a3      	strh	r3, [r4, #12]
 8003ad8:	4632      	mov	r2, r6
 8003ada:	463b      	mov	r3, r7
 8003adc:	4628      	mov	r0, r5
 8003ade:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ae2:	f000 b8e7 	b.w	8003cb4 <_write_r>

08003ae6 <__sseek>:
 8003ae6:	b510      	push	{r4, lr}
 8003ae8:	460c      	mov	r4, r1
 8003aea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003aee:	f000 f8bd 	bl	8003c6c <_lseek_r>
 8003af2:	1c43      	adds	r3, r0, #1
 8003af4:	89a3      	ldrh	r3, [r4, #12]
 8003af6:	bf15      	itete	ne
 8003af8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003afa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003afe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003b02:	81a3      	strheq	r3, [r4, #12]
 8003b04:	bf18      	it	ne
 8003b06:	81a3      	strhne	r3, [r4, #12]
 8003b08:	bd10      	pop	{r4, pc}

08003b0a <__sclose>:
 8003b0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b0e:	f000 b89d 	b.w	8003c4c <_close_r>

08003b12 <__swbuf_r>:
 8003b12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b14:	460e      	mov	r6, r1
 8003b16:	4614      	mov	r4, r2
 8003b18:	4605      	mov	r5, r0
 8003b1a:	b118      	cbz	r0, 8003b24 <__swbuf_r+0x12>
 8003b1c:	6a03      	ldr	r3, [r0, #32]
 8003b1e:	b90b      	cbnz	r3, 8003b24 <__swbuf_r+0x12>
 8003b20:	f7ff ff20 	bl	8003964 <__sinit>
 8003b24:	69a3      	ldr	r3, [r4, #24]
 8003b26:	60a3      	str	r3, [r4, #8]
 8003b28:	89a3      	ldrh	r3, [r4, #12]
 8003b2a:	071a      	lsls	r2, r3, #28
 8003b2c:	d501      	bpl.n	8003b32 <__swbuf_r+0x20>
 8003b2e:	6923      	ldr	r3, [r4, #16]
 8003b30:	b943      	cbnz	r3, 8003b44 <__swbuf_r+0x32>
 8003b32:	4621      	mov	r1, r4
 8003b34:	4628      	mov	r0, r5
 8003b36:	f000 f82b 	bl	8003b90 <__swsetup_r>
 8003b3a:	b118      	cbz	r0, 8003b44 <__swbuf_r+0x32>
 8003b3c:	f04f 37ff 	mov.w	r7, #4294967295
 8003b40:	4638      	mov	r0, r7
 8003b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b44:	6823      	ldr	r3, [r4, #0]
 8003b46:	6922      	ldr	r2, [r4, #16]
 8003b48:	1a98      	subs	r0, r3, r2
 8003b4a:	6963      	ldr	r3, [r4, #20]
 8003b4c:	b2f6      	uxtb	r6, r6
 8003b4e:	4283      	cmp	r3, r0
 8003b50:	4637      	mov	r7, r6
 8003b52:	dc05      	bgt.n	8003b60 <__swbuf_r+0x4e>
 8003b54:	4621      	mov	r1, r4
 8003b56:	4628      	mov	r0, r5
 8003b58:	f000 fa64 	bl	8004024 <_fflush_r>
 8003b5c:	2800      	cmp	r0, #0
 8003b5e:	d1ed      	bne.n	8003b3c <__swbuf_r+0x2a>
 8003b60:	68a3      	ldr	r3, [r4, #8]
 8003b62:	3b01      	subs	r3, #1
 8003b64:	60a3      	str	r3, [r4, #8]
 8003b66:	6823      	ldr	r3, [r4, #0]
 8003b68:	1c5a      	adds	r2, r3, #1
 8003b6a:	6022      	str	r2, [r4, #0]
 8003b6c:	701e      	strb	r6, [r3, #0]
 8003b6e:	6962      	ldr	r2, [r4, #20]
 8003b70:	1c43      	adds	r3, r0, #1
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d004      	beq.n	8003b80 <__swbuf_r+0x6e>
 8003b76:	89a3      	ldrh	r3, [r4, #12]
 8003b78:	07db      	lsls	r3, r3, #31
 8003b7a:	d5e1      	bpl.n	8003b40 <__swbuf_r+0x2e>
 8003b7c:	2e0a      	cmp	r6, #10
 8003b7e:	d1df      	bne.n	8003b40 <__swbuf_r+0x2e>
 8003b80:	4621      	mov	r1, r4
 8003b82:	4628      	mov	r0, r5
 8003b84:	f000 fa4e 	bl	8004024 <_fflush_r>
 8003b88:	2800      	cmp	r0, #0
 8003b8a:	d0d9      	beq.n	8003b40 <__swbuf_r+0x2e>
 8003b8c:	e7d6      	b.n	8003b3c <__swbuf_r+0x2a>
	...

08003b90 <__swsetup_r>:
 8003b90:	b538      	push	{r3, r4, r5, lr}
 8003b92:	4b29      	ldr	r3, [pc, #164]	@ (8003c38 <__swsetup_r+0xa8>)
 8003b94:	4605      	mov	r5, r0
 8003b96:	6818      	ldr	r0, [r3, #0]
 8003b98:	460c      	mov	r4, r1
 8003b9a:	b118      	cbz	r0, 8003ba4 <__swsetup_r+0x14>
 8003b9c:	6a03      	ldr	r3, [r0, #32]
 8003b9e:	b90b      	cbnz	r3, 8003ba4 <__swsetup_r+0x14>
 8003ba0:	f7ff fee0 	bl	8003964 <__sinit>
 8003ba4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ba8:	0719      	lsls	r1, r3, #28
 8003baa:	d422      	bmi.n	8003bf2 <__swsetup_r+0x62>
 8003bac:	06da      	lsls	r2, r3, #27
 8003bae:	d407      	bmi.n	8003bc0 <__swsetup_r+0x30>
 8003bb0:	2209      	movs	r2, #9
 8003bb2:	602a      	str	r2, [r5, #0]
 8003bb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003bb8:	81a3      	strh	r3, [r4, #12]
 8003bba:	f04f 30ff 	mov.w	r0, #4294967295
 8003bbe:	e033      	b.n	8003c28 <__swsetup_r+0x98>
 8003bc0:	0758      	lsls	r0, r3, #29
 8003bc2:	d512      	bpl.n	8003bea <__swsetup_r+0x5a>
 8003bc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003bc6:	b141      	cbz	r1, 8003bda <__swsetup_r+0x4a>
 8003bc8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003bcc:	4299      	cmp	r1, r3
 8003bce:	d002      	beq.n	8003bd6 <__swsetup_r+0x46>
 8003bd0:	4628      	mov	r0, r5
 8003bd2:	f000 f8af 	bl	8003d34 <_free_r>
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	6363      	str	r3, [r4, #52]	@ 0x34
 8003bda:	89a3      	ldrh	r3, [r4, #12]
 8003bdc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003be0:	81a3      	strh	r3, [r4, #12]
 8003be2:	2300      	movs	r3, #0
 8003be4:	6063      	str	r3, [r4, #4]
 8003be6:	6923      	ldr	r3, [r4, #16]
 8003be8:	6023      	str	r3, [r4, #0]
 8003bea:	89a3      	ldrh	r3, [r4, #12]
 8003bec:	f043 0308 	orr.w	r3, r3, #8
 8003bf0:	81a3      	strh	r3, [r4, #12]
 8003bf2:	6923      	ldr	r3, [r4, #16]
 8003bf4:	b94b      	cbnz	r3, 8003c0a <__swsetup_r+0x7a>
 8003bf6:	89a3      	ldrh	r3, [r4, #12]
 8003bf8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003bfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c00:	d003      	beq.n	8003c0a <__swsetup_r+0x7a>
 8003c02:	4621      	mov	r1, r4
 8003c04:	4628      	mov	r0, r5
 8003c06:	f000 fa5b 	bl	80040c0 <__smakebuf_r>
 8003c0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c0e:	f013 0201 	ands.w	r2, r3, #1
 8003c12:	d00a      	beq.n	8003c2a <__swsetup_r+0x9a>
 8003c14:	2200      	movs	r2, #0
 8003c16:	60a2      	str	r2, [r4, #8]
 8003c18:	6962      	ldr	r2, [r4, #20]
 8003c1a:	4252      	negs	r2, r2
 8003c1c:	61a2      	str	r2, [r4, #24]
 8003c1e:	6922      	ldr	r2, [r4, #16]
 8003c20:	b942      	cbnz	r2, 8003c34 <__swsetup_r+0xa4>
 8003c22:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003c26:	d1c5      	bne.n	8003bb4 <__swsetup_r+0x24>
 8003c28:	bd38      	pop	{r3, r4, r5, pc}
 8003c2a:	0799      	lsls	r1, r3, #30
 8003c2c:	bf58      	it	pl
 8003c2e:	6962      	ldrpl	r2, [r4, #20]
 8003c30:	60a2      	str	r2, [r4, #8]
 8003c32:	e7f4      	b.n	8003c1e <__swsetup_r+0x8e>
 8003c34:	2000      	movs	r0, #0
 8003c36:	e7f7      	b.n	8003c28 <__swsetup_r+0x98>
 8003c38:	20000018 	.word	0x20000018

08003c3c <memset>:
 8003c3c:	4402      	add	r2, r0
 8003c3e:	4603      	mov	r3, r0
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d100      	bne.n	8003c46 <memset+0xa>
 8003c44:	4770      	bx	lr
 8003c46:	f803 1b01 	strb.w	r1, [r3], #1
 8003c4a:	e7f9      	b.n	8003c40 <memset+0x4>

08003c4c <_close_r>:
 8003c4c:	b538      	push	{r3, r4, r5, lr}
 8003c4e:	4d06      	ldr	r5, [pc, #24]	@ (8003c68 <_close_r+0x1c>)
 8003c50:	2300      	movs	r3, #0
 8003c52:	4604      	mov	r4, r0
 8003c54:	4608      	mov	r0, r1
 8003c56:	602b      	str	r3, [r5, #0]
 8003c58:	f7fd f882 	bl	8000d60 <_close>
 8003c5c:	1c43      	adds	r3, r0, #1
 8003c5e:	d102      	bne.n	8003c66 <_close_r+0x1a>
 8003c60:	682b      	ldr	r3, [r5, #0]
 8003c62:	b103      	cbz	r3, 8003c66 <_close_r+0x1a>
 8003c64:	6023      	str	r3, [r4, #0]
 8003c66:	bd38      	pop	{r3, r4, r5, pc}
 8003c68:	2000025c 	.word	0x2000025c

08003c6c <_lseek_r>:
 8003c6c:	b538      	push	{r3, r4, r5, lr}
 8003c6e:	4d07      	ldr	r5, [pc, #28]	@ (8003c8c <_lseek_r+0x20>)
 8003c70:	4604      	mov	r4, r0
 8003c72:	4608      	mov	r0, r1
 8003c74:	4611      	mov	r1, r2
 8003c76:	2200      	movs	r2, #0
 8003c78:	602a      	str	r2, [r5, #0]
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	f7fd f894 	bl	8000da8 <_lseek>
 8003c80:	1c43      	adds	r3, r0, #1
 8003c82:	d102      	bne.n	8003c8a <_lseek_r+0x1e>
 8003c84:	682b      	ldr	r3, [r5, #0]
 8003c86:	b103      	cbz	r3, 8003c8a <_lseek_r+0x1e>
 8003c88:	6023      	str	r3, [r4, #0]
 8003c8a:	bd38      	pop	{r3, r4, r5, pc}
 8003c8c:	2000025c 	.word	0x2000025c

08003c90 <_read_r>:
 8003c90:	b538      	push	{r3, r4, r5, lr}
 8003c92:	4d07      	ldr	r5, [pc, #28]	@ (8003cb0 <_read_r+0x20>)
 8003c94:	4604      	mov	r4, r0
 8003c96:	4608      	mov	r0, r1
 8003c98:	4611      	mov	r1, r2
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	602a      	str	r2, [r5, #0]
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	f7fd f825 	bl	8000cee <_read>
 8003ca4:	1c43      	adds	r3, r0, #1
 8003ca6:	d102      	bne.n	8003cae <_read_r+0x1e>
 8003ca8:	682b      	ldr	r3, [r5, #0]
 8003caa:	b103      	cbz	r3, 8003cae <_read_r+0x1e>
 8003cac:	6023      	str	r3, [r4, #0]
 8003cae:	bd38      	pop	{r3, r4, r5, pc}
 8003cb0:	2000025c 	.word	0x2000025c

08003cb4 <_write_r>:
 8003cb4:	b538      	push	{r3, r4, r5, lr}
 8003cb6:	4d07      	ldr	r5, [pc, #28]	@ (8003cd4 <_write_r+0x20>)
 8003cb8:	4604      	mov	r4, r0
 8003cba:	4608      	mov	r0, r1
 8003cbc:	4611      	mov	r1, r2
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	602a      	str	r2, [r5, #0]
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	f7fd f830 	bl	8000d28 <_write>
 8003cc8:	1c43      	adds	r3, r0, #1
 8003cca:	d102      	bne.n	8003cd2 <_write_r+0x1e>
 8003ccc:	682b      	ldr	r3, [r5, #0]
 8003cce:	b103      	cbz	r3, 8003cd2 <_write_r+0x1e>
 8003cd0:	6023      	str	r3, [r4, #0]
 8003cd2:	bd38      	pop	{r3, r4, r5, pc}
 8003cd4:	2000025c 	.word	0x2000025c

08003cd8 <__errno>:
 8003cd8:	4b01      	ldr	r3, [pc, #4]	@ (8003ce0 <__errno+0x8>)
 8003cda:	6818      	ldr	r0, [r3, #0]
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	20000018 	.word	0x20000018

08003ce4 <__libc_init_array>:
 8003ce4:	b570      	push	{r4, r5, r6, lr}
 8003ce6:	4d0d      	ldr	r5, [pc, #52]	@ (8003d1c <__libc_init_array+0x38>)
 8003ce8:	4c0d      	ldr	r4, [pc, #52]	@ (8003d20 <__libc_init_array+0x3c>)
 8003cea:	1b64      	subs	r4, r4, r5
 8003cec:	10a4      	asrs	r4, r4, #2
 8003cee:	2600      	movs	r6, #0
 8003cf0:	42a6      	cmp	r6, r4
 8003cf2:	d109      	bne.n	8003d08 <__libc_init_array+0x24>
 8003cf4:	4d0b      	ldr	r5, [pc, #44]	@ (8003d24 <__libc_init_array+0x40>)
 8003cf6:	4c0c      	ldr	r4, [pc, #48]	@ (8003d28 <__libc_init_array+0x44>)
 8003cf8:	f000 fa50 	bl	800419c <_init>
 8003cfc:	1b64      	subs	r4, r4, r5
 8003cfe:	10a4      	asrs	r4, r4, #2
 8003d00:	2600      	movs	r6, #0
 8003d02:	42a6      	cmp	r6, r4
 8003d04:	d105      	bne.n	8003d12 <__libc_init_array+0x2e>
 8003d06:	bd70      	pop	{r4, r5, r6, pc}
 8003d08:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d0c:	4798      	blx	r3
 8003d0e:	3601      	adds	r6, #1
 8003d10:	e7ee      	b.n	8003cf0 <__libc_init_array+0xc>
 8003d12:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d16:	4798      	blx	r3
 8003d18:	3601      	adds	r6, #1
 8003d1a:	e7f2      	b.n	8003d02 <__libc_init_array+0x1e>
 8003d1c:	08004394 	.word	0x08004394
 8003d20:	08004394 	.word	0x08004394
 8003d24:	08004394 	.word	0x08004394
 8003d28:	08004398 	.word	0x08004398

08003d2c <__retarget_lock_init_recursive>:
 8003d2c:	4770      	bx	lr

08003d2e <__retarget_lock_acquire_recursive>:
 8003d2e:	4770      	bx	lr

08003d30 <__retarget_lock_release_recursive>:
 8003d30:	4770      	bx	lr
	...

08003d34 <_free_r>:
 8003d34:	b538      	push	{r3, r4, r5, lr}
 8003d36:	4605      	mov	r5, r0
 8003d38:	2900      	cmp	r1, #0
 8003d3a:	d041      	beq.n	8003dc0 <_free_r+0x8c>
 8003d3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d40:	1f0c      	subs	r4, r1, #4
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	bfb8      	it	lt
 8003d46:	18e4      	addlt	r4, r4, r3
 8003d48:	f000 f8e0 	bl	8003f0c <__malloc_lock>
 8003d4c:	4a1d      	ldr	r2, [pc, #116]	@ (8003dc4 <_free_r+0x90>)
 8003d4e:	6813      	ldr	r3, [r2, #0]
 8003d50:	b933      	cbnz	r3, 8003d60 <_free_r+0x2c>
 8003d52:	6063      	str	r3, [r4, #4]
 8003d54:	6014      	str	r4, [r2, #0]
 8003d56:	4628      	mov	r0, r5
 8003d58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d5c:	f000 b8dc 	b.w	8003f18 <__malloc_unlock>
 8003d60:	42a3      	cmp	r3, r4
 8003d62:	d908      	bls.n	8003d76 <_free_r+0x42>
 8003d64:	6820      	ldr	r0, [r4, #0]
 8003d66:	1821      	adds	r1, r4, r0
 8003d68:	428b      	cmp	r3, r1
 8003d6a:	bf01      	itttt	eq
 8003d6c:	6819      	ldreq	r1, [r3, #0]
 8003d6e:	685b      	ldreq	r3, [r3, #4]
 8003d70:	1809      	addeq	r1, r1, r0
 8003d72:	6021      	streq	r1, [r4, #0]
 8003d74:	e7ed      	b.n	8003d52 <_free_r+0x1e>
 8003d76:	461a      	mov	r2, r3
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	b10b      	cbz	r3, 8003d80 <_free_r+0x4c>
 8003d7c:	42a3      	cmp	r3, r4
 8003d7e:	d9fa      	bls.n	8003d76 <_free_r+0x42>
 8003d80:	6811      	ldr	r1, [r2, #0]
 8003d82:	1850      	adds	r0, r2, r1
 8003d84:	42a0      	cmp	r0, r4
 8003d86:	d10b      	bne.n	8003da0 <_free_r+0x6c>
 8003d88:	6820      	ldr	r0, [r4, #0]
 8003d8a:	4401      	add	r1, r0
 8003d8c:	1850      	adds	r0, r2, r1
 8003d8e:	4283      	cmp	r3, r0
 8003d90:	6011      	str	r1, [r2, #0]
 8003d92:	d1e0      	bne.n	8003d56 <_free_r+0x22>
 8003d94:	6818      	ldr	r0, [r3, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	6053      	str	r3, [r2, #4]
 8003d9a:	4408      	add	r0, r1
 8003d9c:	6010      	str	r0, [r2, #0]
 8003d9e:	e7da      	b.n	8003d56 <_free_r+0x22>
 8003da0:	d902      	bls.n	8003da8 <_free_r+0x74>
 8003da2:	230c      	movs	r3, #12
 8003da4:	602b      	str	r3, [r5, #0]
 8003da6:	e7d6      	b.n	8003d56 <_free_r+0x22>
 8003da8:	6820      	ldr	r0, [r4, #0]
 8003daa:	1821      	adds	r1, r4, r0
 8003dac:	428b      	cmp	r3, r1
 8003dae:	bf04      	itt	eq
 8003db0:	6819      	ldreq	r1, [r3, #0]
 8003db2:	685b      	ldreq	r3, [r3, #4]
 8003db4:	6063      	str	r3, [r4, #4]
 8003db6:	bf04      	itt	eq
 8003db8:	1809      	addeq	r1, r1, r0
 8003dba:	6021      	streq	r1, [r4, #0]
 8003dbc:	6054      	str	r4, [r2, #4]
 8003dbe:	e7ca      	b.n	8003d56 <_free_r+0x22>
 8003dc0:	bd38      	pop	{r3, r4, r5, pc}
 8003dc2:	bf00      	nop
 8003dc4:	20000268 	.word	0x20000268

08003dc8 <sbrk_aligned>:
 8003dc8:	b570      	push	{r4, r5, r6, lr}
 8003dca:	4e0f      	ldr	r6, [pc, #60]	@ (8003e08 <sbrk_aligned+0x40>)
 8003dcc:	460c      	mov	r4, r1
 8003dce:	6831      	ldr	r1, [r6, #0]
 8003dd0:	4605      	mov	r5, r0
 8003dd2:	b911      	cbnz	r1, 8003dda <sbrk_aligned+0x12>
 8003dd4:	f000 f9d2 	bl	800417c <_sbrk_r>
 8003dd8:	6030      	str	r0, [r6, #0]
 8003dda:	4621      	mov	r1, r4
 8003ddc:	4628      	mov	r0, r5
 8003dde:	f000 f9cd 	bl	800417c <_sbrk_r>
 8003de2:	1c43      	adds	r3, r0, #1
 8003de4:	d103      	bne.n	8003dee <sbrk_aligned+0x26>
 8003de6:	f04f 34ff 	mov.w	r4, #4294967295
 8003dea:	4620      	mov	r0, r4
 8003dec:	bd70      	pop	{r4, r5, r6, pc}
 8003dee:	1cc4      	adds	r4, r0, #3
 8003df0:	f024 0403 	bic.w	r4, r4, #3
 8003df4:	42a0      	cmp	r0, r4
 8003df6:	d0f8      	beq.n	8003dea <sbrk_aligned+0x22>
 8003df8:	1a21      	subs	r1, r4, r0
 8003dfa:	4628      	mov	r0, r5
 8003dfc:	f000 f9be 	bl	800417c <_sbrk_r>
 8003e00:	3001      	adds	r0, #1
 8003e02:	d1f2      	bne.n	8003dea <sbrk_aligned+0x22>
 8003e04:	e7ef      	b.n	8003de6 <sbrk_aligned+0x1e>
 8003e06:	bf00      	nop
 8003e08:	20000264 	.word	0x20000264

08003e0c <_malloc_r>:
 8003e0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e10:	1ccd      	adds	r5, r1, #3
 8003e12:	f025 0503 	bic.w	r5, r5, #3
 8003e16:	3508      	adds	r5, #8
 8003e18:	2d0c      	cmp	r5, #12
 8003e1a:	bf38      	it	cc
 8003e1c:	250c      	movcc	r5, #12
 8003e1e:	2d00      	cmp	r5, #0
 8003e20:	4606      	mov	r6, r0
 8003e22:	db01      	blt.n	8003e28 <_malloc_r+0x1c>
 8003e24:	42a9      	cmp	r1, r5
 8003e26:	d904      	bls.n	8003e32 <_malloc_r+0x26>
 8003e28:	230c      	movs	r3, #12
 8003e2a:	6033      	str	r3, [r6, #0]
 8003e2c:	2000      	movs	r0, #0
 8003e2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e32:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003f08 <_malloc_r+0xfc>
 8003e36:	f000 f869 	bl	8003f0c <__malloc_lock>
 8003e3a:	f8d8 3000 	ldr.w	r3, [r8]
 8003e3e:	461c      	mov	r4, r3
 8003e40:	bb44      	cbnz	r4, 8003e94 <_malloc_r+0x88>
 8003e42:	4629      	mov	r1, r5
 8003e44:	4630      	mov	r0, r6
 8003e46:	f7ff ffbf 	bl	8003dc8 <sbrk_aligned>
 8003e4a:	1c43      	adds	r3, r0, #1
 8003e4c:	4604      	mov	r4, r0
 8003e4e:	d158      	bne.n	8003f02 <_malloc_r+0xf6>
 8003e50:	f8d8 4000 	ldr.w	r4, [r8]
 8003e54:	4627      	mov	r7, r4
 8003e56:	2f00      	cmp	r7, #0
 8003e58:	d143      	bne.n	8003ee2 <_malloc_r+0xd6>
 8003e5a:	2c00      	cmp	r4, #0
 8003e5c:	d04b      	beq.n	8003ef6 <_malloc_r+0xea>
 8003e5e:	6823      	ldr	r3, [r4, #0]
 8003e60:	4639      	mov	r1, r7
 8003e62:	4630      	mov	r0, r6
 8003e64:	eb04 0903 	add.w	r9, r4, r3
 8003e68:	f000 f988 	bl	800417c <_sbrk_r>
 8003e6c:	4581      	cmp	r9, r0
 8003e6e:	d142      	bne.n	8003ef6 <_malloc_r+0xea>
 8003e70:	6821      	ldr	r1, [r4, #0]
 8003e72:	1a6d      	subs	r5, r5, r1
 8003e74:	4629      	mov	r1, r5
 8003e76:	4630      	mov	r0, r6
 8003e78:	f7ff ffa6 	bl	8003dc8 <sbrk_aligned>
 8003e7c:	3001      	adds	r0, #1
 8003e7e:	d03a      	beq.n	8003ef6 <_malloc_r+0xea>
 8003e80:	6823      	ldr	r3, [r4, #0]
 8003e82:	442b      	add	r3, r5
 8003e84:	6023      	str	r3, [r4, #0]
 8003e86:	f8d8 3000 	ldr.w	r3, [r8]
 8003e8a:	685a      	ldr	r2, [r3, #4]
 8003e8c:	bb62      	cbnz	r2, 8003ee8 <_malloc_r+0xdc>
 8003e8e:	f8c8 7000 	str.w	r7, [r8]
 8003e92:	e00f      	b.n	8003eb4 <_malloc_r+0xa8>
 8003e94:	6822      	ldr	r2, [r4, #0]
 8003e96:	1b52      	subs	r2, r2, r5
 8003e98:	d420      	bmi.n	8003edc <_malloc_r+0xd0>
 8003e9a:	2a0b      	cmp	r2, #11
 8003e9c:	d917      	bls.n	8003ece <_malloc_r+0xc2>
 8003e9e:	1961      	adds	r1, r4, r5
 8003ea0:	42a3      	cmp	r3, r4
 8003ea2:	6025      	str	r5, [r4, #0]
 8003ea4:	bf18      	it	ne
 8003ea6:	6059      	strne	r1, [r3, #4]
 8003ea8:	6863      	ldr	r3, [r4, #4]
 8003eaa:	bf08      	it	eq
 8003eac:	f8c8 1000 	streq.w	r1, [r8]
 8003eb0:	5162      	str	r2, [r4, r5]
 8003eb2:	604b      	str	r3, [r1, #4]
 8003eb4:	4630      	mov	r0, r6
 8003eb6:	f000 f82f 	bl	8003f18 <__malloc_unlock>
 8003eba:	f104 000b 	add.w	r0, r4, #11
 8003ebe:	1d23      	adds	r3, r4, #4
 8003ec0:	f020 0007 	bic.w	r0, r0, #7
 8003ec4:	1ac2      	subs	r2, r0, r3
 8003ec6:	bf1c      	itt	ne
 8003ec8:	1a1b      	subne	r3, r3, r0
 8003eca:	50a3      	strne	r3, [r4, r2]
 8003ecc:	e7af      	b.n	8003e2e <_malloc_r+0x22>
 8003ece:	6862      	ldr	r2, [r4, #4]
 8003ed0:	42a3      	cmp	r3, r4
 8003ed2:	bf0c      	ite	eq
 8003ed4:	f8c8 2000 	streq.w	r2, [r8]
 8003ed8:	605a      	strne	r2, [r3, #4]
 8003eda:	e7eb      	b.n	8003eb4 <_malloc_r+0xa8>
 8003edc:	4623      	mov	r3, r4
 8003ede:	6864      	ldr	r4, [r4, #4]
 8003ee0:	e7ae      	b.n	8003e40 <_malloc_r+0x34>
 8003ee2:	463c      	mov	r4, r7
 8003ee4:	687f      	ldr	r7, [r7, #4]
 8003ee6:	e7b6      	b.n	8003e56 <_malloc_r+0x4a>
 8003ee8:	461a      	mov	r2, r3
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	42a3      	cmp	r3, r4
 8003eee:	d1fb      	bne.n	8003ee8 <_malloc_r+0xdc>
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	6053      	str	r3, [r2, #4]
 8003ef4:	e7de      	b.n	8003eb4 <_malloc_r+0xa8>
 8003ef6:	230c      	movs	r3, #12
 8003ef8:	6033      	str	r3, [r6, #0]
 8003efa:	4630      	mov	r0, r6
 8003efc:	f000 f80c 	bl	8003f18 <__malloc_unlock>
 8003f00:	e794      	b.n	8003e2c <_malloc_r+0x20>
 8003f02:	6005      	str	r5, [r0, #0]
 8003f04:	e7d6      	b.n	8003eb4 <_malloc_r+0xa8>
 8003f06:	bf00      	nop
 8003f08:	20000268 	.word	0x20000268

08003f0c <__malloc_lock>:
 8003f0c:	4801      	ldr	r0, [pc, #4]	@ (8003f14 <__malloc_lock+0x8>)
 8003f0e:	f7ff bf0e 	b.w	8003d2e <__retarget_lock_acquire_recursive>
 8003f12:	bf00      	nop
 8003f14:	20000260 	.word	0x20000260

08003f18 <__malloc_unlock>:
 8003f18:	4801      	ldr	r0, [pc, #4]	@ (8003f20 <__malloc_unlock+0x8>)
 8003f1a:	f7ff bf09 	b.w	8003d30 <__retarget_lock_release_recursive>
 8003f1e:	bf00      	nop
 8003f20:	20000260 	.word	0x20000260

08003f24 <__sflush_r>:
 8003f24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f2a:	0716      	lsls	r6, r2, #28
 8003f2c:	4605      	mov	r5, r0
 8003f2e:	460c      	mov	r4, r1
 8003f30:	d454      	bmi.n	8003fdc <__sflush_r+0xb8>
 8003f32:	684b      	ldr	r3, [r1, #4]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	dc02      	bgt.n	8003f3e <__sflush_r+0x1a>
 8003f38:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	dd48      	ble.n	8003fd0 <__sflush_r+0xac>
 8003f3e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003f40:	2e00      	cmp	r6, #0
 8003f42:	d045      	beq.n	8003fd0 <__sflush_r+0xac>
 8003f44:	2300      	movs	r3, #0
 8003f46:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003f4a:	682f      	ldr	r7, [r5, #0]
 8003f4c:	6a21      	ldr	r1, [r4, #32]
 8003f4e:	602b      	str	r3, [r5, #0]
 8003f50:	d030      	beq.n	8003fb4 <__sflush_r+0x90>
 8003f52:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003f54:	89a3      	ldrh	r3, [r4, #12]
 8003f56:	0759      	lsls	r1, r3, #29
 8003f58:	d505      	bpl.n	8003f66 <__sflush_r+0x42>
 8003f5a:	6863      	ldr	r3, [r4, #4]
 8003f5c:	1ad2      	subs	r2, r2, r3
 8003f5e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003f60:	b10b      	cbz	r3, 8003f66 <__sflush_r+0x42>
 8003f62:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003f64:	1ad2      	subs	r2, r2, r3
 8003f66:	2300      	movs	r3, #0
 8003f68:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003f6a:	6a21      	ldr	r1, [r4, #32]
 8003f6c:	4628      	mov	r0, r5
 8003f6e:	47b0      	blx	r6
 8003f70:	1c43      	adds	r3, r0, #1
 8003f72:	89a3      	ldrh	r3, [r4, #12]
 8003f74:	d106      	bne.n	8003f84 <__sflush_r+0x60>
 8003f76:	6829      	ldr	r1, [r5, #0]
 8003f78:	291d      	cmp	r1, #29
 8003f7a:	d82b      	bhi.n	8003fd4 <__sflush_r+0xb0>
 8003f7c:	4a28      	ldr	r2, [pc, #160]	@ (8004020 <__sflush_r+0xfc>)
 8003f7e:	40ca      	lsrs	r2, r1
 8003f80:	07d6      	lsls	r6, r2, #31
 8003f82:	d527      	bpl.n	8003fd4 <__sflush_r+0xb0>
 8003f84:	2200      	movs	r2, #0
 8003f86:	6062      	str	r2, [r4, #4]
 8003f88:	04d9      	lsls	r1, r3, #19
 8003f8a:	6922      	ldr	r2, [r4, #16]
 8003f8c:	6022      	str	r2, [r4, #0]
 8003f8e:	d504      	bpl.n	8003f9a <__sflush_r+0x76>
 8003f90:	1c42      	adds	r2, r0, #1
 8003f92:	d101      	bne.n	8003f98 <__sflush_r+0x74>
 8003f94:	682b      	ldr	r3, [r5, #0]
 8003f96:	b903      	cbnz	r3, 8003f9a <__sflush_r+0x76>
 8003f98:	6560      	str	r0, [r4, #84]	@ 0x54
 8003f9a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003f9c:	602f      	str	r7, [r5, #0]
 8003f9e:	b1b9      	cbz	r1, 8003fd0 <__sflush_r+0xac>
 8003fa0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003fa4:	4299      	cmp	r1, r3
 8003fa6:	d002      	beq.n	8003fae <__sflush_r+0x8a>
 8003fa8:	4628      	mov	r0, r5
 8003faa:	f7ff fec3 	bl	8003d34 <_free_r>
 8003fae:	2300      	movs	r3, #0
 8003fb0:	6363      	str	r3, [r4, #52]	@ 0x34
 8003fb2:	e00d      	b.n	8003fd0 <__sflush_r+0xac>
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	4628      	mov	r0, r5
 8003fb8:	47b0      	blx	r6
 8003fba:	4602      	mov	r2, r0
 8003fbc:	1c50      	adds	r0, r2, #1
 8003fbe:	d1c9      	bne.n	8003f54 <__sflush_r+0x30>
 8003fc0:	682b      	ldr	r3, [r5, #0]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d0c6      	beq.n	8003f54 <__sflush_r+0x30>
 8003fc6:	2b1d      	cmp	r3, #29
 8003fc8:	d001      	beq.n	8003fce <__sflush_r+0xaa>
 8003fca:	2b16      	cmp	r3, #22
 8003fcc:	d11d      	bne.n	800400a <__sflush_r+0xe6>
 8003fce:	602f      	str	r7, [r5, #0]
 8003fd0:	2000      	movs	r0, #0
 8003fd2:	e021      	b.n	8004018 <__sflush_r+0xf4>
 8003fd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003fd8:	b21b      	sxth	r3, r3
 8003fda:	e01a      	b.n	8004012 <__sflush_r+0xee>
 8003fdc:	690f      	ldr	r7, [r1, #16]
 8003fde:	2f00      	cmp	r7, #0
 8003fe0:	d0f6      	beq.n	8003fd0 <__sflush_r+0xac>
 8003fe2:	0793      	lsls	r3, r2, #30
 8003fe4:	680e      	ldr	r6, [r1, #0]
 8003fe6:	bf08      	it	eq
 8003fe8:	694b      	ldreq	r3, [r1, #20]
 8003fea:	600f      	str	r7, [r1, #0]
 8003fec:	bf18      	it	ne
 8003fee:	2300      	movne	r3, #0
 8003ff0:	1bf6      	subs	r6, r6, r7
 8003ff2:	608b      	str	r3, [r1, #8]
 8003ff4:	2e00      	cmp	r6, #0
 8003ff6:	ddeb      	ble.n	8003fd0 <__sflush_r+0xac>
 8003ff8:	6a21      	ldr	r1, [r4, #32]
 8003ffa:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8003ffe:	4633      	mov	r3, r6
 8004000:	463a      	mov	r2, r7
 8004002:	4628      	mov	r0, r5
 8004004:	47e0      	blx	ip
 8004006:	2800      	cmp	r0, #0
 8004008:	dc07      	bgt.n	800401a <__sflush_r+0xf6>
 800400a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800400e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004012:	81a3      	strh	r3, [r4, #12]
 8004014:	f04f 30ff 	mov.w	r0, #4294967295
 8004018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800401a:	4407      	add	r7, r0
 800401c:	1a36      	subs	r6, r6, r0
 800401e:	e7e9      	b.n	8003ff4 <__sflush_r+0xd0>
 8004020:	20400001 	.word	0x20400001

08004024 <_fflush_r>:
 8004024:	b538      	push	{r3, r4, r5, lr}
 8004026:	690b      	ldr	r3, [r1, #16]
 8004028:	4605      	mov	r5, r0
 800402a:	460c      	mov	r4, r1
 800402c:	b913      	cbnz	r3, 8004034 <_fflush_r+0x10>
 800402e:	2500      	movs	r5, #0
 8004030:	4628      	mov	r0, r5
 8004032:	bd38      	pop	{r3, r4, r5, pc}
 8004034:	b118      	cbz	r0, 800403e <_fflush_r+0x1a>
 8004036:	6a03      	ldr	r3, [r0, #32]
 8004038:	b90b      	cbnz	r3, 800403e <_fflush_r+0x1a>
 800403a:	f7ff fc93 	bl	8003964 <__sinit>
 800403e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d0f3      	beq.n	800402e <_fflush_r+0xa>
 8004046:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004048:	07d0      	lsls	r0, r2, #31
 800404a:	d404      	bmi.n	8004056 <_fflush_r+0x32>
 800404c:	0599      	lsls	r1, r3, #22
 800404e:	d402      	bmi.n	8004056 <_fflush_r+0x32>
 8004050:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004052:	f7ff fe6c 	bl	8003d2e <__retarget_lock_acquire_recursive>
 8004056:	4628      	mov	r0, r5
 8004058:	4621      	mov	r1, r4
 800405a:	f7ff ff63 	bl	8003f24 <__sflush_r>
 800405e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004060:	07da      	lsls	r2, r3, #31
 8004062:	4605      	mov	r5, r0
 8004064:	d4e4      	bmi.n	8004030 <_fflush_r+0xc>
 8004066:	89a3      	ldrh	r3, [r4, #12]
 8004068:	059b      	lsls	r3, r3, #22
 800406a:	d4e1      	bmi.n	8004030 <_fflush_r+0xc>
 800406c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800406e:	f7ff fe5f 	bl	8003d30 <__retarget_lock_release_recursive>
 8004072:	e7dd      	b.n	8004030 <_fflush_r+0xc>

08004074 <__swhatbuf_r>:
 8004074:	b570      	push	{r4, r5, r6, lr}
 8004076:	460c      	mov	r4, r1
 8004078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800407c:	2900      	cmp	r1, #0
 800407e:	b096      	sub	sp, #88	@ 0x58
 8004080:	4615      	mov	r5, r2
 8004082:	461e      	mov	r6, r3
 8004084:	da0d      	bge.n	80040a2 <__swhatbuf_r+0x2e>
 8004086:	89a3      	ldrh	r3, [r4, #12]
 8004088:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800408c:	f04f 0100 	mov.w	r1, #0
 8004090:	bf14      	ite	ne
 8004092:	2340      	movne	r3, #64	@ 0x40
 8004094:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004098:	2000      	movs	r0, #0
 800409a:	6031      	str	r1, [r6, #0]
 800409c:	602b      	str	r3, [r5, #0]
 800409e:	b016      	add	sp, #88	@ 0x58
 80040a0:	bd70      	pop	{r4, r5, r6, pc}
 80040a2:	466a      	mov	r2, sp
 80040a4:	f000 f848 	bl	8004138 <_fstat_r>
 80040a8:	2800      	cmp	r0, #0
 80040aa:	dbec      	blt.n	8004086 <__swhatbuf_r+0x12>
 80040ac:	9901      	ldr	r1, [sp, #4]
 80040ae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80040b2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80040b6:	4259      	negs	r1, r3
 80040b8:	4159      	adcs	r1, r3
 80040ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80040be:	e7eb      	b.n	8004098 <__swhatbuf_r+0x24>

080040c0 <__smakebuf_r>:
 80040c0:	898b      	ldrh	r3, [r1, #12]
 80040c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040c4:	079d      	lsls	r5, r3, #30
 80040c6:	4606      	mov	r6, r0
 80040c8:	460c      	mov	r4, r1
 80040ca:	d507      	bpl.n	80040dc <__smakebuf_r+0x1c>
 80040cc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80040d0:	6023      	str	r3, [r4, #0]
 80040d2:	6123      	str	r3, [r4, #16]
 80040d4:	2301      	movs	r3, #1
 80040d6:	6163      	str	r3, [r4, #20]
 80040d8:	b003      	add	sp, #12
 80040da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040dc:	ab01      	add	r3, sp, #4
 80040de:	466a      	mov	r2, sp
 80040e0:	f7ff ffc8 	bl	8004074 <__swhatbuf_r>
 80040e4:	9f00      	ldr	r7, [sp, #0]
 80040e6:	4605      	mov	r5, r0
 80040e8:	4639      	mov	r1, r7
 80040ea:	4630      	mov	r0, r6
 80040ec:	f7ff fe8e 	bl	8003e0c <_malloc_r>
 80040f0:	b948      	cbnz	r0, 8004106 <__smakebuf_r+0x46>
 80040f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040f6:	059a      	lsls	r2, r3, #22
 80040f8:	d4ee      	bmi.n	80040d8 <__smakebuf_r+0x18>
 80040fa:	f023 0303 	bic.w	r3, r3, #3
 80040fe:	f043 0302 	orr.w	r3, r3, #2
 8004102:	81a3      	strh	r3, [r4, #12]
 8004104:	e7e2      	b.n	80040cc <__smakebuf_r+0xc>
 8004106:	89a3      	ldrh	r3, [r4, #12]
 8004108:	6020      	str	r0, [r4, #0]
 800410a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800410e:	81a3      	strh	r3, [r4, #12]
 8004110:	9b01      	ldr	r3, [sp, #4]
 8004112:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004116:	b15b      	cbz	r3, 8004130 <__smakebuf_r+0x70>
 8004118:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800411c:	4630      	mov	r0, r6
 800411e:	f000 f81d 	bl	800415c <_isatty_r>
 8004122:	b128      	cbz	r0, 8004130 <__smakebuf_r+0x70>
 8004124:	89a3      	ldrh	r3, [r4, #12]
 8004126:	f023 0303 	bic.w	r3, r3, #3
 800412a:	f043 0301 	orr.w	r3, r3, #1
 800412e:	81a3      	strh	r3, [r4, #12]
 8004130:	89a3      	ldrh	r3, [r4, #12]
 8004132:	431d      	orrs	r5, r3
 8004134:	81a5      	strh	r5, [r4, #12]
 8004136:	e7cf      	b.n	80040d8 <__smakebuf_r+0x18>

08004138 <_fstat_r>:
 8004138:	b538      	push	{r3, r4, r5, lr}
 800413a:	4d07      	ldr	r5, [pc, #28]	@ (8004158 <_fstat_r+0x20>)
 800413c:	2300      	movs	r3, #0
 800413e:	4604      	mov	r4, r0
 8004140:	4608      	mov	r0, r1
 8004142:	4611      	mov	r1, r2
 8004144:	602b      	str	r3, [r5, #0]
 8004146:	f7fc fe16 	bl	8000d76 <_fstat>
 800414a:	1c43      	adds	r3, r0, #1
 800414c:	d102      	bne.n	8004154 <_fstat_r+0x1c>
 800414e:	682b      	ldr	r3, [r5, #0]
 8004150:	b103      	cbz	r3, 8004154 <_fstat_r+0x1c>
 8004152:	6023      	str	r3, [r4, #0]
 8004154:	bd38      	pop	{r3, r4, r5, pc}
 8004156:	bf00      	nop
 8004158:	2000025c 	.word	0x2000025c

0800415c <_isatty_r>:
 800415c:	b538      	push	{r3, r4, r5, lr}
 800415e:	4d06      	ldr	r5, [pc, #24]	@ (8004178 <_isatty_r+0x1c>)
 8004160:	2300      	movs	r3, #0
 8004162:	4604      	mov	r4, r0
 8004164:	4608      	mov	r0, r1
 8004166:	602b      	str	r3, [r5, #0]
 8004168:	f7fc fe14 	bl	8000d94 <_isatty>
 800416c:	1c43      	adds	r3, r0, #1
 800416e:	d102      	bne.n	8004176 <_isatty_r+0x1a>
 8004170:	682b      	ldr	r3, [r5, #0]
 8004172:	b103      	cbz	r3, 8004176 <_isatty_r+0x1a>
 8004174:	6023      	str	r3, [r4, #0]
 8004176:	bd38      	pop	{r3, r4, r5, pc}
 8004178:	2000025c 	.word	0x2000025c

0800417c <_sbrk_r>:
 800417c:	b538      	push	{r3, r4, r5, lr}
 800417e:	4d06      	ldr	r5, [pc, #24]	@ (8004198 <_sbrk_r+0x1c>)
 8004180:	2300      	movs	r3, #0
 8004182:	4604      	mov	r4, r0
 8004184:	4608      	mov	r0, r1
 8004186:	602b      	str	r3, [r5, #0]
 8004188:	f7fc fe1a 	bl	8000dc0 <_sbrk>
 800418c:	1c43      	adds	r3, r0, #1
 800418e:	d102      	bne.n	8004196 <_sbrk_r+0x1a>
 8004190:	682b      	ldr	r3, [r5, #0]
 8004192:	b103      	cbz	r3, 8004196 <_sbrk_r+0x1a>
 8004194:	6023      	str	r3, [r4, #0]
 8004196:	bd38      	pop	{r3, r4, r5, pc}
 8004198:	2000025c 	.word	0x2000025c

0800419c <_init>:
 800419c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800419e:	bf00      	nop
 80041a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041a2:	bc08      	pop	{r3}
 80041a4:	469e      	mov	lr, r3
 80041a6:	4770      	bx	lr

080041a8 <_fini>:
 80041a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041aa:	bf00      	nop
 80041ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041ae:	bc08      	pop	{r3}
 80041b0:	469e      	mov	lr, r3
 80041b2:	4770      	bx	lr
