
LPS_WL55_1CPU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046d4  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  08004814  08004814  00005814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ab4  08004ab4  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004ab4  08004ab4  00005ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004abc  08004abc  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004abc  08004abc  00005abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004ac0  08004ac0  00005ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004ac4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  20000068  08004b2c  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  08004b2c  0000626c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ed15  00000000  00000000  00006092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002386  00000000  00000000  00014da7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001000  00000000  00000000  00017130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c19  00000000  00000000  00018130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ce18  00000000  00000000  00018d49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e806  00000000  00000000  00035b61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b21fb  00000000  00000000  00044367  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f6562  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000499c  00000000  00000000  000f65a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000faf44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000068 	.word	0x20000068
 800015c:	00000000 	.word	0x00000000
 8000160:	080047fc 	.word	0x080047fc

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000006c 	.word	0x2000006c
 800017c:	080047fc 	.word	0x080047fc

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b988 	b.w	8000548 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	468e      	mov	lr, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d962      	bls.n	800032c <__udivmoddi4+0xdc>
 8000266:	fab2 f682 	clz	r6, r2
 800026a:	b14e      	cbz	r6, 8000280 <__udivmoddi4+0x30>
 800026c:	f1c6 0320 	rsb	r3, r6, #32
 8000270:	fa01 f806 	lsl.w	r8, r1, r6
 8000274:	fa20 f303 	lsr.w	r3, r0, r3
 8000278:	40b7      	lsls	r7, r6
 800027a:	ea43 0808 	orr.w	r8, r3, r8
 800027e:	40b4      	lsls	r4, r6
 8000280:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000284:	fa1f fc87 	uxth.w	ip, r7
 8000288:	fbb8 f1fe 	udiv	r1, r8, lr
 800028c:	0c23      	lsrs	r3, r4, #16
 800028e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000292:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000296:	fb01 f20c 	mul.w	r2, r1, ip
 800029a:	429a      	cmp	r2, r3
 800029c:	d909      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029e:	18fb      	adds	r3, r7, r3
 80002a0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002a4:	f080 80ea 	bcs.w	800047c <__udivmoddi4+0x22c>
 80002a8:	429a      	cmp	r2, r3
 80002aa:	f240 80e7 	bls.w	800047c <__udivmoddi4+0x22c>
 80002ae:	3902      	subs	r1, #2
 80002b0:	443b      	add	r3, r7
 80002b2:	1a9a      	subs	r2, r3, r2
 80002b4:	b2a3      	uxth	r3, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002c2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c6:	459c      	cmp	ip, r3
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0x8e>
 80002ca:	18fb      	adds	r3, r7, r3
 80002cc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d0:	f080 80d6 	bcs.w	8000480 <__udivmoddi4+0x230>
 80002d4:	459c      	cmp	ip, r3
 80002d6:	f240 80d3 	bls.w	8000480 <__udivmoddi4+0x230>
 80002da:	443b      	add	r3, r7
 80002dc:	3802      	subs	r0, #2
 80002de:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e2:	eba3 030c 	sub.w	r3, r3, ip
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11d      	cbz	r5, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40f3      	lsrs	r3, r6
 80002ec:	2200      	movs	r2, #0
 80002ee:	e9c5 3200 	strd	r3, r2, [r5]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d905      	bls.n	8000306 <__udivmoddi4+0xb6>
 80002fa:	b10d      	cbz	r5, 8000300 <__udivmoddi4+0xb0>
 80002fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000300:	2100      	movs	r1, #0
 8000302:	4608      	mov	r0, r1
 8000304:	e7f5      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000306:	fab3 f183 	clz	r1, r3
 800030a:	2900      	cmp	r1, #0
 800030c:	d146      	bne.n	800039c <__udivmoddi4+0x14c>
 800030e:	4573      	cmp	r3, lr
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xc8>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 8105 	bhi.w	8000522 <__udivmoddi4+0x2d2>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb6e 0203 	sbc.w	r2, lr, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4690      	mov	r8, r2
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e5      	beq.n	80002f2 <__udivmoddi4+0xa2>
 8000326:	e9c5 4800 	strd	r4, r8, [r5]
 800032a:	e7e2      	b.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	2a00      	cmp	r2, #0
 800032e:	f000 8090 	beq.w	8000452 <__udivmoddi4+0x202>
 8000332:	fab2 f682 	clz	r6, r2
 8000336:	2e00      	cmp	r6, #0
 8000338:	f040 80a4 	bne.w	8000484 <__udivmoddi4+0x234>
 800033c:	1a8a      	subs	r2, r1, r2
 800033e:	0c03      	lsrs	r3, r0, #16
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	b280      	uxth	r0, r0
 8000346:	b2bc      	uxth	r4, r7
 8000348:	2101      	movs	r1, #1
 800034a:	fbb2 fcfe 	udiv	ip, r2, lr
 800034e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000356:	fb04 f20c 	mul.w	r2, r4, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d907      	bls.n	800036e <__udivmoddi4+0x11e>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x11c>
 8000366:	429a      	cmp	r2, r3
 8000368:	f200 80e0 	bhi.w	800052c <__udivmoddi4+0x2dc>
 800036c:	46c4      	mov	ip, r8
 800036e:	1a9b      	subs	r3, r3, r2
 8000370:	fbb3 f2fe 	udiv	r2, r3, lr
 8000374:	fb0e 3312 	mls	r3, lr, r2, r3
 8000378:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800037c:	fb02 f404 	mul.w	r4, r2, r4
 8000380:	429c      	cmp	r4, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x144>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f102 30ff 	add.w	r0, r2, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x142>
 800038c:	429c      	cmp	r4, r3
 800038e:	f200 80ca 	bhi.w	8000526 <__udivmoddi4+0x2d6>
 8000392:	4602      	mov	r2, r0
 8000394:	1b1b      	subs	r3, r3, r4
 8000396:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0x98>
 800039c:	f1c1 0620 	rsb	r6, r1, #32
 80003a0:	408b      	lsls	r3, r1
 80003a2:	fa22 f706 	lsr.w	r7, r2, r6
 80003a6:	431f      	orrs	r7, r3
 80003a8:	fa0e f401 	lsl.w	r4, lr, r1
 80003ac:	fa20 f306 	lsr.w	r3, r0, r6
 80003b0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003b4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b8:	4323      	orrs	r3, r4
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	fa1f fc87 	uxth.w	ip, r7
 80003c2:	fbbe f0f9 	udiv	r0, lr, r9
 80003c6:	0c1c      	lsrs	r4, r3, #16
 80003c8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003cc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003d0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1a0>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 3aff 	add.w	sl, r0, #4294967295
 80003e2:	f080 809c 	bcs.w	800051e <__udivmoddi4+0x2ce>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f240 8099 	bls.w	800051e <__udivmoddi4+0x2ce>
 80003ec:	3802      	subs	r0, #2
 80003ee:	443c      	add	r4, r7
 80003f0:	eba4 040e 	sub.w	r4, r4, lr
 80003f4:	fa1f fe83 	uxth.w	lr, r3
 80003f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003fc:	fb09 4413 	mls	r4, r9, r3, r4
 8000400:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000404:	fb03 fc0c 	mul.w	ip, r3, ip
 8000408:	45a4      	cmp	ip, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1ce>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000412:	f080 8082 	bcs.w	800051a <__udivmoddi4+0x2ca>
 8000416:	45a4      	cmp	ip, r4
 8000418:	d97f      	bls.n	800051a <__udivmoddi4+0x2ca>
 800041a:	3b02      	subs	r3, #2
 800041c:	443c      	add	r4, r7
 800041e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	fba0 ec02 	umull	lr, ip, r0, r2
 800042a:	4564      	cmp	r4, ip
 800042c:	4673      	mov	r3, lr
 800042e:	46e1      	mov	r9, ip
 8000430:	d362      	bcc.n	80004f8 <__udivmoddi4+0x2a8>
 8000432:	d05f      	beq.n	80004f4 <__udivmoddi4+0x2a4>
 8000434:	b15d      	cbz	r5, 800044e <__udivmoddi4+0x1fe>
 8000436:	ebb8 0203 	subs.w	r2, r8, r3
 800043a:	eb64 0409 	sbc.w	r4, r4, r9
 800043e:	fa04 f606 	lsl.w	r6, r4, r6
 8000442:	fa22 f301 	lsr.w	r3, r2, r1
 8000446:	431e      	orrs	r6, r3
 8000448:	40cc      	lsrs	r4, r1
 800044a:	e9c5 6400 	strd	r6, r4, [r5]
 800044e:	2100      	movs	r1, #0
 8000450:	e74f      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000452:	fbb1 fcf2 	udiv	ip, r1, r2
 8000456:	0c01      	lsrs	r1, r0, #16
 8000458:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800045c:	b280      	uxth	r0, r0
 800045e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000462:	463b      	mov	r3, r7
 8000464:	4638      	mov	r0, r7
 8000466:	463c      	mov	r4, r7
 8000468:	46b8      	mov	r8, r7
 800046a:	46be      	mov	lr, r7
 800046c:	2620      	movs	r6, #32
 800046e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000472:	eba2 0208 	sub.w	r2, r2, r8
 8000476:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800047a:	e766      	b.n	800034a <__udivmoddi4+0xfa>
 800047c:	4601      	mov	r1, r0
 800047e:	e718      	b.n	80002b2 <__udivmoddi4+0x62>
 8000480:	4610      	mov	r0, r2
 8000482:	e72c      	b.n	80002de <__udivmoddi4+0x8e>
 8000484:	f1c6 0220 	rsb	r2, r6, #32
 8000488:	fa2e f302 	lsr.w	r3, lr, r2
 800048c:	40b7      	lsls	r7, r6
 800048e:	40b1      	lsls	r1, r6
 8000490:	fa20 f202 	lsr.w	r2, r0, r2
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	430a      	orrs	r2, r1
 800049a:	fbb3 f8fe 	udiv	r8, r3, lr
 800049e:	b2bc      	uxth	r4, r7
 80004a0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb08 f904 	mul.w	r9, r8, r4
 80004ae:	40b0      	lsls	r0, r6
 80004b0:	4589      	cmp	r9, r1
 80004b2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004b6:	b280      	uxth	r0, r0
 80004b8:	d93e      	bls.n	8000538 <__udivmoddi4+0x2e8>
 80004ba:	1879      	adds	r1, r7, r1
 80004bc:	f108 3cff 	add.w	ip, r8, #4294967295
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x276>
 80004c2:	4589      	cmp	r9, r1
 80004c4:	d81f      	bhi.n	8000506 <__udivmoddi4+0x2b6>
 80004c6:	eba1 0109 	sub.w	r1, r1, r9
 80004ca:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ce:	fb09 f804 	mul.w	r8, r9, r4
 80004d2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004d6:	b292      	uxth	r2, r2
 80004d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004dc:	4542      	cmp	r2, r8
 80004de:	d229      	bcs.n	8000534 <__udivmoddi4+0x2e4>
 80004e0:	18ba      	adds	r2, r7, r2
 80004e2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004e6:	d2c4      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004e8:	4542      	cmp	r2, r8
 80004ea:	d2c2      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004ec:	f1a9 0102 	sub.w	r1, r9, #2
 80004f0:	443a      	add	r2, r7
 80004f2:	e7be      	b.n	8000472 <__udivmoddi4+0x222>
 80004f4:	45f0      	cmp	r8, lr
 80004f6:	d29d      	bcs.n	8000434 <__udivmoddi4+0x1e4>
 80004f8:	ebbe 0302 	subs.w	r3, lr, r2
 80004fc:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000500:	3801      	subs	r0, #1
 8000502:	46e1      	mov	r9, ip
 8000504:	e796      	b.n	8000434 <__udivmoddi4+0x1e4>
 8000506:	eba7 0909 	sub.w	r9, r7, r9
 800050a:	4449      	add	r1, r9
 800050c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000510:	fbb1 f9fe 	udiv	r9, r1, lr
 8000514:	fb09 f804 	mul.w	r8, r9, r4
 8000518:	e7db      	b.n	80004d2 <__udivmoddi4+0x282>
 800051a:	4673      	mov	r3, lr
 800051c:	e77f      	b.n	800041e <__udivmoddi4+0x1ce>
 800051e:	4650      	mov	r0, sl
 8000520:	e766      	b.n	80003f0 <__udivmoddi4+0x1a0>
 8000522:	4608      	mov	r0, r1
 8000524:	e6fd      	b.n	8000322 <__udivmoddi4+0xd2>
 8000526:	443b      	add	r3, r7
 8000528:	3a02      	subs	r2, #2
 800052a:	e733      	b.n	8000394 <__udivmoddi4+0x144>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	443b      	add	r3, r7
 8000532:	e71c      	b.n	800036e <__udivmoddi4+0x11e>
 8000534:	4649      	mov	r1, r9
 8000536:	e79c      	b.n	8000472 <__udivmoddi4+0x222>
 8000538:	eba1 0109 	sub.w	r1, r1, r9
 800053c:	46c4      	mov	ip, r8
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fb09 f804 	mul.w	r8, r9, r4
 8000546:	e7c4      	b.n	80004d2 <__udivmoddi4+0x282>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8000550:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000554:	689b      	ldr	r3, [r3, #8]
 8000556:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800055a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800055e:	d101      	bne.n	8000564 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8000560:	2301      	movs	r3, #1
 8000562:	e000      	b.n	8000566 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8000564:	2300      	movs	r3, #0
}
 8000566:	4618      	mov	r0, r3
 8000568:	46bd      	mov	sp, r7
 800056a:	bc80      	pop	{r7}
 800056c:	4770      	bx	lr

0800056e <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800056e:	b480      	push	{r7}
 8000570:	b085      	sub	sp, #20
 8000572:	af00      	add	r7, sp, #0
 8000574:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000576:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800057a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800057c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	4313      	orrs	r3, r2
 8000584:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000586:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800058a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	4013      	ands	r3, r2
 8000590:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000592:	68fb      	ldr	r3, [r7, #12]
}
 8000594:	bf00      	nop
 8000596:	3714      	adds	r7, #20
 8000598:	46bd      	mov	sp, r7
 800059a:	bc80      	pop	{r7}
 800059c:	4770      	bx	lr

0800059e <LL_APB1_GRP1_DisableClockSleep>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1

  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClockSleep(uint32_t Periphs)
{
 800059e:	b480      	push	{r7}
 80005a0:	b083      	sub	sp, #12
 80005a2:	af00      	add	r7, sp, #0
 80005a4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1SMENR1, Periphs);
 80005a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005aa:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	43db      	mvns	r3, r3
 80005b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80005b4:	4013      	ands	r3, r2
 80005b6:	678b      	str	r3, [r1, #120]	@ 0x78
}
 80005b8:	bf00      	nop
 80005ba:	370c      	adds	r7, #12
 80005bc:	46bd      	mov	sp, r7
 80005be:	bc80      	pop	{r7}
 80005c0:	4770      	bx	lr
	...

080005c4 <__io_putchar>:

/**
  * @brief Redirect the output of printf to USART2
  * @retval int
  */
int __io_putchar(int ch){
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, &ch, 1, 1000);
 80005cc:	1d39      	adds	r1, r7, #4
 80005ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005d2:	2201      	movs	r2, #1
 80005d4:	4803      	ldr	r0, [pc, #12]	@ (80005e4 <__io_putchar+0x20>)
 80005d6:	f002 fbd2 	bl	8002d7e <HAL_UART_Transmit>
}
 80005da:	bf00      	nop
 80005dc:	4618      	mov	r0, r3
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	20000084 	.word	0x20000084

080005e8 <Divide_HCLK1_By_X>:
 * 2, 3, 4, 5, 6, 8, 10, 16, 32, 64, 128, 256, 512.
 * Any other value does not divide SYSCLK (1 does not divide, >512 divides too much,
 * and by default, any unusual value will not divide).
 * @retval None
 */
void Divide_HCLK1_By_X(uint16_t dividerX){
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	80fb      	strh	r3, [r7, #6]
    uint8_t HCLK1_prescaler;
    if (dividerX >= 2 || dividerX <= 512){
 80005f2:	88fb      	ldrh	r3, [r7, #6]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d804      	bhi.n	8000602 <Divide_HCLK1_By_X+0x1a>
 80005f8:	88fb      	ldrh	r3, [r7, #6]
 80005fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80005fe:	f200 80cb 	bhi.w	8000798 <Divide_HCLK1_By_X+0x1b0>
      switch(dividerX){
 8000602:	88fb      	ldrh	r3, [r7, #6]
 8000604:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000608:	f000 80bf 	beq.w	800078a <Divide_HCLK1_By_X+0x1a2>
 800060c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000610:	f300 80be 	bgt.w	8000790 <Divide_HCLK1_By_X+0x1a8>
 8000614:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000618:	f000 80b4 	beq.w	8000784 <Divide_HCLK1_By_X+0x19c>
 800061c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000620:	f300 80b6 	bgt.w	8000790 <Divide_HCLK1_By_X+0x1a8>
 8000624:	2b40      	cmp	r3, #64	@ 0x40
 8000626:	f300 8089 	bgt.w	800073c <Divide_HCLK1_By_X+0x154>
 800062a:	2b02      	cmp	r3, #2
 800062c:	f2c0 80b0 	blt.w	8000790 <Divide_HCLK1_By_X+0x1a8>
 8000630:	3b02      	subs	r3, #2
 8000632:	2b3e      	cmp	r3, #62	@ 0x3e
 8000634:	f200 80ac 	bhi.w	8000790 <Divide_HCLK1_By_X+0x1a8>
 8000638:	a201      	add	r2, pc, #4	@ (adr r2, 8000640 <Divide_HCLK1_By_X+0x58>)
 800063a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800063e:	bf00      	nop
 8000640:	08000743 	.word	0x08000743
 8000644:	08000749 	.word	0x08000749
 8000648:	0800074f 	.word	0x0800074f
 800064c:	08000755 	.word	0x08000755
 8000650:	0800075b 	.word	0x0800075b
 8000654:	08000791 	.word	0x08000791
 8000658:	08000761 	.word	0x08000761
 800065c:	08000791 	.word	0x08000791
 8000660:	08000767 	.word	0x08000767
 8000664:	08000791 	.word	0x08000791
 8000668:	08000791 	.word	0x08000791
 800066c:	08000791 	.word	0x08000791
 8000670:	08000791 	.word	0x08000791
 8000674:	08000791 	.word	0x08000791
 8000678:	0800076d 	.word	0x0800076d
 800067c:	08000791 	.word	0x08000791
 8000680:	08000791 	.word	0x08000791
 8000684:	08000791 	.word	0x08000791
 8000688:	08000791 	.word	0x08000791
 800068c:	08000791 	.word	0x08000791
 8000690:	08000791 	.word	0x08000791
 8000694:	08000791 	.word	0x08000791
 8000698:	08000791 	.word	0x08000791
 800069c:	08000791 	.word	0x08000791
 80006a0:	08000791 	.word	0x08000791
 80006a4:	08000791 	.word	0x08000791
 80006a8:	08000791 	.word	0x08000791
 80006ac:	08000791 	.word	0x08000791
 80006b0:	08000791 	.word	0x08000791
 80006b4:	08000791 	.word	0x08000791
 80006b8:	08000773 	.word	0x08000773
 80006bc:	08000791 	.word	0x08000791
 80006c0:	08000791 	.word	0x08000791
 80006c4:	08000791 	.word	0x08000791
 80006c8:	08000791 	.word	0x08000791
 80006cc:	08000791 	.word	0x08000791
 80006d0:	08000791 	.word	0x08000791
 80006d4:	08000791 	.word	0x08000791
 80006d8:	08000791 	.word	0x08000791
 80006dc:	08000791 	.word	0x08000791
 80006e0:	08000791 	.word	0x08000791
 80006e4:	08000791 	.word	0x08000791
 80006e8:	08000791 	.word	0x08000791
 80006ec:	08000791 	.word	0x08000791
 80006f0:	08000791 	.word	0x08000791
 80006f4:	08000791 	.word	0x08000791
 80006f8:	08000791 	.word	0x08000791
 80006fc:	08000791 	.word	0x08000791
 8000700:	08000791 	.word	0x08000791
 8000704:	08000791 	.word	0x08000791
 8000708:	08000791 	.word	0x08000791
 800070c:	08000791 	.word	0x08000791
 8000710:	08000791 	.word	0x08000791
 8000714:	08000791 	.word	0x08000791
 8000718:	08000791 	.word	0x08000791
 800071c:	08000791 	.word	0x08000791
 8000720:	08000791 	.word	0x08000791
 8000724:	08000791 	.word	0x08000791
 8000728:	08000791 	.word	0x08000791
 800072c:	08000791 	.word	0x08000791
 8000730:	08000791 	.word	0x08000791
 8000734:	08000791 	.word	0x08000791
 8000738:	08000779 	.word	0x08000779
 800073c:	2b80      	cmp	r3, #128	@ 0x80
 800073e:	d01e      	beq.n	800077e <Divide_HCLK1_By_X+0x196>
 8000740:	e026      	b.n	8000790 <Divide_HCLK1_By_X+0x1a8>
        case 2:   HCLK1_prescaler = 8;    break; // "1000"
 8000742:	2308      	movs	r3, #8
 8000744:	73fb      	strb	r3, [r7, #15]
 8000746:	e026      	b.n	8000796 <Divide_HCLK1_By_X+0x1ae>
        case 3:   HCLK1_prescaler = 1;    break; // "0001"
 8000748:	2301      	movs	r3, #1
 800074a:	73fb      	strb	r3, [r7, #15]
 800074c:	e023      	b.n	8000796 <Divide_HCLK1_By_X+0x1ae>
        case 4:   HCLK1_prescaler = 9;    break; // "1001"
 800074e:	2309      	movs	r3, #9
 8000750:	73fb      	strb	r3, [r7, #15]
 8000752:	e020      	b.n	8000796 <Divide_HCLK1_By_X+0x1ae>
        case 5:   HCLK1_prescaler = 2;    break; // "0010"
 8000754:	2302      	movs	r3, #2
 8000756:	73fb      	strb	r3, [r7, #15]
 8000758:	e01d      	b.n	8000796 <Divide_HCLK1_By_X+0x1ae>
        case 6:   HCLK1_prescaler = 5;    break; // "0101"
 800075a:	2305      	movs	r3, #5
 800075c:	73fb      	strb	r3, [r7, #15]
 800075e:	e01a      	b.n	8000796 <Divide_HCLK1_By_X+0x1ae>
        case 8:   HCLK1_prescaler = 10;   break; // "1010"
 8000760:	230a      	movs	r3, #10
 8000762:	73fb      	strb	r3, [r7, #15]
 8000764:	e017      	b.n	8000796 <Divide_HCLK1_By_X+0x1ae>
        case 10:  HCLK1_prescaler = 6;    break; // "0110"
 8000766:	2306      	movs	r3, #6
 8000768:	73fb      	strb	r3, [r7, #15]
 800076a:	e014      	b.n	8000796 <Divide_HCLK1_By_X+0x1ae>
        case 16:  HCLK1_prescaler = 11;   break; // "1011"
 800076c:	230b      	movs	r3, #11
 800076e:	73fb      	strb	r3, [r7, #15]
 8000770:	e011      	b.n	8000796 <Divide_HCLK1_By_X+0x1ae>
        case 32:  HCLK1_prescaler = 7;    break; // "0111"
 8000772:	2307      	movs	r3, #7
 8000774:	73fb      	strb	r3, [r7, #15]
 8000776:	e00e      	b.n	8000796 <Divide_HCLK1_By_X+0x1ae>
        case 64:  HCLK1_prescaler = 12;   break; // "1100"
 8000778:	230c      	movs	r3, #12
 800077a:	73fb      	strb	r3, [r7, #15]
 800077c:	e00b      	b.n	8000796 <Divide_HCLK1_By_X+0x1ae>
        case 128: HCLK1_prescaler = 13;   break; // "1101"
 800077e:	230d      	movs	r3, #13
 8000780:	73fb      	strb	r3, [r7, #15]
 8000782:	e008      	b.n	8000796 <Divide_HCLK1_By_X+0x1ae>
        case 256: HCLK1_prescaler = 14;   break; // "1110"
 8000784:	230e      	movs	r3, #14
 8000786:	73fb      	strb	r3, [r7, #15]
 8000788:	e005      	b.n	8000796 <Divide_HCLK1_By_X+0x1ae>
        case 512: HCLK1_prescaler = 15;   break; // "1111"
 800078a:	230f      	movs	r3, #15
 800078c:	73fb      	strb	r3, [r7, #15]
 800078e:	e002      	b.n	8000796 <Divide_HCLK1_By_X+0x1ae>
        default:  HCLK1_prescaler = 0; break; // "0000", no division
 8000790:	2300      	movs	r3, #0
 8000792:	73fb      	strb	r3, [r7, #15]
 8000794:	bf00      	nop
      switch(dividerX){
 8000796:	e001      	b.n	800079c <Divide_HCLK1_By_X+0x1b4>
      }
    } else HCLK1_prescaler = 0; // no division
 8000798:	2300      	movs	r3, #0
 800079a:	73fb      	strb	r3, [r7, #15]

    // Reset the current prescaler value into bits 7 to 4 (HPRE)
    RCC -> CFGR &= ~(0xF << 4);
 800079c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80007a0:	689b      	ldr	r3, [r3, #8]
 80007a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80007a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80007aa:	6093      	str	r3, [r2, #8]
    // Insert the new prescaler value
    RCC -> CFGR |= (HCLK1_prescaler << 4);
 80007ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80007b0:	689a      	ldr	r2, [r3, #8]
 80007b2:	7bfb      	ldrb	r3, [r7, #15]
 80007b4:	011b      	lsls	r3, r3, #4
 80007b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80007ba:	4313      	orrs	r3, r2
 80007bc:	608b      	str	r3, [r1, #8]
    /* Wait for the hardware to aknowledge the new prescaler value
     * using HCLK1 prescaler flag (HPREF) on bit 16:
     * 0 → HCLK1 prescaler value not yet applied
     * 1 → HCLK1 prescaler value applied (RCC -> CFGR & (1 << 16))
     * OR using LL function `LL_RCC_IsActiveFlag_HPRE(void)`
     */ while(!(LL_RCC_IsActiveFlag_HPRE())){}
 80007be:	bf00      	nop
 80007c0:	f7ff fec4 	bl	800054c <LL_RCC_IsActiveFlag_HPRE>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d0fa      	beq.n	80007c0 <Divide_HCLK1_By_X+0x1d8>
}
 80007ca:	bf00      	nop
 80007cc:	bf00      	nop
 80007ce:	3710      	adds	r7, #16
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <Exit_LowPowerRunMode>:
  * HCLK frequency over 2 MHz, can take the following values:
  * 1, 2, 3, 4, 5, 6, 8, 10, 16, 32, 64, 128, 256, 512, but MUST BE lower than 24;
  * e.g. among the nine first values.
  * @retval None
  */
void Exit_LowPowerRunMode(uint8_t newHCLKFreq){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	71fb      	strb	r3, [r7, #7]
	// 1. Clear the LPR bit in PWR_CR1, and,
	// 2. wait until REGLPF bit is cleared in PWR_SR2.
	HAL_PWREx_DisableLowPowerRunMode();
 80007de:	f000 ff13 	bl	8001608 <HAL_PWREx_DisableLowPowerRunMode>

	// 3. Increase the HCLK clock frequencies over 2 MHz.
	// 48 MHz / X ≥ 2 MHz → X ≤ 24; but 24 is not
	// a usual value of divider (1, 2, 3, 4, 5, 6, 8, 10, 16, 32, 64, 128, 256, 512).
	// So we can take one of the nine lower values, 1 to 16.
	Divide_HCLK1_By_X(newHCLKFreq);
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	b29b      	uxth	r3, r3
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff fefe 	bl	80005e8 <Divide_HCLK1_By_X>
	// (HSE32 is not used here, so we skip this optionnal step.)

	// 4. Reinitialize the USART2 peripheral (since changing the HCLK frequency
	// impacts the related peripherals, such as USART2).
	MX_USART2_UART_Init();
 80007ec:	f000 f8b6 	bl	800095c <MX_USART2_UART_Init>
}
 80007f0:	bf00      	nop
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <Enter_LowPowerSleepMode>:
  * according to the datasheet guidance.
  * Assumes we entered LPR beforehand.
  * HSE32 is still not used.
  * @retval None
  */
void Enter_LowPowerSleepMode(void){
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0

	// Reduce HCLK frequency below 2 MHz
	Divide_HCLK1_By_X(32);
 80007fc:	2020      	movs	r0, #32
 80007fe:	f7ff fef3 	bl	80005e8 <Divide_HCLK1_By_X>

	// Suspend the tick to prevent the Tick interrupt every 1 ms
	HAL_SuspendTick();
 8000802:	f000 fbd5 	bl	8000fb0 <HAL_SuspendTick>

	HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000806:	2101      	movs	r1, #1
 8000808:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800080c:	f000 feae 	bl	800156c <HAL_PWR_EnterSLEEPMode>

}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}

08000814 <delay>:
  * @brief Simple software delay (blocking)
  * @param ms: approximate milliseconds to delay (not precise, depends on CPU speed)
  * @retval None
  */
void delay(uint32_t ms)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
    uint32_t freq = HAL_RCC_GetHCLKFreq();
 800081c:	f001 ff46 	bl	80026ac <HAL_RCC_GetHCLKFreq>
 8000820:	60b8      	str	r0, [r7, #8]
	uint32_t count = (freq / 4000) * ms; // 4 cycles per loop (approx.)
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	4a09      	ldr	r2, [pc, #36]	@ (800084c <delay+0x38>)
 8000826:	fba2 2303 	umull	r2, r3, r2, r3
 800082a:	0a1a      	lsrs	r2, r3, #8
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	fb02 f303 	mul.w	r3, r2, r3
 8000832:	60fb      	str	r3, [r7, #12]
    while(count--) {
 8000834:	e000      	b.n	8000838 <delay+0x24>
        __NOP();
 8000836:	bf00      	nop
    while(count--) {
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	1e5a      	subs	r2, r3, #1
 800083c:	60fa      	str	r2, [r7, #12]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d1f9      	bne.n	8000836 <delay+0x22>
    }
}
 8000842:	bf00      	nop
 8000844:	bf00      	nop
 8000846:	3710      	adds	r7, #16
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	10624dd3 	.word	0x10624dd3

08000850 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000854:	f000 fb12 	bl	8000e7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000858:	f000 f820 	bl	800089c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800085c:	f000 f8ca 	bl	80009f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000860:	f000 f87c 	bl	800095c <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	  printf("\r\n\r\nTest d'une appli mode veille sur STM32\r\n");
 8000864:	480a      	ldr	r0, [pc, #40]	@ (8000890 <main+0x40>)
 8000866:	f003 f96d 	bl	8003b44 <puts>
  while (1)
  {
	  printf("Exécution de la boucle While\r\n");
 800086a:	480a      	ldr	r0, [pc, #40]	@ (8000894 <main+0x44>)
 800086c:	f003 f96a 	bl	8003b44 <puts>
	  printf("Le µCU entre en mode Low Power Sleep dans 2 secondes.\n\r");
 8000870:	4809      	ldr	r0, [pc, #36]	@ (8000898 <main+0x48>)
 8000872:	f003 f8ff 	bl	8003a74 <iprintf>
	  __HAL_RCC_USART2_CLK_SLEEP_DISABLE(); // Clock-gating the USART2 peripheral
 8000876:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800087a:	f7ff fe90 	bl	800059e <LL_APB1_GRP1_DisableClockSleep>
	  HAL_Delay(2000);
 800087e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000882:	f000 fb71 	bl	8000f68 <HAL_Delay>

	  Enter_LowPowerSleepMode();	// Enter into Low Power Sleep mode
 8000886:	f7ff ffb7 	bl	80007f8 <Enter_LowPowerSleepMode>
	  printf("Exécution de la boucle While\r\n");
 800088a:	bf00      	nop
 800088c:	e7ed      	b.n	800086a <main+0x1a>
 800088e:	bf00      	nop
 8000890:	08004814 	.word	0x08004814
 8000894:	08004840 	.word	0x08004840
 8000898:	08004860 	.word	0x08004860

0800089c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b09a      	sub	sp, #104	@ 0x68
 80008a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008a2:	f107 0320 	add.w	r3, r7, #32
 80008a6:	2248      	movs	r2, #72	@ 0x48
 80008a8:	2100      	movs	r1, #0
 80008aa:	4618      	mov	r0, r3
 80008ac:	f003 fa2a 	bl	8003d04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b0:	1d3b      	adds	r3, r7, #4
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]
 80008bc:	611a      	str	r2, [r3, #16]
 80008be:	615a      	str	r2, [r3, #20]
 80008c0:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008c2:	4b25      	ldr	r3, [pc, #148]	@ (8000958 <SystemClock_Config+0xbc>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80008ca:	4a23      	ldr	r2, [pc, #140]	@ (8000958 <SystemClock_Config+0xbc>)
 80008cc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008d0:	6013      	str	r3, [r2, #0]
 80008d2:	4b21      	ldr	r3, [pc, #132]	@ (8000958 <SystemClock_Config+0xbc>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80008da:	603b      	str	r3, [r7, #0]
 80008dc:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80008de:	2320      	movs	r3, #32
 80008e0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008e2:	2301      	movs	r3, #1
 80008e4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80008e6:	2300      	movs	r3, #0
 80008e8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80008ea:	2360      	movs	r3, #96	@ 0x60
 80008ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ee:	2302      	movs	r3, #2
 80008f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80008f2:	2301      	movs	r3, #1
 80008f4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80008f6:	2300      	movs	r3, #0
 80008f8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 24;
 80008fa:	2318      	movs	r3, #24
 80008fc:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008fe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000902:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000904:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000908:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800090a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800090e:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000910:	f107 0320 	add.w	r3, r7, #32
 8000914:	4618      	mov	r0, r3
 8000916:	f001 f965 	bl	8001be4 <HAL_RCC_OscConfig>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000920:	f000 f920 	bl	8000b64 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8000924:	234f      	movs	r3, #79	@ 0x4f
 8000926:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000928:	2303      	movs	r3, #3
 800092a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800092c:	2300      	movs	r3, #0
 800092e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000930:	2300      	movs	r3, #0
 8000932:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000934:	2300      	movs	r3, #0
 8000936:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000938:	2300      	movs	r3, #0
 800093a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	2102      	movs	r1, #2
 8000940:	4618      	mov	r0, r3
 8000942:	f001 fcd1 	bl	80022e8 <HAL_RCC_ClockConfig>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800094c:	f000 f90a 	bl	8000b64 <Error_Handler>
  }
}
 8000950:	bf00      	nop
 8000952:	3768      	adds	r7, #104	@ 0x68
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	58000400 	.word	0x58000400

0800095c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000960:	4b22      	ldr	r3, [pc, #136]	@ (80009ec <MX_USART2_UART_Init+0x90>)
 8000962:	4a23      	ldr	r2, [pc, #140]	@ (80009f0 <MX_USART2_UART_Init+0x94>)
 8000964:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000966:	4b21      	ldr	r3, [pc, #132]	@ (80009ec <MX_USART2_UART_Init+0x90>)
 8000968:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800096c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800096e:	4b1f      	ldr	r3, [pc, #124]	@ (80009ec <MX_USART2_UART_Init+0x90>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000974:	4b1d      	ldr	r3, [pc, #116]	@ (80009ec <MX_USART2_UART_Init+0x90>)
 8000976:	2200      	movs	r2, #0
 8000978:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800097a:	4b1c      	ldr	r3, [pc, #112]	@ (80009ec <MX_USART2_UART_Init+0x90>)
 800097c:	2200      	movs	r2, #0
 800097e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000980:	4b1a      	ldr	r3, [pc, #104]	@ (80009ec <MX_USART2_UART_Init+0x90>)
 8000982:	220c      	movs	r2, #12
 8000984:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000986:	4b19      	ldr	r3, [pc, #100]	@ (80009ec <MX_USART2_UART_Init+0x90>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800098c:	4b17      	ldr	r3, [pc, #92]	@ (80009ec <MX_USART2_UART_Init+0x90>)
 800098e:	2200      	movs	r2, #0
 8000990:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000992:	4b16      	ldr	r3, [pc, #88]	@ (80009ec <MX_USART2_UART_Init+0x90>)
 8000994:	2200      	movs	r2, #0
 8000996:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000998:	4b14      	ldr	r3, [pc, #80]	@ (80009ec <MX_USART2_UART_Init+0x90>)
 800099a:	2200      	movs	r2, #0
 800099c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800099e:	4b13      	ldr	r3, [pc, #76]	@ (80009ec <MX_USART2_UART_Init+0x90>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009a4:	4811      	ldr	r0, [pc, #68]	@ (80009ec <MX_USART2_UART_Init+0x90>)
 80009a6:	f002 f99a 	bl	8002cde <HAL_UART_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80009b0:	f000 f8d8 	bl	8000b64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009b4:	2100      	movs	r1, #0
 80009b6:	480d      	ldr	r0, [pc, #52]	@ (80009ec <MX_USART2_UART_Init+0x90>)
 80009b8:	f002 fed1 	bl	800375e <HAL_UARTEx_SetTxFifoThreshold>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80009c2:	f000 f8cf 	bl	8000b64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009c6:	2100      	movs	r1, #0
 80009c8:	4808      	ldr	r0, [pc, #32]	@ (80009ec <MX_USART2_UART_Init+0x90>)
 80009ca:	f002 ff06 	bl	80037da <HAL_UARTEx_SetRxFifoThreshold>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80009d4:	f000 f8c6 	bl	8000b64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80009d8:	4804      	ldr	r0, [pc, #16]	@ (80009ec <MX_USART2_UART_Init+0x90>)
 80009da:	f002 fe88 	bl	80036ee <HAL_UARTEx_DisableFifoMode>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80009e4:	f000 f8be 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009e8:	bf00      	nop
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	20000084 	.word	0x20000084
 80009f0:	40004400 	.word	0x40004400

080009f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b086      	sub	sp, #24
 80009f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fa:	1d3b      	adds	r3, r7, #4
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
 8000a06:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a08:	2002      	movs	r0, #2
 8000a0a:	f7ff fdb0 	bl	800056e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a0e:	2004      	movs	r0, #4
 8000a10:	f7ff fdad 	bl	800056e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a14:	2001      	movs	r0, #1
 8000a16:	f7ff fdaa 	bl	800056e <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, blue_LED_Pin|green_LED_Pin, GPIO_PIN_RESET);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	f44f 4102 	mov.w	r1, #33280	@ 0x8200
 8000a20:	4821      	ldr	r0, [pc, #132]	@ (8000aa8 <MX_GPIO_Init+0xb4>)
 8000a22:	f000 fd4d 	bl	80014c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 8000a26:	2200      	movs	r2, #0
 8000a28:	2138      	movs	r1, #56	@ 0x38
 8000a2a:	4820      	ldr	r0, [pc, #128]	@ (8000aac <MX_GPIO_Init+0xb8>)
 8000a2c:	f000 fd48 	bl	80014c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : blue_LED_Pin green_LED_Pin */
  GPIO_InitStruct.Pin = blue_LED_Pin|green_LED_Pin;
 8000a30:	f44f 4302 	mov.w	r3, #33280	@ 0x8200
 8000a34:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a36:	2301      	movs	r3, #1
 8000a38:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a42:	1d3b      	adds	r3, r7, #4
 8000a44:	4619      	mov	r1, r3
 8000a46:	4818      	ldr	r0, [pc, #96]	@ (8000aa8 <MX_GPIO_Init+0xb4>)
 8000a48:	f000 fbda 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pins : FE_CTRL3_Pin FE_CTRL2_Pin FE_CTRL1_Pin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 8000a4c:	2338      	movs	r3, #56	@ 0x38
 8000a4e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a50:	2301      	movs	r3, #1
 8000a52:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a58:	2303      	movs	r3, #3
 8000a5a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a5c:	1d3b      	adds	r3, r7, #4
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4812      	ldr	r0, [pc, #72]	@ (8000aac <MX_GPIO_Init+0xb8>)
 8000a62:	f000 fbcd 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pins : UB1_Pin UB2_Pin */
  GPIO_InitStruct.Pin = UB1_Pin|UB2_Pin;
 8000a66:	2303      	movs	r3, #3
 8000a68:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a6a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a6e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a70:	2301      	movs	r3, #1
 8000a72:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a74:	1d3b      	adds	r3, r7, #4
 8000a76:	4619      	mov	r1, r3
 8000a78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a7c:	f000 fbc0 	bl	8001200 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000a80:	2200      	movs	r2, #0
 8000a82:	2100      	movs	r1, #0
 8000a84:	2006      	movs	r0, #6
 8000a86:	f000 fb86 	bl	8001196 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a8a:	2006      	movs	r0, #6
 8000a8c:	f000 fb9d 	bl	80011ca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000a90:	2200      	movs	r2, #0
 8000a92:	2100      	movs	r1, #0
 8000a94:	2007      	movs	r0, #7
 8000a96:	f000 fb7e 	bl	8001196 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000a9a:	2007      	movs	r0, #7
 8000a9c:	f000 fb95 	bl	80011ca <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000aa0:	bf00      	nop
 8000aa2:	3718      	adds	r7, #24
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	48000400 	.word	0x48000400
 8000aac:	48000800 	.word	0x48000800

08000ab0 <HAL_GPIO_EXTI_Callback>:

/** @brief User-defined ISR when pressing user button 1 or 2,
  * text is displayed and LEDs are blinking
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	80fb      	strh	r3, [r7, #6]
	 * MCU just woke up from an IT
	 * and is now running in LPR
	 * ####----####----####----####
	 */
	// Resume the tick after stopping it in the while loop
	HAL_ResumeTick();
 8000aba:	f000 fa87 	bl	8000fcc <HAL_ResumeTick>

	// If user button 1 (UB1, on PA0) is pressed, wake up from LPS.
	// Text is displayed, blue LED blinks twice.
	if (GPIO_Pin == UB1_Pin){
 8000abe:	88fb      	ldrh	r3, [r7, #6]
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d11b      	bne.n	8000afc <HAL_GPIO_EXTI_Callback+0x4c>
		/* ####----####----####
		 * MCU still in LPR
		 * ####----####----####
		 */
		MX_USART2_UART_Init();
 8000ac4:	f7ff ff4a 	bl	800095c <MX_USART2_UART_Init>
		printf("Réveil de LPS par pression du Bouton 1\r\n");
 8000ac8:	481f      	ldr	r0, [pc, #124]	@ (8000b48 <HAL_GPIO_EXTI_Callback+0x98>)
 8000aca:	f003 f83b 	bl	8003b44 <puts>
		printf("Actuellement en mode LPR.\r\n");
 8000ace:	481f      	ldr	r0, [pc, #124]	@ (8000b4c <HAL_GPIO_EXTI_Callback+0x9c>)
 8000ad0:	f003 f838 	bl	8003b44 <puts>
		printf("Retour en LPS après clignotement de la LED bleue.\r\n\r\n");
 8000ad4:	481e      	ldr	r0, [pc, #120]	@ (8000b50 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000ad6:	f003 f835 	bl	8003b44 <puts>
		for (int i = 0; i < 4; i++){
 8000ada:	2300      	movs	r3, #0
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	e00a      	b.n	8000af6 <HAL_GPIO_EXTI_Callback+0x46>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15); delay(200);
 8000ae0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ae4:	481b      	ldr	r0, [pc, #108]	@ (8000b54 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000ae6:	f000 fd02 	bl	80014ee <HAL_GPIO_TogglePin>
 8000aea:	20c8      	movs	r0, #200	@ 0xc8
 8000aec:	f7ff fe92 	bl	8000814 <delay>
		for (int i = 0; i < 4; i++){
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	3301      	adds	r3, #1
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	2b03      	cmp	r3, #3
 8000afa:	ddf1      	ble.n	8000ae0 <HAL_GPIO_EXTI_Callback+0x30>
		}
	}

	// If user button 2 (UB2, on PA1) is pressed, wake up from LPS & LPR.
	// Text is displayed, green LED blinks twice.
	if (GPIO_Pin == UB2_Pin){
 8000afc:	88fb      	ldrh	r3, [r7, #6]
 8000afe:	2b02      	cmp	r3, #2
 8000b00:	d11e      	bne.n	8000b40 <HAL_GPIO_EXTI_Callback+0x90>
		Exit_LowPowerRunMode(1); // Exit LPR mode before doing anything else; going back to 48 MHz.
 8000b02:	2001      	movs	r0, #1
 8000b04:	f7ff fe66 	bl	80007d4 <Exit_LowPowerRunMode>
		/* ####----####----####
		 * MCU is now in Run mode
		 * ####----####----####
		 */

		MX_USART2_UART_Init();
 8000b08:	f7ff ff28 	bl	800095c <MX_USART2_UART_Init>
		printf("Réveil de LPS par pression du Bouton 2\r\n");
 8000b0c:	4812      	ldr	r0, [pc, #72]	@ (8000b58 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000b0e:	f003 f819 	bl	8003b44 <puts>
		printf("Actuellement en mode Run.\r\n");
 8000b12:	4812      	ldr	r0, [pc, #72]	@ (8000b5c <HAL_GPIO_EXTI_Callback+0xac>)
 8000b14:	f003 f816 	bl	8003b44 <puts>
		printf("Retour en LPS après clignotement de la LED verte.\r\n\r\n");
 8000b18:	4811      	ldr	r0, [pc, #68]	@ (8000b60 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000b1a:	f003 f813 	bl	8003b44 <puts>
		for (int i = 0; i < 4; i++){
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60bb      	str	r3, [r7, #8]
 8000b22:	e00a      	b.n	8000b3a <HAL_GPIO_EXTI_Callback+0x8a>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9); delay(200);
 8000b24:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b28:	480a      	ldr	r0, [pc, #40]	@ (8000b54 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000b2a:	f000 fce0 	bl	80014ee <HAL_GPIO_TogglePin>
 8000b2e:	20c8      	movs	r0, #200	@ 0xc8
 8000b30:	f7ff fe70 	bl	8000814 <delay>
		for (int i = 0; i < 4; i++){
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	3301      	adds	r3, #1
 8000b38:	60bb      	str	r3, [r7, #8]
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	2b03      	cmp	r3, #3
 8000b3e:	ddf1      	ble.n	8000b24 <HAL_GPIO_EXTI_Callback+0x74>
		}
	}
}
 8000b40:	bf00      	nop
 8000b42:	3710      	adds	r7, #16
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	0800489c 	.word	0x0800489c
 8000b4c:	080048c8 	.word	0x080048c8
 8000b50:	080048e4 	.word	0x080048e4
 8000b54:	48000400 	.word	0x48000400
 8000b58:	0800491c 	.word	0x0800491c
 8000b5c:	08004948 	.word	0x08004948
 8000b60:	08004964 	.word	0x08004964

08000b64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b68:	b672      	cpsid	i
}
 8000b6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b6c:	bf00      	nop
 8000b6e:	e7fd      	b.n	8000b6c <Error_Handler+0x8>

08000b70 <LL_AHB2_GRP1_EnableClock>:
{
 8000b70:	b480      	push	{r7}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b7c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b7e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4313      	orrs	r3, r2
 8000b86:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b8c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4013      	ands	r3, r2
 8000b92:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b94:	68fb      	ldr	r3, [r7, #12]
}
 8000b96:	bf00      	nop
 8000b98:	3714      	adds	r7, #20
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bc80      	pop	{r7}
 8000b9e:	4770      	bx	lr

08000ba0 <LL_APB1_GRP1_EnableClock>:
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000ba8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000bac:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000bae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000bb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000bbc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bc4:	68fb      	ldr	r3, [r7, #12]
}
 8000bc6:	bf00      	nop
 8000bc8:	3714      	adds	r7, #20
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr

08000bd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bc80      	pop	{r7}
 8000bda:	4770      	bx	lr

08000bdc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b096      	sub	sp, #88	@ 0x58
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
 8000bf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bf4:	f107 030c 	add.w	r3, r7, #12
 8000bf8:	2238      	movs	r2, #56	@ 0x38
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f003 f881 	bl	8003d04 <memset>
  if(huart->Instance==USART2)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a17      	ldr	r2, [pc, #92]	@ (8000c64 <HAL_UART_MspInit+0x88>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d126      	bne.n	8000c5a <HAL_UART_MspInit+0x7e>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c10:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 8000c14:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c16:	f107 030c 	add.w	r3, r7, #12
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f001 ff24 	bl	8002a68 <HAL_RCCEx_PeriphCLKConfig>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c26:	f7ff ff9d 	bl	8000b64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c2a:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000c2e:	f7ff ffb7 	bl	8000ba0 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c32:	2001      	movs	r0, #1
 8000c34:	f7ff ff9c 	bl	8000b70 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8000c38:	230c      	movs	r3, #12
 8000c3a:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c44:	2300      	movs	r3, #0
 8000c46:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c48:	2307      	movs	r3, #7
 8000c4a:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000c50:	4619      	mov	r1, r3
 8000c52:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c56:	f000 fad3 	bl	8001200 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000c5a:	bf00      	nop
 8000c5c:	3758      	adds	r7, #88	@ 0x58
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40004400 	.word	0x40004400

08000c68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c6c:	bf00      	nop
 8000c6e:	e7fd      	b.n	8000c6c <NMI_Handler+0x4>

08000c70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c74:	bf00      	nop
 8000c76:	e7fd      	b.n	8000c74 <HardFault_Handler+0x4>

08000c78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c7c:	bf00      	nop
 8000c7e:	e7fd      	b.n	8000c7c <MemManage_Handler+0x4>

08000c80 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c84:	bf00      	nop
 8000c86:	e7fd      	b.n	8000c84 <BusFault_Handler+0x4>

08000c88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c8c:	bf00      	nop
 8000c8e:	e7fd      	b.n	8000c8c <UsageFault_Handler+0x4>

08000c90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bc80      	pop	{r7}
 8000c9a:	4770      	bx	lr

08000c9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bc80      	pop	{r7}
 8000ca6:	4770      	bx	lr

08000ca8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bc80      	pop	{r7}
 8000cb2:	4770      	bx	lr

08000cb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cb8:	f000 f93a 	bl	8000f30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line 0 Interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UB1_Pin);
 8000cc4:	2001      	movs	r0, #1
 8000cc6:	f000 fc2b 	bl	8001520 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UB2_Pin);
 8000cd2:	2002      	movs	r0, #2
 8000cd4:	f000 fc24 	bl	8001520 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000cd8:	bf00      	nop
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	60b9      	str	r1, [r7, #8]
 8000ce6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]
 8000cec:	e00a      	b.n	8000d04 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cee:	f3af 8000 	nop.w
 8000cf2:	4601      	mov	r1, r0
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	1c5a      	adds	r2, r3, #1
 8000cf8:	60ba      	str	r2, [r7, #8]
 8000cfa:	b2ca      	uxtb	r2, r1
 8000cfc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	3301      	adds	r3, #1
 8000d02:	617b      	str	r3, [r7, #20]
 8000d04:	697a      	ldr	r2, [r7, #20]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	dbf0      	blt.n	8000cee <_read+0x12>
  }

  return len;
 8000d0c:	687b      	ldr	r3, [r7, #4]
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3718      	adds	r7, #24
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b086      	sub	sp, #24
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	60f8      	str	r0, [r7, #12]
 8000d1e:	60b9      	str	r1, [r7, #8]
 8000d20:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d22:	2300      	movs	r3, #0
 8000d24:	617b      	str	r3, [r7, #20]
 8000d26:	e009      	b.n	8000d3c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	1c5a      	adds	r2, r3, #1
 8000d2c:	60ba      	str	r2, [r7, #8]
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff fc47 	bl	80005c4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	617b      	str	r3, [r7, #20]
 8000d3c:	697a      	ldr	r2, [r7, #20]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	dbf1      	blt.n	8000d28 <_write+0x12>
  }
  return len;
 8000d44:	687b      	ldr	r3, [r7, #4]
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3718      	adds	r7, #24
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <_close>:

int _close(int file)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	b083      	sub	sp, #12
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	370c      	adds	r7, #12
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bc80      	pop	{r7}
 8000d62:	4770      	bx	lr

08000d64 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d74:	605a      	str	r2, [r3, #4]
  return 0;
 8000d76:	2300      	movs	r3, #0
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bc80      	pop	{r7}
 8000d80:	4770      	bx	lr

08000d82 <_isatty>:

int _isatty(int file)
{
 8000d82:	b480      	push	{r7}
 8000d84:	b083      	sub	sp, #12
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d8a:	2301      	movs	r3, #1
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bc80      	pop	{r7}
 8000d94:	4770      	bx	lr

08000d96 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d96:	b480      	push	{r7}
 8000d98:	b085      	sub	sp, #20
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	60f8      	str	r0, [r7, #12]
 8000d9e:	60b9      	str	r1, [r7, #8]
 8000da0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000da2:	2300      	movs	r3, #0
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3714      	adds	r7, #20
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bc80      	pop	{r7}
 8000dac:	4770      	bx	lr
	...

08000db0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000db8:	4a14      	ldr	r2, [pc, #80]	@ (8000e0c <_sbrk+0x5c>)
 8000dba:	4b15      	ldr	r3, [pc, #84]	@ (8000e10 <_sbrk+0x60>)
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dc4:	4b13      	ldr	r3, [pc, #76]	@ (8000e14 <_sbrk+0x64>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d102      	bne.n	8000dd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dcc:	4b11      	ldr	r3, [pc, #68]	@ (8000e14 <_sbrk+0x64>)
 8000dce:	4a12      	ldr	r2, [pc, #72]	@ (8000e18 <_sbrk+0x68>)
 8000dd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dd2:	4b10      	ldr	r3, [pc, #64]	@ (8000e14 <_sbrk+0x64>)
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4413      	add	r3, r2
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d207      	bcs.n	8000df0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000de0:	f002 ffde 	bl	8003da0 <__errno>
 8000de4:	4603      	mov	r3, r0
 8000de6:	220c      	movs	r2, #12
 8000de8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dea:	f04f 33ff 	mov.w	r3, #4294967295
 8000dee:	e009      	b.n	8000e04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000df0:	4b08      	ldr	r3, [pc, #32]	@ (8000e14 <_sbrk+0x64>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000df6:	4b07      	ldr	r3, [pc, #28]	@ (8000e14 <_sbrk+0x64>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	4a05      	ldr	r2, [pc, #20]	@ (8000e14 <_sbrk+0x64>)
 8000e00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e02:	68fb      	ldr	r3, [r7, #12]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3718      	adds	r7, #24
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20010000 	.word	0x20010000
 8000e10:	00000400 	.word	0x00000400
 8000e14:	20000118 	.word	0x20000118
 8000e18:	20000270 	.word	0x20000270

08000e1c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc80      	pop	{r7}
 8000e26:	4770      	bx	lr

08000e28 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e28:	480d      	ldr	r0, [pc, #52]	@ (8000e60 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e2a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e2c:	f7ff fff6 	bl	8000e1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e30:	480c      	ldr	r0, [pc, #48]	@ (8000e64 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e32:	490d      	ldr	r1, [pc, #52]	@ (8000e68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e34:	4a0d      	ldr	r2, [pc, #52]	@ (8000e6c <LoopForever+0xe>)
  movs r3, #0
 8000e36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e38:	e002      	b.n	8000e40 <LoopCopyDataInit>

08000e3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e3e:	3304      	adds	r3, #4

08000e40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e44:	d3f9      	bcc.n	8000e3a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e46:	4a0a      	ldr	r2, [pc, #40]	@ (8000e70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e48:	4c0a      	ldr	r4, [pc, #40]	@ (8000e74 <LoopForever+0x16>)
  movs r3, #0
 8000e4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e4c:	e001      	b.n	8000e52 <LoopFillZerobss>

08000e4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e50:	3204      	adds	r2, #4

08000e52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e54:	d3fb      	bcc.n	8000e4e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e56:	f002 ffa9 	bl	8003dac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e5a:	f7ff fcf9 	bl	8000850 <main>

08000e5e <LoopForever>:

LoopForever:
    b LoopForever
 8000e5e:	e7fe      	b.n	8000e5e <LoopForever>
  ldr   r0, =_estack
 8000e60:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000e64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e68:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e6c:	08004ac4 	.word	0x08004ac4
  ldr r2, =_sbss
 8000e70:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e74:	2000026c 	.word	0x2000026c

08000e78 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e78:	e7fe      	b.n	8000e78 <ADC_IRQHandler>
	...

08000e7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e82:	2300      	movs	r3, #0
 8000e84:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e86:	2003      	movs	r0, #3
 8000e88:	f000 f97a 	bl	8001180 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000e8c:	f001 fc0e 	bl	80026ac <HAL_RCC_GetHCLKFreq>
 8000e90:	4603      	mov	r3, r0
 8000e92:	4a09      	ldr	r2, [pc, #36]	@ (8000eb8 <HAL_Init+0x3c>)
 8000e94:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e96:	2000      	movs	r0, #0
 8000e98:	f000 f810 	bl	8000ebc <HAL_InitTick>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d002      	beq.n	8000ea8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	71fb      	strb	r3, [r7, #7]
 8000ea6:	e001      	b.n	8000eac <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ea8:	f7ff fe92 	bl	8000bd0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000eac:	79fb      	ldrb	r3, [r7, #7]
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20000000 	.word	0x20000000

08000ebc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ec8:	4b17      	ldr	r3, [pc, #92]	@ (8000f28 <HAL_InitTick+0x6c>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d024      	beq.n	8000f1a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ed0:	f001 fbec 	bl	80026ac <HAL_RCC_GetHCLKFreq>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	4b14      	ldr	r3, [pc, #80]	@ (8000f28 <HAL_InitTick+0x6c>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	4619      	mov	r1, r3
 8000edc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ee0:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f000 f97c 	bl	80011e6 <HAL_SYSTICK_Config>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d10f      	bne.n	8000f14 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2b0f      	cmp	r3, #15
 8000ef8:	d809      	bhi.n	8000f0e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000efa:	2200      	movs	r2, #0
 8000efc:	6879      	ldr	r1, [r7, #4]
 8000efe:	f04f 30ff 	mov.w	r0, #4294967295
 8000f02:	f000 f948 	bl	8001196 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f06:	4a09      	ldr	r2, [pc, #36]	@ (8000f2c <HAL_InitTick+0x70>)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6013      	str	r3, [r2, #0]
 8000f0c:	e007      	b.n	8000f1e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	73fb      	strb	r3, [r7, #15]
 8000f12:	e004      	b.n	8000f1e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f14:	2301      	movs	r3, #1
 8000f16:	73fb      	strb	r3, [r7, #15]
 8000f18:	e001      	b.n	8000f1e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3710      	adds	r7, #16
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20000008 	.word	0x20000008
 8000f2c:	20000004 	.word	0x20000004

08000f30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f34:	4b05      	ldr	r3, [pc, #20]	@ (8000f4c <HAL_IncTick+0x1c>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	461a      	mov	r2, r3
 8000f3a:	4b05      	ldr	r3, [pc, #20]	@ (8000f50 <HAL_IncTick+0x20>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4413      	add	r3, r2
 8000f40:	4a03      	ldr	r2, [pc, #12]	@ (8000f50 <HAL_IncTick+0x20>)
 8000f42:	6013      	str	r3, [r2, #0]
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bc80      	pop	{r7}
 8000f4a:	4770      	bx	lr
 8000f4c:	20000008 	.word	0x20000008
 8000f50:	2000011c 	.word	0x2000011c

08000f54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  return uwTick;
 8000f58:	4b02      	ldr	r3, [pc, #8]	@ (8000f64 <HAL_GetTick+0x10>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bc80      	pop	{r7}
 8000f62:	4770      	bx	lr
 8000f64:	2000011c 	.word	0x2000011c

08000f68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f70:	f7ff fff0 	bl	8000f54 <HAL_GetTick>
 8000f74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f80:	d005      	beq.n	8000f8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f82:	4b0a      	ldr	r3, [pc, #40]	@ (8000fac <HAL_Delay+0x44>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	461a      	mov	r2, r3
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f8e:	bf00      	nop
 8000f90:	f7ff ffe0 	bl	8000f54 <HAL_GetTick>
 8000f94:	4602      	mov	r2, r0
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	68fa      	ldr	r2, [r7, #12]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d8f7      	bhi.n	8000f90 <HAL_Delay+0x28>
  {
  }
}
 8000fa0:	bf00      	nop
 8000fa2:	bf00      	nop
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000008 	.word	0x20000008

08000fb0 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000fb4:	4b04      	ldr	r3, [pc, #16]	@ (8000fc8 <HAL_SuspendTick+0x18>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a03      	ldr	r2, [pc, #12]	@ (8000fc8 <HAL_SuspendTick+0x18>)
 8000fba:	f023 0302 	bic.w	r3, r3, #2
 8000fbe:	6013      	str	r3, [r2, #0]
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bc80      	pop	{r7}
 8000fc6:	4770      	bx	lr
 8000fc8:	e000e010 	.word	0xe000e010

08000fcc <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000fd0:	4b04      	ldr	r3, [pc, #16]	@ (8000fe4 <HAL_ResumeTick+0x18>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a03      	ldr	r2, [pc, #12]	@ (8000fe4 <HAL_ResumeTick+0x18>)
 8000fd6:	f043 0302 	orr.w	r3, r3, #2
 8000fda:	6013      	str	r3, [r2, #0]
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bc80      	pop	{r7}
 8000fe2:	4770      	bx	lr
 8000fe4:	e000e010 	.word	0xe000e010

08000fe8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	@ (800102c <__NVIC_SetPriorityGrouping+0x44>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ffe:	68ba      	ldr	r2, [r7, #8]
 8001000:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001004:	4013      	ands	r3, r2
 8001006:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001010:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001014:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800101a:	4a04      	ldr	r2, [pc, #16]	@ (800102c <__NVIC_SetPriorityGrouping+0x44>)
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	60d3      	str	r3, [r2, #12]
}
 8001020:	bf00      	nop
 8001022:	3714      	adds	r7, #20
 8001024:	46bd      	mov	sp, r7
 8001026:	bc80      	pop	{r7}
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001034:	4b04      	ldr	r3, [pc, #16]	@ (8001048 <__NVIC_GetPriorityGrouping+0x18>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	0a1b      	lsrs	r3, r3, #8
 800103a:	f003 0307 	and.w	r3, r3, #7
}
 800103e:	4618      	mov	r0, r3
 8001040:	46bd      	mov	sp, r7
 8001042:	bc80      	pop	{r7}
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105a:	2b00      	cmp	r3, #0
 800105c:	db0b      	blt.n	8001076 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	f003 021f 	and.w	r2, r3, #31
 8001064:	4906      	ldr	r1, [pc, #24]	@ (8001080 <__NVIC_EnableIRQ+0x34>)
 8001066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106a:	095b      	lsrs	r3, r3, #5
 800106c:	2001      	movs	r0, #1
 800106e:	fa00 f202 	lsl.w	r2, r0, r2
 8001072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001076:	bf00      	nop
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr
 8001080:	e000e100 	.word	0xe000e100

08001084 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	6039      	str	r1, [r7, #0]
 800108e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001094:	2b00      	cmp	r3, #0
 8001096:	db0a      	blt.n	80010ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	b2da      	uxtb	r2, r3
 800109c:	490c      	ldr	r1, [pc, #48]	@ (80010d0 <__NVIC_SetPriority+0x4c>)
 800109e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a2:	0112      	lsls	r2, r2, #4
 80010a4:	b2d2      	uxtb	r2, r2
 80010a6:	440b      	add	r3, r1
 80010a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010ac:	e00a      	b.n	80010c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	4908      	ldr	r1, [pc, #32]	@ (80010d4 <__NVIC_SetPriority+0x50>)
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	f003 030f 	and.w	r3, r3, #15
 80010ba:	3b04      	subs	r3, #4
 80010bc:	0112      	lsls	r2, r2, #4
 80010be:	b2d2      	uxtb	r2, r2
 80010c0:	440b      	add	r3, r1
 80010c2:	761a      	strb	r2, [r3, #24]
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bc80      	pop	{r7}
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	e000e100 	.word	0xe000e100
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d8:	b480      	push	{r7}
 80010da:	b089      	sub	sp, #36	@ 0x24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	f003 0307 	and.w	r3, r3, #7
 80010ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	f1c3 0307 	rsb	r3, r3, #7
 80010f2:	2b04      	cmp	r3, #4
 80010f4:	bf28      	it	cs
 80010f6:	2304      	movcs	r3, #4
 80010f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	3304      	adds	r3, #4
 80010fe:	2b06      	cmp	r3, #6
 8001100:	d902      	bls.n	8001108 <NVIC_EncodePriority+0x30>
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	3b03      	subs	r3, #3
 8001106:	e000      	b.n	800110a <NVIC_EncodePriority+0x32>
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800110c:	f04f 32ff 	mov.w	r2, #4294967295
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43da      	mvns	r2, r3
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	401a      	ands	r2, r3
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001120:	f04f 31ff 	mov.w	r1, #4294967295
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	fa01 f303 	lsl.w	r3, r1, r3
 800112a:	43d9      	mvns	r1, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001130:	4313      	orrs	r3, r2
         );
}
 8001132:	4618      	mov	r0, r3
 8001134:	3724      	adds	r7, #36	@ 0x24
 8001136:	46bd      	mov	sp, r7
 8001138:	bc80      	pop	{r7}
 800113a:	4770      	bx	lr

0800113c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3b01      	subs	r3, #1
 8001148:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800114c:	d301      	bcc.n	8001152 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800114e:	2301      	movs	r3, #1
 8001150:	e00f      	b.n	8001172 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001152:	4a0a      	ldr	r2, [pc, #40]	@ (800117c <SysTick_Config+0x40>)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3b01      	subs	r3, #1
 8001158:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800115a:	210f      	movs	r1, #15
 800115c:	f04f 30ff 	mov.w	r0, #4294967295
 8001160:	f7ff ff90 	bl	8001084 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001164:	4b05      	ldr	r3, [pc, #20]	@ (800117c <SysTick_Config+0x40>)
 8001166:	2200      	movs	r2, #0
 8001168:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800116a:	4b04      	ldr	r3, [pc, #16]	@ (800117c <SysTick_Config+0x40>)
 800116c:	2207      	movs	r2, #7
 800116e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	e000e010 	.word	0xe000e010

08001180 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f7ff ff2d 	bl	8000fe8 <__NVIC_SetPriorityGrouping>
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b086      	sub	sp, #24
 800119a:	af00      	add	r7, sp, #0
 800119c:	4603      	mov	r3, r0
 800119e:	60b9      	str	r1, [r7, #8]
 80011a0:	607a      	str	r2, [r7, #4]
 80011a2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011a4:	f7ff ff44 	bl	8001030 <__NVIC_GetPriorityGrouping>
 80011a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	68b9      	ldr	r1, [r7, #8]
 80011ae:	6978      	ldr	r0, [r7, #20]
 80011b0:	f7ff ff92 	bl	80010d8 <NVIC_EncodePriority>
 80011b4:	4602      	mov	r2, r0
 80011b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ba:	4611      	mov	r1, r2
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff ff61 	bl	8001084 <__NVIC_SetPriority>
}
 80011c2:	bf00      	nop
 80011c4:	3718      	adds	r7, #24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b082      	sub	sp, #8
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	4603      	mov	r3, r0
 80011d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff ff37 	bl	800104c <__NVIC_EnableIRQ>
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b082      	sub	sp, #8
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff ffa4 	bl	800113c <SysTick_Config>
 80011f4:	4603      	mov	r3, r0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
	...

08001200 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001200:	b480      	push	{r7}
 8001202:	b087      	sub	sp, #28
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800120a:	2300      	movs	r3, #0
 800120c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800120e:	e140      	b.n	8001492 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	2101      	movs	r1, #1
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	fa01 f303 	lsl.w	r3, r1, r3
 800121c:	4013      	ands	r3, r2
 800121e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	2b00      	cmp	r3, #0
 8001224:	f000 8132 	beq.w	800148c <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f003 0303 	and.w	r3, r3, #3
 8001230:	2b01      	cmp	r3, #1
 8001232:	d005      	beq.n	8001240 <HAL_GPIO_Init+0x40>
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f003 0303 	and.w	r3, r3, #3
 800123c:	2b02      	cmp	r3, #2
 800123e:	d130      	bne.n	80012a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	2203      	movs	r2, #3
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	4013      	ands	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	68da      	ldr	r2, [r3, #12]
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	4313      	orrs	r3, r2
 8001268:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001276:	2201      	movs	r2, #1
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	43db      	mvns	r3, r3
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	4013      	ands	r3, r2
 8001284:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	091b      	lsrs	r3, r3, #4
 800128c:	f003 0201 	and.w	r2, r3, #1
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	4313      	orrs	r3, r2
 800129a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f003 0303 	and.w	r3, r3, #3
 80012aa:	2b03      	cmp	r3, #3
 80012ac:	d017      	beq.n	80012de <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	68db      	ldr	r3, [r3, #12]
 80012b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	2203      	movs	r2, #3
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43db      	mvns	r3, r3
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	4013      	ands	r3, r2
 80012c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	689a      	ldr	r2, [r3, #8]
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f003 0303 	and.w	r3, r3, #3
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d123      	bne.n	8001332 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	08da      	lsrs	r2, r3, #3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	3208      	adds	r2, #8
 80012f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	f003 0307 	and.w	r3, r3, #7
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	220f      	movs	r2, #15
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	43db      	mvns	r3, r3
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	4013      	ands	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	691a      	ldr	r2, [r3, #16]
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	f003 0307 	and.w	r3, r3, #7
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	4313      	orrs	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	08da      	lsrs	r2, r3, #3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	3208      	adds	r2, #8
 800132c:	6939      	ldr	r1, [r7, #16]
 800132e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	2203      	movs	r2, #3
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	43db      	mvns	r3, r3
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	4013      	ands	r3, r2
 8001348:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f003 0203 	and.w	r2, r3, #3
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	4313      	orrs	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800136e:	2b00      	cmp	r3, #0
 8001370:	f000 808c 	beq.w	800148c <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001374:	4a4e      	ldr	r2, [pc, #312]	@ (80014b0 <HAL_GPIO_Init+0x2b0>)
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	089b      	lsrs	r3, r3, #2
 800137a:	3302      	adds	r3, #2
 800137c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001380:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	f003 0303 	and.w	r3, r3, #3
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	2207      	movs	r2, #7
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	43db      	mvns	r3, r3
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	4013      	ands	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800139e:	d00d      	beq.n	80013bc <HAL_GPIO_Init+0x1bc>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4a44      	ldr	r2, [pc, #272]	@ (80014b4 <HAL_GPIO_Init+0x2b4>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d007      	beq.n	80013b8 <HAL_GPIO_Init+0x1b8>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4a43      	ldr	r2, [pc, #268]	@ (80014b8 <HAL_GPIO_Init+0x2b8>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d101      	bne.n	80013b4 <HAL_GPIO_Init+0x1b4>
 80013b0:	2302      	movs	r3, #2
 80013b2:	e004      	b.n	80013be <HAL_GPIO_Init+0x1be>
 80013b4:	2307      	movs	r3, #7
 80013b6:	e002      	b.n	80013be <HAL_GPIO_Init+0x1be>
 80013b8:	2301      	movs	r3, #1
 80013ba:	e000      	b.n	80013be <HAL_GPIO_Init+0x1be>
 80013bc:	2300      	movs	r3, #0
 80013be:	697a      	ldr	r2, [r7, #20]
 80013c0:	f002 0203 	and.w	r2, r2, #3
 80013c4:	0092      	lsls	r2, r2, #2
 80013c6:	4093      	lsls	r3, r2
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013ce:	4938      	ldr	r1, [pc, #224]	@ (80014b0 <HAL_GPIO_Init+0x2b0>)
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	089b      	lsrs	r3, r3, #2
 80013d4:	3302      	adds	r3, #2
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013dc:	4b37      	ldr	r3, [pc, #220]	@ (80014bc <HAL_GPIO_Init+0x2bc>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	43db      	mvns	r3, r3
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	4013      	ands	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d003      	beq.n	8001400 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001400:	4a2e      	ldr	r2, [pc, #184]	@ (80014bc <HAL_GPIO_Init+0x2bc>)
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001406:	4b2d      	ldr	r3, [pc, #180]	@ (80014bc <HAL_GPIO_Init+0x2bc>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	43db      	mvns	r3, r3
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	4013      	ands	r3, r2
 8001414:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d003      	beq.n	800142a <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	4313      	orrs	r3, r2
 8001428:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800142a:	4a24      	ldr	r2, [pc, #144]	@ (80014bc <HAL_GPIO_Init+0x2bc>)
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001430:	4b22      	ldr	r3, [pc, #136]	@ (80014bc <HAL_GPIO_Init+0x2bc>)
 8001432:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001436:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	43db      	mvns	r3, r3
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	4013      	ands	r3, r2
 8001440:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d003      	beq.n	8001456 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	4313      	orrs	r3, r2
 8001454:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8001456:	4a19      	ldr	r2, [pc, #100]	@ (80014bc <HAL_GPIO_Init+0x2bc>)
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800145e:	4b17      	ldr	r3, [pc, #92]	@ (80014bc <HAL_GPIO_Init+0x2bc>)
 8001460:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001464:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	43db      	mvns	r3, r3
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	4013      	ands	r3, r2
 800146e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d003      	beq.n	8001484 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	4313      	orrs	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001484:	4a0d      	ldr	r2, [pc, #52]	@ (80014bc <HAL_GPIO_Init+0x2bc>)
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	3301      	adds	r3, #1
 8001490:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	fa22 f303 	lsr.w	r3, r2, r3
 800149c:	2b00      	cmp	r3, #0
 800149e:	f47f aeb7 	bne.w	8001210 <HAL_GPIO_Init+0x10>
  }
}
 80014a2:	bf00      	nop
 80014a4:	bf00      	nop
 80014a6:	371c      	adds	r7, #28
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc80      	pop	{r7}
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	40010000 	.word	0x40010000
 80014b4:	48000400 	.word	0x48000400
 80014b8:	48000800 	.word	0x48000800
 80014bc:	58000800 	.word	0x58000800

080014c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	460b      	mov	r3, r1
 80014ca:	807b      	strh	r3, [r7, #2]
 80014cc:	4613      	mov	r3, r2
 80014ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014d0:	787b      	ldrb	r3, [r7, #1]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d003      	beq.n	80014de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014d6:	887a      	ldrh	r2, [r7, #2]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014dc:	e002      	b.n	80014e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014de:	887a      	ldrh	r2, [r7, #2]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bc80      	pop	{r7}
 80014ec:	4770      	bx	lr

080014ee <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014ee:	b480      	push	{r7}
 80014f0:	b085      	sub	sp, #20
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
 80014f6:	460b      	mov	r3, r1
 80014f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	695b      	ldr	r3, [r3, #20]
 80014fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001500:	887a      	ldrh	r2, [r7, #2]
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	4013      	ands	r3, r2
 8001506:	041a      	lsls	r2, r3, #16
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	43d9      	mvns	r1, r3
 800150c:	887b      	ldrh	r3, [r7, #2]
 800150e:	400b      	ands	r3, r1
 8001510:	431a      	orrs	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	619a      	str	r2, [r3, #24]
}
 8001516:	bf00      	nop
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr

08001520 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800152a:	4b08      	ldr	r3, [pc, #32]	@ (800154c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800152c:	68da      	ldr	r2, [r3, #12]
 800152e:	88fb      	ldrh	r3, [r7, #6]
 8001530:	4013      	ands	r3, r2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d006      	beq.n	8001544 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001536:	4a05      	ldr	r2, [pc, #20]	@ (800154c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001538:	88fb      	ldrh	r3, [r7, #6]
 800153a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800153c:	88fb      	ldrh	r3, [r7, #6]
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff fab6 	bl	8000ab0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001544:	bf00      	nop
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	58000800 	.word	0x58000800

08001550 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001554:	4b04      	ldr	r3, [pc, #16]	@ (8001568 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a03      	ldr	r2, [pc, #12]	@ (8001568 <HAL_PWR_EnableBkUpAccess+0x18>)
 800155a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800155e:	6013      	str	r3, [r2, #0]
}
 8001560:	bf00      	nop
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr
 8001568:	58000400 	.word	0x58000400

0800156c <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	460b      	mov	r3, r1
 8001576:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d10c      	bne.n	8001598 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800157e:	4b13      	ldr	r3, [pc, #76]	@ (80015cc <HAL_PWR_EnterSLEEPMode+0x60>)
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001586:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800158a:	d10d      	bne.n	80015a8 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 800158c:	f000 f83c 	bl	8001608 <HAL_PWREx_DisableLowPowerRunMode>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d008      	beq.n	80015a8 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 8001596:	e015      	b.n	80015c4 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8001598:	4b0c      	ldr	r3, [pc, #48]	@ (80015cc <HAL_PWR_EnterSLEEPMode+0x60>)
 800159a:	695b      	ldr	r3, [r3, #20]
 800159c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d101      	bne.n	80015a8 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 80015a4:	f000 f822 	bl	80015ec <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80015a8:	4b09      	ldr	r3, [pc, #36]	@ (80015d0 <HAL_PWR_EnterSLEEPMode+0x64>)
 80015aa:	691b      	ldr	r3, [r3, #16]
 80015ac:	4a08      	ldr	r2, [pc, #32]	@ (80015d0 <HAL_PWR_EnterSLEEPMode+0x64>)
 80015ae:	f023 0304 	bic.w	r3, r3, #4
 80015b2:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80015b4:	78fb      	ldrb	r3, [r7, #3]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d101      	bne.n	80015be <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80015ba:	bf30      	wfi
 80015bc:	e002      	b.n	80015c4 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80015be:	bf40      	sev
    __WFE();
 80015c0:	bf20      	wfe
    __WFE();
 80015c2:	bf20      	wfe
  }
}
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	58000400 	.word	0x58000400
 80015d0:	e000ed00 	.word	0xe000ed00

080015d4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80015d8:	4b03      	ldr	r3, [pc, #12]	@ (80015e8 <HAL_PWREx_GetVoltageRange+0x14>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr
 80015e8:	58000400 	.word	0x58000400

080015ec <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 80015f0:	4b04      	ldr	r3, [pc, #16]	@ (8001604 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a03      	ldr	r2, [pc, #12]	@ (8001604 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80015f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015fa:	6013      	str	r3, [r2, #0]
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	bc80      	pop	{r7}
 8001602:	4770      	bx	lr
 8001604:	58000400 	.word	0x58000400

08001608 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800160e:	4b16      	ldr	r3, [pc, #88]	@ (8001668 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a15      	ldr	r2, [pc, #84]	@ (8001668 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8001614:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001618:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 800161a:	4b14      	ldr	r3, [pc, #80]	@ (800166c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2232      	movs	r2, #50	@ 0x32
 8001620:	fb02 f303 	mul.w	r3, r2, r3
 8001624:	4a12      	ldr	r2, [pc, #72]	@ (8001670 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8001626:	fba2 2303 	umull	r2, r3, r2, r3
 800162a:	0c9b      	lsrs	r3, r3, #18
 800162c:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800162e:	e002      	b.n	8001636 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	3b01      	subs	r3, #1
 8001634:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8001636:	4b0c      	ldr	r3, [pc, #48]	@ (8001668 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8001638:	695b      	ldr	r3, [r3, #20]
 800163a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800163e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001642:	d102      	bne.n	800164a <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d1f2      	bne.n	8001630 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800164a:	4b07      	ldr	r3, [pc, #28]	@ (8001668 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 800164c:	695b      	ldr	r3, [r3, #20]
 800164e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001652:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001656:	d101      	bne.n	800165c <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e000      	b.n	800165e <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	bc80      	pop	{r7}
 8001666:	4770      	bx	lr
 8001668:	58000400 	.word	0x58000400
 800166c:	20000000 	.word	0x20000000
 8001670:	431bde83 	.word	0x431bde83

08001674 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8001678:	4b06      	ldr	r3, [pc, #24]	@ (8001694 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001680:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001684:	d101      	bne.n	800168a <LL_PWR_IsEnabledBkUpAccess+0x16>
 8001686:	2301      	movs	r3, #1
 8001688:	e000      	b.n	800168c <LL_PWR_IsEnabledBkUpAccess+0x18>
 800168a:	2300      	movs	r3, #0
}
 800168c:	4618      	mov	r0, r3
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr
 8001694:	58000400 	.word	0x58000400

08001698 <LL_RCC_HSE_EnableTcxo>:
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800169c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80016a6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016aa:	6013      	str	r3, [r2, #0]
}
 80016ac:	bf00      	nop
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bc80      	pop	{r7}
 80016b2:	4770      	bx	lr

080016b4 <LL_RCC_HSE_DisableTcxo>:
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80016b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80016c2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80016c6:	6013      	str	r3, [r2, #0]
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bc80      	pop	{r7}
 80016ce:	4770      	bx	lr

080016d0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80016d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80016e2:	d101      	bne.n	80016e8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80016e4:	2301      	movs	r3, #1
 80016e6:	e000      	b.n	80016ea <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bc80      	pop	{r7}
 80016f0:	4770      	bx	lr

080016f2 <LL_RCC_HSE_Enable>:
{
 80016f2:	b480      	push	{r7}
 80016f4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80016f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001700:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001704:	6013      	str	r3, [r2, #0]
}
 8001706:	bf00      	nop
 8001708:	46bd      	mov	sp, r7
 800170a:	bc80      	pop	{r7}
 800170c:	4770      	bx	lr

0800170e <LL_RCC_HSE_Disable>:
{
 800170e:	b480      	push	{r7}
 8001710:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001712:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800171c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001720:	6013      	str	r3, [r2, #0]
}
 8001722:	bf00      	nop
 8001724:	46bd      	mov	sp, r7
 8001726:	bc80      	pop	{r7}
 8001728:	4770      	bx	lr

0800172a <LL_RCC_HSE_IsReady>:
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800172e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001738:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800173c:	d101      	bne.n	8001742 <LL_RCC_HSE_IsReady+0x18>
 800173e:	2301      	movs	r3, #1
 8001740:	e000      	b.n	8001744 <LL_RCC_HSE_IsReady+0x1a>
 8001742:	2300      	movs	r3, #0
}
 8001744:	4618      	mov	r0, r3
 8001746:	46bd      	mov	sp, r7
 8001748:	bc80      	pop	{r7}
 800174a:	4770      	bx	lr

0800174c <LL_RCC_HSI_Enable>:
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001750:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800175a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800175e:	6013      	str	r3, [r2, #0]
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	bc80      	pop	{r7}
 8001766:	4770      	bx	lr

08001768 <LL_RCC_HSI_Disable>:
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800176c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001776:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800177a:	6013      	str	r3, [r2, #0]
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr

08001784 <LL_RCC_HSI_IsReady>:
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001788:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001792:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001796:	d101      	bne.n	800179c <LL_RCC_HSI_IsReady+0x18>
 8001798:	2301      	movs	r3, #1
 800179a:	e000      	b.n	800179e <LL_RCC_HSI_IsReady+0x1a>
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bc80      	pop	{r7}
 80017a4:	4770      	bx	lr

080017a6 <LL_RCC_HSI_SetCalibTrimming>:
{
 80017a6:	b480      	push	{r7}
 80017a8:	b083      	sub	sp, #12
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80017ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	061b      	lsls	r3, r3, #24
 80017bc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80017c0:	4313      	orrs	r3, r2
 80017c2:	604b      	str	r3, [r1, #4]
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bc80      	pop	{r7}
 80017cc:	4770      	bx	lr

080017ce <LL_RCC_LSE_IsReady>:
{
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80017d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d101      	bne.n	80017e6 <LL_RCC_LSE_IsReady+0x18>
 80017e2:	2301      	movs	r3, #1
 80017e4:	e000      	b.n	80017e8 <LL_RCC_LSE_IsReady+0x1a>
 80017e6:	2300      	movs	r3, #0
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bc80      	pop	{r7}
 80017ee:	4770      	bx	lr

080017f0 <LL_RCC_LSI_Enable>:
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80017f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	bc80      	pop	{r7}
 800180e:	4770      	bx	lr

08001810 <LL_RCC_LSI_Disable>:
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001814:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001818:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800181c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001820:	f023 0301 	bic.w	r3, r3, #1
 8001824:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	bc80      	pop	{r7}
 800182e:	4770      	bx	lr

08001830 <LL_RCC_LSI_IsReady>:
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8001834:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001838:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800183c:	f003 0302 	and.w	r3, r3, #2
 8001840:	2b02      	cmp	r3, #2
 8001842:	d101      	bne.n	8001848 <LL_RCC_LSI_IsReady+0x18>
 8001844:	2301      	movs	r3, #1
 8001846:	e000      	b.n	800184a <LL_RCC_LSI_IsReady+0x1a>
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	46bd      	mov	sp, r7
 800184e:	bc80      	pop	{r7}
 8001850:	4770      	bx	lr

08001852 <LL_RCC_MSI_Enable>:
{
 8001852:	b480      	push	{r7}
 8001854:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001856:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	6013      	str	r3, [r2, #0]
}
 8001866:	bf00      	nop
 8001868:	46bd      	mov	sp, r7
 800186a:	bc80      	pop	{r7}
 800186c:	4770      	bx	lr

0800186e <LL_RCC_MSI_Disable>:
{
 800186e:	b480      	push	{r7}
 8001870:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001872:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800187c:	f023 0301 	bic.w	r3, r3, #1
 8001880:	6013      	str	r3, [r2, #0]
}
 8001882:	bf00      	nop
 8001884:	46bd      	mov	sp, r7
 8001886:	bc80      	pop	{r7}
 8001888:	4770      	bx	lr

0800188a <LL_RCC_MSI_IsReady>:
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800188e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0302 	and.w	r3, r3, #2
 8001898:	2b02      	cmp	r3, #2
 800189a:	d101      	bne.n	80018a0 <LL_RCC_MSI_IsReady+0x16>
 800189c:	2301      	movs	r3, #1
 800189e:	e000      	b.n	80018a2 <LL_RCC_MSI_IsReady+0x18>
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bc80      	pop	{r7}
 80018a8:	4770      	bx	lr

080018aa <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80018ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0308 	and.w	r3, r3, #8
 80018b8:	2b08      	cmp	r3, #8
 80018ba:	d101      	bne.n	80018c0 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80018bc:	2301      	movs	r3, #1
 80018be:	e000      	b.n	80018c2 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bc80      	pop	{r7}
 80018c8:	4770      	bx	lr

080018ca <LL_RCC_MSI_GetRange>:
{
 80018ca:	b480      	push	{r7}
 80018cc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80018ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80018d8:	4618      	mov	r0, r3
 80018da:	46bd      	mov	sp, r7
 80018dc:	bc80      	pop	{r7}
 80018de:	4770      	bx	lr

080018e0 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80018e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018ec:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr

080018f8 <LL_RCC_MSI_SetCalibTrimming>:
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001900:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	021b      	lsls	r3, r3, #8
 800190e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001912:	4313      	orrs	r3, r2
 8001914:	604b      	str	r3, [r1, #4]
}
 8001916:	bf00      	nop
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	bc80      	pop	{r7}
 800191e:	4770      	bx	lr

08001920 <LL_RCC_SetSysClkSource>:
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001928:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	f023 0203 	bic.w	r2, r3, #3
 8001932:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4313      	orrs	r3, r2
 800193a:	608b      	str	r3, [r1, #8]
}
 800193c:	bf00      	nop
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	bc80      	pop	{r7}
 8001944:	4770      	bx	lr

08001946 <LL_RCC_GetSysClkSource>:
{
 8001946:	b480      	push	{r7}
 8001948:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800194a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f003 030c 	and.w	r3, r3, #12
}
 8001954:	4618      	mov	r0, r3
 8001956:	46bd      	mov	sp, r7
 8001958:	bc80      	pop	{r7}
 800195a:	4770      	bx	lr

0800195c <LL_RCC_SetAHBPrescaler>:
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001964:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800196e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4313      	orrs	r3, r2
 8001976:	608b      	str	r3, [r1, #8]
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	bc80      	pop	{r7}
 8001980:	4770      	bx	lr

08001982 <LL_C2_RCC_SetAHBPrescaler>:
{
 8001982:	b480      	push	{r7}
 8001984:	b083      	sub	sp, #12
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800198a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800198e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001992:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001996:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4313      	orrs	r3, r2
 800199e:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80019a2:	bf00      	nop
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr

080019ac <LL_RCC_SetAHB3Prescaler>:
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80019b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019b8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80019bc:	f023 020f 	bic.w	r2, r3, #15
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	091b      	lsrs	r3, r3, #4
 80019c4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80019c8:	4313      	orrs	r3, r2
 80019ca:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80019ce:	bf00      	nop
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr

080019d8 <LL_RCC_SetAPB1Prescaler>:
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80019e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80019ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	608b      	str	r3, [r1, #8]
}
 80019f4:	bf00      	nop
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bc80      	pop	{r7}
 80019fc:	4770      	bx	lr

080019fe <LL_RCC_SetAPB2Prescaler>:
{
 80019fe:	b480      	push	{r7}
 8001a00:	b083      	sub	sp, #12
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001a06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001a10:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	608b      	str	r3, [r1, #8]
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bc80      	pop	{r7}
 8001a22:	4770      	bx	lr

08001a24 <LL_RCC_GetAHBPrescaler>:
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001a28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bc80      	pop	{r7}
 8001a38:	4770      	bx	lr

08001a3a <LL_RCC_GetAHB3Prescaler>:
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001a3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a42:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001a46:	011b      	lsls	r3, r3, #4
 8001a48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bc80      	pop	{r7}
 8001a52:	4770      	bx	lr

08001a54 <LL_RCC_GetAPB1Prescaler>:
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001a58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bc80      	pop	{r7}
 8001a68:	4770      	bx	lr

08001a6a <LL_RCC_GetAPB2Prescaler>:
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001a6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc80      	pop	{r7}
 8001a7e:	4770      	bx	lr

08001a80 <LL_RCC_PLL_Enable>:
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001a84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a92:	6013      	str	r3, [r2, #0]
}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr

08001a9c <LL_RCC_PLL_Disable>:
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001aa0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001aaa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001aae:	6013      	str	r3, [r2, #0]
}
 8001ab0:	bf00      	nop
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bc80      	pop	{r7}
 8001ab6:	4770      	bx	lr

08001ab8 <LL_RCC_PLL_IsReady>:
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001abc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ac6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001aca:	d101      	bne.n	8001ad0 <LL_RCC_PLL_IsReady+0x18>
 8001acc:	2301      	movs	r3, #1
 8001ace:	e000      	b.n	8001ad2 <LL_RCC_PLL_IsReady+0x1a>
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bc80      	pop	{r7}
 8001ad8:	4770      	bx	lr

08001ada <LL_RCC_PLL_GetN>:
{
 8001ada:	b480      	push	{r7}
 8001adc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001ade:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	0a1b      	lsrs	r3, r3, #8
 8001ae6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bc80      	pop	{r7}
 8001af0:	4770      	bx	lr

08001af2 <LL_RCC_PLL_GetR>:
{
 8001af2:	b480      	push	{r7}
 8001af4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001af6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bc80      	pop	{r7}
 8001b06:	4770      	bx	lr

08001b08 <LL_RCC_PLL_GetDivider>:
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001b0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bc80      	pop	{r7}
 8001b1c:	4770      	bx	lr

08001b1e <LL_RCC_PLL_GetMainSource>:
{
 8001b1e:	b480      	push	{r7}
 8001b20:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001b22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	f003 0303 	and.w	r3, r3, #3
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bc80      	pop	{r7}
 8001b32:	4770      	bx	lr

08001b34 <LL_RCC_IsActiveFlag_HPRE>:
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001b38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b46:	d101      	bne.n	8001b4c <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e000      	b.n	8001b4e <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bc80      	pop	{r7}
 8001b54:	4770      	bx	lr

08001b56 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001b56:	b480      	push	{r7}
 8001b58:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001b5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b5e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001b62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b66:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001b6a:	d101      	bne.n	8001b70 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e000      	b.n	8001b72 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bc80      	pop	{r7}
 8001b78:	4770      	bx	lr

08001b7a <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001b7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b82:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001b86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b8e:	d101      	bne.n	8001b94 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001b90:	2301      	movs	r3, #1
 8001b92:	e000      	b.n	8001b96 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bc80      	pop	{r7}
 8001b9c:	4770      	bx	lr

08001b9e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001ba2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001bb0:	d101      	bne.n	8001bb6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e000      	b.n	8001bb8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001bb6:	2300      	movs	r3, #0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc80      	pop	{r7}
 8001bbe:	4770      	bx	lr

08001bc0 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001bc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001bce:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001bd2:	d101      	bne.n	8001bd8 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e000      	b.n	8001bda <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bc80      	pop	{r7}
 8001be0:	4770      	bx	lr
	...

08001be4 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b088      	sub	sp, #32
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d101      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e36f      	b.n	80022d6 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bf6:	f7ff fea6 	bl	8001946 <LL_RCC_GetSysClkSource>
 8001bfa:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bfc:	f7ff ff8f 	bl	8001b1e <LL_RCC_PLL_GetMainSource>
 8001c00:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0320 	and.w	r3, r3, #32
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	f000 80c4 	beq.w	8001d98 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d005      	beq.n	8001c22 <HAL_RCC_OscConfig+0x3e>
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	2b0c      	cmp	r3, #12
 8001c1a:	d176      	bne.n	8001d0a <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d173      	bne.n	8001d0a <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a1b      	ldr	r3, [r3, #32]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e353      	b.n	80022d6 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0308 	and.w	r3, r3, #8
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d005      	beq.n	8001c4c <HAL_RCC_OscConfig+0x68>
 8001c40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c4a:	e006      	b.n	8001c5a <HAL_RCC_OscConfig+0x76>
 8001c4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c54:	091b      	lsrs	r3, r3, #4
 8001c56:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d222      	bcs.n	8001ca4 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c62:	4618      	mov	r0, r3
 8001c64:	f000 fd5a 	bl	800271c <RCC_SetFlashLatencyFromMSIRange>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e331      	b.n	80022d6 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c7c:	f043 0308 	orr.w	r3, r3, #8
 8001c80:	6013      	str	r3, [r2, #0]
 8001c82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c90:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c94:	4313      	orrs	r3, r2
 8001c96:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff fe2b 	bl	80018f8 <LL_RCC_MSI_SetCalibTrimming>
 8001ca2:	e021      	b.n	8001ce8 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ca4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001cae:	f043 0308 	orr.w	r3, r3, #8
 8001cb2:	6013      	str	r3, [r2, #0]
 8001cb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cc2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7ff fe12 	bl	80018f8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f000 fd1f 	bl	800271c <RCC_SetFlashLatencyFromMSIRange>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e2f6      	b.n	80022d6 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001ce8:	f000 fce0 	bl	80026ac <HAL_RCC_GetHCLKFreq>
 8001cec:	4603      	mov	r3, r0
 8001cee:	4aa7      	ldr	r2, [pc, #668]	@ (8001f8c <HAL_RCC_OscConfig+0x3a8>)
 8001cf0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8001cf2:	4ba7      	ldr	r3, [pc, #668]	@ (8001f90 <HAL_RCC_OscConfig+0x3ac>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff f8e0 	bl	8000ebc <HAL_InitTick>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8001d00:	7cfb      	ldrb	r3, [r7, #19]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d047      	beq.n	8001d96 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8001d06:	7cfb      	ldrb	r3, [r7, #19]
 8001d08:	e2e5      	b.n	80022d6 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a1b      	ldr	r3, [r3, #32]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d02c      	beq.n	8001d6c <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d12:	f7ff fd9e 	bl	8001852 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d16:	f7ff f91d 	bl	8000f54 <HAL_GetTick>
 8001d1a:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d1e:	f7ff f919 	bl	8000f54 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e2d2      	b.n	80022d6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001d30:	f7ff fdab 	bl	800188a <LL_RCC_MSI_IsReady>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d0f1      	beq.n	8001d1e <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d44:	f043 0308 	orr.w	r3, r3, #8
 8001d48:	6013      	str	r3, [r2, #0]
 8001d4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d58:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff fdc7 	bl	80018f8 <LL_RCC_MSI_SetCalibTrimming>
 8001d6a:	e015      	b.n	8001d98 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d6c:	f7ff fd7f 	bl	800186e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d70:	f7ff f8f0 	bl	8000f54 <HAL_GetTick>
 8001d74:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d78:	f7ff f8ec 	bl	8000f54 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e2a5      	b.n	80022d6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001d8a:	f7ff fd7e 	bl	800188a <LL_RCC_MSI_IsReady>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d1f1      	bne.n	8001d78 <HAL_RCC_OscConfig+0x194>
 8001d94:	e000      	b.n	8001d98 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001d96:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0301 	and.w	r3, r3, #1
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d058      	beq.n	8001e56 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	2b08      	cmp	r3, #8
 8001da8:	d005      	beq.n	8001db6 <HAL_RCC_OscConfig+0x1d2>
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	2b0c      	cmp	r3, #12
 8001dae:	d108      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	2b03      	cmp	r3, #3
 8001db4:	d105      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d14b      	bne.n	8001e56 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e289      	b.n	80022d6 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8001dc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001de0:	d102      	bne.n	8001de8 <HAL_RCC_OscConfig+0x204>
 8001de2:	f7ff fc86 	bl	80016f2 <LL_RCC_HSE_Enable>
 8001de6:	e00d      	b.n	8001e04 <HAL_RCC_OscConfig+0x220>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8001df0:	d104      	bne.n	8001dfc <HAL_RCC_OscConfig+0x218>
 8001df2:	f7ff fc51 	bl	8001698 <LL_RCC_HSE_EnableTcxo>
 8001df6:	f7ff fc7c 	bl	80016f2 <LL_RCC_HSE_Enable>
 8001dfa:	e003      	b.n	8001e04 <HAL_RCC_OscConfig+0x220>
 8001dfc:	f7ff fc87 	bl	800170e <LL_RCC_HSE_Disable>
 8001e00:	f7ff fc58 	bl	80016b4 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d012      	beq.n	8001e32 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e0c:	f7ff f8a2 	bl	8000f54 <HAL_GetTick>
 8001e10:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001e12:	e008      	b.n	8001e26 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e14:	f7ff f89e 	bl	8000f54 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b64      	cmp	r3, #100	@ 0x64
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e257      	b.n	80022d6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001e26:	f7ff fc80 	bl	800172a <LL_RCC_HSE_IsReady>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d0f1      	beq.n	8001e14 <HAL_RCC_OscConfig+0x230>
 8001e30:	e011      	b.n	8001e56 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e32:	f7ff f88f 	bl	8000f54 <HAL_GetTick>
 8001e36:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001e38:	e008      	b.n	8001e4c <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e3a:	f7ff f88b 	bl	8000f54 <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	2b64      	cmp	r3, #100	@ 0x64
 8001e46:	d901      	bls.n	8001e4c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e244      	b.n	80022d6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001e4c:	f7ff fc6d 	bl	800172a <LL_RCC_HSE_IsReady>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d1f1      	bne.n	8001e3a <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d046      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	2b04      	cmp	r3, #4
 8001e66:	d005      	beq.n	8001e74 <HAL_RCC_OscConfig+0x290>
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	2b0c      	cmp	r3, #12
 8001e6c:	d10e      	bne.n	8001e8c <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d10b      	bne.n	8001e8c <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	691b      	ldr	r3, [r3, #16]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d101      	bne.n	8001e80 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e22a      	b.n	80022d6 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	695b      	ldr	r3, [r3, #20]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff fc8e 	bl	80017a6 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001e8a:	e031      	b.n	8001ef0 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	691b      	ldr	r3, [r3, #16]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d019      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e94:	f7ff fc5a 	bl	800174c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e98:	f7ff f85c 	bl	8000f54 <HAL_GetTick>
 8001e9c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ea0:	f7ff f858 	bl	8000f54 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e211      	b.n	80022d6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001eb2:	f7ff fc67 	bl	8001784 <LL_RCC_HSI_IsReady>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d0f1      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	695b      	ldr	r3, [r3, #20]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff fc70 	bl	80017a6 <LL_RCC_HSI_SetCalibTrimming>
 8001ec6:	e013      	b.n	8001ef0 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ec8:	f7ff fc4e 	bl	8001768 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ecc:	f7ff f842 	bl	8000f54 <HAL_GetTick>
 8001ed0:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ed4:	f7ff f83e 	bl	8000f54 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e1f7      	b.n	80022d6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001ee6:	f7ff fc4d 	bl	8001784 <LL_RCC_HSI_IsReady>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d1f1      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0308 	and.w	r3, r3, #8
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d06e      	beq.n	8001fda <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d056      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8001f04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f0c:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	69da      	ldr	r2, [r3, #28]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f003 0310 	and.w	r3, r3, #16
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d031      	beq.n	8001f80 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d006      	beq.n	8001f34 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d101      	bne.n	8001f34 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e1d0      	b.n	80022d6 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d013      	beq.n	8001f66 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8001f3e:	f7ff fc67 	bl	8001810 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f42:	f7ff f807 	bl	8000f54 <HAL_GetTick>
 8001f46:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8001f48:	e008      	b.n	8001f5c <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f4a:	f7ff f803 	bl	8000f54 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b11      	cmp	r3, #17
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e1bc      	b.n	80022d6 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8001f5c:	f7ff fc68 	bl	8001830 <LL_RCC_LSI_IsReady>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1f1      	bne.n	8001f4a <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8001f66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f6e:	f023 0210 	bic.w	r2, r3, #16
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f80:	f7ff fc36 	bl	80017f0 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f84:	f7fe ffe6 	bl	8000f54 <HAL_GetTick>
 8001f88:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8001f8a:	e00c      	b.n	8001fa6 <HAL_RCC_OscConfig+0x3c2>
 8001f8c:	20000000 	.word	0x20000000
 8001f90:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f94:	f7fe ffde 	bl	8000f54 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b11      	cmp	r3, #17
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e197      	b.n	80022d6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8001fa6:	f7ff fc43 	bl	8001830 <LL_RCC_LSI_IsReady>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d0f1      	beq.n	8001f94 <HAL_RCC_OscConfig+0x3b0>
 8001fb0:	e013      	b.n	8001fda <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fb2:	f7ff fc2d 	bl	8001810 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fb6:	f7fe ffcd 	bl	8000f54 <HAL_GetTick>
 8001fba:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8001fbc:	e008      	b.n	8001fd0 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fbe:	f7fe ffc9 	bl	8000f54 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b11      	cmp	r3, #17
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e182      	b.n	80022d6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8001fd0:	f7ff fc2e 	bl	8001830 <LL_RCC_LSI_IsReady>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1f1      	bne.n	8001fbe <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0304 	and.w	r3, r3, #4
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f000 80d8 	beq.w	8002198 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001fe8:	f7ff fb44 	bl	8001674 <LL_PWR_IsEnabledBkUpAccess>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d113      	bne.n	800201a <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001ff2:	f7ff faad 	bl	8001550 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ff6:	f7fe ffad 	bl	8000f54 <HAL_GetTick>
 8001ffa:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001ffc:	e008      	b.n	8002010 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ffe:	f7fe ffa9 	bl	8000f54 <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	2b02      	cmp	r3, #2
 800200a:	d901      	bls.n	8002010 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e162      	b.n	80022d6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002010:	f7ff fb30 	bl	8001674 <LL_PWR_IsEnabledBkUpAccess>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d0f1      	beq.n	8001ffe <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d07b      	beq.n	800211a <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	2b85      	cmp	r3, #133	@ 0x85
 8002028:	d003      	beq.n	8002032 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	2b05      	cmp	r3, #5
 8002030:	d109      	bne.n	8002046 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002032:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002036:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800203a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800203e:	f043 0304 	orr.w	r3, r3, #4
 8002042:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002046:	f7fe ff85 	bl	8000f54 <HAL_GetTick>
 800204a:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800204c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002050:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002054:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002058:	f043 0301 	orr.w	r3, r3, #1
 800205c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002060:	e00a      	b.n	8002078 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002062:	f7fe ff77 	bl	8000f54 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002070:	4293      	cmp	r3, r2
 8002072:	d901      	bls.n	8002078 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e12e      	b.n	80022d6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002078:	f7ff fba9 	bl	80017ce <LL_RCC_LSE_IsReady>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d0ef      	beq.n	8002062 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	2b81      	cmp	r3, #129	@ 0x81
 8002088:	d003      	beq.n	8002092 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	2b85      	cmp	r3, #133	@ 0x85
 8002090:	d121      	bne.n	80020d6 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002092:	f7fe ff5f 	bl	8000f54 <HAL_GetTick>
 8002096:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002098:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800209c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80020ac:	e00a      	b.n	80020c4 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ae:	f7fe ff51 	bl	8000f54 <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020bc:	4293      	cmp	r3, r2
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e108      	b.n	80022d6 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80020c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d0ec      	beq.n	80020ae <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80020d4:	e060      	b.n	8002198 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d6:	f7fe ff3d 	bl	8000f54 <HAL_GetTick>
 80020da:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80020dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80020ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80020f0:	e00a      	b.n	8002108 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020f2:	f7fe ff2f 	bl	8000f54 <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002100:	4293      	cmp	r3, r2
 8002102:	d901      	bls.n	8002108 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e0e6      	b.n	80022d6 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002108:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800210c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002110:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002114:	2b00      	cmp	r3, #0
 8002116:	d1ec      	bne.n	80020f2 <HAL_RCC_OscConfig+0x50e>
 8002118:	e03e      	b.n	8002198 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800211a:	f7fe ff1b 	bl	8000f54 <HAL_GetTick>
 800211e:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002120:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002124:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002128:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800212c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002130:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002134:	e00a      	b.n	800214c <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002136:	f7fe ff0d 	bl	8000f54 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002144:	4293      	cmp	r3, r2
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e0c4      	b.n	80022d6 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800214c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002150:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002154:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002158:	2b00      	cmp	r3, #0
 800215a:	d1ec      	bne.n	8002136 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800215c:	f7fe fefa 	bl	8000f54 <HAL_GetTick>
 8002160:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002162:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002166:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800216a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800216e:	f023 0301 	bic.w	r3, r3, #1
 8002172:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002176:	e00a      	b.n	800218e <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002178:	f7fe feec 	bl	8000f54 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002186:	4293      	cmp	r3, r2
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e0a3      	b.n	80022d6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 800218e:	f7ff fb1e 	bl	80017ce <LL_RCC_LSE_IsReady>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d1ef      	bne.n	8002178 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800219c:	2b00      	cmp	r3, #0
 800219e:	f000 8099 	beq.w	80022d4 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	2b0c      	cmp	r3, #12
 80021a6:	d06c      	beq.n	8002282 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d14b      	bne.n	8002248 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021b0:	f7ff fc74 	bl	8001a9c <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b4:	f7fe fece 	bl	8000f54 <HAL_GetTick>
 80021b8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021bc:	f7fe feca 	bl	8000f54 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b0a      	cmp	r3, #10
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e083      	b.n	80022d6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80021ce:	f7ff fc73 	bl	8001ab8 <LL_RCC_PLL_IsReady>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d1f1      	bne.n	80021bc <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021dc:	68da      	ldr	r2, [r3, #12]
 80021de:	4b40      	ldr	r3, [pc, #256]	@ (80022e0 <HAL_RCC_OscConfig+0x6fc>)
 80021e0:	4013      	ands	r3, r2
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80021ea:	4311      	orrs	r1, r2
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80021f0:	0212      	lsls	r2, r2, #8
 80021f2:	4311      	orrs	r1, r2
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80021f8:	4311      	orrs	r1, r2
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80021fe:	4311      	orrs	r1, r2
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002204:	430a      	orrs	r2, r1
 8002206:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800220a:	4313      	orrs	r3, r2
 800220c:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800220e:	f7ff fc37 	bl	8001a80 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002212:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800221c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002220:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002222:	f7fe fe97 	bl	8000f54 <HAL_GetTick>
 8002226:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8002228:	e008      	b.n	800223c <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800222a:	f7fe fe93 	bl	8000f54 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b0a      	cmp	r3, #10
 8002236:	d901      	bls.n	800223c <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e04c      	b.n	80022d6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 800223c:	f7ff fc3c 	bl	8001ab8 <LL_RCC_PLL_IsReady>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d0f1      	beq.n	800222a <HAL_RCC_OscConfig+0x646>
 8002246:	e045      	b.n	80022d4 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002248:	f7ff fc28 	bl	8001a9c <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224c:	f7fe fe82 	bl	8000f54 <HAL_GetTick>
 8002250:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002254:	f7fe fe7e 	bl	8000f54 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b0a      	cmp	r3, #10
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e037      	b.n	80022d6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002266:	f7ff fc27 	bl	8001ab8 <LL_RCC_PLL_IsReady>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d1f1      	bne.n	8002254 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002270:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002274:	68da      	ldr	r2, [r3, #12]
 8002276:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800227a:	4b1a      	ldr	r3, [pc, #104]	@ (80022e4 <HAL_RCC_OscConfig+0x700>)
 800227c:	4013      	ands	r3, r2
 800227e:	60cb      	str	r3, [r1, #12]
 8002280:	e028      	b.n	80022d4 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002286:	2b01      	cmp	r3, #1
 8002288:	d101      	bne.n	800228e <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e023      	b.n	80022d6 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800228e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	f003 0203 	and.w	r2, r3, #3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d115      	bne.n	80022d0 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d10e      	bne.n	80022d0 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022bc:	021b      	lsls	r3, r3, #8
 80022be:	429a      	cmp	r2, r3
 80022c0:	d106      	bne.n	80022d0 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d001      	beq.n	80022d4 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e000      	b.n	80022d6 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3720      	adds	r7, #32
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	11c1808c 	.word	0x11c1808c
 80022e4:	eefefffc 	.word	0xeefefffc

080022e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d101      	bne.n	80022fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e12c      	b.n	8002556 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022fc:	4b98      	ldr	r3, [pc, #608]	@ (8002560 <HAL_RCC_ClockConfig+0x278>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0307 	and.w	r3, r3, #7
 8002304:	683a      	ldr	r2, [r7, #0]
 8002306:	429a      	cmp	r2, r3
 8002308:	d91b      	bls.n	8002342 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800230a:	4b95      	ldr	r3, [pc, #596]	@ (8002560 <HAL_RCC_ClockConfig+0x278>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f023 0207 	bic.w	r2, r3, #7
 8002312:	4993      	ldr	r1, [pc, #588]	@ (8002560 <HAL_RCC_ClockConfig+0x278>)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	4313      	orrs	r3, r2
 8002318:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800231a:	f7fe fe1b 	bl	8000f54 <HAL_GetTick>
 800231e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002320:	e008      	b.n	8002334 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002322:	f7fe fe17 	bl	8000f54 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2b02      	cmp	r3, #2
 800232e:	d901      	bls.n	8002334 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e110      	b.n	8002556 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002334:	4b8a      	ldr	r3, [pc, #552]	@ (8002560 <HAL_RCC_ClockConfig+0x278>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0307 	and.w	r3, r3, #7
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	429a      	cmp	r2, r3
 8002340:	d1ef      	bne.n	8002322 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d016      	beq.n	800237c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff fb02 	bl	800195c <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002358:	f7fe fdfc 	bl	8000f54 <HAL_GetTick>
 800235c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800235e:	e008      	b.n	8002372 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002360:	f7fe fdf8 	bl	8000f54 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b02      	cmp	r3, #2
 800236c:	d901      	bls.n	8002372 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e0f1      	b.n	8002556 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002372:	f7ff fbdf 	bl	8001b34 <LL_RCC_IsActiveFlag_HPRE>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d0f1      	beq.n	8002360 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0320 	and.w	r3, r3, #32
 8002384:	2b00      	cmp	r3, #0
 8002386:	d016      	beq.n	80023b6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	695b      	ldr	r3, [r3, #20]
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff faf8 	bl	8001982 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002392:	f7fe fddf 	bl	8000f54 <HAL_GetTick>
 8002396:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002398:	e008      	b.n	80023ac <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800239a:	f7fe fddb 	bl	8000f54 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e0d4      	b.n	8002556 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80023ac:	f7ff fbd3 	bl	8001b56 <LL_RCC_IsActiveFlag_C2HPRE>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d0f1      	beq.n	800239a <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d016      	beq.n	80023f0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7ff faf0 	bl	80019ac <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80023cc:	f7fe fdc2 	bl	8000f54 <HAL_GetTick>
 80023d0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80023d2:	e008      	b.n	80023e6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80023d4:	f7fe fdbe 	bl	8000f54 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e0b7      	b.n	8002556 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80023e6:	f7ff fbc8 	bl	8001b7a <LL_RCC_IsActiveFlag_SHDHPRE>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d0f1      	beq.n	80023d4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0304 	and.w	r3, r3, #4
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d016      	beq.n	800242a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff fae9 	bl	80019d8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002406:	f7fe fda5 	bl	8000f54 <HAL_GetTick>
 800240a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800240c:	e008      	b.n	8002420 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800240e:	f7fe fda1 	bl	8000f54 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d901      	bls.n	8002420 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e09a      	b.n	8002556 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002420:	f7ff fbbd 	bl	8001b9e <LL_RCC_IsActiveFlag_PPRE1>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d0f1      	beq.n	800240e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0308 	and.w	r3, r3, #8
 8002432:	2b00      	cmp	r3, #0
 8002434:	d017      	beq.n	8002466 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	00db      	lsls	r3, r3, #3
 800243c:	4618      	mov	r0, r3
 800243e:	f7ff fade 	bl	80019fe <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002442:	f7fe fd87 	bl	8000f54 <HAL_GetTick>
 8002446:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002448:	e008      	b.n	800245c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800244a:	f7fe fd83 	bl	8000f54 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d901      	bls.n	800245c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e07c      	b.n	8002556 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800245c:	f7ff fbb0 	bl	8001bc0 <LL_RCC_IsActiveFlag_PPRE2>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d0f1      	beq.n	800244a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b00      	cmp	r3, #0
 8002470:	d043      	beq.n	80024fa <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	2b02      	cmp	r3, #2
 8002478:	d106      	bne.n	8002488 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800247a:	f7ff f956 	bl	800172a <LL_RCC_HSE_IsReady>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d11e      	bne.n	80024c2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e066      	b.n	8002556 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	2b03      	cmp	r3, #3
 800248e:	d106      	bne.n	800249e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002490:	f7ff fb12 	bl	8001ab8 <LL_RCC_PLL_IsReady>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d113      	bne.n	80024c2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e05b      	b.n	8002556 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d106      	bne.n	80024b4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80024a6:	f7ff f9f0 	bl	800188a <LL_RCC_MSI_IsReady>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d108      	bne.n	80024c2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e050      	b.n	8002556 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80024b4:	f7ff f966 	bl	8001784 <LL_RCC_HSI_IsReady>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d101      	bne.n	80024c2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e049      	b.n	8002556 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff fa2a 	bl	8001920 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024cc:	f7fe fd42 	bl	8000f54 <HAL_GetTick>
 80024d0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024d2:	e00a      	b.n	80024ea <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024d4:	f7fe fd3e 	bl	8000f54 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e035      	b.n	8002556 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ea:	f7ff fa2c 	bl	8001946 <LL_RCC_GetSysClkSource>
 80024ee:	4602      	mov	r2, r0
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d1ec      	bne.n	80024d4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024fa:	4b19      	ldr	r3, [pc, #100]	@ (8002560 <HAL_RCC_ClockConfig+0x278>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0307 	and.w	r3, r3, #7
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	429a      	cmp	r2, r3
 8002506:	d21b      	bcs.n	8002540 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002508:	4b15      	ldr	r3, [pc, #84]	@ (8002560 <HAL_RCC_ClockConfig+0x278>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f023 0207 	bic.w	r2, r3, #7
 8002510:	4913      	ldr	r1, [pc, #76]	@ (8002560 <HAL_RCC_ClockConfig+0x278>)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	4313      	orrs	r3, r2
 8002516:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002518:	f7fe fd1c 	bl	8000f54 <HAL_GetTick>
 800251c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800251e:	e008      	b.n	8002532 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002520:	f7fe fd18 	bl	8000f54 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e011      	b.n	8002556 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002532:	4b0b      	ldr	r3, [pc, #44]	@ (8002560 <HAL_RCC_ClockConfig+0x278>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0307 	and.w	r3, r3, #7
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	429a      	cmp	r2, r3
 800253e:	d1ef      	bne.n	8002520 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002540:	f000 f8b4 	bl	80026ac <HAL_RCC_GetHCLKFreq>
 8002544:	4603      	mov	r3, r0
 8002546:	4a07      	ldr	r2, [pc, #28]	@ (8002564 <HAL_RCC_ClockConfig+0x27c>)
 8002548:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 800254a:	4b07      	ldr	r3, [pc, #28]	@ (8002568 <HAL_RCC_ClockConfig+0x280>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4618      	mov	r0, r3
 8002550:	f7fe fcb4 	bl	8000ebc <HAL_InitTick>
 8002554:	4603      	mov	r3, r0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	58004000 	.word	0x58004000
 8002564:	20000000 	.word	0x20000000
 8002568:	20000004 	.word	0x20000004

0800256c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800256c:	b590      	push	{r4, r7, lr}
 800256e:	b087      	sub	sp, #28
 8002570:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8002572:	2300      	movs	r3, #0
 8002574:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8002576:	2300      	movs	r3, #0
 8002578:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800257a:	f7ff f9e4 	bl	8001946 <LL_RCC_GetSysClkSource>
 800257e:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002580:	f7ff facd 	bl	8001b1e <LL_RCC_PLL_GetMainSource>
 8002584:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d005      	beq.n	8002598 <HAL_RCC_GetSysClockFreq+0x2c>
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	2b0c      	cmp	r3, #12
 8002590:	d139      	bne.n	8002606 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d136      	bne.n	8002606 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002598:	f7ff f987 	bl	80018aa <LL_RCC_MSI_IsEnabledRangeSelect>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d115      	bne.n	80025ce <HAL_RCC_GetSysClockFreq+0x62>
 80025a2:	f7ff f982 	bl	80018aa <LL_RCC_MSI_IsEnabledRangeSelect>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d106      	bne.n	80025ba <HAL_RCC_GetSysClockFreq+0x4e>
 80025ac:	f7ff f98d 	bl	80018ca <LL_RCC_MSI_GetRange>
 80025b0:	4603      	mov	r3, r0
 80025b2:	0a1b      	lsrs	r3, r3, #8
 80025b4:	f003 030f 	and.w	r3, r3, #15
 80025b8:	e005      	b.n	80025c6 <HAL_RCC_GetSysClockFreq+0x5a>
 80025ba:	f7ff f991 	bl	80018e0 <LL_RCC_MSI_GetRangeAfterStandby>
 80025be:	4603      	mov	r3, r0
 80025c0:	0a1b      	lsrs	r3, r3, #8
 80025c2:	f003 030f 	and.w	r3, r3, #15
 80025c6:	4a36      	ldr	r2, [pc, #216]	@ (80026a0 <HAL_RCC_GetSysClockFreq+0x134>)
 80025c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025cc:	e014      	b.n	80025f8 <HAL_RCC_GetSysClockFreq+0x8c>
 80025ce:	f7ff f96c 	bl	80018aa <LL_RCC_MSI_IsEnabledRangeSelect>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d106      	bne.n	80025e6 <HAL_RCC_GetSysClockFreq+0x7a>
 80025d8:	f7ff f977 	bl	80018ca <LL_RCC_MSI_GetRange>
 80025dc:	4603      	mov	r3, r0
 80025de:	091b      	lsrs	r3, r3, #4
 80025e0:	f003 030f 	and.w	r3, r3, #15
 80025e4:	e005      	b.n	80025f2 <HAL_RCC_GetSysClockFreq+0x86>
 80025e6:	f7ff f97b 	bl	80018e0 <LL_RCC_MSI_GetRangeAfterStandby>
 80025ea:	4603      	mov	r3, r0
 80025ec:	091b      	lsrs	r3, r3, #4
 80025ee:	f003 030f 	and.w	r3, r3, #15
 80025f2:	4a2b      	ldr	r2, [pc, #172]	@ (80026a0 <HAL_RCC_GetSysClockFreq+0x134>)
 80025f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025f8:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d115      	bne.n	800262c <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002604:	e012      	b.n	800262c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	2b04      	cmp	r3, #4
 800260a:	d102      	bne.n	8002612 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800260c:	4b25      	ldr	r3, [pc, #148]	@ (80026a4 <HAL_RCC_GetSysClockFreq+0x138>)
 800260e:	617b      	str	r3, [r7, #20]
 8002610:	e00c      	b.n	800262c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	2b08      	cmp	r3, #8
 8002616:	d109      	bne.n	800262c <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002618:	f7ff f85a 	bl	80016d0 <LL_RCC_HSE_IsEnabledDiv2>
 800261c:	4603      	mov	r3, r0
 800261e:	2b01      	cmp	r3, #1
 8002620:	d102      	bne.n	8002628 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002622:	4b20      	ldr	r3, [pc, #128]	@ (80026a4 <HAL_RCC_GetSysClockFreq+0x138>)
 8002624:	617b      	str	r3, [r7, #20]
 8002626:	e001      	b.n	800262c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002628:	4b1f      	ldr	r3, [pc, #124]	@ (80026a8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800262a:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800262c:	f7ff f98b 	bl	8001946 <LL_RCC_GetSysClkSource>
 8002630:	4603      	mov	r3, r0
 8002632:	2b0c      	cmp	r3, #12
 8002634:	d12f      	bne.n	8002696 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002636:	f7ff fa72 	bl	8001b1e <LL_RCC_PLL_GetMainSource>
 800263a:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b02      	cmp	r3, #2
 8002640:	d003      	beq.n	800264a <HAL_RCC_GetSysClockFreq+0xde>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2b03      	cmp	r3, #3
 8002646:	d003      	beq.n	8002650 <HAL_RCC_GetSysClockFreq+0xe4>
 8002648:	e00d      	b.n	8002666 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800264a:	4b16      	ldr	r3, [pc, #88]	@ (80026a4 <HAL_RCC_GetSysClockFreq+0x138>)
 800264c:	60fb      	str	r3, [r7, #12]
        break;
 800264e:	e00d      	b.n	800266c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002650:	f7ff f83e 	bl	80016d0 <LL_RCC_HSE_IsEnabledDiv2>
 8002654:	4603      	mov	r3, r0
 8002656:	2b01      	cmp	r3, #1
 8002658:	d102      	bne.n	8002660 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800265a:	4b12      	ldr	r3, [pc, #72]	@ (80026a4 <HAL_RCC_GetSysClockFreq+0x138>)
 800265c:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800265e:	e005      	b.n	800266c <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8002660:	4b11      	ldr	r3, [pc, #68]	@ (80026a8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002662:	60fb      	str	r3, [r7, #12]
        break;
 8002664:	e002      	b.n	800266c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	60fb      	str	r3, [r7, #12]
        break;
 800266a:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800266c:	f7ff fa35 	bl	8001ada <LL_RCC_PLL_GetN>
 8002670:	4602      	mov	r2, r0
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	fb03 f402 	mul.w	r4, r3, r2
 8002678:	f7ff fa46 	bl	8001b08 <LL_RCC_PLL_GetDivider>
 800267c:	4603      	mov	r3, r0
 800267e:	091b      	lsrs	r3, r3, #4
 8002680:	3301      	adds	r3, #1
 8002682:	fbb4 f4f3 	udiv	r4, r4, r3
 8002686:	f7ff fa34 	bl	8001af2 <LL_RCC_PLL_GetR>
 800268a:	4603      	mov	r3, r0
 800268c:	0f5b      	lsrs	r3, r3, #29
 800268e:	3301      	adds	r3, #1
 8002690:	fbb4 f3f3 	udiv	r3, r4, r3
 8002694:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002696:	697b      	ldr	r3, [r7, #20]
}
 8002698:	4618      	mov	r0, r3
 800269a:	371c      	adds	r7, #28
 800269c:	46bd      	mov	sp, r7
 800269e:	bd90      	pop	{r4, r7, pc}
 80026a0:	08004a18 	.word	0x08004a18
 80026a4:	00f42400 	.word	0x00f42400
 80026a8:	01e84800 	.word	0x01e84800

080026ac <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026ac:	b598      	push	{r3, r4, r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80026b0:	f7ff ff5c 	bl	800256c <HAL_RCC_GetSysClockFreq>
 80026b4:	4604      	mov	r4, r0
 80026b6:	f7ff f9b5 	bl	8001a24 <LL_RCC_GetAHBPrescaler>
 80026ba:	4603      	mov	r3, r0
 80026bc:	091b      	lsrs	r3, r3, #4
 80026be:	f003 030f 	and.w	r3, r3, #15
 80026c2:	4a03      	ldr	r2, [pc, #12]	@ (80026d0 <HAL_RCC_GetHCLKFreq+0x24>)
 80026c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026c8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	bd98      	pop	{r3, r4, r7, pc}
 80026d0:	080049b8 	.word	0x080049b8

080026d4 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026d4:	b598      	push	{r3, r4, r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80026d8:	f7ff ffe8 	bl	80026ac <HAL_RCC_GetHCLKFreq>
 80026dc:	4604      	mov	r4, r0
 80026de:	f7ff f9b9 	bl	8001a54 <LL_RCC_GetAPB1Prescaler>
 80026e2:	4603      	mov	r3, r0
 80026e4:	0a1b      	lsrs	r3, r3, #8
 80026e6:	4a03      	ldr	r2, [pc, #12]	@ (80026f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ec:	fa24 f303 	lsr.w	r3, r4, r3
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	bd98      	pop	{r3, r4, r7, pc}
 80026f4:	080049f8 	.word	0x080049f8

080026f8 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026f8:	b598      	push	{r3, r4, r7, lr}
 80026fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80026fc:	f7ff ffd6 	bl	80026ac <HAL_RCC_GetHCLKFreq>
 8002700:	4604      	mov	r4, r0
 8002702:	f7ff f9b2 	bl	8001a6a <LL_RCC_GetAPB2Prescaler>
 8002706:	4603      	mov	r3, r0
 8002708:	0adb      	lsrs	r3, r3, #11
 800270a:	4a03      	ldr	r2, [pc, #12]	@ (8002718 <HAL_RCC_GetPCLK2Freq+0x20>)
 800270c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002710:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002714:	4618      	mov	r0, r3
 8002716:	bd98      	pop	{r3, r4, r7, pc}
 8002718:	080049f8 	.word	0x080049f8

0800271c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800271c:	b590      	push	{r4, r7, lr}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	091b      	lsrs	r3, r3, #4
 8002728:	f003 030f 	and.w	r3, r3, #15
 800272c:	4a10      	ldr	r2, [pc, #64]	@ (8002770 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800272e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002732:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8002734:	f7ff f981 	bl	8001a3a <LL_RCC_GetAHB3Prescaler>
 8002738:	4603      	mov	r3, r0
 800273a:	091b      	lsrs	r3, r3, #4
 800273c:	f003 030f 	and.w	r3, r3, #15
 8002740:	4a0c      	ldr	r2, [pc, #48]	@ (8002774 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8002742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	fbb2 f3f3 	udiv	r3, r2, r3
 800274c:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	4a09      	ldr	r2, [pc, #36]	@ (8002778 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8002752:	fba2 2303 	umull	r2, r3, r2, r3
 8002756:	0c9c      	lsrs	r4, r3, #18
 8002758:	f7fe ff3c 	bl	80015d4 <HAL_PWREx_GetVoltageRange>
 800275c:	4603      	mov	r3, r0
 800275e:	4619      	mov	r1, r3
 8002760:	4620      	mov	r0, r4
 8002762:	f000 f80b 	bl	800277c <RCC_SetFlashLatency>
 8002766:	4603      	mov	r3, r0
}
 8002768:	4618      	mov	r0, r3
 800276a:	3714      	adds	r7, #20
 800276c:	46bd      	mov	sp, r7
 800276e:	bd90      	pop	{r4, r7, pc}
 8002770:	08004a18 	.word	0x08004a18
 8002774:	080049b8 	.word	0x080049b8
 8002778:	431bde83 	.word	0x431bde83

0800277c <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b08e      	sub	sp, #56	@ 0x38
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8002786:	4a3a      	ldr	r2, [pc, #232]	@ (8002870 <RCC_SetFlashLatency+0xf4>)
 8002788:	f107 0320 	add.w	r3, r7, #32
 800278c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002790:	6018      	str	r0, [r3, #0]
 8002792:	3304      	adds	r3, #4
 8002794:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8002796:	4a37      	ldr	r2, [pc, #220]	@ (8002874 <RCC_SetFlashLatency+0xf8>)
 8002798:	f107 0318 	add.w	r3, r7, #24
 800279c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027a0:	6018      	str	r0, [r3, #0]
 80027a2:	3304      	adds	r3, #4
 80027a4:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80027a6:	4a34      	ldr	r2, [pc, #208]	@ (8002878 <RCC_SetFlashLatency+0xfc>)
 80027a8:	f107 030c 	add.w	r3, r7, #12
 80027ac:	ca07      	ldmia	r2, {r0, r1, r2}
 80027ae:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80027b2:	2300      	movs	r3, #0
 80027b4:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027bc:	d11b      	bne.n	80027f6 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80027be:	2300      	movs	r3, #0
 80027c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80027c2:	e014      	b.n	80027ee <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80027c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	3338      	adds	r3, #56	@ 0x38
 80027ca:	443b      	add	r3, r7
 80027cc:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80027d0:	461a      	mov	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d807      	bhi.n	80027e8 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80027d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	3338      	adds	r3, #56	@ 0x38
 80027de:	443b      	add	r3, r7
 80027e0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80027e4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80027e6:	e021      	b.n	800282c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80027e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027ea:	3301      	adds	r3, #1
 80027ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80027ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d9e7      	bls.n	80027c4 <RCC_SetFlashLatency+0x48>
 80027f4:	e01a      	b.n	800282c <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80027f6:	2300      	movs	r3, #0
 80027f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027fa:	e014      	b.n	8002826 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80027fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	3338      	adds	r3, #56	@ 0x38
 8002802:	443b      	add	r3, r7
 8002804:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8002808:	461a      	mov	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4293      	cmp	r3, r2
 800280e:	d807      	bhi.n	8002820 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	3338      	adds	r3, #56	@ 0x38
 8002816:	443b      	add	r3, r7
 8002818:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800281c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800281e:	e005      	b.n	800282c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002822:	3301      	adds	r3, #1
 8002824:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002828:	2b02      	cmp	r3, #2
 800282a:	d9e7      	bls.n	80027fc <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800282c:	4b13      	ldr	r3, [pc, #76]	@ (800287c <RCC_SetFlashLatency+0x100>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f023 0207 	bic.w	r2, r3, #7
 8002834:	4911      	ldr	r1, [pc, #68]	@ (800287c <RCC_SetFlashLatency+0x100>)
 8002836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002838:	4313      	orrs	r3, r2
 800283a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800283c:	f7fe fb8a 	bl	8000f54 <HAL_GetTick>
 8002840:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002842:	e008      	b.n	8002856 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002844:	f7fe fb86 	bl	8000f54 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d901      	bls.n	8002856 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e007      	b.n	8002866 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002856:	4b09      	ldr	r3, [pc, #36]	@ (800287c <RCC_SetFlashLatency+0x100>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0307 	and.w	r3, r3, #7
 800285e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002860:	429a      	cmp	r2, r3
 8002862:	d1ef      	bne.n	8002844 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3738      	adds	r7, #56	@ 0x38
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	0800499c 	.word	0x0800499c
 8002874:	080049a4 	.word	0x080049a4
 8002878:	080049ac 	.word	0x080049ac
 800287c:	58004000 	.word	0x58004000

08002880 <LL_RCC_LSE_IsReady>:
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002884:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002888:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	2b02      	cmp	r3, #2
 8002892:	d101      	bne.n	8002898 <LL_RCC_LSE_IsReady+0x18>
 8002894:	2301      	movs	r3, #1
 8002896:	e000      	b.n	800289a <LL_RCC_LSE_IsReady+0x1a>
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	46bd      	mov	sp, r7
 800289e:	bc80      	pop	{r7}
 80028a0:	4770      	bx	lr

080028a2 <LL_RCC_SetUSARTClockSource>:
{
 80028a2:	b480      	push	{r7}
 80028a4:	b083      	sub	sp, #12
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80028aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028ae:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	0c1b      	lsrs	r3, r3, #16
 80028b6:	43db      	mvns	r3, r3
 80028b8:	401a      	ands	r2, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	b29b      	uxth	r3, r3
 80028be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80028c2:	4313      	orrs	r3, r2
 80028c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bc80      	pop	{r7}
 80028d0:	4770      	bx	lr

080028d2 <LL_RCC_SetI2SClockSource>:
{
 80028d2:	b480      	push	{r7}
 80028d4:	b083      	sub	sp, #12
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80028da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028e2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80028e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80028f2:	bf00      	nop
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bc80      	pop	{r7}
 80028fa:	4770      	bx	lr

080028fc <LL_RCC_SetLPUARTClockSource>:
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002904:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002908:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800290c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002910:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4313      	orrs	r3, r2
 8002918:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	bc80      	pop	{r7}
 8002924:	4770      	bx	lr

08002926 <LL_RCC_SetI2CClockSource>:
{
 8002926:	b480      	push	{r7}
 8002928:	b083      	sub	sp, #12
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800292e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002932:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	091b      	lsrs	r3, r3, #4
 800293a:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800293e:	43db      	mvns	r3, r3
 8002940:	401a      	ands	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	011b      	lsls	r3, r3, #4
 8002946:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800294a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800294e:	4313      	orrs	r3, r2
 8002950:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	bc80      	pop	{r7}
 800295c:	4770      	bx	lr

0800295e <LL_RCC_SetLPTIMClockSource>:
{
 800295e:	b480      	push	{r7}
 8002960:	b083      	sub	sp, #12
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002966:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800296a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	0c1b      	lsrs	r3, r3, #16
 8002972:	041b      	lsls	r3, r3, #16
 8002974:	43db      	mvns	r3, r3
 8002976:	401a      	ands	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	041b      	lsls	r3, r3, #16
 800297c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002980:	4313      	orrs	r3, r2
 8002982:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002986:	bf00      	nop
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr

08002990 <LL_RCC_SetRNGClockSource>:
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002998:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800299c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029a0:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80029a4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80029b0:	bf00      	nop
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bc80      	pop	{r7}
 80029b8:	4770      	bx	lr

080029ba <LL_RCC_SetADCClockSource>:
{
 80029ba:	b480      	push	{r7}
 80029bc:	b083      	sub	sp, #12
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80029c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ca:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80029ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	bc80      	pop	{r7}
 80029e2:	4770      	bx	lr

080029e4 <LL_RCC_SetRTCClockSource>:
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80029ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80029f8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bc80      	pop	{r7}
 8002a0c:	4770      	bx	lr

08002a0e <LL_RCC_GetRTCClockSource>:
{
 8002a0e:	b480      	push	{r7}
 8002a10:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002a12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bc80      	pop	{r7}
 8002a24:	4770      	bx	lr

08002a26 <LL_RCC_ForceBackupDomainReset>:
{
 8002a26:	b480      	push	{r7}
 8002a28:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002a2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a32:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a3a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002a3e:	bf00      	nop
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bc80      	pop	{r7}
 8002a44:	4770      	bx	lr

08002a46 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002a46:	b480      	push	{r7}
 8002a48:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002a4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a52:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a5a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002a5e:	bf00      	nop
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bc80      	pop	{r7}
 8002a64:	4770      	bx	lr
	...

08002a68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8002a70:	2300      	movs	r3, #0
 8002a72:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8002a74:	2300      	movs	r3, #0
 8002a76:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002a78:	2300      	movs	r3, #0
 8002a7a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d058      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8002a88:	f7fe fd62 	bl	8001550 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a8c:	f7fe fa62 	bl	8000f54 <HAL_GetTick>
 8002a90:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002a92:	e009      	b.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a94:	f7fe fa5e 	bl	8000f54 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d902      	bls.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	74fb      	strb	r3, [r7, #19]
        break;
 8002aa6:	e006      	b.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002aa8:	4b7b      	ldr	r3, [pc, #492]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ab0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ab4:	d1ee      	bne.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8002ab6:	7cfb      	ldrb	r3, [r7, #19]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d13c      	bne.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002abc:	f7ff ffa7 	bl	8002a0e <LL_RCC_GetRTCClockSource>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d00f      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002aca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ad2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ad6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ad8:	f7ff ffa5 	bl	8002a26 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002adc:	f7ff ffb3 	bl	8002a46 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ae0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	f003 0302 	and.w	r3, r3, #2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d014      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af4:	f7fe fa2e 	bl	8000f54 <HAL_GetTick>
 8002af8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8002afa:	e00b      	b.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002afc:	f7fe fa2a 	bl	8000f54 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d902      	bls.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	74fb      	strb	r3, [r7, #19]
            break;
 8002b12:	e004      	b.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8002b14:	f7ff feb4 	bl	8002880 <LL_RCC_LSE_IsReady>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d1ee      	bne.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8002b1e:	7cfb      	ldrb	r3, [r7, #19]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d105      	bne.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7ff ff5b 	bl	80029e4 <LL_RCC_SetRTCClockSource>
 8002b2e:	e004      	b.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b30:	7cfb      	ldrb	r3, [r7, #19]
 8002b32:	74bb      	strb	r3, [r7, #18]
 8002b34:	e001      	b.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b36:	7cfb      	ldrb	r3, [r7, #19]
 8002b38:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d004      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7ff fea9 	bl	80028a2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0302 	and.w	r3, r3, #2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d004      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff fe9e 	bl	80028a2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0320 	and.w	r3, r3, #32
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d004      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7ff fec0 	bl	80028fc <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d004      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a1b      	ldr	r3, [r3, #32]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7ff fee6 	bl	800295e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d004      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff fedb 	bl	800295e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d004      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff fed0 	bl	800295e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d004      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7ff fea9 	bl	8002926 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d004      	beq.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff fe9e 	bl	8002926 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d004      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7ff fe93 	bl	8002926 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0310 	and.w	r3, r3, #16
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d011      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7ff fe5e 	bl	80028d2 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c1e:	d107      	bne.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8002c20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c2e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d010      	beq.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7ff fea5 	bl	8002990 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d107      	bne.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002c4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c58:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c5c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d011      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7ff fea3 	bl	80029ba <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c7c:	d107      	bne.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002c7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c8c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8002c8e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3718      	adds	r7, #24
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	58000400 	.word	0x58000400

08002c9c <LL_RCC_GetUSARTClockSource>:
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8002ca4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ca8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	401a      	ands	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	041b      	lsls	r3, r3, #16
 8002cb4:	4313      	orrs	r3, r2
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bc80      	pop	{r7}
 8002cbe:	4770      	bx	lr

08002cc0 <LL_RCC_GetLPUARTClockSource>:
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8002cc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ccc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4013      	ands	r3, r2
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bc80      	pop	{r7}
 8002cdc:	4770      	bx	lr

08002cde <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b082      	sub	sp, #8
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d101      	bne.n	8002cf0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e042      	b.n	8002d76 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d106      	bne.n	8002d08 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f7fd ff6a 	bl	8000bdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2224      	movs	r2, #36	@ 0x24
 8002d0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f022 0201 	bic.w	r2, r2, #1
 8002d1e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d002      	beq.n	8002d2e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f000 fb23 	bl	8003374 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 f8ac 	bl	8002e8c <UART_SetConfig>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d101      	bne.n	8002d3e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e01b      	b.n	8002d76 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002d4c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002d5c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f042 0201 	orr.w	r2, r2, #1
 8002d6c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 fba1 	bl	80034b6 <UART_CheckIdleState>
 8002d74:	4603      	mov	r3, r0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3708      	adds	r7, #8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b08a      	sub	sp, #40	@ 0x28
 8002d82:	af02      	add	r7, sp, #8
 8002d84:	60f8      	str	r0, [r7, #12]
 8002d86:	60b9      	str	r1, [r7, #8]
 8002d88:	603b      	str	r3, [r7, #0]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d94:	2b20      	cmp	r3, #32
 8002d96:	d173      	bne.n	8002e80 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d002      	beq.n	8002da4 <HAL_UART_Transmit+0x26>
 8002d9e:	88fb      	ldrh	r3, [r7, #6]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d101      	bne.n	8002da8 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e06c      	b.n	8002e82 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2221      	movs	r2, #33	@ 0x21
 8002db4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002db8:	f7fe f8cc 	bl	8000f54 <HAL_GetTick>
 8002dbc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	88fa      	ldrh	r2, [r7, #6]
 8002dc2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	88fa      	ldrh	r2, [r7, #6]
 8002dca:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002dd6:	d108      	bne.n	8002dea <HAL_UART_Transmit+0x6c>
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	691b      	ldr	r3, [r3, #16]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d104      	bne.n	8002dea <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002de0:	2300      	movs	r3, #0
 8002de2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	61bb      	str	r3, [r7, #24]
 8002de8:	e003      	b.n	8002df2 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002dee:	2300      	movs	r3, #0
 8002df0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002df2:	e02c      	b.n	8002e4e <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	9300      	str	r3, [sp, #0]
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	2180      	movs	r1, #128	@ 0x80
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f000 fba7 	bl	8003552 <UART_WaitOnFlagUntilTimeout>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e039      	b.n	8002e82 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d10b      	bne.n	8002e2c <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	881b      	ldrh	r3, [r3, #0]
 8002e18:	461a      	mov	r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e22:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	3302      	adds	r3, #2
 8002e28:	61bb      	str	r3, [r7, #24]
 8002e2a:	e007      	b.n	8002e3c <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	781a      	ldrb	r2, [r3, #0]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	3301      	adds	r3, #1
 8002e3a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	3b01      	subs	r3, #1
 8002e46:	b29a      	uxth	r2, r3
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1cc      	bne.n	8002df4 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	9300      	str	r3, [sp, #0]
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	2200      	movs	r2, #0
 8002e62:	2140      	movs	r1, #64	@ 0x40
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f000 fb74 	bl	8003552 <UART_WaitOnFlagUntilTimeout>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e006      	b.n	8002e82 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2220      	movs	r2, #32
 8002e78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	e000      	b.n	8002e82 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8002e80:	2302      	movs	r3, #2
  }
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3720      	adds	r7, #32
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
	...

08002e8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e90:	b08c      	sub	sp, #48	@ 0x30
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e96:	2300      	movs	r3, #0
 8002e98:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	689a      	ldr	r2, [r3, #8]
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	431a      	orrs	r2, r3
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	431a      	orrs	r2, r3
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	69db      	ldr	r3, [r3, #28]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	4b94      	ldr	r3, [pc, #592]	@ (800310c <UART_SetConfig+0x280>)
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	697a      	ldr	r2, [r7, #20]
 8002ec0:	6812      	ldr	r2, [r2, #0]
 8002ec2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002ec4:	430b      	orrs	r3, r1
 8002ec6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	68da      	ldr	r2, [r3, #12]
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	430a      	orrs	r2, r1
 8002edc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a89      	ldr	r2, [pc, #548]	@ (8003110 <UART_SetConfig+0x284>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d004      	beq.n	8002ef8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002f02:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002f06:	697a      	ldr	r2, [r7, #20]
 8002f08:	6812      	ldr	r2, [r2, #0]
 8002f0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002f0c:	430b      	orrs	r3, r1
 8002f0e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f16:	f023 010f 	bic.w	r1, r3, #15
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	430a      	orrs	r2, r1
 8002f24:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a7a      	ldr	r2, [pc, #488]	@ (8003114 <UART_SetConfig+0x288>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d127      	bne.n	8002f80 <UART_SetConfig+0xf4>
 8002f30:	2003      	movs	r0, #3
 8002f32:	f7ff feb3 	bl	8002c9c <LL_RCC_GetUSARTClockSource>
 8002f36:	4603      	mov	r3, r0
 8002f38:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8002f3c:	2b03      	cmp	r3, #3
 8002f3e:	d81b      	bhi.n	8002f78 <UART_SetConfig+0xec>
 8002f40:	a201      	add	r2, pc, #4	@ (adr r2, 8002f48 <UART_SetConfig+0xbc>)
 8002f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f46:	bf00      	nop
 8002f48:	08002f59 	.word	0x08002f59
 8002f4c:	08002f69 	.word	0x08002f69
 8002f50:	08002f61 	.word	0x08002f61
 8002f54:	08002f71 	.word	0x08002f71
 8002f58:	2301      	movs	r3, #1
 8002f5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f5e:	e080      	b.n	8003062 <UART_SetConfig+0x1d6>
 8002f60:	2302      	movs	r3, #2
 8002f62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f66:	e07c      	b.n	8003062 <UART_SetConfig+0x1d6>
 8002f68:	2304      	movs	r3, #4
 8002f6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f6e:	e078      	b.n	8003062 <UART_SetConfig+0x1d6>
 8002f70:	2308      	movs	r3, #8
 8002f72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f76:	e074      	b.n	8003062 <UART_SetConfig+0x1d6>
 8002f78:	2310      	movs	r3, #16
 8002f7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f7e:	e070      	b.n	8003062 <UART_SetConfig+0x1d6>
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a64      	ldr	r2, [pc, #400]	@ (8003118 <UART_SetConfig+0x28c>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d138      	bne.n	8002ffc <UART_SetConfig+0x170>
 8002f8a:	200c      	movs	r0, #12
 8002f8c:	f7ff fe86 	bl	8002c9c <LL_RCC_GetUSARTClockSource>
 8002f90:	4603      	mov	r3, r0
 8002f92:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8002f96:	2b0c      	cmp	r3, #12
 8002f98:	d82c      	bhi.n	8002ff4 <UART_SetConfig+0x168>
 8002f9a:	a201      	add	r2, pc, #4	@ (adr r2, 8002fa0 <UART_SetConfig+0x114>)
 8002f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fa0:	08002fd5 	.word	0x08002fd5
 8002fa4:	08002ff5 	.word	0x08002ff5
 8002fa8:	08002ff5 	.word	0x08002ff5
 8002fac:	08002ff5 	.word	0x08002ff5
 8002fb0:	08002fe5 	.word	0x08002fe5
 8002fb4:	08002ff5 	.word	0x08002ff5
 8002fb8:	08002ff5 	.word	0x08002ff5
 8002fbc:	08002ff5 	.word	0x08002ff5
 8002fc0:	08002fdd 	.word	0x08002fdd
 8002fc4:	08002ff5 	.word	0x08002ff5
 8002fc8:	08002ff5 	.word	0x08002ff5
 8002fcc:	08002ff5 	.word	0x08002ff5
 8002fd0:	08002fed 	.word	0x08002fed
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fda:	e042      	b.n	8003062 <UART_SetConfig+0x1d6>
 8002fdc:	2302      	movs	r3, #2
 8002fde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fe2:	e03e      	b.n	8003062 <UART_SetConfig+0x1d6>
 8002fe4:	2304      	movs	r3, #4
 8002fe6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fea:	e03a      	b.n	8003062 <UART_SetConfig+0x1d6>
 8002fec:	2308      	movs	r3, #8
 8002fee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ff2:	e036      	b.n	8003062 <UART_SetConfig+0x1d6>
 8002ff4:	2310      	movs	r3, #16
 8002ff6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ffa:	e032      	b.n	8003062 <UART_SetConfig+0x1d6>
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a43      	ldr	r2, [pc, #268]	@ (8003110 <UART_SetConfig+0x284>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d12a      	bne.n	800305c <UART_SetConfig+0x1d0>
 8003006:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800300a:	f7ff fe59 	bl	8002cc0 <LL_RCC_GetLPUARTClockSource>
 800300e:	4603      	mov	r3, r0
 8003010:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003014:	d01a      	beq.n	800304c <UART_SetConfig+0x1c0>
 8003016:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800301a:	d81b      	bhi.n	8003054 <UART_SetConfig+0x1c8>
 800301c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003020:	d00c      	beq.n	800303c <UART_SetConfig+0x1b0>
 8003022:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003026:	d815      	bhi.n	8003054 <UART_SetConfig+0x1c8>
 8003028:	2b00      	cmp	r3, #0
 800302a:	d003      	beq.n	8003034 <UART_SetConfig+0x1a8>
 800302c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003030:	d008      	beq.n	8003044 <UART_SetConfig+0x1b8>
 8003032:	e00f      	b.n	8003054 <UART_SetConfig+0x1c8>
 8003034:	2300      	movs	r3, #0
 8003036:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800303a:	e012      	b.n	8003062 <UART_SetConfig+0x1d6>
 800303c:	2302      	movs	r3, #2
 800303e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003042:	e00e      	b.n	8003062 <UART_SetConfig+0x1d6>
 8003044:	2304      	movs	r3, #4
 8003046:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800304a:	e00a      	b.n	8003062 <UART_SetConfig+0x1d6>
 800304c:	2308      	movs	r3, #8
 800304e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003052:	e006      	b.n	8003062 <UART_SetConfig+0x1d6>
 8003054:	2310      	movs	r3, #16
 8003056:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800305a:	e002      	b.n	8003062 <UART_SetConfig+0x1d6>
 800305c:	2310      	movs	r3, #16
 800305e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a2a      	ldr	r2, [pc, #168]	@ (8003110 <UART_SetConfig+0x284>)
 8003068:	4293      	cmp	r3, r2
 800306a:	f040 80a4 	bne.w	80031b6 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800306e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003072:	2b08      	cmp	r3, #8
 8003074:	d823      	bhi.n	80030be <UART_SetConfig+0x232>
 8003076:	a201      	add	r2, pc, #4	@ (adr r2, 800307c <UART_SetConfig+0x1f0>)
 8003078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800307c:	080030a1 	.word	0x080030a1
 8003080:	080030bf 	.word	0x080030bf
 8003084:	080030a9 	.word	0x080030a9
 8003088:	080030bf 	.word	0x080030bf
 800308c:	080030af 	.word	0x080030af
 8003090:	080030bf 	.word	0x080030bf
 8003094:	080030bf 	.word	0x080030bf
 8003098:	080030bf 	.word	0x080030bf
 800309c:	080030b7 	.word	0x080030b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030a0:	f7ff fb18 	bl	80026d4 <HAL_RCC_GetPCLK1Freq>
 80030a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80030a6:	e010      	b.n	80030ca <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030a8:	4b1c      	ldr	r3, [pc, #112]	@ (800311c <UART_SetConfig+0x290>)
 80030aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80030ac:	e00d      	b.n	80030ca <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030ae:	f7ff fa5d 	bl	800256c <HAL_RCC_GetSysClockFreq>
 80030b2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80030b4:	e009      	b.n	80030ca <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80030bc:	e005      	b.n	80030ca <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80030be:	2300      	movs	r3, #0
 80030c0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80030c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80030ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f000 8137 	beq.w	8003340 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d6:	4a12      	ldr	r2, [pc, #72]	@ (8003120 <UART_SetConfig+0x294>)
 80030d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030dc:	461a      	mov	r2, r3
 80030de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80030e4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	685a      	ldr	r2, [r3, #4]
 80030ea:	4613      	mov	r3, r2
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	4413      	add	r3, r2
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d305      	bcc.n	8003102 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d910      	bls.n	8003124 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003108:	e11a      	b.n	8003340 <UART_SetConfig+0x4b4>
 800310a:	bf00      	nop
 800310c:	cfff69f3 	.word	0xcfff69f3
 8003110:	40008000 	.word	0x40008000
 8003114:	40013800 	.word	0x40013800
 8003118:	40004400 	.word	0x40004400
 800311c:	00f42400 	.word	0x00f42400
 8003120:	08004a58 	.word	0x08004a58
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003126:	2200      	movs	r2, #0
 8003128:	60bb      	str	r3, [r7, #8]
 800312a:	60fa      	str	r2, [r7, #12]
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003130:	4a8e      	ldr	r2, [pc, #568]	@ (800336c <UART_SetConfig+0x4e0>)
 8003132:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003136:	b29b      	uxth	r3, r3
 8003138:	2200      	movs	r2, #0
 800313a:	603b      	str	r3, [r7, #0]
 800313c:	607a      	str	r2, [r7, #4]
 800313e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003142:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003146:	f7fd f86b 	bl	8000220 <__aeabi_uldivmod>
 800314a:	4602      	mov	r2, r0
 800314c:	460b      	mov	r3, r1
 800314e:	4610      	mov	r0, r2
 8003150:	4619      	mov	r1, r3
 8003152:	f04f 0200 	mov.w	r2, #0
 8003156:	f04f 0300 	mov.w	r3, #0
 800315a:	020b      	lsls	r3, r1, #8
 800315c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003160:	0202      	lsls	r2, r0, #8
 8003162:	6979      	ldr	r1, [r7, #20]
 8003164:	6849      	ldr	r1, [r1, #4]
 8003166:	0849      	lsrs	r1, r1, #1
 8003168:	2000      	movs	r0, #0
 800316a:	460c      	mov	r4, r1
 800316c:	4605      	mov	r5, r0
 800316e:	eb12 0804 	adds.w	r8, r2, r4
 8003172:	eb43 0905 	adc.w	r9, r3, r5
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	469a      	mov	sl, r3
 800317e:	4693      	mov	fp, r2
 8003180:	4652      	mov	r2, sl
 8003182:	465b      	mov	r3, fp
 8003184:	4640      	mov	r0, r8
 8003186:	4649      	mov	r1, r9
 8003188:	f7fd f84a 	bl	8000220 <__aeabi_uldivmod>
 800318c:	4602      	mov	r2, r0
 800318e:	460b      	mov	r3, r1
 8003190:	4613      	mov	r3, r2
 8003192:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003194:	6a3b      	ldr	r3, [r7, #32]
 8003196:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800319a:	d308      	bcc.n	80031ae <UART_SetConfig+0x322>
 800319c:	6a3b      	ldr	r3, [r7, #32]
 800319e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80031a2:	d204      	bcs.n	80031ae <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	6a3a      	ldr	r2, [r7, #32]
 80031aa:	60da      	str	r2, [r3, #12]
 80031ac:	e0c8      	b.n	8003340 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80031b4:	e0c4      	b.n	8003340 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	69db      	ldr	r3, [r3, #28]
 80031ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031be:	d167      	bne.n	8003290 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 80031c0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80031c4:	2b08      	cmp	r3, #8
 80031c6:	d828      	bhi.n	800321a <UART_SetConfig+0x38e>
 80031c8:	a201      	add	r2, pc, #4	@ (adr r2, 80031d0 <UART_SetConfig+0x344>)
 80031ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ce:	bf00      	nop
 80031d0:	080031f5 	.word	0x080031f5
 80031d4:	080031fd 	.word	0x080031fd
 80031d8:	08003205 	.word	0x08003205
 80031dc:	0800321b 	.word	0x0800321b
 80031e0:	0800320b 	.word	0x0800320b
 80031e4:	0800321b 	.word	0x0800321b
 80031e8:	0800321b 	.word	0x0800321b
 80031ec:	0800321b 	.word	0x0800321b
 80031f0:	08003213 	.word	0x08003213
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031f4:	f7ff fa6e 	bl	80026d4 <HAL_RCC_GetPCLK1Freq>
 80031f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80031fa:	e014      	b.n	8003226 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031fc:	f7ff fa7c 	bl	80026f8 <HAL_RCC_GetPCLK2Freq>
 8003200:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003202:	e010      	b.n	8003226 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003204:	4b5a      	ldr	r3, [pc, #360]	@ (8003370 <UART_SetConfig+0x4e4>)
 8003206:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003208:	e00d      	b.n	8003226 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800320a:	f7ff f9af 	bl	800256c <HAL_RCC_GetSysClockFreq>
 800320e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003210:	e009      	b.n	8003226 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003212:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003216:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003218:	e005      	b.n	8003226 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800321a:	2300      	movs	r3, #0
 800321c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003224:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003228:	2b00      	cmp	r3, #0
 800322a:	f000 8089 	beq.w	8003340 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003232:	4a4e      	ldr	r2, [pc, #312]	@ (800336c <UART_SetConfig+0x4e0>)
 8003234:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003238:	461a      	mov	r2, r3
 800323a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800323c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003240:	005a      	lsls	r2, r3, #1
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	085b      	lsrs	r3, r3, #1
 8003248:	441a      	add	r2, r3
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003252:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003254:	6a3b      	ldr	r3, [r7, #32]
 8003256:	2b0f      	cmp	r3, #15
 8003258:	d916      	bls.n	8003288 <UART_SetConfig+0x3fc>
 800325a:	6a3b      	ldr	r3, [r7, #32]
 800325c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003260:	d212      	bcs.n	8003288 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003262:	6a3b      	ldr	r3, [r7, #32]
 8003264:	b29b      	uxth	r3, r3
 8003266:	f023 030f 	bic.w	r3, r3, #15
 800326a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800326c:	6a3b      	ldr	r3, [r7, #32]
 800326e:	085b      	lsrs	r3, r3, #1
 8003270:	b29b      	uxth	r3, r3
 8003272:	f003 0307 	and.w	r3, r3, #7
 8003276:	b29a      	uxth	r2, r3
 8003278:	8bfb      	ldrh	r3, [r7, #30]
 800327a:	4313      	orrs	r3, r2
 800327c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	8bfa      	ldrh	r2, [r7, #30]
 8003284:	60da      	str	r2, [r3, #12]
 8003286:	e05b      	b.n	8003340 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800328e:	e057      	b.n	8003340 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003290:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003294:	2b08      	cmp	r3, #8
 8003296:	d828      	bhi.n	80032ea <UART_SetConfig+0x45e>
 8003298:	a201      	add	r2, pc, #4	@ (adr r2, 80032a0 <UART_SetConfig+0x414>)
 800329a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800329e:	bf00      	nop
 80032a0:	080032c5 	.word	0x080032c5
 80032a4:	080032cd 	.word	0x080032cd
 80032a8:	080032d5 	.word	0x080032d5
 80032ac:	080032eb 	.word	0x080032eb
 80032b0:	080032db 	.word	0x080032db
 80032b4:	080032eb 	.word	0x080032eb
 80032b8:	080032eb 	.word	0x080032eb
 80032bc:	080032eb 	.word	0x080032eb
 80032c0:	080032e3 	.word	0x080032e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032c4:	f7ff fa06 	bl	80026d4 <HAL_RCC_GetPCLK1Freq>
 80032c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80032ca:	e014      	b.n	80032f6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032cc:	f7ff fa14 	bl	80026f8 <HAL_RCC_GetPCLK2Freq>
 80032d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80032d2:	e010      	b.n	80032f6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032d4:	4b26      	ldr	r3, [pc, #152]	@ (8003370 <UART_SetConfig+0x4e4>)
 80032d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80032d8:	e00d      	b.n	80032f6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032da:	f7ff f947 	bl	800256c <HAL_RCC_GetSysClockFreq>
 80032de:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80032e0:	e009      	b.n	80032f6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80032e8:	e005      	b.n	80032f6 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 80032ea:	2300      	movs	r3, #0
 80032ec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80032f4:	bf00      	nop
    }

    if (pclk != 0U)
 80032f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d021      	beq.n	8003340 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003300:	4a1a      	ldr	r2, [pc, #104]	@ (800336c <UART_SetConfig+0x4e0>)
 8003302:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003306:	461a      	mov	r2, r3
 8003308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800330a:	fbb3 f2f2 	udiv	r2, r3, r2
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	085b      	lsrs	r3, r3, #1
 8003314:	441a      	add	r2, r3
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	fbb2 f3f3 	udiv	r3, r2, r3
 800331e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003320:	6a3b      	ldr	r3, [r7, #32]
 8003322:	2b0f      	cmp	r3, #15
 8003324:	d909      	bls.n	800333a <UART_SetConfig+0x4ae>
 8003326:	6a3b      	ldr	r3, [r7, #32]
 8003328:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800332c:	d205      	bcs.n	800333a <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800332e:	6a3b      	ldr	r3, [r7, #32]
 8003330:	b29a      	uxth	r2, r3
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	60da      	str	r2, [r3, #12]
 8003338:	e002      	b.n	8003340 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	2201      	movs	r2, #1
 8003344:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	2201      	movs	r2, #1
 800334c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	2200      	movs	r2, #0
 8003354:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	2200      	movs	r2, #0
 800335a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800335c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003360:	4618      	mov	r0, r3
 8003362:	3730      	adds	r7, #48	@ 0x30
 8003364:	46bd      	mov	sp, r7
 8003366:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800336a:	bf00      	nop
 800336c:	08004a58 	.word	0x08004a58
 8003370:	00f42400 	.word	0x00f42400

08003374 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003380:	f003 0308 	and.w	r3, r3, #8
 8003384:	2b00      	cmp	r3, #0
 8003386:	d00a      	beq.n	800339e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	430a      	orrs	r2, r1
 800339c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00a      	beq.n	80033c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	430a      	orrs	r2, r1
 80033be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033c4:	f003 0302 	and.w	r3, r3, #2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d00a      	beq.n	80033e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	430a      	orrs	r2, r1
 80033e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e6:	f003 0304 	and.w	r3, r3, #4
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00a      	beq.n	8003404 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	430a      	orrs	r2, r1
 8003402:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003408:	f003 0310 	and.w	r3, r3, #16
 800340c:	2b00      	cmp	r3, #0
 800340e:	d00a      	beq.n	8003426 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	430a      	orrs	r2, r1
 8003424:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800342a:	f003 0320 	and.w	r3, r3, #32
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00a      	beq.n	8003448 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	430a      	orrs	r2, r1
 8003446:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800344c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003450:	2b00      	cmp	r3, #0
 8003452:	d01a      	beq.n	800348a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	430a      	orrs	r2, r1
 8003468:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800346e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003472:	d10a      	bne.n	800348a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	430a      	orrs	r2, r1
 8003488:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800348e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00a      	beq.n	80034ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	430a      	orrs	r2, r1
 80034aa:	605a      	str	r2, [r3, #4]
  }
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bc80      	pop	{r7}
 80034b4:	4770      	bx	lr

080034b6 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b086      	sub	sp, #24
 80034ba:	af02      	add	r7, sp, #8
 80034bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034c6:	f7fd fd45 	bl	8000f54 <HAL_GetTick>
 80034ca:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0308 	and.w	r3, r3, #8
 80034d6:	2b08      	cmp	r3, #8
 80034d8:	d10e      	bne.n	80034f8 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034da:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80034de:	9300      	str	r3, [sp, #0]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f000 f832 	bl	8003552 <UART_WaitOnFlagUntilTimeout>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d001      	beq.n	80034f8 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e028      	b.n	800354a <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0304 	and.w	r3, r3, #4
 8003502:	2b04      	cmp	r3, #4
 8003504:	d10e      	bne.n	8003524 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003506:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800350a:	9300      	str	r3, [sp, #0]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2200      	movs	r2, #0
 8003510:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f000 f81c 	bl	8003552 <UART_WaitOnFlagUntilTimeout>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d001      	beq.n	8003524 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e012      	b.n	800354a <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2220      	movs	r2, #32
 8003528:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2220      	movs	r2, #32
 8003530:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3710      	adds	r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}

08003552 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003552:	b580      	push	{r7, lr}
 8003554:	b09c      	sub	sp, #112	@ 0x70
 8003556:	af00      	add	r7, sp, #0
 8003558:	60f8      	str	r0, [r7, #12]
 800355a:	60b9      	str	r1, [r7, #8]
 800355c:	603b      	str	r3, [r7, #0]
 800355e:	4613      	mov	r3, r2
 8003560:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003562:	e0af      	b.n	80036c4 <UART_WaitOnFlagUntilTimeout+0x172>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003564:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800356a:	f000 80ab 	beq.w	80036c4 <UART_WaitOnFlagUntilTimeout+0x172>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800356e:	f7fd fcf1 	bl	8000f54 <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800357a:	429a      	cmp	r2, r3
 800357c:	d302      	bcc.n	8003584 <UART_WaitOnFlagUntilTimeout+0x32>
 800357e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003580:	2b00      	cmp	r3, #0
 8003582:	d140      	bne.n	8003606 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800358a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800358c:	e853 3f00 	ldrex	r3, [r3]
 8003590:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003592:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003594:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003598:	667b      	str	r3, [r7, #100]	@ 0x64
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	461a      	mov	r2, r3
 80035a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80035a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80035a4:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80035a8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80035aa:	e841 2300 	strex	r3, r2, [r1]
 80035ae:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80035b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1e6      	bne.n	8003584 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	3308      	adds	r3, #8
 80035bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035c0:	e853 3f00 	ldrex	r3, [r3]
 80035c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80035c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035c8:	f023 0301 	bic.w	r3, r3, #1
 80035cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	3308      	adds	r3, #8
 80035d4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80035d6:	64ba      	str	r2, [r7, #72]	@ 0x48
 80035d8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035da:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80035dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80035de:	e841 2300 	strex	r3, r2, [r1]
 80035e2:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80035e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1e5      	bne.n	80035b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2220      	movs	r2, #32
 80035ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2220      	movs	r2, #32
 80035f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e06f      	b.n	80036e6 <UART_WaitOnFlagUntilTimeout+0x194>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0304 	and.w	r3, r3, #4
 8003610:	2b00      	cmp	r3, #0
 8003612:	d057      	beq.n	80036c4 <UART_WaitOnFlagUntilTimeout+0x172>
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	2b80      	cmp	r3, #128	@ 0x80
 8003618:	d054      	beq.n	80036c4 <UART_WaitOnFlagUntilTimeout+0x172>
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	2b40      	cmp	r3, #64	@ 0x40
 800361e:	d051      	beq.n	80036c4 <UART_WaitOnFlagUntilTimeout+0x172>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800362a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800362e:	d149      	bne.n	80036c4 <UART_WaitOnFlagUntilTimeout+0x172>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003638:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003642:	e853 3f00 	ldrex	r3, [r3]
 8003646:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800364a:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800364e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	461a      	mov	r2, r3
 8003656:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003658:	637b      	str	r3, [r7, #52]	@ 0x34
 800365a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800365c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800365e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003660:	e841 2300 	strex	r3, r2, [r1]
 8003664:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003668:	2b00      	cmp	r3, #0
 800366a:	d1e6      	bne.n	800363a <UART_WaitOnFlagUntilTimeout+0xe8>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	3308      	adds	r3, #8
 8003672:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	e853 3f00 	ldrex	r3, [r3]
 800367a:	613b      	str	r3, [r7, #16]
   return(result);
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	f023 0301 	bic.w	r3, r3, #1
 8003682:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	3308      	adds	r3, #8
 800368a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800368c:	623a      	str	r2, [r7, #32]
 800368e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003690:	69f9      	ldr	r1, [r7, #28]
 8003692:	6a3a      	ldr	r2, [r7, #32]
 8003694:	e841 2300 	strex	r3, r2, [r1]
 8003698:	61bb      	str	r3, [r7, #24]
   return(result);
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1e5      	bne.n	800366c <UART_WaitOnFlagUntilTimeout+0x11a>

          huart->gState = HAL_UART_STATE_READY;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2220      	movs	r2, #32
 80036a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2220      	movs	r2, #32
 80036ac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2220      	movs	r2, #32
 80036b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e010      	b.n	80036e6 <UART_WaitOnFlagUntilTimeout+0x194>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	69da      	ldr	r2, [r3, #28]
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	4013      	ands	r3, r2
 80036ce:	68ba      	ldr	r2, [r7, #8]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	bf0c      	ite	eq
 80036d4:	2301      	moveq	r3, #1
 80036d6:	2300      	movne	r3, #0
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	461a      	mov	r2, r3
 80036dc:	79fb      	ldrb	r3, [r7, #7]
 80036de:	429a      	cmp	r2, r3
 80036e0:	f43f af40 	beq.w	8003564 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3770      	adds	r7, #112	@ 0x70
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80036ee:	b480      	push	{r7}
 80036f0:	b085      	sub	sp, #20
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d101      	bne.n	8003704 <HAL_UARTEx_DisableFifoMode+0x16>
 8003700:	2302      	movs	r3, #2
 8003702:	e027      	b.n	8003754 <HAL_UARTEx_DisableFifoMode+0x66>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2224      	movs	r2, #36	@ 0x24
 8003710:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 0201 	bic.w	r2, r2, #1
 800372a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8003732:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2220      	movs	r2, #32
 8003746:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003752:	2300      	movs	r3, #0
}
 8003754:	4618      	mov	r0, r3
 8003756:	3714      	adds	r7, #20
 8003758:	46bd      	mov	sp, r7
 800375a:	bc80      	pop	{r7}
 800375c:	4770      	bx	lr

0800375e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800375e:	b580      	push	{r7, lr}
 8003760:	b084      	sub	sp, #16
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
 8003766:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800376e:	2b01      	cmp	r3, #1
 8003770:	d101      	bne.n	8003776 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003772:	2302      	movs	r3, #2
 8003774:	e02d      	b.n	80037d2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2224      	movs	r2, #36	@ 0x24
 8003782:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f022 0201 	bic.w	r2, r2, #1
 800379c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	430a      	orrs	r2, r1
 80037b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 f850 	bl	8003858 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2220      	movs	r2, #32
 80037c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3710      	adds	r7, #16
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}

080037da <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80037da:	b580      	push	{r7, lr}
 80037dc:	b084      	sub	sp, #16
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
 80037e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d101      	bne.n	80037f2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80037ee:	2302      	movs	r3, #2
 80037f0:	e02d      	b.n	800384e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2224      	movs	r2, #36	@ 0x24
 80037fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f022 0201 	bic.w	r2, r2, #1
 8003818:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	683a      	ldr	r2, [r7, #0]
 800382a:	430a      	orrs	r2, r1
 800382c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 f812 	bl	8003858 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2220      	movs	r2, #32
 8003840:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3710      	adds	r7, #16
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
	...

08003858 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003858:	b480      	push	{r7}
 800385a:	b085      	sub	sp, #20
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003864:	2b00      	cmp	r3, #0
 8003866:	d108      	bne.n	800387a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003878:	e031      	b.n	80038de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800387a:	2308      	movs	r3, #8
 800387c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800387e:	2308      	movs	r3, #8
 8003880:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	0e5b      	lsrs	r3, r3, #25
 800388a:	b2db      	uxtb	r3, r3
 800388c:	f003 0307 	and.w	r3, r3, #7
 8003890:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	0f5b      	lsrs	r3, r3, #29
 800389a:	b2db      	uxtb	r3, r3
 800389c:	f003 0307 	and.w	r3, r3, #7
 80038a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038a2:	7bbb      	ldrb	r3, [r7, #14]
 80038a4:	7b3a      	ldrb	r2, [r7, #12]
 80038a6:	4910      	ldr	r1, [pc, #64]	@ (80038e8 <UARTEx_SetNbDataToProcess+0x90>)
 80038a8:	5c8a      	ldrb	r2, [r1, r2]
 80038aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80038ae:	7b3a      	ldrb	r2, [r7, #12]
 80038b0:	490e      	ldr	r1, [pc, #56]	@ (80038ec <UARTEx_SetNbDataToProcess+0x94>)
 80038b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80038b8:	b29a      	uxth	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038c0:	7bfb      	ldrb	r3, [r7, #15]
 80038c2:	7b7a      	ldrb	r2, [r7, #13]
 80038c4:	4908      	ldr	r1, [pc, #32]	@ (80038e8 <UARTEx_SetNbDataToProcess+0x90>)
 80038c6:	5c8a      	ldrb	r2, [r1, r2]
 80038c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80038cc:	7b7a      	ldrb	r2, [r7, #13]
 80038ce:	4907      	ldr	r1, [pc, #28]	@ (80038ec <UARTEx_SetNbDataToProcess+0x94>)
 80038d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038d2:	fb93 f3f2 	sdiv	r3, r3, r2
 80038d6:	b29a      	uxth	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80038de:	bf00      	nop
 80038e0:	3714      	adds	r7, #20
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bc80      	pop	{r7}
 80038e6:	4770      	bx	lr
 80038e8:	08004a70 	.word	0x08004a70
 80038ec:	08004a78 	.word	0x08004a78

080038f0 <std>:
 80038f0:	2300      	movs	r3, #0
 80038f2:	b510      	push	{r4, lr}
 80038f4:	4604      	mov	r4, r0
 80038f6:	e9c0 3300 	strd	r3, r3, [r0]
 80038fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80038fe:	6083      	str	r3, [r0, #8]
 8003900:	8181      	strh	r1, [r0, #12]
 8003902:	6643      	str	r3, [r0, #100]	@ 0x64
 8003904:	81c2      	strh	r2, [r0, #14]
 8003906:	6183      	str	r3, [r0, #24]
 8003908:	4619      	mov	r1, r3
 800390a:	2208      	movs	r2, #8
 800390c:	305c      	adds	r0, #92	@ 0x5c
 800390e:	f000 f9f9 	bl	8003d04 <memset>
 8003912:	4b0d      	ldr	r3, [pc, #52]	@ (8003948 <std+0x58>)
 8003914:	6263      	str	r3, [r4, #36]	@ 0x24
 8003916:	4b0d      	ldr	r3, [pc, #52]	@ (800394c <std+0x5c>)
 8003918:	62a3      	str	r3, [r4, #40]	@ 0x28
 800391a:	4b0d      	ldr	r3, [pc, #52]	@ (8003950 <std+0x60>)
 800391c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800391e:	4b0d      	ldr	r3, [pc, #52]	@ (8003954 <std+0x64>)
 8003920:	6323      	str	r3, [r4, #48]	@ 0x30
 8003922:	4b0d      	ldr	r3, [pc, #52]	@ (8003958 <std+0x68>)
 8003924:	6224      	str	r4, [r4, #32]
 8003926:	429c      	cmp	r4, r3
 8003928:	d006      	beq.n	8003938 <std+0x48>
 800392a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800392e:	4294      	cmp	r4, r2
 8003930:	d002      	beq.n	8003938 <std+0x48>
 8003932:	33d0      	adds	r3, #208	@ 0xd0
 8003934:	429c      	cmp	r4, r3
 8003936:	d105      	bne.n	8003944 <std+0x54>
 8003938:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800393c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003940:	f000 ba58 	b.w	8003df4 <__retarget_lock_init_recursive>
 8003944:	bd10      	pop	{r4, pc}
 8003946:	bf00      	nop
 8003948:	08003b55 	.word	0x08003b55
 800394c:	08003b77 	.word	0x08003b77
 8003950:	08003baf 	.word	0x08003baf
 8003954:	08003bd3 	.word	0x08003bd3
 8003958:	20000120 	.word	0x20000120

0800395c <stdio_exit_handler>:
 800395c:	4a02      	ldr	r2, [pc, #8]	@ (8003968 <stdio_exit_handler+0xc>)
 800395e:	4903      	ldr	r1, [pc, #12]	@ (800396c <stdio_exit_handler+0x10>)
 8003960:	4803      	ldr	r0, [pc, #12]	@ (8003970 <stdio_exit_handler+0x14>)
 8003962:	f000 b869 	b.w	8003a38 <_fwalk_sglue>
 8003966:	bf00      	nop
 8003968:	2000000c 	.word	0x2000000c
 800396c:	08004685 	.word	0x08004685
 8003970:	2000001c 	.word	0x2000001c

08003974 <cleanup_stdio>:
 8003974:	6841      	ldr	r1, [r0, #4]
 8003976:	4b0c      	ldr	r3, [pc, #48]	@ (80039a8 <cleanup_stdio+0x34>)
 8003978:	4299      	cmp	r1, r3
 800397a:	b510      	push	{r4, lr}
 800397c:	4604      	mov	r4, r0
 800397e:	d001      	beq.n	8003984 <cleanup_stdio+0x10>
 8003980:	f000 fe80 	bl	8004684 <_fflush_r>
 8003984:	68a1      	ldr	r1, [r4, #8]
 8003986:	4b09      	ldr	r3, [pc, #36]	@ (80039ac <cleanup_stdio+0x38>)
 8003988:	4299      	cmp	r1, r3
 800398a:	d002      	beq.n	8003992 <cleanup_stdio+0x1e>
 800398c:	4620      	mov	r0, r4
 800398e:	f000 fe79 	bl	8004684 <_fflush_r>
 8003992:	68e1      	ldr	r1, [r4, #12]
 8003994:	4b06      	ldr	r3, [pc, #24]	@ (80039b0 <cleanup_stdio+0x3c>)
 8003996:	4299      	cmp	r1, r3
 8003998:	d004      	beq.n	80039a4 <cleanup_stdio+0x30>
 800399a:	4620      	mov	r0, r4
 800399c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039a0:	f000 be70 	b.w	8004684 <_fflush_r>
 80039a4:	bd10      	pop	{r4, pc}
 80039a6:	bf00      	nop
 80039a8:	20000120 	.word	0x20000120
 80039ac:	20000188 	.word	0x20000188
 80039b0:	200001f0 	.word	0x200001f0

080039b4 <global_stdio_init.part.0>:
 80039b4:	b510      	push	{r4, lr}
 80039b6:	4b0b      	ldr	r3, [pc, #44]	@ (80039e4 <global_stdio_init.part.0+0x30>)
 80039b8:	4c0b      	ldr	r4, [pc, #44]	@ (80039e8 <global_stdio_init.part.0+0x34>)
 80039ba:	4a0c      	ldr	r2, [pc, #48]	@ (80039ec <global_stdio_init.part.0+0x38>)
 80039bc:	601a      	str	r2, [r3, #0]
 80039be:	4620      	mov	r0, r4
 80039c0:	2200      	movs	r2, #0
 80039c2:	2104      	movs	r1, #4
 80039c4:	f7ff ff94 	bl	80038f0 <std>
 80039c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80039cc:	2201      	movs	r2, #1
 80039ce:	2109      	movs	r1, #9
 80039d0:	f7ff ff8e 	bl	80038f0 <std>
 80039d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80039d8:	2202      	movs	r2, #2
 80039da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039de:	2112      	movs	r1, #18
 80039e0:	f7ff bf86 	b.w	80038f0 <std>
 80039e4:	20000258 	.word	0x20000258
 80039e8:	20000120 	.word	0x20000120
 80039ec:	0800395d 	.word	0x0800395d

080039f0 <__sfp_lock_acquire>:
 80039f0:	4801      	ldr	r0, [pc, #4]	@ (80039f8 <__sfp_lock_acquire+0x8>)
 80039f2:	f000 ba00 	b.w	8003df6 <__retarget_lock_acquire_recursive>
 80039f6:	bf00      	nop
 80039f8:	20000261 	.word	0x20000261

080039fc <__sfp_lock_release>:
 80039fc:	4801      	ldr	r0, [pc, #4]	@ (8003a04 <__sfp_lock_release+0x8>)
 80039fe:	f000 b9fb 	b.w	8003df8 <__retarget_lock_release_recursive>
 8003a02:	bf00      	nop
 8003a04:	20000261 	.word	0x20000261

08003a08 <__sinit>:
 8003a08:	b510      	push	{r4, lr}
 8003a0a:	4604      	mov	r4, r0
 8003a0c:	f7ff fff0 	bl	80039f0 <__sfp_lock_acquire>
 8003a10:	6a23      	ldr	r3, [r4, #32]
 8003a12:	b11b      	cbz	r3, 8003a1c <__sinit+0x14>
 8003a14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a18:	f7ff bff0 	b.w	80039fc <__sfp_lock_release>
 8003a1c:	4b04      	ldr	r3, [pc, #16]	@ (8003a30 <__sinit+0x28>)
 8003a1e:	6223      	str	r3, [r4, #32]
 8003a20:	4b04      	ldr	r3, [pc, #16]	@ (8003a34 <__sinit+0x2c>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1f5      	bne.n	8003a14 <__sinit+0xc>
 8003a28:	f7ff ffc4 	bl	80039b4 <global_stdio_init.part.0>
 8003a2c:	e7f2      	b.n	8003a14 <__sinit+0xc>
 8003a2e:	bf00      	nop
 8003a30:	08003975 	.word	0x08003975
 8003a34:	20000258 	.word	0x20000258

08003a38 <_fwalk_sglue>:
 8003a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a3c:	4607      	mov	r7, r0
 8003a3e:	4688      	mov	r8, r1
 8003a40:	4614      	mov	r4, r2
 8003a42:	2600      	movs	r6, #0
 8003a44:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003a48:	f1b9 0901 	subs.w	r9, r9, #1
 8003a4c:	d505      	bpl.n	8003a5a <_fwalk_sglue+0x22>
 8003a4e:	6824      	ldr	r4, [r4, #0]
 8003a50:	2c00      	cmp	r4, #0
 8003a52:	d1f7      	bne.n	8003a44 <_fwalk_sglue+0xc>
 8003a54:	4630      	mov	r0, r6
 8003a56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a5a:	89ab      	ldrh	r3, [r5, #12]
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d907      	bls.n	8003a70 <_fwalk_sglue+0x38>
 8003a60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003a64:	3301      	adds	r3, #1
 8003a66:	d003      	beq.n	8003a70 <_fwalk_sglue+0x38>
 8003a68:	4629      	mov	r1, r5
 8003a6a:	4638      	mov	r0, r7
 8003a6c:	47c0      	blx	r8
 8003a6e:	4306      	orrs	r6, r0
 8003a70:	3568      	adds	r5, #104	@ 0x68
 8003a72:	e7e9      	b.n	8003a48 <_fwalk_sglue+0x10>

08003a74 <iprintf>:
 8003a74:	b40f      	push	{r0, r1, r2, r3}
 8003a76:	b507      	push	{r0, r1, r2, lr}
 8003a78:	4906      	ldr	r1, [pc, #24]	@ (8003a94 <iprintf+0x20>)
 8003a7a:	ab04      	add	r3, sp, #16
 8003a7c:	6808      	ldr	r0, [r1, #0]
 8003a7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a82:	6881      	ldr	r1, [r0, #8]
 8003a84:	9301      	str	r3, [sp, #4]
 8003a86:	f000 fad9 	bl	800403c <_vfiprintf_r>
 8003a8a:	b003      	add	sp, #12
 8003a8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a90:	b004      	add	sp, #16
 8003a92:	4770      	bx	lr
 8003a94:	20000018 	.word	0x20000018

08003a98 <_puts_r>:
 8003a98:	6a03      	ldr	r3, [r0, #32]
 8003a9a:	b570      	push	{r4, r5, r6, lr}
 8003a9c:	6884      	ldr	r4, [r0, #8]
 8003a9e:	4605      	mov	r5, r0
 8003aa0:	460e      	mov	r6, r1
 8003aa2:	b90b      	cbnz	r3, 8003aa8 <_puts_r+0x10>
 8003aa4:	f7ff ffb0 	bl	8003a08 <__sinit>
 8003aa8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003aaa:	07db      	lsls	r3, r3, #31
 8003aac:	d405      	bmi.n	8003aba <_puts_r+0x22>
 8003aae:	89a3      	ldrh	r3, [r4, #12]
 8003ab0:	0598      	lsls	r0, r3, #22
 8003ab2:	d402      	bmi.n	8003aba <_puts_r+0x22>
 8003ab4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003ab6:	f000 f99e 	bl	8003df6 <__retarget_lock_acquire_recursive>
 8003aba:	89a3      	ldrh	r3, [r4, #12]
 8003abc:	0719      	lsls	r1, r3, #28
 8003abe:	d502      	bpl.n	8003ac6 <_puts_r+0x2e>
 8003ac0:	6923      	ldr	r3, [r4, #16]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d135      	bne.n	8003b32 <_puts_r+0x9a>
 8003ac6:	4621      	mov	r1, r4
 8003ac8:	4628      	mov	r0, r5
 8003aca:	f000 f8c5 	bl	8003c58 <__swsetup_r>
 8003ace:	b380      	cbz	r0, 8003b32 <_puts_r+0x9a>
 8003ad0:	f04f 35ff 	mov.w	r5, #4294967295
 8003ad4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003ad6:	07da      	lsls	r2, r3, #31
 8003ad8:	d405      	bmi.n	8003ae6 <_puts_r+0x4e>
 8003ada:	89a3      	ldrh	r3, [r4, #12]
 8003adc:	059b      	lsls	r3, r3, #22
 8003ade:	d402      	bmi.n	8003ae6 <_puts_r+0x4e>
 8003ae0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003ae2:	f000 f989 	bl	8003df8 <__retarget_lock_release_recursive>
 8003ae6:	4628      	mov	r0, r5
 8003ae8:	bd70      	pop	{r4, r5, r6, pc}
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	da04      	bge.n	8003af8 <_puts_r+0x60>
 8003aee:	69a2      	ldr	r2, [r4, #24]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	dc17      	bgt.n	8003b24 <_puts_r+0x8c>
 8003af4:	290a      	cmp	r1, #10
 8003af6:	d015      	beq.n	8003b24 <_puts_r+0x8c>
 8003af8:	6823      	ldr	r3, [r4, #0]
 8003afa:	1c5a      	adds	r2, r3, #1
 8003afc:	6022      	str	r2, [r4, #0]
 8003afe:	7019      	strb	r1, [r3, #0]
 8003b00:	68a3      	ldr	r3, [r4, #8]
 8003b02:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003b06:	3b01      	subs	r3, #1
 8003b08:	60a3      	str	r3, [r4, #8]
 8003b0a:	2900      	cmp	r1, #0
 8003b0c:	d1ed      	bne.n	8003aea <_puts_r+0x52>
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	da11      	bge.n	8003b36 <_puts_r+0x9e>
 8003b12:	4622      	mov	r2, r4
 8003b14:	210a      	movs	r1, #10
 8003b16:	4628      	mov	r0, r5
 8003b18:	f000 f85f 	bl	8003bda <__swbuf_r>
 8003b1c:	3001      	adds	r0, #1
 8003b1e:	d0d7      	beq.n	8003ad0 <_puts_r+0x38>
 8003b20:	250a      	movs	r5, #10
 8003b22:	e7d7      	b.n	8003ad4 <_puts_r+0x3c>
 8003b24:	4622      	mov	r2, r4
 8003b26:	4628      	mov	r0, r5
 8003b28:	f000 f857 	bl	8003bda <__swbuf_r>
 8003b2c:	3001      	adds	r0, #1
 8003b2e:	d1e7      	bne.n	8003b00 <_puts_r+0x68>
 8003b30:	e7ce      	b.n	8003ad0 <_puts_r+0x38>
 8003b32:	3e01      	subs	r6, #1
 8003b34:	e7e4      	b.n	8003b00 <_puts_r+0x68>
 8003b36:	6823      	ldr	r3, [r4, #0]
 8003b38:	1c5a      	adds	r2, r3, #1
 8003b3a:	6022      	str	r2, [r4, #0]
 8003b3c:	220a      	movs	r2, #10
 8003b3e:	701a      	strb	r2, [r3, #0]
 8003b40:	e7ee      	b.n	8003b20 <_puts_r+0x88>
	...

08003b44 <puts>:
 8003b44:	4b02      	ldr	r3, [pc, #8]	@ (8003b50 <puts+0xc>)
 8003b46:	4601      	mov	r1, r0
 8003b48:	6818      	ldr	r0, [r3, #0]
 8003b4a:	f7ff bfa5 	b.w	8003a98 <_puts_r>
 8003b4e:	bf00      	nop
 8003b50:	20000018 	.word	0x20000018

08003b54 <__sread>:
 8003b54:	b510      	push	{r4, lr}
 8003b56:	460c      	mov	r4, r1
 8003b58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b5c:	f000 f8fc 	bl	8003d58 <_read_r>
 8003b60:	2800      	cmp	r0, #0
 8003b62:	bfab      	itete	ge
 8003b64:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003b66:	89a3      	ldrhlt	r3, [r4, #12]
 8003b68:	181b      	addge	r3, r3, r0
 8003b6a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003b6e:	bfac      	ite	ge
 8003b70:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003b72:	81a3      	strhlt	r3, [r4, #12]
 8003b74:	bd10      	pop	{r4, pc}

08003b76 <__swrite>:
 8003b76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b7a:	461f      	mov	r7, r3
 8003b7c:	898b      	ldrh	r3, [r1, #12]
 8003b7e:	05db      	lsls	r3, r3, #23
 8003b80:	4605      	mov	r5, r0
 8003b82:	460c      	mov	r4, r1
 8003b84:	4616      	mov	r6, r2
 8003b86:	d505      	bpl.n	8003b94 <__swrite+0x1e>
 8003b88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f000 f8d0 	bl	8003d34 <_lseek_r>
 8003b94:	89a3      	ldrh	r3, [r4, #12]
 8003b96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b9a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003b9e:	81a3      	strh	r3, [r4, #12]
 8003ba0:	4632      	mov	r2, r6
 8003ba2:	463b      	mov	r3, r7
 8003ba4:	4628      	mov	r0, r5
 8003ba6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003baa:	f000 b8e7 	b.w	8003d7c <_write_r>

08003bae <__sseek>:
 8003bae:	b510      	push	{r4, lr}
 8003bb0:	460c      	mov	r4, r1
 8003bb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bb6:	f000 f8bd 	bl	8003d34 <_lseek_r>
 8003bba:	1c43      	adds	r3, r0, #1
 8003bbc:	89a3      	ldrh	r3, [r4, #12]
 8003bbe:	bf15      	itete	ne
 8003bc0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003bc2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003bc6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003bca:	81a3      	strheq	r3, [r4, #12]
 8003bcc:	bf18      	it	ne
 8003bce:	81a3      	strhne	r3, [r4, #12]
 8003bd0:	bd10      	pop	{r4, pc}

08003bd2 <__sclose>:
 8003bd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bd6:	f000 b89d 	b.w	8003d14 <_close_r>

08003bda <__swbuf_r>:
 8003bda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bdc:	460e      	mov	r6, r1
 8003bde:	4614      	mov	r4, r2
 8003be0:	4605      	mov	r5, r0
 8003be2:	b118      	cbz	r0, 8003bec <__swbuf_r+0x12>
 8003be4:	6a03      	ldr	r3, [r0, #32]
 8003be6:	b90b      	cbnz	r3, 8003bec <__swbuf_r+0x12>
 8003be8:	f7ff ff0e 	bl	8003a08 <__sinit>
 8003bec:	69a3      	ldr	r3, [r4, #24]
 8003bee:	60a3      	str	r3, [r4, #8]
 8003bf0:	89a3      	ldrh	r3, [r4, #12]
 8003bf2:	071a      	lsls	r2, r3, #28
 8003bf4:	d501      	bpl.n	8003bfa <__swbuf_r+0x20>
 8003bf6:	6923      	ldr	r3, [r4, #16]
 8003bf8:	b943      	cbnz	r3, 8003c0c <__swbuf_r+0x32>
 8003bfa:	4621      	mov	r1, r4
 8003bfc:	4628      	mov	r0, r5
 8003bfe:	f000 f82b 	bl	8003c58 <__swsetup_r>
 8003c02:	b118      	cbz	r0, 8003c0c <__swbuf_r+0x32>
 8003c04:	f04f 37ff 	mov.w	r7, #4294967295
 8003c08:	4638      	mov	r0, r7
 8003c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c0c:	6823      	ldr	r3, [r4, #0]
 8003c0e:	6922      	ldr	r2, [r4, #16]
 8003c10:	1a98      	subs	r0, r3, r2
 8003c12:	6963      	ldr	r3, [r4, #20]
 8003c14:	b2f6      	uxtb	r6, r6
 8003c16:	4283      	cmp	r3, r0
 8003c18:	4637      	mov	r7, r6
 8003c1a:	dc05      	bgt.n	8003c28 <__swbuf_r+0x4e>
 8003c1c:	4621      	mov	r1, r4
 8003c1e:	4628      	mov	r0, r5
 8003c20:	f000 fd30 	bl	8004684 <_fflush_r>
 8003c24:	2800      	cmp	r0, #0
 8003c26:	d1ed      	bne.n	8003c04 <__swbuf_r+0x2a>
 8003c28:	68a3      	ldr	r3, [r4, #8]
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	60a3      	str	r3, [r4, #8]
 8003c2e:	6823      	ldr	r3, [r4, #0]
 8003c30:	1c5a      	adds	r2, r3, #1
 8003c32:	6022      	str	r2, [r4, #0]
 8003c34:	701e      	strb	r6, [r3, #0]
 8003c36:	6962      	ldr	r2, [r4, #20]
 8003c38:	1c43      	adds	r3, r0, #1
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d004      	beq.n	8003c48 <__swbuf_r+0x6e>
 8003c3e:	89a3      	ldrh	r3, [r4, #12]
 8003c40:	07db      	lsls	r3, r3, #31
 8003c42:	d5e1      	bpl.n	8003c08 <__swbuf_r+0x2e>
 8003c44:	2e0a      	cmp	r6, #10
 8003c46:	d1df      	bne.n	8003c08 <__swbuf_r+0x2e>
 8003c48:	4621      	mov	r1, r4
 8003c4a:	4628      	mov	r0, r5
 8003c4c:	f000 fd1a 	bl	8004684 <_fflush_r>
 8003c50:	2800      	cmp	r0, #0
 8003c52:	d0d9      	beq.n	8003c08 <__swbuf_r+0x2e>
 8003c54:	e7d6      	b.n	8003c04 <__swbuf_r+0x2a>
	...

08003c58 <__swsetup_r>:
 8003c58:	b538      	push	{r3, r4, r5, lr}
 8003c5a:	4b29      	ldr	r3, [pc, #164]	@ (8003d00 <__swsetup_r+0xa8>)
 8003c5c:	4605      	mov	r5, r0
 8003c5e:	6818      	ldr	r0, [r3, #0]
 8003c60:	460c      	mov	r4, r1
 8003c62:	b118      	cbz	r0, 8003c6c <__swsetup_r+0x14>
 8003c64:	6a03      	ldr	r3, [r0, #32]
 8003c66:	b90b      	cbnz	r3, 8003c6c <__swsetup_r+0x14>
 8003c68:	f7ff fece 	bl	8003a08 <__sinit>
 8003c6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c70:	0719      	lsls	r1, r3, #28
 8003c72:	d422      	bmi.n	8003cba <__swsetup_r+0x62>
 8003c74:	06da      	lsls	r2, r3, #27
 8003c76:	d407      	bmi.n	8003c88 <__swsetup_r+0x30>
 8003c78:	2209      	movs	r2, #9
 8003c7a:	602a      	str	r2, [r5, #0]
 8003c7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c80:	81a3      	strh	r3, [r4, #12]
 8003c82:	f04f 30ff 	mov.w	r0, #4294967295
 8003c86:	e033      	b.n	8003cf0 <__swsetup_r+0x98>
 8003c88:	0758      	lsls	r0, r3, #29
 8003c8a:	d512      	bpl.n	8003cb2 <__swsetup_r+0x5a>
 8003c8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003c8e:	b141      	cbz	r1, 8003ca2 <__swsetup_r+0x4a>
 8003c90:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003c94:	4299      	cmp	r1, r3
 8003c96:	d002      	beq.n	8003c9e <__swsetup_r+0x46>
 8003c98:	4628      	mov	r0, r5
 8003c9a:	f000 f8af 	bl	8003dfc <_free_r>
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	6363      	str	r3, [r4, #52]	@ 0x34
 8003ca2:	89a3      	ldrh	r3, [r4, #12]
 8003ca4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003ca8:	81a3      	strh	r3, [r4, #12]
 8003caa:	2300      	movs	r3, #0
 8003cac:	6063      	str	r3, [r4, #4]
 8003cae:	6923      	ldr	r3, [r4, #16]
 8003cb0:	6023      	str	r3, [r4, #0]
 8003cb2:	89a3      	ldrh	r3, [r4, #12]
 8003cb4:	f043 0308 	orr.w	r3, r3, #8
 8003cb8:	81a3      	strh	r3, [r4, #12]
 8003cba:	6923      	ldr	r3, [r4, #16]
 8003cbc:	b94b      	cbnz	r3, 8003cd2 <__swsetup_r+0x7a>
 8003cbe:	89a3      	ldrh	r3, [r4, #12]
 8003cc0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003cc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cc8:	d003      	beq.n	8003cd2 <__swsetup_r+0x7a>
 8003cca:	4621      	mov	r1, r4
 8003ccc:	4628      	mov	r0, r5
 8003cce:	f000 fd27 	bl	8004720 <__smakebuf_r>
 8003cd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cd6:	f013 0201 	ands.w	r2, r3, #1
 8003cda:	d00a      	beq.n	8003cf2 <__swsetup_r+0x9a>
 8003cdc:	2200      	movs	r2, #0
 8003cde:	60a2      	str	r2, [r4, #8]
 8003ce0:	6962      	ldr	r2, [r4, #20]
 8003ce2:	4252      	negs	r2, r2
 8003ce4:	61a2      	str	r2, [r4, #24]
 8003ce6:	6922      	ldr	r2, [r4, #16]
 8003ce8:	b942      	cbnz	r2, 8003cfc <__swsetup_r+0xa4>
 8003cea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003cee:	d1c5      	bne.n	8003c7c <__swsetup_r+0x24>
 8003cf0:	bd38      	pop	{r3, r4, r5, pc}
 8003cf2:	0799      	lsls	r1, r3, #30
 8003cf4:	bf58      	it	pl
 8003cf6:	6962      	ldrpl	r2, [r4, #20]
 8003cf8:	60a2      	str	r2, [r4, #8]
 8003cfa:	e7f4      	b.n	8003ce6 <__swsetup_r+0x8e>
 8003cfc:	2000      	movs	r0, #0
 8003cfe:	e7f7      	b.n	8003cf0 <__swsetup_r+0x98>
 8003d00:	20000018 	.word	0x20000018

08003d04 <memset>:
 8003d04:	4402      	add	r2, r0
 8003d06:	4603      	mov	r3, r0
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d100      	bne.n	8003d0e <memset+0xa>
 8003d0c:	4770      	bx	lr
 8003d0e:	f803 1b01 	strb.w	r1, [r3], #1
 8003d12:	e7f9      	b.n	8003d08 <memset+0x4>

08003d14 <_close_r>:
 8003d14:	b538      	push	{r3, r4, r5, lr}
 8003d16:	4d06      	ldr	r5, [pc, #24]	@ (8003d30 <_close_r+0x1c>)
 8003d18:	2300      	movs	r3, #0
 8003d1a:	4604      	mov	r4, r0
 8003d1c:	4608      	mov	r0, r1
 8003d1e:	602b      	str	r3, [r5, #0]
 8003d20:	f7fd f815 	bl	8000d4e <_close>
 8003d24:	1c43      	adds	r3, r0, #1
 8003d26:	d102      	bne.n	8003d2e <_close_r+0x1a>
 8003d28:	682b      	ldr	r3, [r5, #0]
 8003d2a:	b103      	cbz	r3, 8003d2e <_close_r+0x1a>
 8003d2c:	6023      	str	r3, [r4, #0]
 8003d2e:	bd38      	pop	{r3, r4, r5, pc}
 8003d30:	2000025c 	.word	0x2000025c

08003d34 <_lseek_r>:
 8003d34:	b538      	push	{r3, r4, r5, lr}
 8003d36:	4d07      	ldr	r5, [pc, #28]	@ (8003d54 <_lseek_r+0x20>)
 8003d38:	4604      	mov	r4, r0
 8003d3a:	4608      	mov	r0, r1
 8003d3c:	4611      	mov	r1, r2
 8003d3e:	2200      	movs	r2, #0
 8003d40:	602a      	str	r2, [r5, #0]
 8003d42:	461a      	mov	r2, r3
 8003d44:	f7fd f827 	bl	8000d96 <_lseek>
 8003d48:	1c43      	adds	r3, r0, #1
 8003d4a:	d102      	bne.n	8003d52 <_lseek_r+0x1e>
 8003d4c:	682b      	ldr	r3, [r5, #0]
 8003d4e:	b103      	cbz	r3, 8003d52 <_lseek_r+0x1e>
 8003d50:	6023      	str	r3, [r4, #0]
 8003d52:	bd38      	pop	{r3, r4, r5, pc}
 8003d54:	2000025c 	.word	0x2000025c

08003d58 <_read_r>:
 8003d58:	b538      	push	{r3, r4, r5, lr}
 8003d5a:	4d07      	ldr	r5, [pc, #28]	@ (8003d78 <_read_r+0x20>)
 8003d5c:	4604      	mov	r4, r0
 8003d5e:	4608      	mov	r0, r1
 8003d60:	4611      	mov	r1, r2
 8003d62:	2200      	movs	r2, #0
 8003d64:	602a      	str	r2, [r5, #0]
 8003d66:	461a      	mov	r2, r3
 8003d68:	f7fc ffb8 	bl	8000cdc <_read>
 8003d6c:	1c43      	adds	r3, r0, #1
 8003d6e:	d102      	bne.n	8003d76 <_read_r+0x1e>
 8003d70:	682b      	ldr	r3, [r5, #0]
 8003d72:	b103      	cbz	r3, 8003d76 <_read_r+0x1e>
 8003d74:	6023      	str	r3, [r4, #0]
 8003d76:	bd38      	pop	{r3, r4, r5, pc}
 8003d78:	2000025c 	.word	0x2000025c

08003d7c <_write_r>:
 8003d7c:	b538      	push	{r3, r4, r5, lr}
 8003d7e:	4d07      	ldr	r5, [pc, #28]	@ (8003d9c <_write_r+0x20>)
 8003d80:	4604      	mov	r4, r0
 8003d82:	4608      	mov	r0, r1
 8003d84:	4611      	mov	r1, r2
 8003d86:	2200      	movs	r2, #0
 8003d88:	602a      	str	r2, [r5, #0]
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	f7fc ffc3 	bl	8000d16 <_write>
 8003d90:	1c43      	adds	r3, r0, #1
 8003d92:	d102      	bne.n	8003d9a <_write_r+0x1e>
 8003d94:	682b      	ldr	r3, [r5, #0]
 8003d96:	b103      	cbz	r3, 8003d9a <_write_r+0x1e>
 8003d98:	6023      	str	r3, [r4, #0]
 8003d9a:	bd38      	pop	{r3, r4, r5, pc}
 8003d9c:	2000025c 	.word	0x2000025c

08003da0 <__errno>:
 8003da0:	4b01      	ldr	r3, [pc, #4]	@ (8003da8 <__errno+0x8>)
 8003da2:	6818      	ldr	r0, [r3, #0]
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	20000018 	.word	0x20000018

08003dac <__libc_init_array>:
 8003dac:	b570      	push	{r4, r5, r6, lr}
 8003dae:	4d0d      	ldr	r5, [pc, #52]	@ (8003de4 <__libc_init_array+0x38>)
 8003db0:	4c0d      	ldr	r4, [pc, #52]	@ (8003de8 <__libc_init_array+0x3c>)
 8003db2:	1b64      	subs	r4, r4, r5
 8003db4:	10a4      	asrs	r4, r4, #2
 8003db6:	2600      	movs	r6, #0
 8003db8:	42a6      	cmp	r6, r4
 8003dba:	d109      	bne.n	8003dd0 <__libc_init_array+0x24>
 8003dbc:	4d0b      	ldr	r5, [pc, #44]	@ (8003dec <__libc_init_array+0x40>)
 8003dbe:	4c0c      	ldr	r4, [pc, #48]	@ (8003df0 <__libc_init_array+0x44>)
 8003dc0:	f000 fd1c 	bl	80047fc <_init>
 8003dc4:	1b64      	subs	r4, r4, r5
 8003dc6:	10a4      	asrs	r4, r4, #2
 8003dc8:	2600      	movs	r6, #0
 8003dca:	42a6      	cmp	r6, r4
 8003dcc:	d105      	bne.n	8003dda <__libc_init_array+0x2e>
 8003dce:	bd70      	pop	{r4, r5, r6, pc}
 8003dd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dd4:	4798      	blx	r3
 8003dd6:	3601      	adds	r6, #1
 8003dd8:	e7ee      	b.n	8003db8 <__libc_init_array+0xc>
 8003dda:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dde:	4798      	blx	r3
 8003de0:	3601      	adds	r6, #1
 8003de2:	e7f2      	b.n	8003dca <__libc_init_array+0x1e>
 8003de4:	08004abc 	.word	0x08004abc
 8003de8:	08004abc 	.word	0x08004abc
 8003dec:	08004abc 	.word	0x08004abc
 8003df0:	08004ac0 	.word	0x08004ac0

08003df4 <__retarget_lock_init_recursive>:
 8003df4:	4770      	bx	lr

08003df6 <__retarget_lock_acquire_recursive>:
 8003df6:	4770      	bx	lr

08003df8 <__retarget_lock_release_recursive>:
 8003df8:	4770      	bx	lr
	...

08003dfc <_free_r>:
 8003dfc:	b538      	push	{r3, r4, r5, lr}
 8003dfe:	4605      	mov	r5, r0
 8003e00:	2900      	cmp	r1, #0
 8003e02:	d041      	beq.n	8003e88 <_free_r+0x8c>
 8003e04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e08:	1f0c      	subs	r4, r1, #4
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	bfb8      	it	lt
 8003e0e:	18e4      	addlt	r4, r4, r3
 8003e10:	f000 f8e0 	bl	8003fd4 <__malloc_lock>
 8003e14:	4a1d      	ldr	r2, [pc, #116]	@ (8003e8c <_free_r+0x90>)
 8003e16:	6813      	ldr	r3, [r2, #0]
 8003e18:	b933      	cbnz	r3, 8003e28 <_free_r+0x2c>
 8003e1a:	6063      	str	r3, [r4, #4]
 8003e1c:	6014      	str	r4, [r2, #0]
 8003e1e:	4628      	mov	r0, r5
 8003e20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e24:	f000 b8dc 	b.w	8003fe0 <__malloc_unlock>
 8003e28:	42a3      	cmp	r3, r4
 8003e2a:	d908      	bls.n	8003e3e <_free_r+0x42>
 8003e2c:	6820      	ldr	r0, [r4, #0]
 8003e2e:	1821      	adds	r1, r4, r0
 8003e30:	428b      	cmp	r3, r1
 8003e32:	bf01      	itttt	eq
 8003e34:	6819      	ldreq	r1, [r3, #0]
 8003e36:	685b      	ldreq	r3, [r3, #4]
 8003e38:	1809      	addeq	r1, r1, r0
 8003e3a:	6021      	streq	r1, [r4, #0]
 8003e3c:	e7ed      	b.n	8003e1a <_free_r+0x1e>
 8003e3e:	461a      	mov	r2, r3
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	b10b      	cbz	r3, 8003e48 <_free_r+0x4c>
 8003e44:	42a3      	cmp	r3, r4
 8003e46:	d9fa      	bls.n	8003e3e <_free_r+0x42>
 8003e48:	6811      	ldr	r1, [r2, #0]
 8003e4a:	1850      	adds	r0, r2, r1
 8003e4c:	42a0      	cmp	r0, r4
 8003e4e:	d10b      	bne.n	8003e68 <_free_r+0x6c>
 8003e50:	6820      	ldr	r0, [r4, #0]
 8003e52:	4401      	add	r1, r0
 8003e54:	1850      	adds	r0, r2, r1
 8003e56:	4283      	cmp	r3, r0
 8003e58:	6011      	str	r1, [r2, #0]
 8003e5a:	d1e0      	bne.n	8003e1e <_free_r+0x22>
 8003e5c:	6818      	ldr	r0, [r3, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	6053      	str	r3, [r2, #4]
 8003e62:	4408      	add	r0, r1
 8003e64:	6010      	str	r0, [r2, #0]
 8003e66:	e7da      	b.n	8003e1e <_free_r+0x22>
 8003e68:	d902      	bls.n	8003e70 <_free_r+0x74>
 8003e6a:	230c      	movs	r3, #12
 8003e6c:	602b      	str	r3, [r5, #0]
 8003e6e:	e7d6      	b.n	8003e1e <_free_r+0x22>
 8003e70:	6820      	ldr	r0, [r4, #0]
 8003e72:	1821      	adds	r1, r4, r0
 8003e74:	428b      	cmp	r3, r1
 8003e76:	bf04      	itt	eq
 8003e78:	6819      	ldreq	r1, [r3, #0]
 8003e7a:	685b      	ldreq	r3, [r3, #4]
 8003e7c:	6063      	str	r3, [r4, #4]
 8003e7e:	bf04      	itt	eq
 8003e80:	1809      	addeq	r1, r1, r0
 8003e82:	6021      	streq	r1, [r4, #0]
 8003e84:	6054      	str	r4, [r2, #4]
 8003e86:	e7ca      	b.n	8003e1e <_free_r+0x22>
 8003e88:	bd38      	pop	{r3, r4, r5, pc}
 8003e8a:	bf00      	nop
 8003e8c:	20000268 	.word	0x20000268

08003e90 <sbrk_aligned>:
 8003e90:	b570      	push	{r4, r5, r6, lr}
 8003e92:	4e0f      	ldr	r6, [pc, #60]	@ (8003ed0 <sbrk_aligned+0x40>)
 8003e94:	460c      	mov	r4, r1
 8003e96:	6831      	ldr	r1, [r6, #0]
 8003e98:	4605      	mov	r5, r0
 8003e9a:	b911      	cbnz	r1, 8003ea2 <sbrk_aligned+0x12>
 8003e9c:	f000 fc9e 	bl	80047dc <_sbrk_r>
 8003ea0:	6030      	str	r0, [r6, #0]
 8003ea2:	4621      	mov	r1, r4
 8003ea4:	4628      	mov	r0, r5
 8003ea6:	f000 fc99 	bl	80047dc <_sbrk_r>
 8003eaa:	1c43      	adds	r3, r0, #1
 8003eac:	d103      	bne.n	8003eb6 <sbrk_aligned+0x26>
 8003eae:	f04f 34ff 	mov.w	r4, #4294967295
 8003eb2:	4620      	mov	r0, r4
 8003eb4:	bd70      	pop	{r4, r5, r6, pc}
 8003eb6:	1cc4      	adds	r4, r0, #3
 8003eb8:	f024 0403 	bic.w	r4, r4, #3
 8003ebc:	42a0      	cmp	r0, r4
 8003ebe:	d0f8      	beq.n	8003eb2 <sbrk_aligned+0x22>
 8003ec0:	1a21      	subs	r1, r4, r0
 8003ec2:	4628      	mov	r0, r5
 8003ec4:	f000 fc8a 	bl	80047dc <_sbrk_r>
 8003ec8:	3001      	adds	r0, #1
 8003eca:	d1f2      	bne.n	8003eb2 <sbrk_aligned+0x22>
 8003ecc:	e7ef      	b.n	8003eae <sbrk_aligned+0x1e>
 8003ece:	bf00      	nop
 8003ed0:	20000264 	.word	0x20000264

08003ed4 <_malloc_r>:
 8003ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ed8:	1ccd      	adds	r5, r1, #3
 8003eda:	f025 0503 	bic.w	r5, r5, #3
 8003ede:	3508      	adds	r5, #8
 8003ee0:	2d0c      	cmp	r5, #12
 8003ee2:	bf38      	it	cc
 8003ee4:	250c      	movcc	r5, #12
 8003ee6:	2d00      	cmp	r5, #0
 8003ee8:	4606      	mov	r6, r0
 8003eea:	db01      	blt.n	8003ef0 <_malloc_r+0x1c>
 8003eec:	42a9      	cmp	r1, r5
 8003eee:	d904      	bls.n	8003efa <_malloc_r+0x26>
 8003ef0:	230c      	movs	r3, #12
 8003ef2:	6033      	str	r3, [r6, #0]
 8003ef4:	2000      	movs	r0, #0
 8003ef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003efa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003fd0 <_malloc_r+0xfc>
 8003efe:	f000 f869 	bl	8003fd4 <__malloc_lock>
 8003f02:	f8d8 3000 	ldr.w	r3, [r8]
 8003f06:	461c      	mov	r4, r3
 8003f08:	bb44      	cbnz	r4, 8003f5c <_malloc_r+0x88>
 8003f0a:	4629      	mov	r1, r5
 8003f0c:	4630      	mov	r0, r6
 8003f0e:	f7ff ffbf 	bl	8003e90 <sbrk_aligned>
 8003f12:	1c43      	adds	r3, r0, #1
 8003f14:	4604      	mov	r4, r0
 8003f16:	d158      	bne.n	8003fca <_malloc_r+0xf6>
 8003f18:	f8d8 4000 	ldr.w	r4, [r8]
 8003f1c:	4627      	mov	r7, r4
 8003f1e:	2f00      	cmp	r7, #0
 8003f20:	d143      	bne.n	8003faa <_malloc_r+0xd6>
 8003f22:	2c00      	cmp	r4, #0
 8003f24:	d04b      	beq.n	8003fbe <_malloc_r+0xea>
 8003f26:	6823      	ldr	r3, [r4, #0]
 8003f28:	4639      	mov	r1, r7
 8003f2a:	4630      	mov	r0, r6
 8003f2c:	eb04 0903 	add.w	r9, r4, r3
 8003f30:	f000 fc54 	bl	80047dc <_sbrk_r>
 8003f34:	4581      	cmp	r9, r0
 8003f36:	d142      	bne.n	8003fbe <_malloc_r+0xea>
 8003f38:	6821      	ldr	r1, [r4, #0]
 8003f3a:	1a6d      	subs	r5, r5, r1
 8003f3c:	4629      	mov	r1, r5
 8003f3e:	4630      	mov	r0, r6
 8003f40:	f7ff ffa6 	bl	8003e90 <sbrk_aligned>
 8003f44:	3001      	adds	r0, #1
 8003f46:	d03a      	beq.n	8003fbe <_malloc_r+0xea>
 8003f48:	6823      	ldr	r3, [r4, #0]
 8003f4a:	442b      	add	r3, r5
 8003f4c:	6023      	str	r3, [r4, #0]
 8003f4e:	f8d8 3000 	ldr.w	r3, [r8]
 8003f52:	685a      	ldr	r2, [r3, #4]
 8003f54:	bb62      	cbnz	r2, 8003fb0 <_malloc_r+0xdc>
 8003f56:	f8c8 7000 	str.w	r7, [r8]
 8003f5a:	e00f      	b.n	8003f7c <_malloc_r+0xa8>
 8003f5c:	6822      	ldr	r2, [r4, #0]
 8003f5e:	1b52      	subs	r2, r2, r5
 8003f60:	d420      	bmi.n	8003fa4 <_malloc_r+0xd0>
 8003f62:	2a0b      	cmp	r2, #11
 8003f64:	d917      	bls.n	8003f96 <_malloc_r+0xc2>
 8003f66:	1961      	adds	r1, r4, r5
 8003f68:	42a3      	cmp	r3, r4
 8003f6a:	6025      	str	r5, [r4, #0]
 8003f6c:	bf18      	it	ne
 8003f6e:	6059      	strne	r1, [r3, #4]
 8003f70:	6863      	ldr	r3, [r4, #4]
 8003f72:	bf08      	it	eq
 8003f74:	f8c8 1000 	streq.w	r1, [r8]
 8003f78:	5162      	str	r2, [r4, r5]
 8003f7a:	604b      	str	r3, [r1, #4]
 8003f7c:	4630      	mov	r0, r6
 8003f7e:	f000 f82f 	bl	8003fe0 <__malloc_unlock>
 8003f82:	f104 000b 	add.w	r0, r4, #11
 8003f86:	1d23      	adds	r3, r4, #4
 8003f88:	f020 0007 	bic.w	r0, r0, #7
 8003f8c:	1ac2      	subs	r2, r0, r3
 8003f8e:	bf1c      	itt	ne
 8003f90:	1a1b      	subne	r3, r3, r0
 8003f92:	50a3      	strne	r3, [r4, r2]
 8003f94:	e7af      	b.n	8003ef6 <_malloc_r+0x22>
 8003f96:	6862      	ldr	r2, [r4, #4]
 8003f98:	42a3      	cmp	r3, r4
 8003f9a:	bf0c      	ite	eq
 8003f9c:	f8c8 2000 	streq.w	r2, [r8]
 8003fa0:	605a      	strne	r2, [r3, #4]
 8003fa2:	e7eb      	b.n	8003f7c <_malloc_r+0xa8>
 8003fa4:	4623      	mov	r3, r4
 8003fa6:	6864      	ldr	r4, [r4, #4]
 8003fa8:	e7ae      	b.n	8003f08 <_malloc_r+0x34>
 8003faa:	463c      	mov	r4, r7
 8003fac:	687f      	ldr	r7, [r7, #4]
 8003fae:	e7b6      	b.n	8003f1e <_malloc_r+0x4a>
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	42a3      	cmp	r3, r4
 8003fb6:	d1fb      	bne.n	8003fb0 <_malloc_r+0xdc>
 8003fb8:	2300      	movs	r3, #0
 8003fba:	6053      	str	r3, [r2, #4]
 8003fbc:	e7de      	b.n	8003f7c <_malloc_r+0xa8>
 8003fbe:	230c      	movs	r3, #12
 8003fc0:	6033      	str	r3, [r6, #0]
 8003fc2:	4630      	mov	r0, r6
 8003fc4:	f000 f80c 	bl	8003fe0 <__malloc_unlock>
 8003fc8:	e794      	b.n	8003ef4 <_malloc_r+0x20>
 8003fca:	6005      	str	r5, [r0, #0]
 8003fcc:	e7d6      	b.n	8003f7c <_malloc_r+0xa8>
 8003fce:	bf00      	nop
 8003fd0:	20000268 	.word	0x20000268

08003fd4 <__malloc_lock>:
 8003fd4:	4801      	ldr	r0, [pc, #4]	@ (8003fdc <__malloc_lock+0x8>)
 8003fd6:	f7ff bf0e 	b.w	8003df6 <__retarget_lock_acquire_recursive>
 8003fda:	bf00      	nop
 8003fdc:	20000260 	.word	0x20000260

08003fe0 <__malloc_unlock>:
 8003fe0:	4801      	ldr	r0, [pc, #4]	@ (8003fe8 <__malloc_unlock+0x8>)
 8003fe2:	f7ff bf09 	b.w	8003df8 <__retarget_lock_release_recursive>
 8003fe6:	bf00      	nop
 8003fe8:	20000260 	.word	0x20000260

08003fec <__sfputc_r>:
 8003fec:	6893      	ldr	r3, [r2, #8]
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	b410      	push	{r4}
 8003ff4:	6093      	str	r3, [r2, #8]
 8003ff6:	da07      	bge.n	8004008 <__sfputc_r+0x1c>
 8003ff8:	6994      	ldr	r4, [r2, #24]
 8003ffa:	42a3      	cmp	r3, r4
 8003ffc:	db01      	blt.n	8004002 <__sfputc_r+0x16>
 8003ffe:	290a      	cmp	r1, #10
 8004000:	d102      	bne.n	8004008 <__sfputc_r+0x1c>
 8004002:	bc10      	pop	{r4}
 8004004:	f7ff bde9 	b.w	8003bda <__swbuf_r>
 8004008:	6813      	ldr	r3, [r2, #0]
 800400a:	1c58      	adds	r0, r3, #1
 800400c:	6010      	str	r0, [r2, #0]
 800400e:	7019      	strb	r1, [r3, #0]
 8004010:	4608      	mov	r0, r1
 8004012:	bc10      	pop	{r4}
 8004014:	4770      	bx	lr

08004016 <__sfputs_r>:
 8004016:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004018:	4606      	mov	r6, r0
 800401a:	460f      	mov	r7, r1
 800401c:	4614      	mov	r4, r2
 800401e:	18d5      	adds	r5, r2, r3
 8004020:	42ac      	cmp	r4, r5
 8004022:	d101      	bne.n	8004028 <__sfputs_r+0x12>
 8004024:	2000      	movs	r0, #0
 8004026:	e007      	b.n	8004038 <__sfputs_r+0x22>
 8004028:	f814 1b01 	ldrb.w	r1, [r4], #1
 800402c:	463a      	mov	r2, r7
 800402e:	4630      	mov	r0, r6
 8004030:	f7ff ffdc 	bl	8003fec <__sfputc_r>
 8004034:	1c43      	adds	r3, r0, #1
 8004036:	d1f3      	bne.n	8004020 <__sfputs_r+0xa>
 8004038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800403c <_vfiprintf_r>:
 800403c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004040:	460d      	mov	r5, r1
 8004042:	b09d      	sub	sp, #116	@ 0x74
 8004044:	4614      	mov	r4, r2
 8004046:	4698      	mov	r8, r3
 8004048:	4606      	mov	r6, r0
 800404a:	b118      	cbz	r0, 8004054 <_vfiprintf_r+0x18>
 800404c:	6a03      	ldr	r3, [r0, #32]
 800404e:	b90b      	cbnz	r3, 8004054 <_vfiprintf_r+0x18>
 8004050:	f7ff fcda 	bl	8003a08 <__sinit>
 8004054:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004056:	07d9      	lsls	r1, r3, #31
 8004058:	d405      	bmi.n	8004066 <_vfiprintf_r+0x2a>
 800405a:	89ab      	ldrh	r3, [r5, #12]
 800405c:	059a      	lsls	r2, r3, #22
 800405e:	d402      	bmi.n	8004066 <_vfiprintf_r+0x2a>
 8004060:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004062:	f7ff fec8 	bl	8003df6 <__retarget_lock_acquire_recursive>
 8004066:	89ab      	ldrh	r3, [r5, #12]
 8004068:	071b      	lsls	r3, r3, #28
 800406a:	d501      	bpl.n	8004070 <_vfiprintf_r+0x34>
 800406c:	692b      	ldr	r3, [r5, #16]
 800406e:	b99b      	cbnz	r3, 8004098 <_vfiprintf_r+0x5c>
 8004070:	4629      	mov	r1, r5
 8004072:	4630      	mov	r0, r6
 8004074:	f7ff fdf0 	bl	8003c58 <__swsetup_r>
 8004078:	b170      	cbz	r0, 8004098 <_vfiprintf_r+0x5c>
 800407a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800407c:	07dc      	lsls	r4, r3, #31
 800407e:	d504      	bpl.n	800408a <_vfiprintf_r+0x4e>
 8004080:	f04f 30ff 	mov.w	r0, #4294967295
 8004084:	b01d      	add	sp, #116	@ 0x74
 8004086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800408a:	89ab      	ldrh	r3, [r5, #12]
 800408c:	0598      	lsls	r0, r3, #22
 800408e:	d4f7      	bmi.n	8004080 <_vfiprintf_r+0x44>
 8004090:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004092:	f7ff feb1 	bl	8003df8 <__retarget_lock_release_recursive>
 8004096:	e7f3      	b.n	8004080 <_vfiprintf_r+0x44>
 8004098:	2300      	movs	r3, #0
 800409a:	9309      	str	r3, [sp, #36]	@ 0x24
 800409c:	2320      	movs	r3, #32
 800409e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80040a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80040a6:	2330      	movs	r3, #48	@ 0x30
 80040a8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004258 <_vfiprintf_r+0x21c>
 80040ac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80040b0:	f04f 0901 	mov.w	r9, #1
 80040b4:	4623      	mov	r3, r4
 80040b6:	469a      	mov	sl, r3
 80040b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80040bc:	b10a      	cbz	r2, 80040c2 <_vfiprintf_r+0x86>
 80040be:	2a25      	cmp	r2, #37	@ 0x25
 80040c0:	d1f9      	bne.n	80040b6 <_vfiprintf_r+0x7a>
 80040c2:	ebba 0b04 	subs.w	fp, sl, r4
 80040c6:	d00b      	beq.n	80040e0 <_vfiprintf_r+0xa4>
 80040c8:	465b      	mov	r3, fp
 80040ca:	4622      	mov	r2, r4
 80040cc:	4629      	mov	r1, r5
 80040ce:	4630      	mov	r0, r6
 80040d0:	f7ff ffa1 	bl	8004016 <__sfputs_r>
 80040d4:	3001      	adds	r0, #1
 80040d6:	f000 80a7 	beq.w	8004228 <_vfiprintf_r+0x1ec>
 80040da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80040dc:	445a      	add	r2, fp
 80040de:	9209      	str	r2, [sp, #36]	@ 0x24
 80040e0:	f89a 3000 	ldrb.w	r3, [sl]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	f000 809f 	beq.w	8004228 <_vfiprintf_r+0x1ec>
 80040ea:	2300      	movs	r3, #0
 80040ec:	f04f 32ff 	mov.w	r2, #4294967295
 80040f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80040f4:	f10a 0a01 	add.w	sl, sl, #1
 80040f8:	9304      	str	r3, [sp, #16]
 80040fa:	9307      	str	r3, [sp, #28]
 80040fc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004100:	931a      	str	r3, [sp, #104]	@ 0x68
 8004102:	4654      	mov	r4, sl
 8004104:	2205      	movs	r2, #5
 8004106:	f814 1b01 	ldrb.w	r1, [r4], #1
 800410a:	4853      	ldr	r0, [pc, #332]	@ (8004258 <_vfiprintf_r+0x21c>)
 800410c:	f7fc f838 	bl	8000180 <memchr>
 8004110:	9a04      	ldr	r2, [sp, #16]
 8004112:	b9d8      	cbnz	r0, 800414c <_vfiprintf_r+0x110>
 8004114:	06d1      	lsls	r1, r2, #27
 8004116:	bf44      	itt	mi
 8004118:	2320      	movmi	r3, #32
 800411a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800411e:	0713      	lsls	r3, r2, #28
 8004120:	bf44      	itt	mi
 8004122:	232b      	movmi	r3, #43	@ 0x2b
 8004124:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004128:	f89a 3000 	ldrb.w	r3, [sl]
 800412c:	2b2a      	cmp	r3, #42	@ 0x2a
 800412e:	d015      	beq.n	800415c <_vfiprintf_r+0x120>
 8004130:	9a07      	ldr	r2, [sp, #28]
 8004132:	4654      	mov	r4, sl
 8004134:	2000      	movs	r0, #0
 8004136:	f04f 0c0a 	mov.w	ip, #10
 800413a:	4621      	mov	r1, r4
 800413c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004140:	3b30      	subs	r3, #48	@ 0x30
 8004142:	2b09      	cmp	r3, #9
 8004144:	d94b      	bls.n	80041de <_vfiprintf_r+0x1a2>
 8004146:	b1b0      	cbz	r0, 8004176 <_vfiprintf_r+0x13a>
 8004148:	9207      	str	r2, [sp, #28]
 800414a:	e014      	b.n	8004176 <_vfiprintf_r+0x13a>
 800414c:	eba0 0308 	sub.w	r3, r0, r8
 8004150:	fa09 f303 	lsl.w	r3, r9, r3
 8004154:	4313      	orrs	r3, r2
 8004156:	9304      	str	r3, [sp, #16]
 8004158:	46a2      	mov	sl, r4
 800415a:	e7d2      	b.n	8004102 <_vfiprintf_r+0xc6>
 800415c:	9b03      	ldr	r3, [sp, #12]
 800415e:	1d19      	adds	r1, r3, #4
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	9103      	str	r1, [sp, #12]
 8004164:	2b00      	cmp	r3, #0
 8004166:	bfbb      	ittet	lt
 8004168:	425b      	neglt	r3, r3
 800416a:	f042 0202 	orrlt.w	r2, r2, #2
 800416e:	9307      	strge	r3, [sp, #28]
 8004170:	9307      	strlt	r3, [sp, #28]
 8004172:	bfb8      	it	lt
 8004174:	9204      	strlt	r2, [sp, #16]
 8004176:	7823      	ldrb	r3, [r4, #0]
 8004178:	2b2e      	cmp	r3, #46	@ 0x2e
 800417a:	d10a      	bne.n	8004192 <_vfiprintf_r+0x156>
 800417c:	7863      	ldrb	r3, [r4, #1]
 800417e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004180:	d132      	bne.n	80041e8 <_vfiprintf_r+0x1ac>
 8004182:	9b03      	ldr	r3, [sp, #12]
 8004184:	1d1a      	adds	r2, r3, #4
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	9203      	str	r2, [sp, #12]
 800418a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800418e:	3402      	adds	r4, #2
 8004190:	9305      	str	r3, [sp, #20]
 8004192:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800425c <_vfiprintf_r+0x220>
 8004196:	7821      	ldrb	r1, [r4, #0]
 8004198:	2203      	movs	r2, #3
 800419a:	4650      	mov	r0, sl
 800419c:	f7fb fff0 	bl	8000180 <memchr>
 80041a0:	b138      	cbz	r0, 80041b2 <_vfiprintf_r+0x176>
 80041a2:	9b04      	ldr	r3, [sp, #16]
 80041a4:	eba0 000a 	sub.w	r0, r0, sl
 80041a8:	2240      	movs	r2, #64	@ 0x40
 80041aa:	4082      	lsls	r2, r0
 80041ac:	4313      	orrs	r3, r2
 80041ae:	3401      	adds	r4, #1
 80041b0:	9304      	str	r3, [sp, #16]
 80041b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041b6:	482a      	ldr	r0, [pc, #168]	@ (8004260 <_vfiprintf_r+0x224>)
 80041b8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80041bc:	2206      	movs	r2, #6
 80041be:	f7fb ffdf 	bl	8000180 <memchr>
 80041c2:	2800      	cmp	r0, #0
 80041c4:	d03f      	beq.n	8004246 <_vfiprintf_r+0x20a>
 80041c6:	4b27      	ldr	r3, [pc, #156]	@ (8004264 <_vfiprintf_r+0x228>)
 80041c8:	bb1b      	cbnz	r3, 8004212 <_vfiprintf_r+0x1d6>
 80041ca:	9b03      	ldr	r3, [sp, #12]
 80041cc:	3307      	adds	r3, #7
 80041ce:	f023 0307 	bic.w	r3, r3, #7
 80041d2:	3308      	adds	r3, #8
 80041d4:	9303      	str	r3, [sp, #12]
 80041d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80041d8:	443b      	add	r3, r7
 80041da:	9309      	str	r3, [sp, #36]	@ 0x24
 80041dc:	e76a      	b.n	80040b4 <_vfiprintf_r+0x78>
 80041de:	fb0c 3202 	mla	r2, ip, r2, r3
 80041e2:	460c      	mov	r4, r1
 80041e4:	2001      	movs	r0, #1
 80041e6:	e7a8      	b.n	800413a <_vfiprintf_r+0xfe>
 80041e8:	2300      	movs	r3, #0
 80041ea:	3401      	adds	r4, #1
 80041ec:	9305      	str	r3, [sp, #20]
 80041ee:	4619      	mov	r1, r3
 80041f0:	f04f 0c0a 	mov.w	ip, #10
 80041f4:	4620      	mov	r0, r4
 80041f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80041fa:	3a30      	subs	r2, #48	@ 0x30
 80041fc:	2a09      	cmp	r2, #9
 80041fe:	d903      	bls.n	8004208 <_vfiprintf_r+0x1cc>
 8004200:	2b00      	cmp	r3, #0
 8004202:	d0c6      	beq.n	8004192 <_vfiprintf_r+0x156>
 8004204:	9105      	str	r1, [sp, #20]
 8004206:	e7c4      	b.n	8004192 <_vfiprintf_r+0x156>
 8004208:	fb0c 2101 	mla	r1, ip, r1, r2
 800420c:	4604      	mov	r4, r0
 800420e:	2301      	movs	r3, #1
 8004210:	e7f0      	b.n	80041f4 <_vfiprintf_r+0x1b8>
 8004212:	ab03      	add	r3, sp, #12
 8004214:	9300      	str	r3, [sp, #0]
 8004216:	462a      	mov	r2, r5
 8004218:	4b13      	ldr	r3, [pc, #76]	@ (8004268 <_vfiprintf_r+0x22c>)
 800421a:	a904      	add	r1, sp, #16
 800421c:	4630      	mov	r0, r6
 800421e:	f3af 8000 	nop.w
 8004222:	4607      	mov	r7, r0
 8004224:	1c78      	adds	r0, r7, #1
 8004226:	d1d6      	bne.n	80041d6 <_vfiprintf_r+0x19a>
 8004228:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800422a:	07d9      	lsls	r1, r3, #31
 800422c:	d405      	bmi.n	800423a <_vfiprintf_r+0x1fe>
 800422e:	89ab      	ldrh	r3, [r5, #12]
 8004230:	059a      	lsls	r2, r3, #22
 8004232:	d402      	bmi.n	800423a <_vfiprintf_r+0x1fe>
 8004234:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004236:	f7ff fddf 	bl	8003df8 <__retarget_lock_release_recursive>
 800423a:	89ab      	ldrh	r3, [r5, #12]
 800423c:	065b      	lsls	r3, r3, #25
 800423e:	f53f af1f 	bmi.w	8004080 <_vfiprintf_r+0x44>
 8004242:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004244:	e71e      	b.n	8004084 <_vfiprintf_r+0x48>
 8004246:	ab03      	add	r3, sp, #12
 8004248:	9300      	str	r3, [sp, #0]
 800424a:	462a      	mov	r2, r5
 800424c:	4b06      	ldr	r3, [pc, #24]	@ (8004268 <_vfiprintf_r+0x22c>)
 800424e:	a904      	add	r1, sp, #16
 8004250:	4630      	mov	r0, r6
 8004252:	f000 f879 	bl	8004348 <_printf_i>
 8004256:	e7e4      	b.n	8004222 <_vfiprintf_r+0x1e6>
 8004258:	08004a80 	.word	0x08004a80
 800425c:	08004a86 	.word	0x08004a86
 8004260:	08004a8a 	.word	0x08004a8a
 8004264:	00000000 	.word	0x00000000
 8004268:	08004017 	.word	0x08004017

0800426c <_printf_common>:
 800426c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004270:	4616      	mov	r6, r2
 8004272:	4698      	mov	r8, r3
 8004274:	688a      	ldr	r2, [r1, #8]
 8004276:	690b      	ldr	r3, [r1, #16]
 8004278:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800427c:	4293      	cmp	r3, r2
 800427e:	bfb8      	it	lt
 8004280:	4613      	movlt	r3, r2
 8004282:	6033      	str	r3, [r6, #0]
 8004284:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004288:	4607      	mov	r7, r0
 800428a:	460c      	mov	r4, r1
 800428c:	b10a      	cbz	r2, 8004292 <_printf_common+0x26>
 800428e:	3301      	adds	r3, #1
 8004290:	6033      	str	r3, [r6, #0]
 8004292:	6823      	ldr	r3, [r4, #0]
 8004294:	0699      	lsls	r1, r3, #26
 8004296:	bf42      	ittt	mi
 8004298:	6833      	ldrmi	r3, [r6, #0]
 800429a:	3302      	addmi	r3, #2
 800429c:	6033      	strmi	r3, [r6, #0]
 800429e:	6825      	ldr	r5, [r4, #0]
 80042a0:	f015 0506 	ands.w	r5, r5, #6
 80042a4:	d106      	bne.n	80042b4 <_printf_common+0x48>
 80042a6:	f104 0a19 	add.w	sl, r4, #25
 80042aa:	68e3      	ldr	r3, [r4, #12]
 80042ac:	6832      	ldr	r2, [r6, #0]
 80042ae:	1a9b      	subs	r3, r3, r2
 80042b0:	42ab      	cmp	r3, r5
 80042b2:	dc26      	bgt.n	8004302 <_printf_common+0x96>
 80042b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80042b8:	6822      	ldr	r2, [r4, #0]
 80042ba:	3b00      	subs	r3, #0
 80042bc:	bf18      	it	ne
 80042be:	2301      	movne	r3, #1
 80042c0:	0692      	lsls	r2, r2, #26
 80042c2:	d42b      	bmi.n	800431c <_printf_common+0xb0>
 80042c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80042c8:	4641      	mov	r1, r8
 80042ca:	4638      	mov	r0, r7
 80042cc:	47c8      	blx	r9
 80042ce:	3001      	adds	r0, #1
 80042d0:	d01e      	beq.n	8004310 <_printf_common+0xa4>
 80042d2:	6823      	ldr	r3, [r4, #0]
 80042d4:	6922      	ldr	r2, [r4, #16]
 80042d6:	f003 0306 	and.w	r3, r3, #6
 80042da:	2b04      	cmp	r3, #4
 80042dc:	bf02      	ittt	eq
 80042de:	68e5      	ldreq	r5, [r4, #12]
 80042e0:	6833      	ldreq	r3, [r6, #0]
 80042e2:	1aed      	subeq	r5, r5, r3
 80042e4:	68a3      	ldr	r3, [r4, #8]
 80042e6:	bf0c      	ite	eq
 80042e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042ec:	2500      	movne	r5, #0
 80042ee:	4293      	cmp	r3, r2
 80042f0:	bfc4      	itt	gt
 80042f2:	1a9b      	subgt	r3, r3, r2
 80042f4:	18ed      	addgt	r5, r5, r3
 80042f6:	2600      	movs	r6, #0
 80042f8:	341a      	adds	r4, #26
 80042fa:	42b5      	cmp	r5, r6
 80042fc:	d11a      	bne.n	8004334 <_printf_common+0xc8>
 80042fe:	2000      	movs	r0, #0
 8004300:	e008      	b.n	8004314 <_printf_common+0xa8>
 8004302:	2301      	movs	r3, #1
 8004304:	4652      	mov	r2, sl
 8004306:	4641      	mov	r1, r8
 8004308:	4638      	mov	r0, r7
 800430a:	47c8      	blx	r9
 800430c:	3001      	adds	r0, #1
 800430e:	d103      	bne.n	8004318 <_printf_common+0xac>
 8004310:	f04f 30ff 	mov.w	r0, #4294967295
 8004314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004318:	3501      	adds	r5, #1
 800431a:	e7c6      	b.n	80042aa <_printf_common+0x3e>
 800431c:	18e1      	adds	r1, r4, r3
 800431e:	1c5a      	adds	r2, r3, #1
 8004320:	2030      	movs	r0, #48	@ 0x30
 8004322:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004326:	4422      	add	r2, r4
 8004328:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800432c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004330:	3302      	adds	r3, #2
 8004332:	e7c7      	b.n	80042c4 <_printf_common+0x58>
 8004334:	2301      	movs	r3, #1
 8004336:	4622      	mov	r2, r4
 8004338:	4641      	mov	r1, r8
 800433a:	4638      	mov	r0, r7
 800433c:	47c8      	blx	r9
 800433e:	3001      	adds	r0, #1
 8004340:	d0e6      	beq.n	8004310 <_printf_common+0xa4>
 8004342:	3601      	adds	r6, #1
 8004344:	e7d9      	b.n	80042fa <_printf_common+0x8e>
	...

08004348 <_printf_i>:
 8004348:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800434c:	7e0f      	ldrb	r7, [r1, #24]
 800434e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004350:	2f78      	cmp	r7, #120	@ 0x78
 8004352:	4691      	mov	r9, r2
 8004354:	4680      	mov	r8, r0
 8004356:	460c      	mov	r4, r1
 8004358:	469a      	mov	sl, r3
 800435a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800435e:	d807      	bhi.n	8004370 <_printf_i+0x28>
 8004360:	2f62      	cmp	r7, #98	@ 0x62
 8004362:	d80a      	bhi.n	800437a <_printf_i+0x32>
 8004364:	2f00      	cmp	r7, #0
 8004366:	f000 80d1 	beq.w	800450c <_printf_i+0x1c4>
 800436a:	2f58      	cmp	r7, #88	@ 0x58
 800436c:	f000 80b8 	beq.w	80044e0 <_printf_i+0x198>
 8004370:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004374:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004378:	e03a      	b.n	80043f0 <_printf_i+0xa8>
 800437a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800437e:	2b15      	cmp	r3, #21
 8004380:	d8f6      	bhi.n	8004370 <_printf_i+0x28>
 8004382:	a101      	add	r1, pc, #4	@ (adr r1, 8004388 <_printf_i+0x40>)
 8004384:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004388:	080043e1 	.word	0x080043e1
 800438c:	080043f5 	.word	0x080043f5
 8004390:	08004371 	.word	0x08004371
 8004394:	08004371 	.word	0x08004371
 8004398:	08004371 	.word	0x08004371
 800439c:	08004371 	.word	0x08004371
 80043a0:	080043f5 	.word	0x080043f5
 80043a4:	08004371 	.word	0x08004371
 80043a8:	08004371 	.word	0x08004371
 80043ac:	08004371 	.word	0x08004371
 80043b0:	08004371 	.word	0x08004371
 80043b4:	080044f3 	.word	0x080044f3
 80043b8:	0800441f 	.word	0x0800441f
 80043bc:	080044ad 	.word	0x080044ad
 80043c0:	08004371 	.word	0x08004371
 80043c4:	08004371 	.word	0x08004371
 80043c8:	08004515 	.word	0x08004515
 80043cc:	08004371 	.word	0x08004371
 80043d0:	0800441f 	.word	0x0800441f
 80043d4:	08004371 	.word	0x08004371
 80043d8:	08004371 	.word	0x08004371
 80043dc:	080044b5 	.word	0x080044b5
 80043e0:	6833      	ldr	r3, [r6, #0]
 80043e2:	1d1a      	adds	r2, r3, #4
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	6032      	str	r2, [r6, #0]
 80043e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80043ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80043f0:	2301      	movs	r3, #1
 80043f2:	e09c      	b.n	800452e <_printf_i+0x1e6>
 80043f4:	6833      	ldr	r3, [r6, #0]
 80043f6:	6820      	ldr	r0, [r4, #0]
 80043f8:	1d19      	adds	r1, r3, #4
 80043fa:	6031      	str	r1, [r6, #0]
 80043fc:	0606      	lsls	r6, r0, #24
 80043fe:	d501      	bpl.n	8004404 <_printf_i+0xbc>
 8004400:	681d      	ldr	r5, [r3, #0]
 8004402:	e003      	b.n	800440c <_printf_i+0xc4>
 8004404:	0645      	lsls	r5, r0, #25
 8004406:	d5fb      	bpl.n	8004400 <_printf_i+0xb8>
 8004408:	f9b3 5000 	ldrsh.w	r5, [r3]
 800440c:	2d00      	cmp	r5, #0
 800440e:	da03      	bge.n	8004418 <_printf_i+0xd0>
 8004410:	232d      	movs	r3, #45	@ 0x2d
 8004412:	426d      	negs	r5, r5
 8004414:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004418:	4858      	ldr	r0, [pc, #352]	@ (800457c <_printf_i+0x234>)
 800441a:	230a      	movs	r3, #10
 800441c:	e011      	b.n	8004442 <_printf_i+0xfa>
 800441e:	6821      	ldr	r1, [r4, #0]
 8004420:	6833      	ldr	r3, [r6, #0]
 8004422:	0608      	lsls	r0, r1, #24
 8004424:	f853 5b04 	ldr.w	r5, [r3], #4
 8004428:	d402      	bmi.n	8004430 <_printf_i+0xe8>
 800442a:	0649      	lsls	r1, r1, #25
 800442c:	bf48      	it	mi
 800442e:	b2ad      	uxthmi	r5, r5
 8004430:	2f6f      	cmp	r7, #111	@ 0x6f
 8004432:	4852      	ldr	r0, [pc, #328]	@ (800457c <_printf_i+0x234>)
 8004434:	6033      	str	r3, [r6, #0]
 8004436:	bf14      	ite	ne
 8004438:	230a      	movne	r3, #10
 800443a:	2308      	moveq	r3, #8
 800443c:	2100      	movs	r1, #0
 800443e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004442:	6866      	ldr	r6, [r4, #4]
 8004444:	60a6      	str	r6, [r4, #8]
 8004446:	2e00      	cmp	r6, #0
 8004448:	db05      	blt.n	8004456 <_printf_i+0x10e>
 800444a:	6821      	ldr	r1, [r4, #0]
 800444c:	432e      	orrs	r6, r5
 800444e:	f021 0104 	bic.w	r1, r1, #4
 8004452:	6021      	str	r1, [r4, #0]
 8004454:	d04b      	beq.n	80044ee <_printf_i+0x1a6>
 8004456:	4616      	mov	r6, r2
 8004458:	fbb5 f1f3 	udiv	r1, r5, r3
 800445c:	fb03 5711 	mls	r7, r3, r1, r5
 8004460:	5dc7      	ldrb	r7, [r0, r7]
 8004462:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004466:	462f      	mov	r7, r5
 8004468:	42bb      	cmp	r3, r7
 800446a:	460d      	mov	r5, r1
 800446c:	d9f4      	bls.n	8004458 <_printf_i+0x110>
 800446e:	2b08      	cmp	r3, #8
 8004470:	d10b      	bne.n	800448a <_printf_i+0x142>
 8004472:	6823      	ldr	r3, [r4, #0]
 8004474:	07df      	lsls	r7, r3, #31
 8004476:	d508      	bpl.n	800448a <_printf_i+0x142>
 8004478:	6923      	ldr	r3, [r4, #16]
 800447a:	6861      	ldr	r1, [r4, #4]
 800447c:	4299      	cmp	r1, r3
 800447e:	bfde      	ittt	le
 8004480:	2330      	movle	r3, #48	@ 0x30
 8004482:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004486:	f106 36ff 	addle.w	r6, r6, #4294967295
 800448a:	1b92      	subs	r2, r2, r6
 800448c:	6122      	str	r2, [r4, #16]
 800448e:	f8cd a000 	str.w	sl, [sp]
 8004492:	464b      	mov	r3, r9
 8004494:	aa03      	add	r2, sp, #12
 8004496:	4621      	mov	r1, r4
 8004498:	4640      	mov	r0, r8
 800449a:	f7ff fee7 	bl	800426c <_printf_common>
 800449e:	3001      	adds	r0, #1
 80044a0:	d14a      	bne.n	8004538 <_printf_i+0x1f0>
 80044a2:	f04f 30ff 	mov.w	r0, #4294967295
 80044a6:	b004      	add	sp, #16
 80044a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044ac:	6823      	ldr	r3, [r4, #0]
 80044ae:	f043 0320 	orr.w	r3, r3, #32
 80044b2:	6023      	str	r3, [r4, #0]
 80044b4:	4832      	ldr	r0, [pc, #200]	@ (8004580 <_printf_i+0x238>)
 80044b6:	2778      	movs	r7, #120	@ 0x78
 80044b8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80044bc:	6823      	ldr	r3, [r4, #0]
 80044be:	6831      	ldr	r1, [r6, #0]
 80044c0:	061f      	lsls	r7, r3, #24
 80044c2:	f851 5b04 	ldr.w	r5, [r1], #4
 80044c6:	d402      	bmi.n	80044ce <_printf_i+0x186>
 80044c8:	065f      	lsls	r7, r3, #25
 80044ca:	bf48      	it	mi
 80044cc:	b2ad      	uxthmi	r5, r5
 80044ce:	6031      	str	r1, [r6, #0]
 80044d0:	07d9      	lsls	r1, r3, #31
 80044d2:	bf44      	itt	mi
 80044d4:	f043 0320 	orrmi.w	r3, r3, #32
 80044d8:	6023      	strmi	r3, [r4, #0]
 80044da:	b11d      	cbz	r5, 80044e4 <_printf_i+0x19c>
 80044dc:	2310      	movs	r3, #16
 80044de:	e7ad      	b.n	800443c <_printf_i+0xf4>
 80044e0:	4826      	ldr	r0, [pc, #152]	@ (800457c <_printf_i+0x234>)
 80044e2:	e7e9      	b.n	80044b8 <_printf_i+0x170>
 80044e4:	6823      	ldr	r3, [r4, #0]
 80044e6:	f023 0320 	bic.w	r3, r3, #32
 80044ea:	6023      	str	r3, [r4, #0]
 80044ec:	e7f6      	b.n	80044dc <_printf_i+0x194>
 80044ee:	4616      	mov	r6, r2
 80044f0:	e7bd      	b.n	800446e <_printf_i+0x126>
 80044f2:	6833      	ldr	r3, [r6, #0]
 80044f4:	6825      	ldr	r5, [r4, #0]
 80044f6:	6961      	ldr	r1, [r4, #20]
 80044f8:	1d18      	adds	r0, r3, #4
 80044fa:	6030      	str	r0, [r6, #0]
 80044fc:	062e      	lsls	r6, r5, #24
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	d501      	bpl.n	8004506 <_printf_i+0x1be>
 8004502:	6019      	str	r1, [r3, #0]
 8004504:	e002      	b.n	800450c <_printf_i+0x1c4>
 8004506:	0668      	lsls	r0, r5, #25
 8004508:	d5fb      	bpl.n	8004502 <_printf_i+0x1ba>
 800450a:	8019      	strh	r1, [r3, #0]
 800450c:	2300      	movs	r3, #0
 800450e:	6123      	str	r3, [r4, #16]
 8004510:	4616      	mov	r6, r2
 8004512:	e7bc      	b.n	800448e <_printf_i+0x146>
 8004514:	6833      	ldr	r3, [r6, #0]
 8004516:	1d1a      	adds	r2, r3, #4
 8004518:	6032      	str	r2, [r6, #0]
 800451a:	681e      	ldr	r6, [r3, #0]
 800451c:	6862      	ldr	r2, [r4, #4]
 800451e:	2100      	movs	r1, #0
 8004520:	4630      	mov	r0, r6
 8004522:	f7fb fe2d 	bl	8000180 <memchr>
 8004526:	b108      	cbz	r0, 800452c <_printf_i+0x1e4>
 8004528:	1b80      	subs	r0, r0, r6
 800452a:	6060      	str	r0, [r4, #4]
 800452c:	6863      	ldr	r3, [r4, #4]
 800452e:	6123      	str	r3, [r4, #16]
 8004530:	2300      	movs	r3, #0
 8004532:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004536:	e7aa      	b.n	800448e <_printf_i+0x146>
 8004538:	6923      	ldr	r3, [r4, #16]
 800453a:	4632      	mov	r2, r6
 800453c:	4649      	mov	r1, r9
 800453e:	4640      	mov	r0, r8
 8004540:	47d0      	blx	sl
 8004542:	3001      	adds	r0, #1
 8004544:	d0ad      	beq.n	80044a2 <_printf_i+0x15a>
 8004546:	6823      	ldr	r3, [r4, #0]
 8004548:	079b      	lsls	r3, r3, #30
 800454a:	d413      	bmi.n	8004574 <_printf_i+0x22c>
 800454c:	68e0      	ldr	r0, [r4, #12]
 800454e:	9b03      	ldr	r3, [sp, #12]
 8004550:	4298      	cmp	r0, r3
 8004552:	bfb8      	it	lt
 8004554:	4618      	movlt	r0, r3
 8004556:	e7a6      	b.n	80044a6 <_printf_i+0x15e>
 8004558:	2301      	movs	r3, #1
 800455a:	4632      	mov	r2, r6
 800455c:	4649      	mov	r1, r9
 800455e:	4640      	mov	r0, r8
 8004560:	47d0      	blx	sl
 8004562:	3001      	adds	r0, #1
 8004564:	d09d      	beq.n	80044a2 <_printf_i+0x15a>
 8004566:	3501      	adds	r5, #1
 8004568:	68e3      	ldr	r3, [r4, #12]
 800456a:	9903      	ldr	r1, [sp, #12]
 800456c:	1a5b      	subs	r3, r3, r1
 800456e:	42ab      	cmp	r3, r5
 8004570:	dcf2      	bgt.n	8004558 <_printf_i+0x210>
 8004572:	e7eb      	b.n	800454c <_printf_i+0x204>
 8004574:	2500      	movs	r5, #0
 8004576:	f104 0619 	add.w	r6, r4, #25
 800457a:	e7f5      	b.n	8004568 <_printf_i+0x220>
 800457c:	08004a91 	.word	0x08004a91
 8004580:	08004aa2 	.word	0x08004aa2

08004584 <__sflush_r>:
 8004584:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800458a:	0716      	lsls	r6, r2, #28
 800458c:	4605      	mov	r5, r0
 800458e:	460c      	mov	r4, r1
 8004590:	d454      	bmi.n	800463c <__sflush_r+0xb8>
 8004592:	684b      	ldr	r3, [r1, #4]
 8004594:	2b00      	cmp	r3, #0
 8004596:	dc02      	bgt.n	800459e <__sflush_r+0x1a>
 8004598:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800459a:	2b00      	cmp	r3, #0
 800459c:	dd48      	ble.n	8004630 <__sflush_r+0xac>
 800459e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80045a0:	2e00      	cmp	r6, #0
 80045a2:	d045      	beq.n	8004630 <__sflush_r+0xac>
 80045a4:	2300      	movs	r3, #0
 80045a6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80045aa:	682f      	ldr	r7, [r5, #0]
 80045ac:	6a21      	ldr	r1, [r4, #32]
 80045ae:	602b      	str	r3, [r5, #0]
 80045b0:	d030      	beq.n	8004614 <__sflush_r+0x90>
 80045b2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80045b4:	89a3      	ldrh	r3, [r4, #12]
 80045b6:	0759      	lsls	r1, r3, #29
 80045b8:	d505      	bpl.n	80045c6 <__sflush_r+0x42>
 80045ba:	6863      	ldr	r3, [r4, #4]
 80045bc:	1ad2      	subs	r2, r2, r3
 80045be:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80045c0:	b10b      	cbz	r3, 80045c6 <__sflush_r+0x42>
 80045c2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80045c4:	1ad2      	subs	r2, r2, r3
 80045c6:	2300      	movs	r3, #0
 80045c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80045ca:	6a21      	ldr	r1, [r4, #32]
 80045cc:	4628      	mov	r0, r5
 80045ce:	47b0      	blx	r6
 80045d0:	1c43      	adds	r3, r0, #1
 80045d2:	89a3      	ldrh	r3, [r4, #12]
 80045d4:	d106      	bne.n	80045e4 <__sflush_r+0x60>
 80045d6:	6829      	ldr	r1, [r5, #0]
 80045d8:	291d      	cmp	r1, #29
 80045da:	d82b      	bhi.n	8004634 <__sflush_r+0xb0>
 80045dc:	4a28      	ldr	r2, [pc, #160]	@ (8004680 <__sflush_r+0xfc>)
 80045de:	40ca      	lsrs	r2, r1
 80045e0:	07d6      	lsls	r6, r2, #31
 80045e2:	d527      	bpl.n	8004634 <__sflush_r+0xb0>
 80045e4:	2200      	movs	r2, #0
 80045e6:	6062      	str	r2, [r4, #4]
 80045e8:	04d9      	lsls	r1, r3, #19
 80045ea:	6922      	ldr	r2, [r4, #16]
 80045ec:	6022      	str	r2, [r4, #0]
 80045ee:	d504      	bpl.n	80045fa <__sflush_r+0x76>
 80045f0:	1c42      	adds	r2, r0, #1
 80045f2:	d101      	bne.n	80045f8 <__sflush_r+0x74>
 80045f4:	682b      	ldr	r3, [r5, #0]
 80045f6:	b903      	cbnz	r3, 80045fa <__sflush_r+0x76>
 80045f8:	6560      	str	r0, [r4, #84]	@ 0x54
 80045fa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80045fc:	602f      	str	r7, [r5, #0]
 80045fe:	b1b9      	cbz	r1, 8004630 <__sflush_r+0xac>
 8004600:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004604:	4299      	cmp	r1, r3
 8004606:	d002      	beq.n	800460e <__sflush_r+0x8a>
 8004608:	4628      	mov	r0, r5
 800460a:	f7ff fbf7 	bl	8003dfc <_free_r>
 800460e:	2300      	movs	r3, #0
 8004610:	6363      	str	r3, [r4, #52]	@ 0x34
 8004612:	e00d      	b.n	8004630 <__sflush_r+0xac>
 8004614:	2301      	movs	r3, #1
 8004616:	4628      	mov	r0, r5
 8004618:	47b0      	blx	r6
 800461a:	4602      	mov	r2, r0
 800461c:	1c50      	adds	r0, r2, #1
 800461e:	d1c9      	bne.n	80045b4 <__sflush_r+0x30>
 8004620:	682b      	ldr	r3, [r5, #0]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d0c6      	beq.n	80045b4 <__sflush_r+0x30>
 8004626:	2b1d      	cmp	r3, #29
 8004628:	d001      	beq.n	800462e <__sflush_r+0xaa>
 800462a:	2b16      	cmp	r3, #22
 800462c:	d11d      	bne.n	800466a <__sflush_r+0xe6>
 800462e:	602f      	str	r7, [r5, #0]
 8004630:	2000      	movs	r0, #0
 8004632:	e021      	b.n	8004678 <__sflush_r+0xf4>
 8004634:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004638:	b21b      	sxth	r3, r3
 800463a:	e01a      	b.n	8004672 <__sflush_r+0xee>
 800463c:	690f      	ldr	r7, [r1, #16]
 800463e:	2f00      	cmp	r7, #0
 8004640:	d0f6      	beq.n	8004630 <__sflush_r+0xac>
 8004642:	0793      	lsls	r3, r2, #30
 8004644:	680e      	ldr	r6, [r1, #0]
 8004646:	bf08      	it	eq
 8004648:	694b      	ldreq	r3, [r1, #20]
 800464a:	600f      	str	r7, [r1, #0]
 800464c:	bf18      	it	ne
 800464e:	2300      	movne	r3, #0
 8004650:	1bf6      	subs	r6, r6, r7
 8004652:	608b      	str	r3, [r1, #8]
 8004654:	2e00      	cmp	r6, #0
 8004656:	ddeb      	ble.n	8004630 <__sflush_r+0xac>
 8004658:	6a21      	ldr	r1, [r4, #32]
 800465a:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800465e:	4633      	mov	r3, r6
 8004660:	463a      	mov	r2, r7
 8004662:	4628      	mov	r0, r5
 8004664:	47e0      	blx	ip
 8004666:	2800      	cmp	r0, #0
 8004668:	dc07      	bgt.n	800467a <__sflush_r+0xf6>
 800466a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800466e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004672:	81a3      	strh	r3, [r4, #12]
 8004674:	f04f 30ff 	mov.w	r0, #4294967295
 8004678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800467a:	4407      	add	r7, r0
 800467c:	1a36      	subs	r6, r6, r0
 800467e:	e7e9      	b.n	8004654 <__sflush_r+0xd0>
 8004680:	20400001 	.word	0x20400001

08004684 <_fflush_r>:
 8004684:	b538      	push	{r3, r4, r5, lr}
 8004686:	690b      	ldr	r3, [r1, #16]
 8004688:	4605      	mov	r5, r0
 800468a:	460c      	mov	r4, r1
 800468c:	b913      	cbnz	r3, 8004694 <_fflush_r+0x10>
 800468e:	2500      	movs	r5, #0
 8004690:	4628      	mov	r0, r5
 8004692:	bd38      	pop	{r3, r4, r5, pc}
 8004694:	b118      	cbz	r0, 800469e <_fflush_r+0x1a>
 8004696:	6a03      	ldr	r3, [r0, #32]
 8004698:	b90b      	cbnz	r3, 800469e <_fflush_r+0x1a>
 800469a:	f7ff f9b5 	bl	8003a08 <__sinit>
 800469e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d0f3      	beq.n	800468e <_fflush_r+0xa>
 80046a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80046a8:	07d0      	lsls	r0, r2, #31
 80046aa:	d404      	bmi.n	80046b6 <_fflush_r+0x32>
 80046ac:	0599      	lsls	r1, r3, #22
 80046ae:	d402      	bmi.n	80046b6 <_fflush_r+0x32>
 80046b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80046b2:	f7ff fba0 	bl	8003df6 <__retarget_lock_acquire_recursive>
 80046b6:	4628      	mov	r0, r5
 80046b8:	4621      	mov	r1, r4
 80046ba:	f7ff ff63 	bl	8004584 <__sflush_r>
 80046be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80046c0:	07da      	lsls	r2, r3, #31
 80046c2:	4605      	mov	r5, r0
 80046c4:	d4e4      	bmi.n	8004690 <_fflush_r+0xc>
 80046c6:	89a3      	ldrh	r3, [r4, #12]
 80046c8:	059b      	lsls	r3, r3, #22
 80046ca:	d4e1      	bmi.n	8004690 <_fflush_r+0xc>
 80046cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80046ce:	f7ff fb93 	bl	8003df8 <__retarget_lock_release_recursive>
 80046d2:	e7dd      	b.n	8004690 <_fflush_r+0xc>

080046d4 <__swhatbuf_r>:
 80046d4:	b570      	push	{r4, r5, r6, lr}
 80046d6:	460c      	mov	r4, r1
 80046d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046dc:	2900      	cmp	r1, #0
 80046de:	b096      	sub	sp, #88	@ 0x58
 80046e0:	4615      	mov	r5, r2
 80046e2:	461e      	mov	r6, r3
 80046e4:	da0d      	bge.n	8004702 <__swhatbuf_r+0x2e>
 80046e6:	89a3      	ldrh	r3, [r4, #12]
 80046e8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80046ec:	f04f 0100 	mov.w	r1, #0
 80046f0:	bf14      	ite	ne
 80046f2:	2340      	movne	r3, #64	@ 0x40
 80046f4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80046f8:	2000      	movs	r0, #0
 80046fa:	6031      	str	r1, [r6, #0]
 80046fc:	602b      	str	r3, [r5, #0]
 80046fe:	b016      	add	sp, #88	@ 0x58
 8004700:	bd70      	pop	{r4, r5, r6, pc}
 8004702:	466a      	mov	r2, sp
 8004704:	f000 f848 	bl	8004798 <_fstat_r>
 8004708:	2800      	cmp	r0, #0
 800470a:	dbec      	blt.n	80046e6 <__swhatbuf_r+0x12>
 800470c:	9901      	ldr	r1, [sp, #4]
 800470e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004712:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004716:	4259      	negs	r1, r3
 8004718:	4159      	adcs	r1, r3
 800471a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800471e:	e7eb      	b.n	80046f8 <__swhatbuf_r+0x24>

08004720 <__smakebuf_r>:
 8004720:	898b      	ldrh	r3, [r1, #12]
 8004722:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004724:	079d      	lsls	r5, r3, #30
 8004726:	4606      	mov	r6, r0
 8004728:	460c      	mov	r4, r1
 800472a:	d507      	bpl.n	800473c <__smakebuf_r+0x1c>
 800472c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004730:	6023      	str	r3, [r4, #0]
 8004732:	6123      	str	r3, [r4, #16]
 8004734:	2301      	movs	r3, #1
 8004736:	6163      	str	r3, [r4, #20]
 8004738:	b003      	add	sp, #12
 800473a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800473c:	ab01      	add	r3, sp, #4
 800473e:	466a      	mov	r2, sp
 8004740:	f7ff ffc8 	bl	80046d4 <__swhatbuf_r>
 8004744:	9f00      	ldr	r7, [sp, #0]
 8004746:	4605      	mov	r5, r0
 8004748:	4639      	mov	r1, r7
 800474a:	4630      	mov	r0, r6
 800474c:	f7ff fbc2 	bl	8003ed4 <_malloc_r>
 8004750:	b948      	cbnz	r0, 8004766 <__smakebuf_r+0x46>
 8004752:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004756:	059a      	lsls	r2, r3, #22
 8004758:	d4ee      	bmi.n	8004738 <__smakebuf_r+0x18>
 800475a:	f023 0303 	bic.w	r3, r3, #3
 800475e:	f043 0302 	orr.w	r3, r3, #2
 8004762:	81a3      	strh	r3, [r4, #12]
 8004764:	e7e2      	b.n	800472c <__smakebuf_r+0xc>
 8004766:	89a3      	ldrh	r3, [r4, #12]
 8004768:	6020      	str	r0, [r4, #0]
 800476a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800476e:	81a3      	strh	r3, [r4, #12]
 8004770:	9b01      	ldr	r3, [sp, #4]
 8004772:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004776:	b15b      	cbz	r3, 8004790 <__smakebuf_r+0x70>
 8004778:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800477c:	4630      	mov	r0, r6
 800477e:	f000 f81d 	bl	80047bc <_isatty_r>
 8004782:	b128      	cbz	r0, 8004790 <__smakebuf_r+0x70>
 8004784:	89a3      	ldrh	r3, [r4, #12]
 8004786:	f023 0303 	bic.w	r3, r3, #3
 800478a:	f043 0301 	orr.w	r3, r3, #1
 800478e:	81a3      	strh	r3, [r4, #12]
 8004790:	89a3      	ldrh	r3, [r4, #12]
 8004792:	431d      	orrs	r5, r3
 8004794:	81a5      	strh	r5, [r4, #12]
 8004796:	e7cf      	b.n	8004738 <__smakebuf_r+0x18>

08004798 <_fstat_r>:
 8004798:	b538      	push	{r3, r4, r5, lr}
 800479a:	4d07      	ldr	r5, [pc, #28]	@ (80047b8 <_fstat_r+0x20>)
 800479c:	2300      	movs	r3, #0
 800479e:	4604      	mov	r4, r0
 80047a0:	4608      	mov	r0, r1
 80047a2:	4611      	mov	r1, r2
 80047a4:	602b      	str	r3, [r5, #0]
 80047a6:	f7fc fadd 	bl	8000d64 <_fstat>
 80047aa:	1c43      	adds	r3, r0, #1
 80047ac:	d102      	bne.n	80047b4 <_fstat_r+0x1c>
 80047ae:	682b      	ldr	r3, [r5, #0]
 80047b0:	b103      	cbz	r3, 80047b4 <_fstat_r+0x1c>
 80047b2:	6023      	str	r3, [r4, #0]
 80047b4:	bd38      	pop	{r3, r4, r5, pc}
 80047b6:	bf00      	nop
 80047b8:	2000025c 	.word	0x2000025c

080047bc <_isatty_r>:
 80047bc:	b538      	push	{r3, r4, r5, lr}
 80047be:	4d06      	ldr	r5, [pc, #24]	@ (80047d8 <_isatty_r+0x1c>)
 80047c0:	2300      	movs	r3, #0
 80047c2:	4604      	mov	r4, r0
 80047c4:	4608      	mov	r0, r1
 80047c6:	602b      	str	r3, [r5, #0]
 80047c8:	f7fc fadb 	bl	8000d82 <_isatty>
 80047cc:	1c43      	adds	r3, r0, #1
 80047ce:	d102      	bne.n	80047d6 <_isatty_r+0x1a>
 80047d0:	682b      	ldr	r3, [r5, #0]
 80047d2:	b103      	cbz	r3, 80047d6 <_isatty_r+0x1a>
 80047d4:	6023      	str	r3, [r4, #0]
 80047d6:	bd38      	pop	{r3, r4, r5, pc}
 80047d8:	2000025c 	.word	0x2000025c

080047dc <_sbrk_r>:
 80047dc:	b538      	push	{r3, r4, r5, lr}
 80047de:	4d06      	ldr	r5, [pc, #24]	@ (80047f8 <_sbrk_r+0x1c>)
 80047e0:	2300      	movs	r3, #0
 80047e2:	4604      	mov	r4, r0
 80047e4:	4608      	mov	r0, r1
 80047e6:	602b      	str	r3, [r5, #0]
 80047e8:	f7fc fae2 	bl	8000db0 <_sbrk>
 80047ec:	1c43      	adds	r3, r0, #1
 80047ee:	d102      	bne.n	80047f6 <_sbrk_r+0x1a>
 80047f0:	682b      	ldr	r3, [r5, #0]
 80047f2:	b103      	cbz	r3, 80047f6 <_sbrk_r+0x1a>
 80047f4:	6023      	str	r3, [r4, #0]
 80047f6:	bd38      	pop	{r3, r4, r5, pc}
 80047f8:	2000025c 	.word	0x2000025c

080047fc <_init>:
 80047fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047fe:	bf00      	nop
 8004800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004802:	bc08      	pop	{r3}
 8004804:	469e      	mov	lr, r3
 8004806:	4770      	bx	lr

08004808 <_fini>:
 8004808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800480a:	bf00      	nop
 800480c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800480e:	bc08      	pop	{r3}
 8004810:	469e      	mov	lr, r3
 8004812:	4770      	bx	lr
