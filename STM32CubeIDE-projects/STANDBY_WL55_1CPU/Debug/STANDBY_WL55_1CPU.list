
STANDBY_WL55_1CPU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ed8  08000138  08000138  00001138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  08004010  08004010  00005010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800420c  0800420c  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800420c  0800420c  0000520c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004214  08004214  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004214  08004214  00005214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004218  08004218  00005218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800421c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  20000068  08004284  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  08004284  0000626c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ec78  00000000  00000000  00006092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002343  00000000  00000000  00014d0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe0  00000000  00000000  00017050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bff  00000000  00000000  00018030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ce0c  00000000  00000000  00018c2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e725  00000000  00000000  00035a3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b216c  00000000  00000000  00044160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f62cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000479c  00000000  00000000  000f6310  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000faaac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	@ (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	@ (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000068 	.word	0x20000068
 8000154:	00000000 	.word	0x00000000
 8000158:	08003ff8 	.word	0x08003ff8

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	@ (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	@ (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	@ (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	2000006c 	.word	0x2000006c
 8000174:	08003ff8 	.word	0x08003ff8

08000178 <__aeabi_uldivmod>:
 8000178:	b953      	cbnz	r3, 8000190 <__aeabi_uldivmod+0x18>
 800017a:	b94a      	cbnz	r2, 8000190 <__aeabi_uldivmod+0x18>
 800017c:	2900      	cmp	r1, #0
 800017e:	bf08      	it	eq
 8000180:	2800      	cmpeq	r0, #0
 8000182:	bf1c      	itt	ne
 8000184:	f04f 31ff 	movne.w	r1, #4294967295
 8000188:	f04f 30ff 	movne.w	r0, #4294967295
 800018c:	f000 b988 	b.w	80004a0 <__aeabi_idiv0>
 8000190:	f1ad 0c08 	sub.w	ip, sp, #8
 8000194:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000198:	f000 f806 	bl	80001a8 <__udivmoddi4>
 800019c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a4:	b004      	add	sp, #16
 80001a6:	4770      	bx	lr

080001a8 <__udivmoddi4>:
 80001a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001ac:	9d08      	ldr	r5, [sp, #32]
 80001ae:	468e      	mov	lr, r1
 80001b0:	4604      	mov	r4, r0
 80001b2:	4688      	mov	r8, r1
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d14a      	bne.n	800024e <__udivmoddi4+0xa6>
 80001b8:	428a      	cmp	r2, r1
 80001ba:	4617      	mov	r7, r2
 80001bc:	d962      	bls.n	8000284 <__udivmoddi4+0xdc>
 80001be:	fab2 f682 	clz	r6, r2
 80001c2:	b14e      	cbz	r6, 80001d8 <__udivmoddi4+0x30>
 80001c4:	f1c6 0320 	rsb	r3, r6, #32
 80001c8:	fa01 f806 	lsl.w	r8, r1, r6
 80001cc:	fa20 f303 	lsr.w	r3, r0, r3
 80001d0:	40b7      	lsls	r7, r6
 80001d2:	ea43 0808 	orr.w	r8, r3, r8
 80001d6:	40b4      	lsls	r4, r6
 80001d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80001dc:	fa1f fc87 	uxth.w	ip, r7
 80001e0:	fbb8 f1fe 	udiv	r1, r8, lr
 80001e4:	0c23      	lsrs	r3, r4, #16
 80001e6:	fb0e 8811 	mls	r8, lr, r1, r8
 80001ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001ee:	fb01 f20c 	mul.w	r2, r1, ip
 80001f2:	429a      	cmp	r2, r3
 80001f4:	d909      	bls.n	800020a <__udivmoddi4+0x62>
 80001f6:	18fb      	adds	r3, r7, r3
 80001f8:	f101 30ff 	add.w	r0, r1, #4294967295
 80001fc:	f080 80ea 	bcs.w	80003d4 <__udivmoddi4+0x22c>
 8000200:	429a      	cmp	r2, r3
 8000202:	f240 80e7 	bls.w	80003d4 <__udivmoddi4+0x22c>
 8000206:	3902      	subs	r1, #2
 8000208:	443b      	add	r3, r7
 800020a:	1a9a      	subs	r2, r3, r2
 800020c:	b2a3      	uxth	r3, r4
 800020e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000212:	fb0e 2210 	mls	r2, lr, r0, r2
 8000216:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800021a:	fb00 fc0c 	mul.w	ip, r0, ip
 800021e:	459c      	cmp	ip, r3
 8000220:	d909      	bls.n	8000236 <__udivmoddi4+0x8e>
 8000222:	18fb      	adds	r3, r7, r3
 8000224:	f100 32ff 	add.w	r2, r0, #4294967295
 8000228:	f080 80d6 	bcs.w	80003d8 <__udivmoddi4+0x230>
 800022c:	459c      	cmp	ip, r3
 800022e:	f240 80d3 	bls.w	80003d8 <__udivmoddi4+0x230>
 8000232:	443b      	add	r3, r7
 8000234:	3802      	subs	r0, #2
 8000236:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800023a:	eba3 030c 	sub.w	r3, r3, ip
 800023e:	2100      	movs	r1, #0
 8000240:	b11d      	cbz	r5, 800024a <__udivmoddi4+0xa2>
 8000242:	40f3      	lsrs	r3, r6
 8000244:	2200      	movs	r2, #0
 8000246:	e9c5 3200 	strd	r3, r2, [r5]
 800024a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800024e:	428b      	cmp	r3, r1
 8000250:	d905      	bls.n	800025e <__udivmoddi4+0xb6>
 8000252:	b10d      	cbz	r5, 8000258 <__udivmoddi4+0xb0>
 8000254:	e9c5 0100 	strd	r0, r1, [r5]
 8000258:	2100      	movs	r1, #0
 800025a:	4608      	mov	r0, r1
 800025c:	e7f5      	b.n	800024a <__udivmoddi4+0xa2>
 800025e:	fab3 f183 	clz	r1, r3
 8000262:	2900      	cmp	r1, #0
 8000264:	d146      	bne.n	80002f4 <__udivmoddi4+0x14c>
 8000266:	4573      	cmp	r3, lr
 8000268:	d302      	bcc.n	8000270 <__udivmoddi4+0xc8>
 800026a:	4282      	cmp	r2, r0
 800026c:	f200 8105 	bhi.w	800047a <__udivmoddi4+0x2d2>
 8000270:	1a84      	subs	r4, r0, r2
 8000272:	eb6e 0203 	sbc.w	r2, lr, r3
 8000276:	2001      	movs	r0, #1
 8000278:	4690      	mov	r8, r2
 800027a:	2d00      	cmp	r5, #0
 800027c:	d0e5      	beq.n	800024a <__udivmoddi4+0xa2>
 800027e:	e9c5 4800 	strd	r4, r8, [r5]
 8000282:	e7e2      	b.n	800024a <__udivmoddi4+0xa2>
 8000284:	2a00      	cmp	r2, #0
 8000286:	f000 8090 	beq.w	80003aa <__udivmoddi4+0x202>
 800028a:	fab2 f682 	clz	r6, r2
 800028e:	2e00      	cmp	r6, #0
 8000290:	f040 80a4 	bne.w	80003dc <__udivmoddi4+0x234>
 8000294:	1a8a      	subs	r2, r1, r2
 8000296:	0c03      	lsrs	r3, r0, #16
 8000298:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800029c:	b280      	uxth	r0, r0
 800029e:	b2bc      	uxth	r4, r7
 80002a0:	2101      	movs	r1, #1
 80002a2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002a6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ae:	fb04 f20c 	mul.w	r2, r4, ip
 80002b2:	429a      	cmp	r2, r3
 80002b4:	d907      	bls.n	80002c6 <__udivmoddi4+0x11e>
 80002b6:	18fb      	adds	r3, r7, r3
 80002b8:	f10c 38ff 	add.w	r8, ip, #4294967295
 80002bc:	d202      	bcs.n	80002c4 <__udivmoddi4+0x11c>
 80002be:	429a      	cmp	r2, r3
 80002c0:	f200 80e0 	bhi.w	8000484 <__udivmoddi4+0x2dc>
 80002c4:	46c4      	mov	ip, r8
 80002c6:	1a9b      	subs	r3, r3, r2
 80002c8:	fbb3 f2fe 	udiv	r2, r3, lr
 80002cc:	fb0e 3312 	mls	r3, lr, r2, r3
 80002d0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80002d4:	fb02 f404 	mul.w	r4, r2, r4
 80002d8:	429c      	cmp	r4, r3
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0x144>
 80002dc:	18fb      	adds	r3, r7, r3
 80002de:	f102 30ff 	add.w	r0, r2, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0x142>
 80002e4:	429c      	cmp	r4, r3
 80002e6:	f200 80ca 	bhi.w	800047e <__udivmoddi4+0x2d6>
 80002ea:	4602      	mov	r2, r0
 80002ec:	1b1b      	subs	r3, r3, r4
 80002ee:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80002f2:	e7a5      	b.n	8000240 <__udivmoddi4+0x98>
 80002f4:	f1c1 0620 	rsb	r6, r1, #32
 80002f8:	408b      	lsls	r3, r1
 80002fa:	fa22 f706 	lsr.w	r7, r2, r6
 80002fe:	431f      	orrs	r7, r3
 8000300:	fa0e f401 	lsl.w	r4, lr, r1
 8000304:	fa20 f306 	lsr.w	r3, r0, r6
 8000308:	fa2e fe06 	lsr.w	lr, lr, r6
 800030c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000310:	4323      	orrs	r3, r4
 8000312:	fa00 f801 	lsl.w	r8, r0, r1
 8000316:	fa1f fc87 	uxth.w	ip, r7
 800031a:	fbbe f0f9 	udiv	r0, lr, r9
 800031e:	0c1c      	lsrs	r4, r3, #16
 8000320:	fb09 ee10 	mls	lr, r9, r0, lr
 8000324:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000328:	fb00 fe0c 	mul.w	lr, r0, ip
 800032c:	45a6      	cmp	lr, r4
 800032e:	fa02 f201 	lsl.w	r2, r2, r1
 8000332:	d909      	bls.n	8000348 <__udivmoddi4+0x1a0>
 8000334:	193c      	adds	r4, r7, r4
 8000336:	f100 3aff 	add.w	sl, r0, #4294967295
 800033a:	f080 809c 	bcs.w	8000476 <__udivmoddi4+0x2ce>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f240 8099 	bls.w	8000476 <__udivmoddi4+0x2ce>
 8000344:	3802      	subs	r0, #2
 8000346:	443c      	add	r4, r7
 8000348:	eba4 040e 	sub.w	r4, r4, lr
 800034c:	fa1f fe83 	uxth.w	lr, r3
 8000350:	fbb4 f3f9 	udiv	r3, r4, r9
 8000354:	fb09 4413 	mls	r4, r9, r3, r4
 8000358:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800035c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000360:	45a4      	cmp	ip, r4
 8000362:	d908      	bls.n	8000376 <__udivmoddi4+0x1ce>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f103 3eff 	add.w	lr, r3, #4294967295
 800036a:	f080 8082 	bcs.w	8000472 <__udivmoddi4+0x2ca>
 800036e:	45a4      	cmp	ip, r4
 8000370:	d97f      	bls.n	8000472 <__udivmoddi4+0x2ca>
 8000372:	3b02      	subs	r3, #2
 8000374:	443c      	add	r4, r7
 8000376:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800037a:	eba4 040c 	sub.w	r4, r4, ip
 800037e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000382:	4564      	cmp	r4, ip
 8000384:	4673      	mov	r3, lr
 8000386:	46e1      	mov	r9, ip
 8000388:	d362      	bcc.n	8000450 <__udivmoddi4+0x2a8>
 800038a:	d05f      	beq.n	800044c <__udivmoddi4+0x2a4>
 800038c:	b15d      	cbz	r5, 80003a6 <__udivmoddi4+0x1fe>
 800038e:	ebb8 0203 	subs.w	r2, r8, r3
 8000392:	eb64 0409 	sbc.w	r4, r4, r9
 8000396:	fa04 f606 	lsl.w	r6, r4, r6
 800039a:	fa22 f301 	lsr.w	r3, r2, r1
 800039e:	431e      	orrs	r6, r3
 80003a0:	40cc      	lsrs	r4, r1
 80003a2:	e9c5 6400 	strd	r6, r4, [r5]
 80003a6:	2100      	movs	r1, #0
 80003a8:	e74f      	b.n	800024a <__udivmoddi4+0xa2>
 80003aa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003ae:	0c01      	lsrs	r1, r0, #16
 80003b0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80003ba:	463b      	mov	r3, r7
 80003bc:	4638      	mov	r0, r7
 80003be:	463c      	mov	r4, r7
 80003c0:	46b8      	mov	r8, r7
 80003c2:	46be      	mov	lr, r7
 80003c4:	2620      	movs	r6, #32
 80003c6:	fbb1 f1f7 	udiv	r1, r1, r7
 80003ca:	eba2 0208 	sub.w	r2, r2, r8
 80003ce:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80003d2:	e766      	b.n	80002a2 <__udivmoddi4+0xfa>
 80003d4:	4601      	mov	r1, r0
 80003d6:	e718      	b.n	800020a <__udivmoddi4+0x62>
 80003d8:	4610      	mov	r0, r2
 80003da:	e72c      	b.n	8000236 <__udivmoddi4+0x8e>
 80003dc:	f1c6 0220 	rsb	r2, r6, #32
 80003e0:	fa2e f302 	lsr.w	r3, lr, r2
 80003e4:	40b7      	lsls	r7, r6
 80003e6:	40b1      	lsls	r1, r6
 80003e8:	fa20 f202 	lsr.w	r2, r0, r2
 80003ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f0:	430a      	orrs	r2, r1
 80003f2:	fbb3 f8fe 	udiv	r8, r3, lr
 80003f6:	b2bc      	uxth	r4, r7
 80003f8:	fb0e 3318 	mls	r3, lr, r8, r3
 80003fc:	0c11      	lsrs	r1, r2, #16
 80003fe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000402:	fb08 f904 	mul.w	r9, r8, r4
 8000406:	40b0      	lsls	r0, r6
 8000408:	4589      	cmp	r9, r1
 800040a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800040e:	b280      	uxth	r0, r0
 8000410:	d93e      	bls.n	8000490 <__udivmoddi4+0x2e8>
 8000412:	1879      	adds	r1, r7, r1
 8000414:	f108 3cff 	add.w	ip, r8, #4294967295
 8000418:	d201      	bcs.n	800041e <__udivmoddi4+0x276>
 800041a:	4589      	cmp	r9, r1
 800041c:	d81f      	bhi.n	800045e <__udivmoddi4+0x2b6>
 800041e:	eba1 0109 	sub.w	r1, r1, r9
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fb09 f804 	mul.w	r8, r9, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	b292      	uxth	r2, r2
 8000430:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000434:	4542      	cmp	r2, r8
 8000436:	d229      	bcs.n	800048c <__udivmoddi4+0x2e4>
 8000438:	18ba      	adds	r2, r7, r2
 800043a:	f109 31ff 	add.w	r1, r9, #4294967295
 800043e:	d2c4      	bcs.n	80003ca <__udivmoddi4+0x222>
 8000440:	4542      	cmp	r2, r8
 8000442:	d2c2      	bcs.n	80003ca <__udivmoddi4+0x222>
 8000444:	f1a9 0102 	sub.w	r1, r9, #2
 8000448:	443a      	add	r2, r7
 800044a:	e7be      	b.n	80003ca <__udivmoddi4+0x222>
 800044c:	45f0      	cmp	r8, lr
 800044e:	d29d      	bcs.n	800038c <__udivmoddi4+0x1e4>
 8000450:	ebbe 0302 	subs.w	r3, lr, r2
 8000454:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000458:	3801      	subs	r0, #1
 800045a:	46e1      	mov	r9, ip
 800045c:	e796      	b.n	800038c <__udivmoddi4+0x1e4>
 800045e:	eba7 0909 	sub.w	r9, r7, r9
 8000462:	4449      	add	r1, r9
 8000464:	f1a8 0c02 	sub.w	ip, r8, #2
 8000468:	fbb1 f9fe 	udiv	r9, r1, lr
 800046c:	fb09 f804 	mul.w	r8, r9, r4
 8000470:	e7db      	b.n	800042a <__udivmoddi4+0x282>
 8000472:	4673      	mov	r3, lr
 8000474:	e77f      	b.n	8000376 <__udivmoddi4+0x1ce>
 8000476:	4650      	mov	r0, sl
 8000478:	e766      	b.n	8000348 <__udivmoddi4+0x1a0>
 800047a:	4608      	mov	r0, r1
 800047c:	e6fd      	b.n	800027a <__udivmoddi4+0xd2>
 800047e:	443b      	add	r3, r7
 8000480:	3a02      	subs	r2, #2
 8000482:	e733      	b.n	80002ec <__udivmoddi4+0x144>
 8000484:	f1ac 0c02 	sub.w	ip, ip, #2
 8000488:	443b      	add	r3, r7
 800048a:	e71c      	b.n	80002c6 <__udivmoddi4+0x11e>
 800048c:	4649      	mov	r1, r9
 800048e:	e79c      	b.n	80003ca <__udivmoddi4+0x222>
 8000490:	eba1 0109 	sub.w	r1, r1, r9
 8000494:	46c4      	mov	ip, r8
 8000496:	fbb1 f9fe 	udiv	r9, r1, lr
 800049a:	fb09 f804 	mul.w	r8, r9, r4
 800049e:	e7c4      	b.n	800042a <__udivmoddi4+0x282>

080004a0 <__aeabi_idiv0>:
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop

080004a4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004a4:	b480      	push	{r7}
 80004a6:	b085      	sub	sp, #20
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80004b0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80004b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	4313      	orrs	r3, r2
 80004ba:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80004c0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	4013      	ands	r3, r2
 80004c6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004c8:	68fb      	ldr	r3, [r7, #12]
}
 80004ca:	bf00      	nop
 80004cc:	3714      	adds	r7, #20
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bc80      	pop	{r7}
 80004d2:	4770      	bx	lr

080004d4 <LL_APB1_GRP1_DisableClockSleep>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1

  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClockSleep(uint32_t Periphs)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1SMENR1, Periphs);
 80004dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80004e0:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	43db      	mvns	r3, r3
 80004e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80004ea:	4013      	ands	r3, r2
 80004ec:	678b      	str	r3, [r1, #120]	@ 0x78
}
 80004ee:	bf00      	nop
 80004f0:	370c      	adds	r7, #12
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bc80      	pop	{r7}
 80004f6:	4770      	bx	lr

080004f8 <__io_putchar>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/** @brief Redirect the output of printf to USART2
  * @retval int
  */
int __io_putchar(int ch){
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, &ch, 1, 1000);
 8000500:	1d39      	adds	r1, r7, #4
 8000502:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000506:	2201      	movs	r2, #1
 8000508:	4803      	ldr	r0, [pc, #12]	@ (8000518 <__io_putchar+0x20>)
 800050a:	f002 fb14 	bl	8002b36 <HAL_UART_Transmit>
}
 800050e:	bf00      	nop
 8000510:	4618      	mov	r0, r3
 8000512:	3708      	adds	r7, #8
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	20000084 	.word	0x20000084

0800051c <LED_Sequence>:

/** @brief Blinking LEDs sequence (blue, green)
  * @retval None
  */
void LED_Sequence(void){
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af00      	add	r7, sp, #0
	for (int _ = 0; _ < 2; _++){
 8000522:	2300      	movs	r3, #0
 8000524:	60fb      	str	r3, [r7, #12]
 8000526:	e026      	b.n	8000576 <LED_Sequence+0x5a>
		for (int l = 0; l < 2; l++){
 8000528:	2300      	movs	r3, #0
 800052a:	60bb      	str	r3, [r7, #8]
 800052c:	e00b      	b.n	8000546 <LED_Sequence+0x2a>
			HAL_GPIO_TogglePin(GPIOB, BLED_Pin);
 800052e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000532:	4815      	ldr	r0, [pc, #84]	@ (8000588 <LED_Sequence+0x6c>)
 8000534:	f000 fe70 	bl	8001218 <HAL_GPIO_TogglePin>
			// No need of software delay because the system was already (re)initialized
			HAL_Delay(500);
 8000538:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800053c:	f000 fbae 	bl	8000c9c <HAL_Delay>
		for (int l = 0; l < 2; l++){
 8000540:	68bb      	ldr	r3, [r7, #8]
 8000542:	3301      	adds	r3, #1
 8000544:	60bb      	str	r3, [r7, #8]
 8000546:	68bb      	ldr	r3, [r7, #8]
 8000548:	2b01      	cmp	r3, #1
 800054a:	ddf0      	ble.n	800052e <LED_Sequence+0x12>
		}
		for (int l = 0; l < 2; l++){
 800054c:	2300      	movs	r3, #0
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	e00b      	b.n	800056a <LED_Sequence+0x4e>
			HAL_GPIO_TogglePin(GPIOB, GLED_Pin);
 8000552:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000556:	480c      	ldr	r0, [pc, #48]	@ (8000588 <LED_Sequence+0x6c>)
 8000558:	f000 fe5e 	bl	8001218 <HAL_GPIO_TogglePin>
			HAL_Delay(500);
 800055c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000560:	f000 fb9c 	bl	8000c9c <HAL_Delay>
		for (int l = 0; l < 2; l++){
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	3301      	adds	r3, #1
 8000568:	607b      	str	r3, [r7, #4]
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	2b01      	cmp	r3, #1
 800056e:	ddf0      	ble.n	8000552 <LED_Sequence+0x36>
	for (int _ = 0; _ < 2; _++){
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	3301      	adds	r3, #1
 8000574:	60fb      	str	r3, [r7, #12]
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	2b01      	cmp	r3, #1
 800057a:	ddd5      	ble.n	8000528 <LED_Sequence+0xc>
		}
	}
}
 800057c:	bf00      	nop
 800057e:	bf00      	nop
 8000580:	3710      	adds	r7, #16
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	48000400 	.word	0x48000400

0800058c <ResumeFromStandby>:
/** @brief Checks if the system has woken up from Standby mode.
  * If so, a sequence of blinking LEDs is launched.
  * @retval None
  */
void ResumeFromStandby(void){
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
	/* Check if the system was resumed from Standby mode */
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET){
 8000590:	4b0f      	ldr	r3, [pc, #60]	@ (80005d0 <ResumeFromStandby+0x44>)
 8000592:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000596:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800059a:	2b00      	cmp	r3, #0
 800059c:	d00f      	beq.n	80005be <ResumeFromStandby+0x32>
		/* Clear Standby flag */
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 800059e:	4b0c      	ldr	r3, [pc, #48]	@ (80005d0 <ResumeFromStandby+0x44>)
 80005a0:	2201      	movs	r2, #1
 80005a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

		// This part executes at wake-up
		// Reinitialize the USART2 peripheral
		MX_USART2_UART_Init();
 80005a6:	f000 f8ab 	bl	8000700 <MX_USART2_UART_Init>
		printf("\t\tRéveil depuis la patte PA0, sortie du mode Standby. \r\n");
 80005aa:	480a      	ldr	r0, [pc, #40]	@ (80005d4 <ResumeFromStandby+0x48>)
 80005ac:	f003 f994 	bl	80038d8 <puts>
		printf("\t\tSéquence de LEDs lancée. \r\n");
 80005b0:	4809      	ldr	r0, [pc, #36]	@ (80005d8 <ResumeFromStandby+0x4c>)
 80005b2:	f003 f991 	bl	80038d8 <puts>
		// Reinitialize the GPIO peripheral
		MX_GPIO_Init();
 80005b6:	f000 f8ef 	bl	8000798 <MX_GPIO_Init>
		// Start blinking LEDs sequence
		LED_Sequence();
 80005ba:	f7ff ffaf 	bl	800051c <LED_Sequence>
	}
	// Clear the Wake-Up flag of all pins
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 80005be:	4b04      	ldr	r3, [pc, #16]	@ (80005d0 <ResumeFromStandby+0x44>)
 80005c0:	2207      	movs	r2, #7
 80005c2:	619a      	str	r2, [r3, #24]
	// Clear all related wakeup flags - e.g. wake-up pin 1 flag
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WUF1);
 80005c4:	4b02      	ldr	r3, [pc, #8]	@ (80005d0 <ResumeFromStandby+0x44>)
 80005c6:	2201      	movs	r2, #1
 80005c8:	619a      	str	r2, [r3, #24]
}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	58000400 	.word	0x58000400
 80005d4:	08004010 	.word	0x08004010
 80005d8:	0800404c 	.word	0x0800404c

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f000 fae6 	bl	8000bb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f82c 	bl	8000640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f000 f8d6 	bl	8000798 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ec:	f000 f888 	bl	8000700 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ResumeFromStandby();
 80005f0:	f7ff ffcc 	bl	800058c <ResumeFromStandby>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	  printf("\r\n\r\nTest d'une appli mode veille profonde sur STM32\r\n");
 80005f4:	480d      	ldr	r0, [pc, #52]	@ (800062c <main+0x50>)
 80005f6:	f003 f96f 	bl	80038d8 <puts>
  while (1)
  {
	  printf("En attente de pression du bouton UB3... \r\n");
 80005fa:	480d      	ldr	r0, [pc, #52]	@ (8000630 <main+0x54>)
 80005fc:	f003 f96c 	bl	80038d8 <puts>
	  while(HAL_GPIO_ReadPin(GPIOC, UB3_Pin) == SET);
 8000600:	bf00      	nop
 8000602:	2140      	movs	r1, #64	@ 0x40
 8000604:	480b      	ldr	r0, [pc, #44]	@ (8000634 <main+0x58>)
 8000606:	f000 fdd9 	bl	80011bc <HAL_GPIO_ReadPin>
 800060a:	4603      	mov	r3, r0
 800060c:	2b01      	cmp	r3, #1
 800060e:	d0f8      	beq.n	8000602 <main+0x26>
	  printf("\tPression bouton UB3 -sur PC6- détectée! \r\n");
 8000610:	4809      	ldr	r0, [pc, #36]	@ (8000638 <main+0x5c>)
 8000612:	f003 f961 	bl	80038d8 <puts>
	  printf("\tLe µCU va entrer en mode Standby. \r\n\r\n");
 8000616:	4809      	ldr	r0, [pc, #36]	@ (800063c <main+0x60>)
 8000618:	f003 f95e 	bl	80038d8 <puts>

	  // Clock-gating the USART2 peripheral
	  __HAL_RCC_USART2_CLK_SLEEP_DISABLE();
 800061c:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000620:	f7ff ff58 	bl	80004d4 <LL_APB1_GRP1_DisableClockSleep>

	  HAL_PWR_EnterSTANDBYMode();
 8000624:	f000 fe62 	bl	80012ec <HAL_PWR_EnterSTANDBYMode>
	  printf("En attente de pression du bouton UB3... \r\n");
 8000628:	e7e7      	b.n	80005fa <main+0x1e>
 800062a:	bf00      	nop
 800062c:	0800406c 	.word	0x0800406c
 8000630:	080040a4 	.word	0x080040a4
 8000634:	48000800 	.word	0x48000800
 8000638:	080040d0 	.word	0x080040d0
 800063c:	08004100 	.word	0x08004100

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b09a      	sub	sp, #104	@ 0x68
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 0320 	add.w	r3, r7, #32
 800064a:	2248      	movs	r2, #72	@ 0x48
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f003 fa22 	bl	8003a98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	605a      	str	r2, [r3, #4]
 800065c:	609a      	str	r2, [r3, #8]
 800065e:	60da      	str	r2, [r3, #12]
 8000660:	611a      	str	r2, [r3, #16]
 8000662:	615a      	str	r2, [r3, #20]
 8000664:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000666:	4b25      	ldr	r3, [pc, #148]	@ (80006fc <SystemClock_Config+0xbc>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800066e:	4a23      	ldr	r2, [pc, #140]	@ (80006fc <SystemClock_Config+0xbc>)
 8000670:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000674:	6013      	str	r3, [r2, #0]
 8000676:	4b21      	ldr	r3, [pc, #132]	@ (80006fc <SystemClock_Config+0xbc>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800067e:	603b      	str	r3, [r7, #0]
 8000680:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000682:	2320      	movs	r3, #32
 8000684:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000686:	2301      	movs	r3, #1
 8000688:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800068a:	2300      	movs	r3, #0
 800068c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800068e:	2360      	movs	r3, #96	@ 0x60
 8000690:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000692:	2302      	movs	r3, #2
 8000694:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000696:	2301      	movs	r3, #1
 8000698:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 24;
 800069e:	2318      	movs	r3, #24
 80006a0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80006a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006a8:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80006ac:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80006b2:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b4:	f107 0320 	add.w	r3, r7, #32
 80006b8:	4618      	mov	r0, r3
 80006ba:	f001 f96f 	bl	800199c <HAL_RCC_OscConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80006c4:	f000 f8e8 	bl	8000898 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80006c8:	234f      	movs	r3, #79	@ 0x4f
 80006ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006cc:	2303      	movs	r3, #3
 80006ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006e0:	1d3b      	adds	r3, r7, #4
 80006e2:	2102      	movs	r1, #2
 80006e4:	4618      	mov	r0, r3
 80006e6:	f001 fcdb 	bl	80020a0 <HAL_RCC_ClockConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80006f0:	f000 f8d2 	bl	8000898 <Error_Handler>
  }
}
 80006f4:	bf00      	nop
 80006f6:	3768      	adds	r7, #104	@ 0x68
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	58000400 	.word	0x58000400

08000700 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000704:	4b22      	ldr	r3, [pc, #136]	@ (8000790 <MX_USART2_UART_Init+0x90>)
 8000706:	4a23      	ldr	r2, [pc, #140]	@ (8000794 <MX_USART2_UART_Init+0x94>)
 8000708:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800070a:	4b21      	ldr	r3, [pc, #132]	@ (8000790 <MX_USART2_UART_Init+0x90>)
 800070c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000710:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000712:	4b1f      	ldr	r3, [pc, #124]	@ (8000790 <MX_USART2_UART_Init+0x90>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000718:	4b1d      	ldr	r3, [pc, #116]	@ (8000790 <MX_USART2_UART_Init+0x90>)
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800071e:	4b1c      	ldr	r3, [pc, #112]	@ (8000790 <MX_USART2_UART_Init+0x90>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000724:	4b1a      	ldr	r3, [pc, #104]	@ (8000790 <MX_USART2_UART_Init+0x90>)
 8000726:	220c      	movs	r2, #12
 8000728:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072a:	4b19      	ldr	r3, [pc, #100]	@ (8000790 <MX_USART2_UART_Init+0x90>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000730:	4b17      	ldr	r3, [pc, #92]	@ (8000790 <MX_USART2_UART_Init+0x90>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000736:	4b16      	ldr	r3, [pc, #88]	@ (8000790 <MX_USART2_UART_Init+0x90>)
 8000738:	2200      	movs	r2, #0
 800073a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800073c:	4b14      	ldr	r3, [pc, #80]	@ (8000790 <MX_USART2_UART_Init+0x90>)
 800073e:	2200      	movs	r2, #0
 8000740:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000742:	4b13      	ldr	r3, [pc, #76]	@ (8000790 <MX_USART2_UART_Init+0x90>)
 8000744:	2200      	movs	r2, #0
 8000746:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000748:	4811      	ldr	r0, [pc, #68]	@ (8000790 <MX_USART2_UART_Init+0x90>)
 800074a:	f002 f9a4 	bl	8002a96 <HAL_UART_Init>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000754:	f000 f8a0 	bl	8000898 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000758:	2100      	movs	r1, #0
 800075a:	480d      	ldr	r0, [pc, #52]	@ (8000790 <MX_USART2_UART_Init+0x90>)
 800075c:	f002 fedb 	bl	8003516 <HAL_UARTEx_SetTxFifoThreshold>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000766:	f000 f897 	bl	8000898 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800076a:	2100      	movs	r1, #0
 800076c:	4808      	ldr	r0, [pc, #32]	@ (8000790 <MX_USART2_UART_Init+0x90>)
 800076e:	f002 ff10 	bl	8003592 <HAL_UARTEx_SetRxFifoThreshold>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000778:	f000 f88e 	bl	8000898 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800077c:	4804      	ldr	r0, [pc, #16]	@ (8000790 <MX_USART2_UART_Init+0x90>)
 800077e:	f002 fe92 	bl	80034a6 <HAL_UARTEx_DisableFifoMode>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000788:	f000 f886 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20000084 	.word	0x20000084
 8000794:	40004400 	.word	0x40004400

08000798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b086      	sub	sp, #24
 800079c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
 80007aa:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ac:	2002      	movs	r0, #2
 80007ae:	f7ff fe79 	bl	80004a4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b2:	2004      	movs	r0, #4
 80007b4:	f7ff fe76 	bl	80004a4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b8:	2001      	movs	r0, #1
 80007ba:	f7ff fe73 	bl	80004a4 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BLED_Pin|GLED_Pin, GPIO_PIN_RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	f44f 4102 	mov.w	r1, #33280	@ 0x8200
 80007c4:	4832      	ldr	r0, [pc, #200]	@ (8000890 <MX_GPIO_Init+0xf8>)
 80007c6:	f000 fd10 	bl	80011ea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|GPIO_PIN_5|FE_CTRL1_Pin, GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2138      	movs	r1, #56	@ 0x38
 80007ce:	4831      	ldr	r0, [pc, #196]	@ (8000894 <MX_GPIO_Init+0xfc>)
 80007d0:	f000 fd0b 	bl	80011ea <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BLED_Pin GLED_Pin */
  GPIO_InitStruct.Pin = BLED_Pin|GLED_Pin;
 80007d4:	f44f 4302 	mov.w	r3, #33280	@ 0x8200
 80007d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007da:	2301      	movs	r3, #1
 80007dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e2:	2300      	movs	r3, #0
 80007e4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e6:	1d3b      	adds	r3, r7, #4
 80007e8:	4619      	mov	r1, r3
 80007ea:	4829      	ldr	r0, [pc, #164]	@ (8000890 <MX_GPIO_Init+0xf8>)
 80007ec:	f000 fb86 	bl	8000efc <HAL_GPIO_Init>

  /*Configure GPIO pins : FE_CTRL3_Pin FE_CTRL1_Pin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL1_Pin;
 80007f0:	2318      	movs	r3, #24
 80007f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f4:	2301      	movs	r3, #1
 80007f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007fc:	2303      	movs	r3, #3
 80007fe:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	4619      	mov	r1, r3
 8000804:	4823      	ldr	r0, [pc, #140]	@ (8000894 <MX_GPIO_Init+0xfc>)
 8000806:	f000 fb79 	bl	8000efc <HAL_GPIO_Init>

  /*Configure GPIO pin : UB1_Pin */
  GPIO_InitStruct.Pin = UB1_Pin;
 800080a:	2301      	movs	r3, #1
 800080c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800080e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000812:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000814:	2301      	movs	r3, #1
 8000816:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(UB1_GPIO_Port, &GPIO_InitStruct);
 8000818:	1d3b      	adds	r3, r7, #4
 800081a:	4619      	mov	r1, r3
 800081c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000820:	f000 fb6c 	bl	8000efc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000824:	2320      	movs	r3, #32
 8000826:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000828:	2301      	movs	r3, #1
 800082a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000830:	2300      	movs	r3, #0
 8000832:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	4619      	mov	r1, r3
 8000838:	4816      	ldr	r0, [pc, #88]	@ (8000894 <MX_GPIO_Init+0xfc>)
 800083a:	f000 fb5f 	bl	8000efc <HAL_GPIO_Init>

  /*Configure GPIO pin : UB3_Pin */
  GPIO_InitStruct.Pin = UB3_Pin;
 800083e:	2340      	movs	r3, #64	@ 0x40
 8000840:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000842:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000846:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000848:	2301      	movs	r3, #1
 800084a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(UB3_GPIO_Port, &GPIO_InitStruct);
 800084c:	1d3b      	adds	r3, r7, #4
 800084e:	4619      	mov	r1, r3
 8000850:	4810      	ldr	r0, [pc, #64]	@ (8000894 <MX_GPIO_Init+0xfc>)
 8000852:	f000 fb53 	bl	8000efc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000856:	2200      	movs	r2, #0
 8000858:	2100      	movs	r1, #0
 800085a:	2006      	movs	r0, #6
 800085c:	f000 fb19 	bl	8000e92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000860:	2006      	movs	r0, #6
 8000862:	f000 fb30 	bl	8000ec6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000866:	2200      	movs	r2, #0
 8000868:	2100      	movs	r1, #0
 800086a:	2016      	movs	r0, #22
 800086c:	f000 fb11 	bl	8000e92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000870:	2016      	movs	r0, #22
 8000872:	f000 fb28 	bl	8000ec6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* Enable WakeUp Pin PWR_WAKEUP_PIN1 connected to PA0 */
   HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1_LOW);
 8000876:	2021      	movs	r0, #33	@ 0x21
 8000878:	f000 fd18 	bl	80012ac <HAL_PWR_EnableWakeUpPin>
  /* Enable wake-up pin (PA0) pull-up state in Standby mode.*/
  HAL_PWREx_EnableGPIOPullUp(PWR_GPIO_A, PWR_GPIO_BIT_0);
 800087c:	2101      	movs	r1, #1
 800087e:	2000      	movs	r0, #0
 8000880:	f000 fd5a 	bl	8001338 <HAL_PWREx_EnableGPIOPullUp>
  /* Apply pull-up/pull-down configuration in Standby mode */
  HAL_PWREx_EnablePullUpPullDownConfig();
 8000884:	f000 fdc4 	bl	8001410 <HAL_PWREx_EnablePullUpPullDownConfig>

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000888:	bf00      	nop
 800088a:	3718      	adds	r7, #24
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	48000400 	.word	0x48000400
 8000894:	48000800 	.word	0x48000800

08000898 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800089c:	b672      	cpsid	i
}
 800089e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a0:	bf00      	nop
 80008a2:	e7fd      	b.n	80008a0 <Error_Handler+0x8>

080008a4 <LL_AHB2_GRP1_EnableClock>:
{
 80008a4:	b480      	push	{r7}
 80008a6:	b085      	sub	sp, #20
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80008ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80008b0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80008b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	4313      	orrs	r3, r2
 80008ba:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80008bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80008c0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	4013      	ands	r3, r2
 80008c6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008c8:	68fb      	ldr	r3, [r7, #12]
}
 80008ca:	bf00      	nop
 80008cc:	3714      	adds	r7, #20
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc80      	pop	{r7}
 80008d2:	4770      	bx	lr

080008d4 <LL_APB1_GRP1_EnableClock>:
{
 80008d4:	b480      	push	{r7}
 80008d6:	b085      	sub	sp, #20
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80008dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80008e0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80008e2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	4313      	orrs	r3, r2
 80008ea:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80008ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80008f0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	4013      	ands	r3, r2
 80008f6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008f8:	68fb      	ldr	r3, [r7, #12]
}
 80008fa:	bf00      	nop
 80008fc:	3714      	adds	r7, #20
 80008fe:	46bd      	mov	sp, r7
 8000900:	bc80      	pop	{r7}
 8000902:	4770      	bx	lr

08000904 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	bc80      	pop	{r7}
 800090e:	4770      	bx	lr

08000910 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b096      	sub	sp, #88	@ 0x58
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000918:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000928:	f107 030c 	add.w	r3, r7, #12
 800092c:	2238      	movs	r2, #56	@ 0x38
 800092e:	2100      	movs	r1, #0
 8000930:	4618      	mov	r0, r3
 8000932:	f003 f8b1 	bl	8003a98 <memset>
  if(huart->Instance==USART2)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4a17      	ldr	r2, [pc, #92]	@ (8000998 <HAL_UART_MspInit+0x88>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d126      	bne.n	800098e <HAL_UART_MspInit+0x7e>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000940:	2302      	movs	r3, #2
 8000942:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000944:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 8000948:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800094a:	f107 030c 	add.w	r3, r7, #12
 800094e:	4618      	mov	r0, r3
 8000950:	f001 ff66 	bl	8002820 <HAL_RCCEx_PeriphCLKConfig>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800095a:	f7ff ff9d 	bl	8000898 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800095e:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000962:	f7ff ffb7 	bl	80008d4 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000966:	2001      	movs	r0, #1
 8000968:	f7ff ff9c 	bl	80008a4 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 800096c:	230c      	movs	r3, #12
 800096e:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000970:	2302      	movs	r3, #2
 8000972:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000978:	2300      	movs	r3, #0
 800097a:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800097c:	2307      	movs	r3, #7
 800097e:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000980:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000984:	4619      	mov	r1, r3
 8000986:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800098a:	f000 fab7 	bl	8000efc <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800098e:	bf00      	nop
 8000990:	3758      	adds	r7, #88	@ 0x58
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40004400 	.word	0x40004400

0800099c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009a0:	bf00      	nop
 80009a2:	e7fd      	b.n	80009a0 <NMI_Handler+0x4>

080009a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009a8:	bf00      	nop
 80009aa:	e7fd      	b.n	80009a8 <HardFault_Handler+0x4>

080009ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b0:	bf00      	nop
 80009b2:	e7fd      	b.n	80009b0 <MemManage_Handler+0x4>

080009b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009b8:	bf00      	nop
 80009ba:	e7fd      	b.n	80009b8 <BusFault_Handler+0x4>

080009bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c0:	bf00      	nop
 80009c2:	e7fd      	b.n	80009c0 <UsageFault_Handler+0x4>

080009c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bc80      	pop	{r7}
 80009ce:	4770      	bx	lr

080009d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bc80      	pop	{r7}
 80009da:	4770      	bx	lr

080009dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bc80      	pop	{r7}
 80009e6:	4770      	bx	lr

080009e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ec:	f000 f93a 	bl	8000c64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line 0 Interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UB1_Pin);
 80009f8:	2001      	movs	r0, #1
 80009fa:	f000 fc27 	bl	800124c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}

08000a02 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [9:5] Interrupt.
  */
void EXTI9_5_IRQHandler(void)
{
 8000a02:	b580      	push	{r7, lr}
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UB3_Pin);
 8000a06:	2040      	movs	r0, #64	@ 0x40
 8000a08:	f000 fc20 	bl	800124c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b086      	sub	sp, #24
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	60f8      	str	r0, [r7, #12]
 8000a18:	60b9      	str	r1, [r7, #8]
 8000a1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	617b      	str	r3, [r7, #20]
 8000a20:	e00a      	b.n	8000a38 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a22:	f3af 8000 	nop.w
 8000a26:	4601      	mov	r1, r0
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	1c5a      	adds	r2, r3, #1
 8000a2c:	60ba      	str	r2, [r7, #8]
 8000a2e:	b2ca      	uxtb	r2, r1
 8000a30:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	3301      	adds	r3, #1
 8000a36:	617b      	str	r3, [r7, #20]
 8000a38:	697a      	ldr	r2, [r7, #20]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	dbf0      	blt.n	8000a22 <_read+0x12>
  }

  return len;
 8000a40:	687b      	ldr	r3, [r7, #4]
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3718      	adds	r7, #24
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b086      	sub	sp, #24
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	60f8      	str	r0, [r7, #12]
 8000a52:	60b9      	str	r1, [r7, #8]
 8000a54:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a56:	2300      	movs	r3, #0
 8000a58:	617b      	str	r3, [r7, #20]
 8000a5a:	e009      	b.n	8000a70 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	1c5a      	adds	r2, r3, #1
 8000a60:	60ba      	str	r2, [r7, #8]
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff fd47 	bl	80004f8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	617b      	str	r3, [r7, #20]
 8000a70:	697a      	ldr	r2, [r7, #20]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	dbf1      	blt.n	8000a5c <_write+0x12>
  }
  return len;
 8000a78:	687b      	ldr	r3, [r7, #4]
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3718      	adds	r7, #24
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <_close>:

int _close(int file)
{
 8000a82:	b480      	push	{r7}
 8000a84:	b083      	sub	sp, #12
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr

08000a98 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000aa8:	605a      	str	r2, [r3, #4]
  return 0;
 8000aaa:	2300      	movs	r3, #0
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bc80      	pop	{r7}
 8000ab4:	4770      	bx	lr

08000ab6 <_isatty>:

int _isatty(int file)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	b083      	sub	sp, #12
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000abe:	2301      	movs	r3, #1
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bc80      	pop	{r7}
 8000ac8:	4770      	bx	lr

08000aca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000aca:	b480      	push	{r7}
 8000acc:	b085      	sub	sp, #20
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	60f8      	str	r0, [r7, #12]
 8000ad2:	60b9      	str	r1, [r7, #8]
 8000ad4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ad6:	2300      	movs	r3, #0
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3714      	adds	r7, #20
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bc80      	pop	{r7}
 8000ae0:	4770      	bx	lr
	...

08000ae4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b086      	sub	sp, #24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000aec:	4a14      	ldr	r2, [pc, #80]	@ (8000b40 <_sbrk+0x5c>)
 8000aee:	4b15      	ldr	r3, [pc, #84]	@ (8000b44 <_sbrk+0x60>)
 8000af0:	1ad3      	subs	r3, r2, r3
 8000af2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000af8:	4b13      	ldr	r3, [pc, #76]	@ (8000b48 <_sbrk+0x64>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d102      	bne.n	8000b06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b00:	4b11      	ldr	r3, [pc, #68]	@ (8000b48 <_sbrk+0x64>)
 8000b02:	4a12      	ldr	r2, [pc, #72]	@ (8000b4c <_sbrk+0x68>)
 8000b04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b06:	4b10      	ldr	r3, [pc, #64]	@ (8000b48 <_sbrk+0x64>)
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d207      	bcs.n	8000b24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b14:	f003 f80e 	bl	8003b34 <__errno>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	220c      	movs	r2, #12
 8000b1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b22:	e009      	b.n	8000b38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b24:	4b08      	ldr	r3, [pc, #32]	@ (8000b48 <_sbrk+0x64>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b2a:	4b07      	ldr	r3, [pc, #28]	@ (8000b48 <_sbrk+0x64>)
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4413      	add	r3, r2
 8000b32:	4a05      	ldr	r2, [pc, #20]	@ (8000b48 <_sbrk+0x64>)
 8000b34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b36:	68fb      	ldr	r3, [r7, #12]
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3718      	adds	r7, #24
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20010000 	.word	0x20010000
 8000b44:	00000400 	.word	0x00000400
 8000b48:	20000118 	.word	0x20000118
 8000b4c:	20000270 	.word	0x20000270

08000b50 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bc80      	pop	{r7}
 8000b5a:	4770      	bx	lr

08000b5c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b5c:	480d      	ldr	r0, [pc, #52]	@ (8000b94 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b5e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b60:	f7ff fff6 	bl	8000b50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b64:	480c      	ldr	r0, [pc, #48]	@ (8000b98 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b66:	490d      	ldr	r1, [pc, #52]	@ (8000b9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b68:	4a0d      	ldr	r2, [pc, #52]	@ (8000ba0 <LoopForever+0xe>)
  movs r3, #0
 8000b6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b6c:	e002      	b.n	8000b74 <LoopCopyDataInit>

08000b6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b72:	3304      	adds	r3, #4

08000b74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b78:	d3f9      	bcc.n	8000b6e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ba4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b7c:	4c0a      	ldr	r4, [pc, #40]	@ (8000ba8 <LoopForever+0x16>)
  movs r3, #0
 8000b7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b80:	e001      	b.n	8000b86 <LoopFillZerobss>

08000b82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b84:	3204      	adds	r2, #4

08000b86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b88:	d3fb      	bcc.n	8000b82 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b8a:	f002 ffd9 	bl	8003b40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b8e:	f7ff fd25 	bl	80005dc <main>

08000b92 <LoopForever>:

LoopForever:
    b LoopForever
 8000b92:	e7fe      	b.n	8000b92 <LoopForever>
  ldr   r0, =_estack
 8000b94:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000b98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b9c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000ba0:	0800421c 	.word	0x0800421c
  ldr r2, =_sbss
 8000ba4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ba8:	2000026c 	.word	0x2000026c

08000bac <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bac:	e7fe      	b.n	8000bac <ADC_IRQHandler>
	...

08000bb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bba:	2003      	movs	r0, #3
 8000bbc:	f000 f95e 	bl	8000e7c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000bc0:	f001 fc50 	bl	8002464 <HAL_RCC_GetHCLKFreq>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	4a09      	ldr	r2, [pc, #36]	@ (8000bec <HAL_Init+0x3c>)
 8000bc8:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bca:	2000      	movs	r0, #0
 8000bcc:	f000 f810 	bl	8000bf0 <HAL_InitTick>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d002      	beq.n	8000bdc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	71fb      	strb	r3, [r7, #7]
 8000bda:	e001      	b.n	8000be0 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bdc:	f7ff fe92 	bl	8000904 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000be0:	79fb      	ldrb	r3, [r7, #7]
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000000 	.word	0x20000000

08000bf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000bfc:	4b17      	ldr	r3, [pc, #92]	@ (8000c5c <HAL_InitTick+0x6c>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d024      	beq.n	8000c4e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c04:	f001 fc2e 	bl	8002464 <HAL_RCC_GetHCLKFreq>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	4b14      	ldr	r3, [pc, #80]	@ (8000c5c <HAL_InitTick+0x6c>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	4619      	mov	r1, r3
 8000c10:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c14:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f000 f960 	bl	8000ee2 <HAL_SYSTICK_Config>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d10f      	bne.n	8000c48 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2b0f      	cmp	r3, #15
 8000c2c:	d809      	bhi.n	8000c42 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	6879      	ldr	r1, [r7, #4]
 8000c32:	f04f 30ff 	mov.w	r0, #4294967295
 8000c36:	f000 f92c 	bl	8000e92 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c3a:	4a09      	ldr	r2, [pc, #36]	@ (8000c60 <HAL_InitTick+0x70>)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6013      	str	r3, [r2, #0]
 8000c40:	e007      	b.n	8000c52 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
 8000c44:	73fb      	strb	r3, [r7, #15]
 8000c46:	e004      	b.n	8000c52 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	73fb      	strb	r3, [r7, #15]
 8000c4c:	e001      	b.n	8000c52 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3710      	adds	r7, #16
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20000008 	.word	0x20000008
 8000c60:	20000004 	.word	0x20000004

08000c64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c68:	4b05      	ldr	r3, [pc, #20]	@ (8000c80 <HAL_IncTick+0x1c>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	4b05      	ldr	r3, [pc, #20]	@ (8000c84 <HAL_IncTick+0x20>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4413      	add	r3, r2
 8000c74:	4a03      	ldr	r2, [pc, #12]	@ (8000c84 <HAL_IncTick+0x20>)
 8000c76:	6013      	str	r3, [r2, #0]
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr
 8000c80:	20000008 	.word	0x20000008
 8000c84:	2000011c 	.word	0x2000011c

08000c88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c8c:	4b02      	ldr	r3, [pc, #8]	@ (8000c98 <HAL_GetTick+0x10>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bc80      	pop	{r7}
 8000c96:	4770      	bx	lr
 8000c98:	2000011c 	.word	0x2000011c

08000c9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ca4:	f7ff fff0 	bl	8000c88 <HAL_GetTick>
 8000ca8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cb4:	d005      	beq.n	8000cc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce0 <HAL_Delay+0x44>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	461a      	mov	r2, r3
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cc2:	bf00      	nop
 8000cc4:	f7ff ffe0 	bl	8000c88 <HAL_GetTick>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	68fa      	ldr	r2, [r7, #12]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d8f7      	bhi.n	8000cc4 <HAL_Delay+0x28>
  {
  }
}
 8000cd4:	bf00      	nop
 8000cd6:	bf00      	nop
 8000cd8:	3710      	adds	r7, #16
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20000008 	.word	0x20000008

08000ce4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	f003 0307 	and.w	r3, r3, #7
 8000cf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8000d28 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cfa:	68ba      	ldr	r2, [r7, #8]
 8000cfc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d00:	4013      	ands	r3, r2
 8000d02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d16:	4a04      	ldr	r2, [pc, #16]	@ (8000d28 <__NVIC_SetPriorityGrouping+0x44>)
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	60d3      	str	r3, [r2, #12]
}
 8000d1c:	bf00      	nop
 8000d1e:	3714      	adds	r7, #20
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bc80      	pop	{r7}
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d30:	4b04      	ldr	r3, [pc, #16]	@ (8000d44 <__NVIC_GetPriorityGrouping+0x18>)
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	0a1b      	lsrs	r3, r3, #8
 8000d36:	f003 0307 	and.w	r3, r3, #7
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bc80      	pop	{r7}
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	db0b      	blt.n	8000d72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d5a:	79fb      	ldrb	r3, [r7, #7]
 8000d5c:	f003 021f 	and.w	r2, r3, #31
 8000d60:	4906      	ldr	r1, [pc, #24]	@ (8000d7c <__NVIC_EnableIRQ+0x34>)
 8000d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d66:	095b      	lsrs	r3, r3, #5
 8000d68:	2001      	movs	r0, #1
 8000d6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d72:	bf00      	nop
 8000d74:	370c      	adds	r7, #12
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc80      	pop	{r7}
 8000d7a:	4770      	bx	lr
 8000d7c:	e000e100 	.word	0xe000e100

08000d80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	6039      	str	r1, [r7, #0]
 8000d8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	db0a      	blt.n	8000daa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	b2da      	uxtb	r2, r3
 8000d98:	490c      	ldr	r1, [pc, #48]	@ (8000dcc <__NVIC_SetPriority+0x4c>)
 8000d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9e:	0112      	lsls	r2, r2, #4
 8000da0:	b2d2      	uxtb	r2, r2
 8000da2:	440b      	add	r3, r1
 8000da4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000da8:	e00a      	b.n	8000dc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	b2da      	uxtb	r2, r3
 8000dae:	4908      	ldr	r1, [pc, #32]	@ (8000dd0 <__NVIC_SetPriority+0x50>)
 8000db0:	79fb      	ldrb	r3, [r7, #7]
 8000db2:	f003 030f 	and.w	r3, r3, #15
 8000db6:	3b04      	subs	r3, #4
 8000db8:	0112      	lsls	r2, r2, #4
 8000dba:	b2d2      	uxtb	r2, r2
 8000dbc:	440b      	add	r3, r1
 8000dbe:	761a      	strb	r2, [r3, #24]
}
 8000dc0:	bf00      	nop
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bc80      	pop	{r7}
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	e000e100 	.word	0xe000e100
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b089      	sub	sp, #36	@ 0x24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	f003 0307 	and.w	r3, r3, #7
 8000de6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	f1c3 0307 	rsb	r3, r3, #7
 8000dee:	2b04      	cmp	r3, #4
 8000df0:	bf28      	it	cs
 8000df2:	2304      	movcs	r3, #4
 8000df4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	3304      	adds	r3, #4
 8000dfa:	2b06      	cmp	r3, #6
 8000dfc:	d902      	bls.n	8000e04 <NVIC_EncodePriority+0x30>
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	3b03      	subs	r3, #3
 8000e02:	e000      	b.n	8000e06 <NVIC_EncodePriority+0x32>
 8000e04:	2300      	movs	r3, #0
 8000e06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e08:	f04f 32ff 	mov.w	r2, #4294967295
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	43da      	mvns	r2, r3
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	401a      	ands	r2, r3
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	fa01 f303 	lsl.w	r3, r1, r3
 8000e26:	43d9      	mvns	r1, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e2c:	4313      	orrs	r3, r2
         );
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3724      	adds	r7, #36	@ 0x24
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bc80      	pop	{r7}
 8000e36:	4770      	bx	lr

08000e38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	3b01      	subs	r3, #1
 8000e44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e48:	d301      	bcc.n	8000e4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e00f      	b.n	8000e6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e78 <SysTick_Config+0x40>)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3b01      	subs	r3, #1
 8000e54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e56:	210f      	movs	r1, #15
 8000e58:	f04f 30ff 	mov.w	r0, #4294967295
 8000e5c:	f7ff ff90 	bl	8000d80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e60:	4b05      	ldr	r3, [pc, #20]	@ (8000e78 <SysTick_Config+0x40>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e66:	4b04      	ldr	r3, [pc, #16]	@ (8000e78 <SysTick_Config+0x40>)
 8000e68:	2207      	movs	r2, #7
 8000e6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	e000e010 	.word	0xe000e010

08000e7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f7ff ff2d 	bl	8000ce4 <__NVIC_SetPriorityGrouping>
}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b086      	sub	sp, #24
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	4603      	mov	r3, r0
 8000e9a:	60b9      	str	r1, [r7, #8]
 8000e9c:	607a      	str	r2, [r7, #4]
 8000e9e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ea0:	f7ff ff44 	bl	8000d2c <__NVIC_GetPriorityGrouping>
 8000ea4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ea6:	687a      	ldr	r2, [r7, #4]
 8000ea8:	68b9      	ldr	r1, [r7, #8]
 8000eaa:	6978      	ldr	r0, [r7, #20]
 8000eac:	f7ff ff92 	bl	8000dd4 <NVIC_EncodePriority>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eb6:	4611      	mov	r1, r2
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff ff61 	bl	8000d80 <__NVIC_SetPriority>
}
 8000ebe:	bf00      	nop
 8000ec0:	3718      	adds	r7, #24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b082      	sub	sp, #8
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	4603      	mov	r3, r0
 8000ece:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff ff37 	bl	8000d48 <__NVIC_EnableIRQ>
}
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b082      	sub	sp, #8
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f7ff ffa4 	bl	8000e38 <SysTick_Config>
 8000ef0:	4603      	mov	r3, r0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
	...

08000efc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b087      	sub	sp, #28
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f06:	2300      	movs	r3, #0
 8000f08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f0a:	e140      	b.n	800118e <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	2101      	movs	r1, #1
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	fa01 f303 	lsl.w	r3, r1, r3
 8000f18:	4013      	ands	r3, r2
 8000f1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	f000 8132 	beq.w	8001188 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f003 0303 	and.w	r3, r3, #3
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d005      	beq.n	8000f3c <HAL_GPIO_Init+0x40>
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f003 0303 	and.w	r3, r3, #3
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	d130      	bne.n	8000f9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	2203      	movs	r2, #3
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	4013      	ands	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	68da      	ldr	r2, [r3, #12]
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f72:	2201      	movs	r2, #1
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	091b      	lsrs	r3, r3, #4
 8000f88:	f003 0201 	and.w	r2, r3, #1
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f003 0303 	and.w	r3, r3, #3
 8000fa6:	2b03      	cmp	r3, #3
 8000fa8:	d017      	beq.n	8000fda <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	68db      	ldr	r3, [r3, #12]
 8000fae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	2203      	movs	r2, #3
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	689a      	ldr	r2, [r3, #8]
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f003 0303 	and.w	r3, r3, #3
 8000fe2:	2b02      	cmp	r3, #2
 8000fe4:	d123      	bne.n	800102e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	08da      	lsrs	r2, r3, #3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	3208      	adds	r2, #8
 8000fee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	f003 0307 	and.w	r3, r3, #7
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	220f      	movs	r2, #15
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	43db      	mvns	r3, r3
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	4013      	ands	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	691a      	ldr	r2, [r3, #16]
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	f003 0307 	and.w	r3, r3, #7
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	4313      	orrs	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	08da      	lsrs	r2, r3, #3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3208      	adds	r2, #8
 8001028:	6939      	ldr	r1, [r7, #16]
 800102a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	2203      	movs	r2, #3
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	43db      	mvns	r3, r3
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	4013      	ands	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f003 0203 	and.w	r2, r3, #3
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	4313      	orrs	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800106a:	2b00      	cmp	r3, #0
 800106c:	f000 808c 	beq.w	8001188 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001070:	4a4e      	ldr	r2, [pc, #312]	@ (80011ac <HAL_GPIO_Init+0x2b0>)
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	089b      	lsrs	r3, r3, #2
 8001076:	3302      	adds	r3, #2
 8001078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800107c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	f003 0303 	and.w	r3, r3, #3
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	2207      	movs	r2, #7
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	43db      	mvns	r3, r3
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	4013      	ands	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800109a:	d00d      	beq.n	80010b8 <HAL_GPIO_Init+0x1bc>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4a44      	ldr	r2, [pc, #272]	@ (80011b0 <HAL_GPIO_Init+0x2b4>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d007      	beq.n	80010b4 <HAL_GPIO_Init+0x1b8>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	4a43      	ldr	r2, [pc, #268]	@ (80011b4 <HAL_GPIO_Init+0x2b8>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d101      	bne.n	80010b0 <HAL_GPIO_Init+0x1b4>
 80010ac:	2302      	movs	r3, #2
 80010ae:	e004      	b.n	80010ba <HAL_GPIO_Init+0x1be>
 80010b0:	2307      	movs	r3, #7
 80010b2:	e002      	b.n	80010ba <HAL_GPIO_Init+0x1be>
 80010b4:	2301      	movs	r3, #1
 80010b6:	e000      	b.n	80010ba <HAL_GPIO_Init+0x1be>
 80010b8:	2300      	movs	r3, #0
 80010ba:	697a      	ldr	r2, [r7, #20]
 80010bc:	f002 0203 	and.w	r2, r2, #3
 80010c0:	0092      	lsls	r2, r2, #2
 80010c2:	4093      	lsls	r3, r2
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010ca:	4938      	ldr	r1, [pc, #224]	@ (80011ac <HAL_GPIO_Init+0x2b0>)
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	089b      	lsrs	r3, r3, #2
 80010d0:	3302      	adds	r3, #2
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010d8:	4b37      	ldr	r3, [pc, #220]	@ (80011b8 <HAL_GPIO_Init+0x2bc>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	43db      	mvns	r3, r3
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	4013      	ands	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d003      	beq.n	80010fc <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010fc:	4a2e      	ldr	r2, [pc, #184]	@ (80011b8 <HAL_GPIO_Init+0x2bc>)
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001102:	4b2d      	ldr	r3, [pc, #180]	@ (80011b8 <HAL_GPIO_Init+0x2bc>)
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	43db      	mvns	r3, r3
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	4013      	ands	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d003      	beq.n	8001126 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	4313      	orrs	r3, r2
 8001124:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001126:	4a24      	ldr	r2, [pc, #144]	@ (80011b8 <HAL_GPIO_Init+0x2bc>)
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 800112c:	4b22      	ldr	r3, [pc, #136]	@ (80011b8 <HAL_GPIO_Init+0x2bc>)
 800112e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001132:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	43db      	mvns	r3, r3
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	4013      	ands	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d003      	beq.n	8001152 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	4313      	orrs	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8001152:	4a19      	ldr	r2, [pc, #100]	@ (80011b8 <HAL_GPIO_Init+0x2bc>)
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800115a:	4b17      	ldr	r3, [pc, #92]	@ (80011b8 <HAL_GPIO_Init+0x2bc>)
 800115c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001160:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	43db      	mvns	r3, r3
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	4013      	ands	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d003      	beq.n	8001180 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	4313      	orrs	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001180:	4a0d      	ldr	r2, [pc, #52]	@ (80011b8 <HAL_GPIO_Init+0x2bc>)
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	3301      	adds	r3, #1
 800118c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	fa22 f303 	lsr.w	r3, r2, r3
 8001198:	2b00      	cmp	r3, #0
 800119a:	f47f aeb7 	bne.w	8000f0c <HAL_GPIO_Init+0x10>
  }
}
 800119e:	bf00      	nop
 80011a0:	bf00      	nop
 80011a2:	371c      	adds	r7, #28
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bc80      	pop	{r7}
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	40010000 	.word	0x40010000
 80011b0:	48000400 	.word	0x48000400
 80011b4:	48000800 	.word	0x48000800
 80011b8:	58000800 	.word	0x58000800

080011bc <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011bc:	b480      	push	{r7}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	460b      	mov	r3, r1
 80011c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	691a      	ldr	r2, [r3, #16]
 80011cc:	887b      	ldrh	r3, [r7, #2]
 80011ce:	4013      	ands	r3, r2
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d002      	beq.n	80011da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80011d4:	2301      	movs	r3, #1
 80011d6:	73fb      	strb	r3, [r7, #15]
 80011d8:	e001      	b.n	80011de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011da:	2300      	movs	r3, #0
 80011dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011de:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3714      	adds	r7, #20
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bc80      	pop	{r7}
 80011e8:	4770      	bx	lr

080011ea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011ea:	b480      	push	{r7}
 80011ec:	b083      	sub	sp, #12
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
 80011f2:	460b      	mov	r3, r1
 80011f4:	807b      	strh	r3, [r7, #2]
 80011f6:	4613      	mov	r3, r2
 80011f8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011fa:	787b      	ldrb	r3, [r7, #1]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d003      	beq.n	8001208 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001200:	887a      	ldrh	r2, [r7, #2]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001206:	e002      	b.n	800120e <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001208:	887a      	ldrh	r2, [r7, #2]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	bc80      	pop	{r7}
 8001216:	4770      	bx	lr

08001218 <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	460b      	mov	r3, r1
 8001222:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	695b      	ldr	r3, [r3, #20]
 8001228:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800122a:	887a      	ldrh	r2, [r7, #2]
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	4013      	ands	r3, r2
 8001230:	041a      	lsls	r2, r3, #16
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	43d9      	mvns	r1, r3
 8001236:	887b      	ldrh	r3, [r7, #2]
 8001238:	400b      	ands	r3, r1
 800123a:	431a      	orrs	r2, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	619a      	str	r2, [r3, #24]
}
 8001240:	bf00      	nop
 8001242:	3714      	adds	r7, #20
 8001244:	46bd      	mov	sp, r7
 8001246:	bc80      	pop	{r7}
 8001248:	4770      	bx	lr
	...

0800124c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001256:	4b08      	ldr	r3, [pc, #32]	@ (8001278 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001258:	68da      	ldr	r2, [r3, #12]
 800125a:	88fb      	ldrh	r3, [r7, #6]
 800125c:	4013      	ands	r3, r2
 800125e:	2b00      	cmp	r3, #0
 8001260:	d006      	beq.n	8001270 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001262:	4a05      	ldr	r2, [pc, #20]	@ (8001278 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001264:	88fb      	ldrh	r3, [r7, #6]
 8001266:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001268:	88fb      	ldrh	r3, [r7, #6]
 800126a:	4618      	mov	r0, r3
 800126c:	f000 f806 	bl	800127c <HAL_GPIO_EXTI_Callback>
  }
}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	58000800 	.word	0x58000800

0800127c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001286:	bf00      	nop
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr

08001290 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001294:	4b04      	ldr	r3, [pc, #16]	@ (80012a8 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a03      	ldr	r2, [pc, #12]	@ (80012a8 <HAL_PWR_EnableBkUpAccess+0x18>)
 800129a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800129e:	6013      	str	r3, [r2, #0]
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bc80      	pop	{r7}
 80012a6:	4770      	bx	lr
 80012a8:	58000400 	.word	0x58000400

080012ac <HAL_PWR_EnableWakeUpPin>:
  *           @arg @ref PWR_WAKEUP_PIN3_HIGH or @arg @ref PWR_WAKEUP_PIN3_LOW
  * @note  PWR_WAKEUP_PINx and PWR_WAKEUP_PINx_HIGH are equivalent.
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinPolarity)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinPolarity));

  /* Specifies the Wake-Up pin polarity for the event detection
    (rising or falling edge) */
  MODIFY_REG(PWR->CR4, ((PWR_CR4_WP1 | PWR_CR4_WP2 | PWR_CR4_WP3) & WakeUpPinPolarity), (WakeUpPinPolarity >> PWR_WUP_POLARITY_SHIFT));
 80012b4:	4b0c      	ldr	r3, [pc, #48]	@ (80012e8 <HAL_PWR_EnableWakeUpPin+0x3c>)
 80012b6:	68da      	ldr	r2, [r3, #12]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f003 0307 	and.w	r3, r3, #7
 80012be:	43db      	mvns	r3, r3
 80012c0:	401a      	ands	r2, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	095b      	lsrs	r3, r3, #5
 80012c6:	4908      	ldr	r1, [pc, #32]	@ (80012e8 <HAL_PWR_EnableWakeUpPin+0x3c>)
 80012c8:	4313      	orrs	r3, r2
 80012ca:	60cb      	str	r3, [r1, #12]

  /* Enable wake-up pin */
#ifdef CORE_CM0PLUS
  SET_BIT(PWR->C2CR3, (PWR_C2CR3_EWUP & WakeUpPinPolarity));
#else
  SET_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinPolarity));
 80012cc:	4b06      	ldr	r3, [pc, #24]	@ (80012e8 <HAL_PWR_EnableWakeUpPin+0x3c>)
 80012ce:	689a      	ldr	r2, [r3, #8]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f003 0307 	and.w	r3, r3, #7
 80012d6:	4904      	ldr	r1, [pc, #16]	@ (80012e8 <HAL_PWR_EnableWakeUpPin+0x3c>)
 80012d8:	4313      	orrs	r3, r2
 80012da:	608b      	str	r3, [r1, #8]
#endif
}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bc80      	pop	{r7}
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	58000400 	.word	0x58000400

080012ec <HAL_PWR_EnterSTANDBYMode>:
  * @note  According to system power policy, system entering in Standby mode
  *        is depending on other CPU power mode.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  /* Set Stand-by mode */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STANDBY);
#else
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STANDBY);
 80012f0:	4b09      	ldr	r3, [pc, #36]	@ (8001318 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f023 0307 	bic.w	r3, r3, #7
 80012f8:	4a07      	ldr	r2, [pc, #28]	@ (8001318 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80012fa:	f043 0303 	orr.w	r3, r3, #3
 80012fe:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001300:	4b06      	ldr	r3, [pc, #24]	@ (800131c <HAL_PWR_EnterSTANDBYMode+0x30>)
 8001302:	691b      	ldr	r3, [r3, #16]
 8001304:	4a05      	ldr	r2, [pc, #20]	@ (800131c <HAL_PWR_EnterSTANDBYMode+0x30>)
 8001306:	f043 0304 	orr.w	r3, r3, #4
 800130a:	6113      	str	r3, [r2, #16]
#if defined ( __CC_ARM)
  __force_stores();
#endif

  /* Request Wait For Interrupt */
  __WFI();
 800130c:	bf30      	wfi
           - If system was in Standby mode (other CPU in Standby or Shutdown),
             then at wake-up program restarts at reset state
           - If system was in Run or Stop mode (other CPU in Run, Sleep, Stop),
             then at wake-up program continues from this point
  */
}
 800130e:	bf00      	nop
 8001310:	46bd      	mov	sp, r7
 8001312:	bc80      	pop	{r7}
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	58000400 	.word	0x58000400
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001324:	4b03      	ldr	r3, [pc, #12]	@ (8001334 <HAL_PWREx_GetVoltageRange+0x14>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800132c:	4618      	mov	r0, r3
 800132e:	46bd      	mov	sp, r7
 8001330:	bc80      	pop	{r7}
 8001332:	4770      	bx	lr
 8001334:	58000400 	.word	0x58000400

08001338 <HAL_PWREx_EnableGPIOPullUp>:
  *         I/O pins are available) or the logical OR of several of them to set
  *         several bits for a given port in a single API call.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_EnableGPIOPullUp(uint32_t GPIO, uint32_t GPIONumber)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001342:	2300      	movs	r3, #0
 8001344:	73fb      	strb	r3, [r7, #15]

  assert_param(IS_PWR_GPIO(GPIO));
  assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));

  switch (GPIO)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2b07      	cmp	r3, #7
 800134a:	d855      	bhi.n	80013f8 <HAL_PWREx_EnableGPIOPullUp+0xc0>
 800134c:	a201      	add	r2, pc, #4	@ (adr r2, 8001354 <HAL_PWREx_EnableGPIOPullUp+0x1c>)
 800134e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001352:	bf00      	nop
 8001354:	08001375 	.word	0x08001375
 8001358:	08001391 	.word	0x08001391
 800135c:	080013ad 	.word	0x080013ad
 8001360:	080013f9 	.word	0x080013f9
 8001364:	080013f9 	.word	0x080013f9
 8001368:	080013f9 	.word	0x080013f9
 800136c:	080013f9 	.word	0x080013f9
 8001370:	080013d5 	.word	0x080013d5
  {
    case PWR_GPIO_A:
      SET_BIT(PWR->PUCRA, GPIONumber);
 8001374:	4b25      	ldr	r3, [pc, #148]	@ (800140c <HAL_PWREx_EnableGPIOPullUp+0xd4>)
 8001376:	6a1a      	ldr	r2, [r3, #32]
 8001378:	4924      	ldr	r1, [pc, #144]	@ (800140c <HAL_PWREx_EnableGPIOPullUp+0xd4>)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	4313      	orrs	r3, r2
 800137e:	620b      	str	r3, [r1, #32]
      CLEAR_BIT(PWR->PDCRA, GPIONumber);
 8001380:	4b22      	ldr	r3, [pc, #136]	@ (800140c <HAL_PWREx_EnableGPIOPullUp+0xd4>)
 8001382:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	43db      	mvns	r3, r3
 8001388:	4920      	ldr	r1, [pc, #128]	@ (800140c <HAL_PWREx_EnableGPIOPullUp+0xd4>)
 800138a:	4013      	ands	r3, r2
 800138c:	624b      	str	r3, [r1, #36]	@ 0x24
      break;
 800138e:	e036      	b.n	80013fe <HAL_PWREx_EnableGPIOPullUp+0xc6>
    case PWR_GPIO_B:
      SET_BIT(PWR->PUCRB, GPIONumber);
 8001390:	4b1e      	ldr	r3, [pc, #120]	@ (800140c <HAL_PWREx_EnableGPIOPullUp+0xd4>)
 8001392:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001394:	491d      	ldr	r1, [pc, #116]	@ (800140c <HAL_PWREx_EnableGPIOPullUp+0xd4>)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	4313      	orrs	r3, r2
 800139a:	628b      	str	r3, [r1, #40]	@ 0x28
      CLEAR_BIT(PWR->PDCRB, GPIONumber);
 800139c:	4b1b      	ldr	r3, [pc, #108]	@ (800140c <HAL_PWREx_EnableGPIOPullUp+0xd4>)
 800139e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	43db      	mvns	r3, r3
 80013a4:	4919      	ldr	r1, [pc, #100]	@ (800140c <HAL_PWREx_EnableGPIOPullUp+0xd4>)
 80013a6:	4013      	ands	r3, r2
 80013a8:	62cb      	str	r3, [r1, #44]	@ 0x2c
      break;
 80013aa:	e028      	b.n	80013fe <HAL_PWREx_EnableGPIOPullUp+0xc6>
    case PWR_GPIO_C:
      SET_BIT(PWR->PUCRC, (GPIONumber & PWR_PORTC_AVAILABLE_PINS));
 80013ac:	4b17      	ldr	r3, [pc, #92]	@ (800140c <HAL_PWREx_EnableGPIOPullUp+0xd4>)
 80013ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013b0:	6839      	ldr	r1, [r7, #0]
 80013b2:	f24e 037f 	movw	r3, #57471	@ 0xe07f
 80013b6:	400b      	ands	r3, r1
 80013b8:	4914      	ldr	r1, [pc, #80]	@ (800140c <HAL_PWREx_EnableGPIOPullUp+0xd4>)
 80013ba:	4313      	orrs	r3, r2
 80013bc:	630b      	str	r3, [r1, #48]	@ 0x30
      CLEAR_BIT(PWR->PDCRC, (GPIONumber & PWR_PORTC_AVAILABLE_PINS));
 80013be:	4b13      	ldr	r3, [pc, #76]	@ (800140c <HAL_PWREx_EnableGPIOPullUp+0xd4>)
 80013c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80013c2:	6839      	ldr	r1, [r7, #0]
 80013c4:	f24e 037f 	movw	r3, #57471	@ 0xe07f
 80013c8:	400b      	ands	r3, r1
 80013ca:	43db      	mvns	r3, r3
 80013cc:	490f      	ldr	r1, [pc, #60]	@ (800140c <HAL_PWREx_EnableGPIOPullUp+0xd4>)
 80013ce:	4013      	ands	r3, r2
 80013d0:	634b      	str	r3, [r1, #52]	@ 0x34
      break;
 80013d2:	e014      	b.n	80013fe <HAL_PWREx_EnableGPIOPullUp+0xc6>
    case PWR_GPIO_H:
      SET_BIT(PWR->PUCRH, (GPIONumber & PWR_PORTH_AVAILABLE_PINS));
 80013d4:	4b0d      	ldr	r3, [pc, #52]	@ (800140c <HAL_PWREx_EnableGPIOPullUp+0xd4>)
 80013d6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	f003 0308 	and.w	r3, r3, #8
 80013de:	490b      	ldr	r1, [pc, #44]	@ (800140c <HAL_PWREx_EnableGPIOPullUp+0xd4>)
 80013e0:	4313      	orrs	r3, r2
 80013e2:	658b      	str	r3, [r1, #88]	@ 0x58
      CLEAR_BIT(PWR->PDCRH, (GPIONumber & PWR_PORTH_AVAILABLE_PINS));
 80013e4:	4b09      	ldr	r3, [pc, #36]	@ (800140c <HAL_PWREx_EnableGPIOPullUp+0xd4>)
 80013e6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	f003 0308 	and.w	r3, r3, #8
 80013ee:	43db      	mvns	r3, r3
 80013f0:	4906      	ldr	r1, [pc, #24]	@ (800140c <HAL_PWREx_EnableGPIOPullUp+0xd4>)
 80013f2:	4013      	ands	r3, r2
 80013f4:	65cb      	str	r3, [r1, #92]	@ 0x5c
      break;
 80013f6:	e002      	b.n	80013fe <HAL_PWREx_EnableGPIOPullUp+0xc6>
    default:
      status = HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	73fb      	strb	r3, [r7, #15]
      break;
 80013fc:	bf00      	nop
  }

  return status;
 80013fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001400:	4618      	mov	r0, r3
 8001402:	3714      	adds	r7, #20
 8001404:	46bd      	mov	sp, r7
 8001406:	bc80      	pop	{r7}
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	58000400 	.word	0x58000400

08001410 <HAL_PWREx_EnablePullUpPullDownConfig>:
  *        HAL_PWREx_EnableGPIOPullUp() and HAL_PWREx_EnableGPIOPullDown() API's ensure there
  *        is no conflict when setting PUy or PDy bit.
  * @retval None
  */
void HAL_PWREx_EnablePullUpPullDownConfig(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  SET_BIT(PWR->C2CR3, PWR_C2CR3_APC);
#else
  SET_BIT(PWR->CR3, PWR_CR3_APC);
 8001414:	4b04      	ldr	r3, [pc, #16]	@ (8001428 <HAL_PWREx_EnablePullUpPullDownConfig+0x18>)
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	4a03      	ldr	r2, [pc, #12]	@ (8001428 <HAL_PWREx_EnablePullUpPullDownConfig+0x18>)
 800141a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800141e:	6093      	str	r3, [r2, #8]
#endif
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr
 8001428:	58000400 	.word	0x58000400

0800142c <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8001430:	4b06      	ldr	r3, [pc, #24]	@ (800144c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001438:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800143c:	d101      	bne.n	8001442 <LL_PWR_IsEnabledBkUpAccess+0x16>
 800143e:	2301      	movs	r3, #1
 8001440:	e000      	b.n	8001444 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8001442:	2300      	movs	r3, #0
}
 8001444:	4618      	mov	r0, r3
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr
 800144c:	58000400 	.word	0x58000400

08001450 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001454:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800145e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001462:	6013      	str	r3, [r2, #0]
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr

0800146c <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001470:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800147a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800147e:	6013      	str	r3, [r2, #0]
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr

08001488 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800148c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001496:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800149a:	d101      	bne.n	80014a0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800149c:	2301      	movs	r3, #1
 800149e:	e000      	b.n	80014a2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bc80      	pop	{r7}
 80014a8:	4770      	bx	lr

080014aa <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80014ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80014b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014bc:	6013      	str	r3, [r2, #0]
}
 80014be:	bf00      	nop
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bc80      	pop	{r7}
 80014c4:	4770      	bx	lr

080014c6 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80014ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80014d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014d8:	6013      	str	r3, [r2, #0]
}
 80014da:	bf00      	nop
 80014dc:	46bd      	mov	sp, r7
 80014de:	bc80      	pop	{r7}
 80014e0:	4770      	bx	lr

080014e2 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80014e2:	b480      	push	{r7}
 80014e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80014e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80014f4:	d101      	bne.n	80014fa <LL_RCC_HSE_IsReady+0x18>
 80014f6:	2301      	movs	r3, #1
 80014f8:	e000      	b.n	80014fc <LL_RCC_HSE_IsReady+0x1a>
 80014fa:	2300      	movs	r3, #0
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	46bd      	mov	sp, r7
 8001500:	bc80      	pop	{r7}
 8001502:	4770      	bx	lr

08001504 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001508:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001512:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001516:	6013      	str	r3, [r2, #0]
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr

08001520 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001524:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800152e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001532:	6013      	str	r3, [r2, #0]
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr

0800153c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001540:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800154a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800154e:	d101      	bne.n	8001554 <LL_RCC_HSI_IsReady+0x18>
 8001550:	2301      	movs	r3, #1
 8001552:	e000      	b.n	8001556 <LL_RCC_HSI_IsReady+0x1a>
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	46bd      	mov	sp, r7
 800155a:	bc80      	pop	{r7}
 800155c:	4770      	bx	lr

0800155e <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800155e:	b480      	push	{r7}
 8001560:	b083      	sub	sp, #12
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001566:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	061b      	lsls	r3, r3, #24
 8001574:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001578:	4313      	orrs	r3, r2
 800157a:	604b      	str	r3, [r1, #4]
}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	bc80      	pop	{r7}
 8001584:	4770      	bx	lr

08001586 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001586:	b480      	push	{r7}
 8001588:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800158a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800158e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b02      	cmp	r3, #2
 8001598:	d101      	bne.n	800159e <LL_RCC_LSE_IsReady+0x18>
 800159a:	2301      	movs	r3, #1
 800159c:	e000      	b.n	80015a0 <LL_RCC_LSE_IsReady+0x1a>
 800159e:	2300      	movs	r3, #0
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bc80      	pop	{r7}
 80015a6:	4770      	bx	lr

080015a8 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80015ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bc80      	pop	{r7}
 80015c6:	4770      	bx	lr

080015c8 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80015cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015d4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80015d8:	f023 0301 	bic.w	r3, r3, #1
 80015dc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr

080015e8 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80015ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d101      	bne.n	8001600 <LL_RCC_LSI_IsReady+0x18>
 80015fc:	2301      	movs	r3, #1
 80015fe:	e000      	b.n	8001602 <LL_RCC_LSI_IsReady+0x1a>
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	46bd      	mov	sp, r7
 8001606:	bc80      	pop	{r7}
 8001608:	4770      	bx	lr

0800160a <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800160e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001618:	f043 0301 	orr.w	r3, r3, #1
 800161c:	6013      	str	r3, [r2, #0]
}
 800161e:	bf00      	nop
 8001620:	46bd      	mov	sp, r7
 8001622:	bc80      	pop	{r7}
 8001624:	4770      	bx	lr

08001626 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001626:	b480      	push	{r7}
 8001628:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800162a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001634:	f023 0301 	bic.w	r3, r3, #1
 8001638:	6013      	str	r3, [r2, #0]
}
 800163a:	bf00      	nop
 800163c:	46bd      	mov	sp, r7
 800163e:	bc80      	pop	{r7}
 8001640:	4770      	bx	lr

08001642 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001642:	b480      	push	{r7}
 8001644:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001646:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0302 	and.w	r3, r3, #2
 8001650:	2b02      	cmp	r3, #2
 8001652:	d101      	bne.n	8001658 <LL_RCC_MSI_IsReady+0x16>
 8001654:	2301      	movs	r3, #1
 8001656:	e000      	b.n	800165a <LL_RCC_MSI_IsReady+0x18>
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	46bd      	mov	sp, r7
 800165e:	bc80      	pop	{r7}
 8001660:	4770      	bx	lr

08001662 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8001666:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0308 	and.w	r3, r3, #8
 8001670:	2b08      	cmp	r3, #8
 8001672:	d101      	bne.n	8001678 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001674:	2301      	movs	r3, #1
 8001676:	e000      	b.n	800167a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	46bd      	mov	sp, r7
 800167e:	bc80      	pop	{r7}
 8001680:	4770      	bx	lr

08001682 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001682:	b480      	push	{r7}
 8001684:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8001686:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001690:	4618      	mov	r0, r3
 8001692:	46bd      	mov	sp, r7
 8001694:	bc80      	pop	{r7}
 8001696:	4770      	bx	lr

08001698 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800169c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016a4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr

080016b0 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80016b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	021b      	lsls	r3, r3, #8
 80016c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80016ca:	4313      	orrs	r3, r2
 80016cc:	604b      	str	r3, [r1, #4]
}
 80016ce:	bf00      	nop
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bc80      	pop	{r7}
 80016d6:	4770      	bx	lr

080016d8 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80016e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f023 0203 	bic.w	r2, r3, #3
 80016ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	608b      	str	r3, [r1, #8]
}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bc80      	pop	{r7}
 80016fc:	4770      	bx	lr

080016fe <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80016fe:	b480      	push	{r7}
 8001700:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001702:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	f003 030c 	and.w	r3, r3, #12
}
 800170c:	4618      	mov	r0, r3
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr

08001714 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800171c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001726:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4313      	orrs	r3, r2
 800172e:	608b      	str	r3, [r1, #8]
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	bc80      	pop	{r7}
 8001738:	4770      	bx	lr

0800173a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800173a:	b480      	push	{r7}
 800173c:	b083      	sub	sp, #12
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001742:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001746:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800174a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800174e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4313      	orrs	r3, r2
 8001756:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	bc80      	pop	{r7}
 8001762:	4770      	bx	lr

08001764 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800176c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001770:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001774:	f023 020f 	bic.w	r2, r3, #15
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	091b      	lsrs	r3, r3, #4
 800177c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001780:	4313      	orrs	r3, r2
 8001782:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	bc80      	pop	{r7}
 800178e:	4770      	bx	lr

08001790 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001798:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80017a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	608b      	str	r3, [r1, #8]
}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bc80      	pop	{r7}
 80017b4:	4770      	bx	lr

080017b6 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80017b6:	b480      	push	{r7}
 80017b8:	b083      	sub	sp, #12
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80017be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80017c8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	608b      	str	r3, [r1, #8]
}
 80017d2:	bf00      	nop
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr

080017dc <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80017e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bc80      	pop	{r7}
 80017f0:	4770      	bx	lr

080017f2 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 80017f2:	b480      	push	{r7}
 80017f4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80017f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017fa:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80017fe:	011b      	lsls	r3, r3, #4
 8001800:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001804:	4618      	mov	r0, r3
 8001806:	46bd      	mov	sp, r7
 8001808:	bc80      	pop	{r7}
 800180a:	4770      	bx	lr

0800180c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001810:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800181a:	4618      	mov	r0, r3
 800181c:	46bd      	mov	sp, r7
 800181e:	bc80      	pop	{r7}
 8001820:	4770      	bx	lr

08001822 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001826:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8001830:	4618      	mov	r0, r3
 8001832:	46bd      	mov	sp, r7
 8001834:	bc80      	pop	{r7}
 8001836:	4770      	bx	lr

08001838 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800183c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001846:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800184a:	6013      	str	r3, [r2, #0]
}
 800184c:	bf00      	nop
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr

08001854 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001858:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001862:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001866:	6013      	str	r3, [r2, #0]
}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr

08001870 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001874:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800187e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001882:	d101      	bne.n	8001888 <LL_RCC_PLL_IsReady+0x18>
 8001884:	2301      	movs	r3, #1
 8001886:	e000      	b.n	800188a <LL_RCC_PLL_IsReady+0x1a>
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	46bd      	mov	sp, r7
 800188e:	bc80      	pop	{r7}
 8001890:	4770      	bx	lr

08001892 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001896:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	0a1b      	lsrs	r3, r3, #8
 800189e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bc80      	pop	{r7}
 80018a8:	4770      	bx	lr

080018aa <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80018ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bc80      	pop	{r7}
 80018be:	4770      	bx	lr

080018c0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80018c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bc80      	pop	{r7}
 80018d4:	4770      	bx	lr

080018d6 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80018d6:	b480      	push	{r7}
 80018d8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80018da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	f003 0303 	and.w	r3, r3, #3
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr

080018ec <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80018f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018fe:	d101      	bne.n	8001904 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001900:	2301      	movs	r3, #1
 8001902:	e000      	b.n	8001906 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	46bd      	mov	sp, r7
 800190a:	bc80      	pop	{r7}
 800190c:	4770      	bx	lr

0800190e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800190e:	b480      	push	{r7}
 8001910:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001912:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001916:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800191a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800191e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001922:	d101      	bne.n	8001928 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001924:	2301      	movs	r3, #1
 8001926:	e000      	b.n	800192a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	46bd      	mov	sp, r7
 800192e:	bc80      	pop	{r7}
 8001930:	4770      	bx	lr

08001932 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001932:	b480      	push	{r7}
 8001934:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001936:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800193a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800193e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001942:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001946:	d101      	bne.n	800194c <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001948:	2301      	movs	r3, #1
 800194a:	e000      	b.n	800194e <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	46bd      	mov	sp, r7
 8001952:	bc80      	pop	{r7}
 8001954:	4770      	bx	lr

08001956 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001956:	b480      	push	{r7}
 8001958:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800195a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001964:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001968:	d101      	bne.n	800196e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800196a:	2301      	movs	r3, #1
 800196c:	e000      	b.n	8001970 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800196e:	2300      	movs	r3, #0
}
 8001970:	4618      	mov	r0, r3
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr

08001978 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800197c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001986:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800198a:	d101      	bne.n	8001990 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800198c:	2301      	movs	r3, #1
 800198e:	e000      	b.n	8001992 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	46bd      	mov	sp, r7
 8001996:	bc80      	pop	{r7}
 8001998:	4770      	bx	lr
	...

0800199c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b088      	sub	sp, #32
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d101      	bne.n	80019ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e36f      	b.n	800208e <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019ae:	f7ff fea6 	bl	80016fe <LL_RCC_GetSysClkSource>
 80019b2:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019b4:	f7ff ff8f 	bl	80018d6 <LL_RCC_PLL_GetMainSource>
 80019b8:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0320 	and.w	r3, r3, #32
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	f000 80c4 	beq.w	8001b50 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d005      	beq.n	80019da <HAL_RCC_OscConfig+0x3e>
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	2b0c      	cmp	r3, #12
 80019d2:	d176      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d173      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a1b      	ldr	r3, [r3, #32]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d101      	bne.n	80019e6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e353      	b.n	800208e <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80019ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0308 	and.w	r3, r3, #8
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d005      	beq.n	8001a04 <HAL_RCC_OscConfig+0x68>
 80019f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a02:	e006      	b.n	8001a12 <HAL_RCC_OscConfig+0x76>
 8001a04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a0c:	091b      	lsrs	r3, r3, #4
 8001a0e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d222      	bcs.n	8001a5c <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f000 fd5a 	bl	80024d4 <RCC_SetFlashLatencyFromMSIRange>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e331      	b.n	800208e <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a34:	f043 0308 	orr.w	r3, r3, #8
 8001a38:	6013      	str	r3, [r2, #0]
 8001a3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a48:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff fe2b 	bl	80016b0 <LL_RCC_MSI_SetCalibTrimming>
 8001a5a:	e021      	b.n	8001aa0 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a66:	f043 0308 	orr.w	r3, r3, #8
 8001a6a:	6013      	str	r3, [r2, #0]
 8001a6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a7a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff fe12 	bl	80016b0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a90:	4618      	mov	r0, r3
 8001a92:	f000 fd1f 	bl	80024d4 <RCC_SetFlashLatencyFromMSIRange>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e2f6      	b.n	800208e <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001aa0:	f000 fce0 	bl	8002464 <HAL_RCC_GetHCLKFreq>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	4aa7      	ldr	r2, [pc, #668]	@ (8001d44 <HAL_RCC_OscConfig+0x3a8>)
 8001aa8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8001aaa:	4ba7      	ldr	r3, [pc, #668]	@ (8001d48 <HAL_RCC_OscConfig+0x3ac>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff f89e 	bl	8000bf0 <HAL_InitTick>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8001ab8:	7cfb      	ldrb	r3, [r7, #19]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d047      	beq.n	8001b4e <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8001abe:	7cfb      	ldrb	r3, [r7, #19]
 8001ac0:	e2e5      	b.n	800208e <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a1b      	ldr	r3, [r3, #32]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d02c      	beq.n	8001b24 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001aca:	f7ff fd9e 	bl	800160a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ace:	f7ff f8db 	bl	8000c88 <HAL_GetTick>
 8001ad2:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001ad4:	e008      	b.n	8001ae8 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ad6:	f7ff f8d7 	bl	8000c88 <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e2d2      	b.n	800208e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001ae8:	f7ff fdab 	bl	8001642 <LL_RCC_MSI_IsReady>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d0f1      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001af2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001afc:	f043 0308 	orr.w	r3, r3, #8
 8001b00:	6013      	str	r3, [r2, #0]
 8001b02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b10:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001b14:	4313      	orrs	r3, r2
 8001b16:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff fdc7 	bl	80016b0 <LL_RCC_MSI_SetCalibTrimming>
 8001b22:	e015      	b.n	8001b50 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b24:	f7ff fd7f 	bl	8001626 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b28:	f7ff f8ae 	bl	8000c88 <HAL_GetTick>
 8001b2c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001b2e:	e008      	b.n	8001b42 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b30:	f7ff f8aa 	bl	8000c88 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e2a5      	b.n	800208e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001b42:	f7ff fd7e 	bl	8001642 <LL_RCC_MSI_IsReady>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d1f1      	bne.n	8001b30 <HAL_RCC_OscConfig+0x194>
 8001b4c:	e000      	b.n	8001b50 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001b4e:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d058      	beq.n	8001c0e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	2b08      	cmp	r3, #8
 8001b60:	d005      	beq.n	8001b6e <HAL_RCC_OscConfig+0x1d2>
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	2b0c      	cmp	r3, #12
 8001b66:	d108      	bne.n	8001b7a <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	2b03      	cmp	r3, #3
 8001b6c:	d105      	bne.n	8001b7a <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d14b      	bne.n	8001c0e <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e289      	b.n	800208e <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8001b7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b98:	d102      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x204>
 8001b9a:	f7ff fc86 	bl	80014aa <LL_RCC_HSE_Enable>
 8001b9e:	e00d      	b.n	8001bbc <HAL_RCC_OscConfig+0x220>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8001ba8:	d104      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x218>
 8001baa:	f7ff fc51 	bl	8001450 <LL_RCC_HSE_EnableTcxo>
 8001bae:	f7ff fc7c 	bl	80014aa <LL_RCC_HSE_Enable>
 8001bb2:	e003      	b.n	8001bbc <HAL_RCC_OscConfig+0x220>
 8001bb4:	f7ff fc87 	bl	80014c6 <LL_RCC_HSE_Disable>
 8001bb8:	f7ff fc58 	bl	800146c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d012      	beq.n	8001bea <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc4:	f7ff f860 	bl	8000c88 <HAL_GetTick>
 8001bc8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bcc:	f7ff f85c 	bl	8000c88 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b64      	cmp	r3, #100	@ 0x64
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e257      	b.n	800208e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001bde:	f7ff fc80 	bl	80014e2 <LL_RCC_HSE_IsReady>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d0f1      	beq.n	8001bcc <HAL_RCC_OscConfig+0x230>
 8001be8:	e011      	b.n	8001c0e <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bea:	f7ff f84d 	bl	8000c88 <HAL_GetTick>
 8001bee:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001bf0:	e008      	b.n	8001c04 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bf2:	f7ff f849 	bl	8000c88 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b64      	cmp	r3, #100	@ 0x64
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e244      	b.n	800208e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001c04:	f7ff fc6d 	bl	80014e2 <LL_RCC_HSE_IsReady>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1f1      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d046      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	2b04      	cmp	r3, #4
 8001c1e:	d005      	beq.n	8001c2c <HAL_RCC_OscConfig+0x290>
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	2b0c      	cmp	r3, #12
 8001c24:	d10e      	bne.n	8001c44 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d10b      	bne.n	8001c44 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	691b      	ldr	r3, [r3, #16]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d101      	bne.n	8001c38 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e22a      	b.n	800208e <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	695b      	ldr	r3, [r3, #20]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff fc8e 	bl	800155e <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001c42:	e031      	b.n	8001ca8 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	691b      	ldr	r3, [r3, #16]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d019      	beq.n	8001c80 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c4c:	f7ff fc5a 	bl	8001504 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c50:	f7ff f81a 	bl	8000c88 <HAL_GetTick>
 8001c54:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c58:	f7ff f816 	bl	8000c88 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e211      	b.n	800208e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001c6a:	f7ff fc67 	bl	800153c <LL_RCC_HSI_IsReady>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d0f1      	beq.n	8001c58 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	695b      	ldr	r3, [r3, #20]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff fc70 	bl	800155e <LL_RCC_HSI_SetCalibTrimming>
 8001c7e:	e013      	b.n	8001ca8 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c80:	f7ff fc4e 	bl	8001520 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c84:	f7ff f800 	bl	8000c88 <HAL_GetTick>
 8001c88:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c8c:	f7fe fffc 	bl	8000c88 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e1f7      	b.n	800208e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001c9e:	f7ff fc4d 	bl	800153c <LL_RCC_HSI_IsReady>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d1f1      	bne.n	8001c8c <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0308 	and.w	r3, r3, #8
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d06e      	beq.n	8001d92 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d056      	beq.n	8001d6a <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8001cbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cc4:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	69da      	ldr	r2, [r3, #28]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	f003 0310 	and.w	r3, r3, #16
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d031      	beq.n	8001d38 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d006      	beq.n	8001cec <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d101      	bne.n	8001cec <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e1d0      	b.n	800208e <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d013      	beq.n	8001d1e <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8001cf6:	f7ff fc67 	bl	80015c8 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001cfa:	f7fe ffc5 	bl	8000c88 <HAL_GetTick>
 8001cfe:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8001d00:	e008      	b.n	8001d14 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d02:	f7fe ffc1 	bl	8000c88 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b11      	cmp	r3, #17
 8001d0e:	d901      	bls.n	8001d14 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e1bc      	b.n	800208e <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8001d14:	f7ff fc68 	bl	80015e8 <LL_RCC_LSI_IsReady>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d1f1      	bne.n	8001d02 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8001d1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d26:	f023 0210 	bic.w	r2, r3, #16
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	69db      	ldr	r3, [r3, #28]
 8001d2e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d32:	4313      	orrs	r3, r2
 8001d34:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d38:	f7ff fc36 	bl	80015a8 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d3c:	f7fe ffa4 	bl	8000c88 <HAL_GetTick>
 8001d40:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8001d42:	e00c      	b.n	8001d5e <HAL_RCC_OscConfig+0x3c2>
 8001d44:	20000000 	.word	0x20000000
 8001d48:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d4c:	f7fe ff9c 	bl	8000c88 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b11      	cmp	r3, #17
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e197      	b.n	800208e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8001d5e:	f7ff fc43 	bl	80015e8 <LL_RCC_LSI_IsReady>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d0f1      	beq.n	8001d4c <HAL_RCC_OscConfig+0x3b0>
 8001d68:	e013      	b.n	8001d92 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d6a:	f7ff fc2d 	bl	80015c8 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d6e:	f7fe ff8b 	bl	8000c88 <HAL_GetTick>
 8001d72:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8001d74:	e008      	b.n	8001d88 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d76:	f7fe ff87 	bl	8000c88 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b11      	cmp	r3, #17
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e182      	b.n	800208e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8001d88:	f7ff fc2e 	bl	80015e8 <LL_RCC_LSI_IsReady>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1f1      	bne.n	8001d76 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0304 	and.w	r3, r3, #4
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	f000 80d8 	beq.w	8001f50 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001da0:	f7ff fb44 	bl	800142c <LL_PWR_IsEnabledBkUpAccess>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d113      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001daa:	f7ff fa71 	bl	8001290 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dae:	f7fe ff6b 	bl	8000c88 <HAL_GetTick>
 8001db2:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001db4:	e008      	b.n	8001dc8 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001db6:	f7fe ff67 	bl	8000c88 <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d901      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e162      	b.n	800208e <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001dc8:	f7ff fb30 	bl	800142c <LL_PWR_IsEnabledBkUpAccess>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d0f1      	beq.n	8001db6 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d07b      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	2b85      	cmp	r3, #133	@ 0x85
 8001de0:	d003      	beq.n	8001dea <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	2b05      	cmp	r3, #5
 8001de8:	d109      	bne.n	8001dfe <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001dea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001df2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001df6:	f043 0304 	orr.w	r3, r3, #4
 8001dfa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dfe:	f7fe ff43 	bl	8000c88 <HAL_GetTick>
 8001e02:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001e04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e0c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e10:	f043 0301 	orr.w	r3, r3, #1
 8001e14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001e18:	e00a      	b.n	8001e30 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e1a:	f7fe ff35 	bl	8000c88 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e12e      	b.n	800208e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001e30:	f7ff fba9 	bl	8001586 <LL_RCC_LSE_IsReady>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d0ef      	beq.n	8001e1a <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	2b81      	cmp	r3, #129	@ 0x81
 8001e40:	d003      	beq.n	8001e4a <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	2b85      	cmp	r3, #133	@ 0x85
 8001e48:	d121      	bne.n	8001e8e <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4a:	f7fe ff1d 	bl	8000c88 <HAL_GetTick>
 8001e4e:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001e50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e58:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001e64:	e00a      	b.n	8001e7c <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e66:	f7fe ff0f 	bl	8000c88 <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e108      	b.n	800208e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001e7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d0ec      	beq.n	8001e66 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001e8c:	e060      	b.n	8001f50 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e8e:	f7fe fefb 	bl	8000c88 <HAL_GetTick>
 8001e92:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001e94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e9c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ea0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001ea4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001ea8:	e00a      	b.n	8001ec0 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eaa:	f7fe feed 	bl	8000c88 <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e0e6      	b.n	800208e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001ec0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ec8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1ec      	bne.n	8001eaa <HAL_RCC_OscConfig+0x50e>
 8001ed0:	e03e      	b.n	8001f50 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ed2:	f7fe fed9 	bl	8000c88 <HAL_GetTick>
 8001ed6:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001ed8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ee0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ee4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001ee8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001eec:	e00a      	b.n	8001f04 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eee:	f7fe fecb 	bl	8000c88 <HAL_GetTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e0c4      	b.n	800208e <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001f04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d1ec      	bne.n	8001eee <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f14:	f7fe feb8 	bl	8000c88 <HAL_GetTick>
 8001f18:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001f1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f22:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f26:	f023 0301 	bic.w	r3, r3, #1
 8001f2a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8001f2e:	e00a      	b.n	8001f46 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f30:	f7fe feaa 	bl	8000c88 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e0a3      	b.n	800208e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8001f46:	f7ff fb1e 	bl	8001586 <LL_RCC_LSE_IsReady>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d1ef      	bne.n	8001f30 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f000 8099 	beq.w	800208c <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	2b0c      	cmp	r3, #12
 8001f5e:	d06c      	beq.n	800203a <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d14b      	bne.n	8002000 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f68:	f7ff fc74 	bl	8001854 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f6c:	f7fe fe8c 	bl	8000c88 <HAL_GetTick>
 8001f70:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001f72:	e008      	b.n	8001f86 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f74:	f7fe fe88 	bl	8000c88 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b0a      	cmp	r3, #10
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e083      	b.n	800208e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001f86:	f7ff fc73 	bl	8001870 <LL_RCC_PLL_IsReady>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d1f1      	bne.n	8001f74 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f94:	68da      	ldr	r2, [r3, #12]
 8001f96:	4b40      	ldr	r3, [pc, #256]	@ (8002098 <HAL_RCC_OscConfig+0x6fc>)
 8001f98:	4013      	ands	r3, r2
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001fa2:	4311      	orrs	r1, r2
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001fa8:	0212      	lsls	r2, r2, #8
 8001faa:	4311      	orrs	r1, r2
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001fb0:	4311      	orrs	r1, r2
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001fb6:	4311      	orrs	r1, r2
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fc6:	f7ff fc37 	bl	8001838 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001fd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fd8:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fda:	f7fe fe55 	bl	8000c88 <HAL_GetTick>
 8001fde:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8001fe0:	e008      	b.n	8001ff4 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fe2:	f7fe fe51 	bl	8000c88 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	2b0a      	cmp	r3, #10
 8001fee:	d901      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e04c      	b.n	800208e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8001ff4:	f7ff fc3c 	bl	8001870 <LL_RCC_PLL_IsReady>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d0f1      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x646>
 8001ffe:	e045      	b.n	800208c <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002000:	f7ff fc28 	bl	8001854 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002004:	f7fe fe40 	bl	8000c88 <HAL_GetTick>
 8002008:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800200c:	f7fe fe3c 	bl	8000c88 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b0a      	cmp	r3, #10
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e037      	b.n	800208e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800201e:	f7ff fc27 	bl	8001870 <LL_RCC_PLL_IsReady>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d1f1      	bne.n	800200c <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002028:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800202c:	68da      	ldr	r2, [r3, #12]
 800202e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002032:	4b1a      	ldr	r3, [pc, #104]	@ (800209c <HAL_RCC_OscConfig+0x700>)
 8002034:	4013      	ands	r3, r2
 8002036:	60cb      	str	r3, [r1, #12]
 8002038:	e028      	b.n	800208c <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800203e:	2b01      	cmp	r3, #1
 8002040:	d101      	bne.n	8002046 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e023      	b.n	800208e <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002046:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	f003 0203 	and.w	r2, r3, #3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002058:	429a      	cmp	r2, r3
 800205a:	d115      	bne.n	8002088 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002066:	429a      	cmp	r2, r3
 8002068:	d10e      	bne.n	8002088 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002074:	021b      	lsls	r3, r3, #8
 8002076:	429a      	cmp	r2, r3
 8002078:	d106      	bne.n	8002088 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002084:	429a      	cmp	r2, r3
 8002086:	d001      	beq.n	800208c <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e000      	b.n	800208e <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3720      	adds	r7, #32
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	11c1808c 	.word	0x11c1808c
 800209c:	eefefffc 	.word	0xeefefffc

080020a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d101      	bne.n	80020b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e12c      	b.n	800230e <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020b4:	4b98      	ldr	r3, [pc, #608]	@ (8002318 <HAL_RCC_ClockConfig+0x278>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0307 	and.w	r3, r3, #7
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d91b      	bls.n	80020fa <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020c2:	4b95      	ldr	r3, [pc, #596]	@ (8002318 <HAL_RCC_ClockConfig+0x278>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f023 0207 	bic.w	r2, r3, #7
 80020ca:	4993      	ldr	r1, [pc, #588]	@ (8002318 <HAL_RCC_ClockConfig+0x278>)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020d2:	f7fe fdd9 	bl	8000c88 <HAL_GetTick>
 80020d6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020d8:	e008      	b.n	80020ec <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80020da:	f7fe fdd5 	bl	8000c88 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d901      	bls.n	80020ec <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e110      	b.n	800230e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ec:	4b8a      	ldr	r3, [pc, #552]	@ (8002318 <HAL_RCC_ClockConfig+0x278>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0307 	and.w	r3, r3, #7
 80020f4:	683a      	ldr	r2, [r7, #0]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d1ef      	bne.n	80020da <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	2b00      	cmp	r3, #0
 8002104:	d016      	beq.n	8002134 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff fb02 	bl	8001714 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002110:	f7fe fdba 	bl	8000c88 <HAL_GetTick>
 8002114:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002116:	e008      	b.n	800212a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002118:	f7fe fdb6 	bl	8000c88 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d901      	bls.n	800212a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e0f1      	b.n	800230e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800212a:	f7ff fbdf 	bl	80018ec <LL_RCC_IsActiveFlag_HPRE>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d0f1      	beq.n	8002118 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0320 	and.w	r3, r3, #32
 800213c:	2b00      	cmp	r3, #0
 800213e:	d016      	beq.n	800216e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	695b      	ldr	r3, [r3, #20]
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff faf8 	bl	800173a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800214a:	f7fe fd9d 	bl	8000c88 <HAL_GetTick>
 800214e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002150:	e008      	b.n	8002164 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002152:	f7fe fd99 	bl	8000c88 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d901      	bls.n	8002164 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e0d4      	b.n	800230e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002164:	f7ff fbd3 	bl	800190e <LL_RCC_IsActiveFlag_C2HPRE>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d0f1      	beq.n	8002152 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002176:	2b00      	cmp	r3, #0
 8002178:	d016      	beq.n	80021a8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	4618      	mov	r0, r3
 8002180:	f7ff faf0 	bl	8001764 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002184:	f7fe fd80 	bl	8000c88 <HAL_GetTick>
 8002188:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800218a:	e008      	b.n	800219e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800218c:	f7fe fd7c 	bl	8000c88 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d901      	bls.n	800219e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e0b7      	b.n	800230e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800219e:	f7ff fbc8 	bl	8001932 <LL_RCC_IsActiveFlag_SHDHPRE>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d0f1      	beq.n	800218c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0304 	and.w	r3, r3, #4
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d016      	beq.n	80021e2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7ff fae9 	bl	8001790 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80021be:	f7fe fd63 	bl	8000c88 <HAL_GetTick>
 80021c2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80021c4:	e008      	b.n	80021d8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80021c6:	f7fe fd5f 	bl	8000c88 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d901      	bls.n	80021d8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e09a      	b.n	800230e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80021d8:	f7ff fbbd 	bl	8001956 <LL_RCC_IsActiveFlag_PPRE1>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d0f1      	beq.n	80021c6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0308 	and.w	r3, r3, #8
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d017      	beq.n	800221e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff fade 	bl	80017b6 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80021fa:	f7fe fd45 	bl	8000c88 <HAL_GetTick>
 80021fe:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002200:	e008      	b.n	8002214 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002202:	f7fe fd41 	bl	8000c88 <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d901      	bls.n	8002214 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e07c      	b.n	800230e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002214:	f7ff fbb0 	bl	8001978 <LL_RCC_IsActiveFlag_PPRE2>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d0f1      	beq.n	8002202 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b00      	cmp	r3, #0
 8002228:	d043      	beq.n	80022b2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	2b02      	cmp	r3, #2
 8002230:	d106      	bne.n	8002240 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002232:	f7ff f956 	bl	80014e2 <LL_RCC_HSE_IsReady>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d11e      	bne.n	800227a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e066      	b.n	800230e <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	2b03      	cmp	r3, #3
 8002246:	d106      	bne.n	8002256 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002248:	f7ff fb12 	bl	8001870 <LL_RCC_PLL_IsReady>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d113      	bne.n	800227a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e05b      	b.n	800230e <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d106      	bne.n	800226c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800225e:	f7ff f9f0 	bl	8001642 <LL_RCC_MSI_IsReady>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d108      	bne.n	800227a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e050      	b.n	800230e <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800226c:	f7ff f966 	bl	800153c <LL_RCC_HSI_IsReady>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d101      	bne.n	800227a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e049      	b.n	800230e <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff fa2a 	bl	80016d8 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002284:	f7fe fd00 	bl	8000c88 <HAL_GetTick>
 8002288:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800228a:	e00a      	b.n	80022a2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800228c:	f7fe fcfc 	bl	8000c88 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	f241 3288 	movw	r2, #5000	@ 0x1388
 800229a:	4293      	cmp	r3, r2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e035      	b.n	800230e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022a2:	f7ff fa2c 	bl	80016fe <LL_RCC_GetSysClkSource>
 80022a6:	4602      	mov	r2, r0
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d1ec      	bne.n	800228c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022b2:	4b19      	ldr	r3, [pc, #100]	@ (8002318 <HAL_RCC_ClockConfig+0x278>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0307 	and.w	r3, r3, #7
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d21b      	bcs.n	80022f8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022c0:	4b15      	ldr	r3, [pc, #84]	@ (8002318 <HAL_RCC_ClockConfig+0x278>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f023 0207 	bic.w	r2, r3, #7
 80022c8:	4913      	ldr	r1, [pc, #76]	@ (8002318 <HAL_RCC_ClockConfig+0x278>)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022d0:	f7fe fcda 	bl	8000c88 <HAL_GetTick>
 80022d4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80022d8:	f7fe fcd6 	bl	8000c88 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e011      	b.n	800230e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ea:	4b0b      	ldr	r3, [pc, #44]	@ (8002318 <HAL_RCC_ClockConfig+0x278>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0307 	and.w	r3, r3, #7
 80022f2:	683a      	ldr	r2, [r7, #0]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d1ef      	bne.n	80022d8 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80022f8:	f000 f8b4 	bl	8002464 <HAL_RCC_GetHCLKFreq>
 80022fc:	4603      	mov	r3, r0
 80022fe:	4a07      	ldr	r2, [pc, #28]	@ (800231c <HAL_RCC_ClockConfig+0x27c>)
 8002300:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8002302:	4b07      	ldr	r3, [pc, #28]	@ (8002320 <HAL_RCC_ClockConfig+0x280>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4618      	mov	r0, r3
 8002308:	f7fe fc72 	bl	8000bf0 <HAL_InitTick>
 800230c:	4603      	mov	r3, r0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	58004000 	.word	0x58004000
 800231c:	20000000 	.word	0x20000000
 8002320:	20000004 	.word	0x20000004

08002324 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002324:	b590      	push	{r4, r7, lr}
 8002326:	b087      	sub	sp, #28
 8002328:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800232a:	2300      	movs	r3, #0
 800232c:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800232e:	2300      	movs	r3, #0
 8002330:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002332:	f7ff f9e4 	bl	80016fe <LL_RCC_GetSysClkSource>
 8002336:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002338:	f7ff facd 	bl	80018d6 <LL_RCC_PLL_GetMainSource>
 800233c:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d005      	beq.n	8002350 <HAL_RCC_GetSysClockFreq+0x2c>
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	2b0c      	cmp	r3, #12
 8002348:	d139      	bne.n	80023be <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d136      	bne.n	80023be <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002350:	f7ff f987 	bl	8001662 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d115      	bne.n	8002386 <HAL_RCC_GetSysClockFreq+0x62>
 800235a:	f7ff f982 	bl	8001662 <LL_RCC_MSI_IsEnabledRangeSelect>
 800235e:	4603      	mov	r3, r0
 8002360:	2b01      	cmp	r3, #1
 8002362:	d106      	bne.n	8002372 <HAL_RCC_GetSysClockFreq+0x4e>
 8002364:	f7ff f98d 	bl	8001682 <LL_RCC_MSI_GetRange>
 8002368:	4603      	mov	r3, r0
 800236a:	0a1b      	lsrs	r3, r3, #8
 800236c:	f003 030f 	and.w	r3, r3, #15
 8002370:	e005      	b.n	800237e <HAL_RCC_GetSysClockFreq+0x5a>
 8002372:	f7ff f991 	bl	8001698 <LL_RCC_MSI_GetRangeAfterStandby>
 8002376:	4603      	mov	r3, r0
 8002378:	0a1b      	lsrs	r3, r3, #8
 800237a:	f003 030f 	and.w	r3, r3, #15
 800237e:	4a36      	ldr	r2, [pc, #216]	@ (8002458 <HAL_RCC_GetSysClockFreq+0x134>)
 8002380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002384:	e014      	b.n	80023b0 <HAL_RCC_GetSysClockFreq+0x8c>
 8002386:	f7ff f96c 	bl	8001662 <LL_RCC_MSI_IsEnabledRangeSelect>
 800238a:	4603      	mov	r3, r0
 800238c:	2b01      	cmp	r3, #1
 800238e:	d106      	bne.n	800239e <HAL_RCC_GetSysClockFreq+0x7a>
 8002390:	f7ff f977 	bl	8001682 <LL_RCC_MSI_GetRange>
 8002394:	4603      	mov	r3, r0
 8002396:	091b      	lsrs	r3, r3, #4
 8002398:	f003 030f 	and.w	r3, r3, #15
 800239c:	e005      	b.n	80023aa <HAL_RCC_GetSysClockFreq+0x86>
 800239e:	f7ff f97b 	bl	8001698 <LL_RCC_MSI_GetRangeAfterStandby>
 80023a2:	4603      	mov	r3, r0
 80023a4:	091b      	lsrs	r3, r3, #4
 80023a6:	f003 030f 	and.w	r3, r3, #15
 80023aa:	4a2b      	ldr	r2, [pc, #172]	@ (8002458 <HAL_RCC_GetSysClockFreq+0x134>)
 80023ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023b0:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d115      	bne.n	80023e4 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80023bc:	e012      	b.n	80023e4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	2b04      	cmp	r3, #4
 80023c2:	d102      	bne.n	80023ca <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023c4:	4b25      	ldr	r3, [pc, #148]	@ (800245c <HAL_RCC_GetSysClockFreq+0x138>)
 80023c6:	617b      	str	r3, [r7, #20]
 80023c8:	e00c      	b.n	80023e4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	2b08      	cmp	r3, #8
 80023ce:	d109      	bne.n	80023e4 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80023d0:	f7ff f85a 	bl	8001488 <LL_RCC_HSE_IsEnabledDiv2>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d102      	bne.n	80023e0 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80023da:	4b20      	ldr	r3, [pc, #128]	@ (800245c <HAL_RCC_GetSysClockFreq+0x138>)
 80023dc:	617b      	str	r3, [r7, #20]
 80023de:	e001      	b.n	80023e4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80023e0:	4b1f      	ldr	r3, [pc, #124]	@ (8002460 <HAL_RCC_GetSysClockFreq+0x13c>)
 80023e2:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023e4:	f7ff f98b 	bl	80016fe <LL_RCC_GetSysClkSource>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b0c      	cmp	r3, #12
 80023ec:	d12f      	bne.n	800244e <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80023ee:	f7ff fa72 	bl	80018d6 <LL_RCC_PLL_GetMainSource>
 80023f2:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d003      	beq.n	8002402 <HAL_RCC_GetSysClockFreq+0xde>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2b03      	cmp	r3, #3
 80023fe:	d003      	beq.n	8002408 <HAL_RCC_GetSysClockFreq+0xe4>
 8002400:	e00d      	b.n	800241e <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002402:	4b16      	ldr	r3, [pc, #88]	@ (800245c <HAL_RCC_GetSysClockFreq+0x138>)
 8002404:	60fb      	str	r3, [r7, #12]
        break;
 8002406:	e00d      	b.n	8002424 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002408:	f7ff f83e 	bl	8001488 <LL_RCC_HSE_IsEnabledDiv2>
 800240c:	4603      	mov	r3, r0
 800240e:	2b01      	cmp	r3, #1
 8002410:	d102      	bne.n	8002418 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002412:	4b12      	ldr	r3, [pc, #72]	@ (800245c <HAL_RCC_GetSysClockFreq+0x138>)
 8002414:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002416:	e005      	b.n	8002424 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8002418:	4b11      	ldr	r3, [pc, #68]	@ (8002460 <HAL_RCC_GetSysClockFreq+0x13c>)
 800241a:	60fb      	str	r3, [r7, #12]
        break;
 800241c:	e002      	b.n	8002424 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	60fb      	str	r3, [r7, #12]
        break;
 8002422:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002424:	f7ff fa35 	bl	8001892 <LL_RCC_PLL_GetN>
 8002428:	4602      	mov	r2, r0
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	fb03 f402 	mul.w	r4, r3, r2
 8002430:	f7ff fa46 	bl	80018c0 <LL_RCC_PLL_GetDivider>
 8002434:	4603      	mov	r3, r0
 8002436:	091b      	lsrs	r3, r3, #4
 8002438:	3301      	adds	r3, #1
 800243a:	fbb4 f4f3 	udiv	r4, r4, r3
 800243e:	f7ff fa34 	bl	80018aa <LL_RCC_PLL_GetR>
 8002442:	4603      	mov	r3, r0
 8002444:	0f5b      	lsrs	r3, r3, #29
 8002446:	3301      	adds	r3, #1
 8002448:	fbb4 f3f3 	udiv	r3, r4, r3
 800244c:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800244e:	697b      	ldr	r3, [r7, #20]
}
 8002450:	4618      	mov	r0, r3
 8002452:	371c      	adds	r7, #28
 8002454:	46bd      	mov	sp, r7
 8002456:	bd90      	pop	{r4, r7, pc}
 8002458:	080041a4 	.word	0x080041a4
 800245c:	00f42400 	.word	0x00f42400
 8002460:	01e84800 	.word	0x01e84800

08002464 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002464:	b598      	push	{r3, r4, r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002468:	f7ff ff5c 	bl	8002324 <HAL_RCC_GetSysClockFreq>
 800246c:	4604      	mov	r4, r0
 800246e:	f7ff f9b5 	bl	80017dc <LL_RCC_GetAHBPrescaler>
 8002472:	4603      	mov	r3, r0
 8002474:	091b      	lsrs	r3, r3, #4
 8002476:	f003 030f 	and.w	r3, r3, #15
 800247a:	4a03      	ldr	r2, [pc, #12]	@ (8002488 <HAL_RCC_GetHCLKFreq+0x24>)
 800247c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002480:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002484:	4618      	mov	r0, r3
 8002486:	bd98      	pop	{r3, r4, r7, pc}
 8002488:	08004144 	.word	0x08004144

0800248c <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800248c:	b598      	push	{r3, r4, r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002490:	f7ff ffe8 	bl	8002464 <HAL_RCC_GetHCLKFreq>
 8002494:	4604      	mov	r4, r0
 8002496:	f7ff f9b9 	bl	800180c <LL_RCC_GetAPB1Prescaler>
 800249a:	4603      	mov	r3, r0
 800249c:	0a1b      	lsrs	r3, r3, #8
 800249e:	4a03      	ldr	r2, [pc, #12]	@ (80024ac <HAL_RCC_GetPCLK1Freq+0x20>)
 80024a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024a4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	bd98      	pop	{r3, r4, r7, pc}
 80024ac:	08004184 	.word	0x08004184

080024b0 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024b0:	b598      	push	{r3, r4, r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80024b4:	f7ff ffd6 	bl	8002464 <HAL_RCC_GetHCLKFreq>
 80024b8:	4604      	mov	r4, r0
 80024ba:	f7ff f9b2 	bl	8001822 <LL_RCC_GetAPB2Prescaler>
 80024be:	4603      	mov	r3, r0
 80024c0:	0adb      	lsrs	r3, r3, #11
 80024c2:	4a03      	ldr	r2, [pc, #12]	@ (80024d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024c8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	bd98      	pop	{r3, r4, r7, pc}
 80024d0:	08004184 	.word	0x08004184

080024d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80024d4:	b590      	push	{r4, r7, lr}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	091b      	lsrs	r3, r3, #4
 80024e0:	f003 030f 	and.w	r3, r3, #15
 80024e4:	4a10      	ldr	r2, [pc, #64]	@ (8002528 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80024e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ea:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80024ec:	f7ff f981 	bl	80017f2 <LL_RCC_GetAHB3Prescaler>
 80024f0:	4603      	mov	r3, r0
 80024f2:	091b      	lsrs	r3, r3, #4
 80024f4:	f003 030f 	and.w	r3, r3, #15
 80024f8:	4a0c      	ldr	r2, [pc, #48]	@ (800252c <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80024fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	fbb2 f3f3 	udiv	r3, r2, r3
 8002504:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	4a09      	ldr	r2, [pc, #36]	@ (8002530 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800250a:	fba2 2303 	umull	r2, r3, r2, r3
 800250e:	0c9c      	lsrs	r4, r3, #18
 8002510:	f7fe ff06 	bl	8001320 <HAL_PWREx_GetVoltageRange>
 8002514:	4603      	mov	r3, r0
 8002516:	4619      	mov	r1, r3
 8002518:	4620      	mov	r0, r4
 800251a:	f000 f80b 	bl	8002534 <RCC_SetFlashLatency>
 800251e:	4603      	mov	r3, r0
}
 8002520:	4618      	mov	r0, r3
 8002522:	3714      	adds	r7, #20
 8002524:	46bd      	mov	sp, r7
 8002526:	bd90      	pop	{r4, r7, pc}
 8002528:	080041a4 	.word	0x080041a4
 800252c:	08004144 	.word	0x08004144
 8002530:	431bde83 	.word	0x431bde83

08002534 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b08e      	sub	sp, #56	@ 0x38
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800253e:	4a3a      	ldr	r2, [pc, #232]	@ (8002628 <RCC_SetFlashLatency+0xf4>)
 8002540:	f107 0320 	add.w	r3, r7, #32
 8002544:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002548:	6018      	str	r0, [r3, #0]
 800254a:	3304      	adds	r3, #4
 800254c:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800254e:	4a37      	ldr	r2, [pc, #220]	@ (800262c <RCC_SetFlashLatency+0xf8>)
 8002550:	f107 0318 	add.w	r3, r7, #24
 8002554:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002558:	6018      	str	r0, [r3, #0]
 800255a:	3304      	adds	r3, #4
 800255c:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800255e:	4a34      	ldr	r2, [pc, #208]	@ (8002630 <RCC_SetFlashLatency+0xfc>)
 8002560:	f107 030c 	add.w	r3, r7, #12
 8002564:	ca07      	ldmia	r2, {r0, r1, r2}
 8002566:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800256a:	2300      	movs	r3, #0
 800256c:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002574:	d11b      	bne.n	80025ae <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002576:	2300      	movs	r3, #0
 8002578:	633b      	str	r3, [r7, #48]	@ 0x30
 800257a:	e014      	b.n	80025a6 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800257c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	3338      	adds	r3, #56	@ 0x38
 8002582:	443b      	add	r3, r7
 8002584:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002588:	461a      	mov	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4293      	cmp	r3, r2
 800258e:	d807      	bhi.n	80025a0 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	3338      	adds	r3, #56	@ 0x38
 8002596:	443b      	add	r3, r7
 8002598:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800259c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800259e:	e021      	b.n	80025e4 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80025a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025a2:	3301      	adds	r3, #1
 80025a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80025a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d9e7      	bls.n	800257c <RCC_SetFlashLatency+0x48>
 80025ac:	e01a      	b.n	80025e4 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80025ae:	2300      	movs	r3, #0
 80025b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025b2:	e014      	b.n	80025de <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80025b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	3338      	adds	r3, #56	@ 0x38
 80025ba:	443b      	add	r3, r7
 80025bc:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80025c0:	461a      	mov	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d807      	bhi.n	80025d8 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80025c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	3338      	adds	r3, #56	@ 0x38
 80025ce:	443b      	add	r3, r7
 80025d0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80025d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80025d6:	e005      	b.n	80025e4 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80025d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025da:	3301      	adds	r3, #1
 80025dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d9e7      	bls.n	80025b4 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80025e4:	4b13      	ldr	r3, [pc, #76]	@ (8002634 <RCC_SetFlashLatency+0x100>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f023 0207 	bic.w	r2, r3, #7
 80025ec:	4911      	ldr	r1, [pc, #68]	@ (8002634 <RCC_SetFlashLatency+0x100>)
 80025ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025f0:	4313      	orrs	r3, r2
 80025f2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80025f4:	f7fe fb48 	bl	8000c88 <HAL_GetTick>
 80025f8:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80025fa:	e008      	b.n	800260e <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80025fc:	f7fe fb44 	bl	8000c88 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d901      	bls.n	800260e <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e007      	b.n	800261e <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800260e:	4b09      	ldr	r3, [pc, #36]	@ (8002634 <RCC_SetFlashLatency+0x100>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0307 	and.w	r3, r3, #7
 8002616:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002618:	429a      	cmp	r2, r3
 800261a:	d1ef      	bne.n	80025fc <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3738      	adds	r7, #56	@ 0x38
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	08004128 	.word	0x08004128
 800262c:	08004130 	.word	0x08004130
 8002630:	08004138 	.word	0x08004138
 8002634:	58004000 	.word	0x58004000

08002638 <LL_RCC_LSE_IsReady>:
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800263c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002640:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b02      	cmp	r3, #2
 800264a:	d101      	bne.n	8002650 <LL_RCC_LSE_IsReady+0x18>
 800264c:	2301      	movs	r3, #1
 800264e:	e000      	b.n	8002652 <LL_RCC_LSE_IsReady+0x1a>
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	46bd      	mov	sp, r7
 8002656:	bc80      	pop	{r7}
 8002658:	4770      	bx	lr

0800265a <LL_RCC_SetUSARTClockSource>:
{
 800265a:	b480      	push	{r7}
 800265c:	b083      	sub	sp, #12
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8002662:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002666:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	0c1b      	lsrs	r3, r3, #16
 800266e:	43db      	mvns	r3, r3
 8002670:	401a      	ands	r2, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	b29b      	uxth	r3, r3
 8002676:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800267a:	4313      	orrs	r3, r2
 800267c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	bc80      	pop	{r7}
 8002688:	4770      	bx	lr

0800268a <LL_RCC_SetI2SClockSource>:
{
 800268a:	b480      	push	{r7}
 800268c:	b083      	sub	sp, #12
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8002692:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002696:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800269a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800269e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80026aa:	bf00      	nop
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bc80      	pop	{r7}
 80026b2:	4770      	bx	lr

080026b4 <LL_RCC_SetLPUARTClockSource>:
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80026bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026c4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80026c8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	bc80      	pop	{r7}
 80026dc:	4770      	bx	lr

080026de <LL_RCC_SetI2CClockSource>:
{
 80026de:	b480      	push	{r7}
 80026e0:	b083      	sub	sp, #12
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80026e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026ea:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	091b      	lsrs	r3, r3, #4
 80026f2:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80026f6:	43db      	mvns	r3, r3
 80026f8:	401a      	ands	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	011b      	lsls	r3, r3, #4
 80026fe:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8002702:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002706:	4313      	orrs	r3, r2
 8002708:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800270c:	bf00      	nop
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	bc80      	pop	{r7}
 8002714:	4770      	bx	lr

08002716 <LL_RCC_SetLPTIMClockSource>:
{
 8002716:	b480      	push	{r7}
 8002718:	b083      	sub	sp, #12
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800271e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002722:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	0c1b      	lsrs	r3, r3, #16
 800272a:	041b      	lsls	r3, r3, #16
 800272c:	43db      	mvns	r3, r3
 800272e:	401a      	ands	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	041b      	lsls	r3, r3, #16
 8002734:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002738:	4313      	orrs	r3, r2
 800273a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800273e:	bf00      	nop
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	bc80      	pop	{r7}
 8002746:	4770      	bx	lr

08002748 <LL_RCC_SetRNGClockSource>:
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002750:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002754:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002758:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800275c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4313      	orrs	r3, r2
 8002764:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	bc80      	pop	{r7}
 8002770:	4770      	bx	lr

08002772 <LL_RCC_SetADCClockSource>:
{
 8002772:	b480      	push	{r7}
 8002774:	b083      	sub	sp, #12
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800277a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800277e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002782:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002786:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4313      	orrs	r3, r2
 800278e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002792:	bf00      	nop
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	bc80      	pop	{r7}
 800279a:	4770      	bx	lr

0800279c <LL_RCC_SetRTCClockSource>:
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80027a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80027b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bc80      	pop	{r7}
 80027c4:	4770      	bx	lr

080027c6 <LL_RCC_GetRTCClockSource>:
{
 80027c6:	b480      	push	{r7}
 80027c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80027ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	46bd      	mov	sp, r7
 80027da:	bc80      	pop	{r7}
 80027dc:	4770      	bx	lr

080027de <LL_RCC_ForceBackupDomainReset>:
{
 80027de:	b480      	push	{r7}
 80027e0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80027e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80027ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80027f6:	bf00      	nop
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bc80      	pop	{r7}
 80027fc:	4770      	bx	lr

080027fe <LL_RCC_ReleaseBackupDomainReset>:
{
 80027fe:	b480      	push	{r7}
 8002800:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002802:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002806:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800280a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800280e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002812:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002816:	bf00      	nop
 8002818:	46bd      	mov	sp, r7
 800281a:	bc80      	pop	{r7}
 800281c:	4770      	bx	lr
	...

08002820 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8002828:	2300      	movs	r3, #0
 800282a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 800282c:	2300      	movs	r3, #0
 800282e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002830:	2300      	movs	r3, #0
 8002832:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d058      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8002840:	f7fe fd26 	bl	8001290 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002844:	f7fe fa20 	bl	8000c88 <HAL_GetTick>
 8002848:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800284a:	e009      	b.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800284c:	f7fe fa1c 	bl	8000c88 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d902      	bls.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	74fb      	strb	r3, [r7, #19]
        break;
 800285e:	e006      	b.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002860:	4b7b      	ldr	r3, [pc, #492]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002868:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800286c:	d1ee      	bne.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 800286e:	7cfb      	ldrb	r3, [r7, #19]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d13c      	bne.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002874:	f7ff ffa7 	bl	80027c6 <LL_RCC_GetRTCClockSource>
 8002878:	4602      	mov	r2, r0
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800287e:	429a      	cmp	r2, r3
 8002880:	d00f      	beq.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002882:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002886:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800288a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800288e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002890:	f7ff ffa5 	bl	80027de <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002894:	f7ff ffb3 	bl	80027fe <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002898:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d014      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ac:	f7fe f9ec 	bl	8000c88 <HAL_GetTick>
 80028b0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80028b2:	e00b      	b.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028b4:	f7fe f9e8 	bl	8000c88 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d902      	bls.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	74fb      	strb	r3, [r7, #19]
            break;
 80028ca:	e004      	b.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80028cc:	f7ff feb4 	bl	8002638 <LL_RCC_LSE_IsReady>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d1ee      	bne.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80028d6:	7cfb      	ldrb	r3, [r7, #19]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d105      	bne.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff ff5b 	bl	800279c <LL_RCC_SetRTCClockSource>
 80028e6:	e004      	b.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028e8:	7cfb      	ldrb	r3, [r7, #19]
 80028ea:	74bb      	strb	r3, [r7, #18]
 80028ec:	e001      	b.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028ee:	7cfb      	ldrb	r3, [r7, #19]
 80028f0:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d004      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	4618      	mov	r0, r3
 8002904:	f7ff fea9 	bl	800265a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0302 	and.w	r3, r3, #2
 8002910:	2b00      	cmp	r3, #0
 8002912:	d004      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff fe9e 	bl	800265a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0320 	and.w	r3, r3, #32
 8002926:	2b00      	cmp	r3, #0
 8002928:	d004      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	4618      	mov	r0, r3
 8002930:	f7ff fec0 	bl	80026b4 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800293c:	2b00      	cmp	r3, #0
 800293e:	d004      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a1b      	ldr	r3, [r3, #32]
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff fee6 	bl	8002716 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002952:	2b00      	cmp	r3, #0
 8002954:	d004      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800295a:	4618      	mov	r0, r3
 800295c:	f7ff fedb 	bl	8002716 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002968:	2b00      	cmp	r3, #0
 800296a:	d004      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002970:	4618      	mov	r0, r3
 8002972:	f7ff fed0 	bl	8002716 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800297e:	2b00      	cmp	r3, #0
 8002980:	d004      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	4618      	mov	r0, r3
 8002988:	f7ff fea9 	bl	80026de <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002994:	2b00      	cmp	r3, #0
 8002996:	d004      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	699b      	ldr	r3, [r3, #24]
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff fe9e 	bl	80026de <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d004      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	69db      	ldr	r3, [r3, #28]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7ff fe93 	bl	80026de <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0310 	and.w	r3, r3, #16
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d011      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff fe5e 	bl	800268a <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029d6:	d107      	bne.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80029d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80029e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029e6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d010      	beq.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff fea5 	bl	8002748 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d107      	bne.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002a06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a10:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a14:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d011      	beq.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff fea3 	bl	8002772 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a34:	d107      	bne.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002a36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a44:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8002a46:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3718      	adds	r7, #24
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	58000400 	.word	0x58000400

08002a54 <LL_RCC_GetUSARTClockSource>:
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8002a5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a60:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	401a      	ands	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	041b      	lsls	r3, r3, #16
 8002a6c:	4313      	orrs	r3, r2
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bc80      	pop	{r7}
 8002a76:	4770      	bx	lr

08002a78 <LL_RCC_GetLPUARTClockSource>:
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8002a80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a84:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4013      	ands	r3, r2
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bc80      	pop	{r7}
 8002a94:	4770      	bx	lr

08002a96 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b082      	sub	sp, #8
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d101      	bne.n	8002aa8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e042      	b.n	8002b2e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d106      	bne.n	8002ac0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f7fd ff28 	bl	8000910 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2224      	movs	r2, #36	@ 0x24
 8002ac4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f022 0201 	bic.w	r2, r2, #1
 8002ad6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d002      	beq.n	8002ae6 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f000 fb23 	bl	800312c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 f8ac 	bl	8002c44 <UART_SetConfig>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d101      	bne.n	8002af6 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e01b      	b.n	8002b2e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	685a      	ldr	r2, [r3, #4]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002b04:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	689a      	ldr	r2, [r3, #8]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002b14:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f042 0201 	orr.w	r2, r2, #1
 8002b24:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 fba1 	bl	800326e <UART_CheckIdleState>
 8002b2c:	4603      	mov	r3, r0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b08a      	sub	sp, #40	@ 0x28
 8002b3a:	af02      	add	r7, sp, #8
 8002b3c:	60f8      	str	r0, [r7, #12]
 8002b3e:	60b9      	str	r1, [r7, #8]
 8002b40:	603b      	str	r3, [r7, #0]
 8002b42:	4613      	mov	r3, r2
 8002b44:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b4c:	2b20      	cmp	r3, #32
 8002b4e:	d173      	bne.n	8002c38 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d002      	beq.n	8002b5c <HAL_UART_Transmit+0x26>
 8002b56:	88fb      	ldrh	r3, [r7, #6]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d101      	bne.n	8002b60 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e06c      	b.n	8002c3a <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2221      	movs	r2, #33	@ 0x21
 8002b6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b70:	f7fe f88a 	bl	8000c88 <HAL_GetTick>
 8002b74:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	88fa      	ldrh	r2, [r7, #6]
 8002b7a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	88fa      	ldrh	r2, [r7, #6]
 8002b82:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b8e:	d108      	bne.n	8002ba2 <HAL_UART_Transmit+0x6c>
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d104      	bne.n	8002ba2 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	61bb      	str	r3, [r7, #24]
 8002ba0:	e003      	b.n	8002baa <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002baa:	e02c      	b.n	8002c06 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	9300      	str	r3, [sp, #0]
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	2180      	movs	r1, #128	@ 0x80
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	f000 fba7 	bl	800330a <UART_WaitOnFlagUntilTimeout>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e039      	b.n	8002c3a <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10b      	bne.n	8002be4 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	881b      	ldrh	r3, [r3, #0]
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bda:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	3302      	adds	r3, #2
 8002be0:	61bb      	str	r3, [r7, #24]
 8002be2:	e007      	b.n	8002bf4 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	781a      	ldrb	r2, [r3, #0]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	3b01      	subs	r3, #1
 8002bfe:	b29a      	uxth	r2, r3
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1cc      	bne.n	8002bac <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	9300      	str	r3, [sp, #0]
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	2140      	movs	r1, #64	@ 0x40
 8002c1c:	68f8      	ldr	r0, [r7, #12]
 8002c1e:	f000 fb74 	bl	800330a <UART_WaitOnFlagUntilTimeout>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e006      	b.n	8002c3a <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2220      	movs	r2, #32
 8002c30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8002c34:	2300      	movs	r3, #0
 8002c36:	e000      	b.n	8002c3a <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8002c38:	2302      	movs	r3, #2
  }
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3720      	adds	r7, #32
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
	...

08002c44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c48:	b08c      	sub	sp, #48	@ 0x30
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	689a      	ldr	r2, [r3, #8]
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	431a      	orrs	r2, r3
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	431a      	orrs	r2, r3
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	69db      	ldr	r3, [r3, #28]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	4b94      	ldr	r3, [pc, #592]	@ (8002ec4 <UART_SetConfig+0x280>)
 8002c74:	4013      	ands	r3, r2
 8002c76:	697a      	ldr	r2, [r7, #20]
 8002c78:	6812      	ldr	r2, [r2, #0]
 8002c7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002c7c:	430b      	orrs	r3, r1
 8002c7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	68da      	ldr	r2, [r3, #12]
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	430a      	orrs	r2, r1
 8002c94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a89      	ldr	r2, [pc, #548]	@ (8002ec8 <UART_SetConfig+0x284>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d004      	beq.n	8002cb0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cac:	4313      	orrs	r3, r2
 8002cae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002cba:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	6812      	ldr	r2, [r2, #0]
 8002cc2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002cc4:	430b      	orrs	r3, r1
 8002cc6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cce:	f023 010f 	bic.w	r1, r3, #15
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a7a      	ldr	r2, [pc, #488]	@ (8002ecc <UART_SetConfig+0x288>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d127      	bne.n	8002d38 <UART_SetConfig+0xf4>
 8002ce8:	2003      	movs	r0, #3
 8002cea:	f7ff feb3 	bl	8002a54 <LL_RCC_GetUSARTClockSource>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8002cf4:	2b03      	cmp	r3, #3
 8002cf6:	d81b      	bhi.n	8002d30 <UART_SetConfig+0xec>
 8002cf8:	a201      	add	r2, pc, #4	@ (adr r2, 8002d00 <UART_SetConfig+0xbc>)
 8002cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cfe:	bf00      	nop
 8002d00:	08002d11 	.word	0x08002d11
 8002d04:	08002d21 	.word	0x08002d21
 8002d08:	08002d19 	.word	0x08002d19
 8002d0c:	08002d29 	.word	0x08002d29
 8002d10:	2301      	movs	r3, #1
 8002d12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d16:	e080      	b.n	8002e1a <UART_SetConfig+0x1d6>
 8002d18:	2302      	movs	r3, #2
 8002d1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d1e:	e07c      	b.n	8002e1a <UART_SetConfig+0x1d6>
 8002d20:	2304      	movs	r3, #4
 8002d22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d26:	e078      	b.n	8002e1a <UART_SetConfig+0x1d6>
 8002d28:	2308      	movs	r3, #8
 8002d2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d2e:	e074      	b.n	8002e1a <UART_SetConfig+0x1d6>
 8002d30:	2310      	movs	r3, #16
 8002d32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d36:	e070      	b.n	8002e1a <UART_SetConfig+0x1d6>
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a64      	ldr	r2, [pc, #400]	@ (8002ed0 <UART_SetConfig+0x28c>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d138      	bne.n	8002db4 <UART_SetConfig+0x170>
 8002d42:	200c      	movs	r0, #12
 8002d44:	f7ff fe86 	bl	8002a54 <LL_RCC_GetUSARTClockSource>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8002d4e:	2b0c      	cmp	r3, #12
 8002d50:	d82c      	bhi.n	8002dac <UART_SetConfig+0x168>
 8002d52:	a201      	add	r2, pc, #4	@ (adr r2, 8002d58 <UART_SetConfig+0x114>)
 8002d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d58:	08002d8d 	.word	0x08002d8d
 8002d5c:	08002dad 	.word	0x08002dad
 8002d60:	08002dad 	.word	0x08002dad
 8002d64:	08002dad 	.word	0x08002dad
 8002d68:	08002d9d 	.word	0x08002d9d
 8002d6c:	08002dad 	.word	0x08002dad
 8002d70:	08002dad 	.word	0x08002dad
 8002d74:	08002dad 	.word	0x08002dad
 8002d78:	08002d95 	.word	0x08002d95
 8002d7c:	08002dad 	.word	0x08002dad
 8002d80:	08002dad 	.word	0x08002dad
 8002d84:	08002dad 	.word	0x08002dad
 8002d88:	08002da5 	.word	0x08002da5
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d92:	e042      	b.n	8002e1a <UART_SetConfig+0x1d6>
 8002d94:	2302      	movs	r3, #2
 8002d96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d9a:	e03e      	b.n	8002e1a <UART_SetConfig+0x1d6>
 8002d9c:	2304      	movs	r3, #4
 8002d9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002da2:	e03a      	b.n	8002e1a <UART_SetConfig+0x1d6>
 8002da4:	2308      	movs	r3, #8
 8002da6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002daa:	e036      	b.n	8002e1a <UART_SetConfig+0x1d6>
 8002dac:	2310      	movs	r3, #16
 8002dae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002db2:	e032      	b.n	8002e1a <UART_SetConfig+0x1d6>
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a43      	ldr	r2, [pc, #268]	@ (8002ec8 <UART_SetConfig+0x284>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d12a      	bne.n	8002e14 <UART_SetConfig+0x1d0>
 8002dbe:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8002dc2:	f7ff fe59 	bl	8002a78 <LL_RCC_GetLPUARTClockSource>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002dcc:	d01a      	beq.n	8002e04 <UART_SetConfig+0x1c0>
 8002dce:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002dd2:	d81b      	bhi.n	8002e0c <UART_SetConfig+0x1c8>
 8002dd4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002dd8:	d00c      	beq.n	8002df4 <UART_SetConfig+0x1b0>
 8002dda:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002dde:	d815      	bhi.n	8002e0c <UART_SetConfig+0x1c8>
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d003      	beq.n	8002dec <UART_SetConfig+0x1a8>
 8002de4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002de8:	d008      	beq.n	8002dfc <UART_SetConfig+0x1b8>
 8002dea:	e00f      	b.n	8002e0c <UART_SetConfig+0x1c8>
 8002dec:	2300      	movs	r3, #0
 8002dee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002df2:	e012      	b.n	8002e1a <UART_SetConfig+0x1d6>
 8002df4:	2302      	movs	r3, #2
 8002df6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002dfa:	e00e      	b.n	8002e1a <UART_SetConfig+0x1d6>
 8002dfc:	2304      	movs	r3, #4
 8002dfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e02:	e00a      	b.n	8002e1a <UART_SetConfig+0x1d6>
 8002e04:	2308      	movs	r3, #8
 8002e06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e0a:	e006      	b.n	8002e1a <UART_SetConfig+0x1d6>
 8002e0c:	2310      	movs	r3, #16
 8002e0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e12:	e002      	b.n	8002e1a <UART_SetConfig+0x1d6>
 8002e14:	2310      	movs	r3, #16
 8002e16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a2a      	ldr	r2, [pc, #168]	@ (8002ec8 <UART_SetConfig+0x284>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	f040 80a4 	bne.w	8002f6e <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002e26:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002e2a:	2b08      	cmp	r3, #8
 8002e2c:	d823      	bhi.n	8002e76 <UART_SetConfig+0x232>
 8002e2e:	a201      	add	r2, pc, #4	@ (adr r2, 8002e34 <UART_SetConfig+0x1f0>)
 8002e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e34:	08002e59 	.word	0x08002e59
 8002e38:	08002e77 	.word	0x08002e77
 8002e3c:	08002e61 	.word	0x08002e61
 8002e40:	08002e77 	.word	0x08002e77
 8002e44:	08002e67 	.word	0x08002e67
 8002e48:	08002e77 	.word	0x08002e77
 8002e4c:	08002e77 	.word	0x08002e77
 8002e50:	08002e77 	.word	0x08002e77
 8002e54:	08002e6f 	.word	0x08002e6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e58:	f7ff fb18 	bl	800248c <HAL_RCC_GetPCLK1Freq>
 8002e5c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002e5e:	e010      	b.n	8002e82 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e60:	4b1c      	ldr	r3, [pc, #112]	@ (8002ed4 <UART_SetConfig+0x290>)
 8002e62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002e64:	e00d      	b.n	8002e82 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e66:	f7ff fa5d 	bl	8002324 <HAL_RCC_GetSysClockFreq>
 8002e6a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002e6c:	e009      	b.n	8002e82 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e72:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002e74:	e005      	b.n	8002e82 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8002e76:	2300      	movs	r3, #0
 8002e78:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002e80:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f000 8137 	beq.w	80030f8 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e8e:	4a12      	ldr	r2, [pc, #72]	@ (8002ed8 <UART_SetConfig+0x294>)
 8002e90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e94:	461a      	mov	r2, r3
 8002e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e98:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e9c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	685a      	ldr	r2, [r3, #4]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	4413      	add	r3, r2
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d305      	bcc.n	8002eba <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d910      	bls.n	8002edc <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002ec0:	e11a      	b.n	80030f8 <UART_SetConfig+0x4b4>
 8002ec2:	bf00      	nop
 8002ec4:	cfff69f3 	.word	0xcfff69f3
 8002ec8:	40008000 	.word	0x40008000
 8002ecc:	40013800 	.word	0x40013800
 8002ed0:	40004400 	.word	0x40004400
 8002ed4:	00f42400 	.word	0x00f42400
 8002ed8:	080041e4 	.word	0x080041e4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ede:	2200      	movs	r2, #0
 8002ee0:	60bb      	str	r3, [r7, #8]
 8002ee2:	60fa      	str	r2, [r7, #12]
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee8:	4a8e      	ldr	r2, [pc, #568]	@ (8003124 <UART_SetConfig+0x4e0>)
 8002eea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	603b      	str	r3, [r7, #0]
 8002ef4:	607a      	str	r2, [r7, #4]
 8002ef6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002efa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002efe:	f7fd f93b 	bl	8000178 <__aeabi_uldivmod>
 8002f02:	4602      	mov	r2, r0
 8002f04:	460b      	mov	r3, r1
 8002f06:	4610      	mov	r0, r2
 8002f08:	4619      	mov	r1, r3
 8002f0a:	f04f 0200 	mov.w	r2, #0
 8002f0e:	f04f 0300 	mov.w	r3, #0
 8002f12:	020b      	lsls	r3, r1, #8
 8002f14:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002f18:	0202      	lsls	r2, r0, #8
 8002f1a:	6979      	ldr	r1, [r7, #20]
 8002f1c:	6849      	ldr	r1, [r1, #4]
 8002f1e:	0849      	lsrs	r1, r1, #1
 8002f20:	2000      	movs	r0, #0
 8002f22:	460c      	mov	r4, r1
 8002f24:	4605      	mov	r5, r0
 8002f26:	eb12 0804 	adds.w	r8, r2, r4
 8002f2a:	eb43 0905 	adc.w	r9, r3, r5
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	469a      	mov	sl, r3
 8002f36:	4693      	mov	fp, r2
 8002f38:	4652      	mov	r2, sl
 8002f3a:	465b      	mov	r3, fp
 8002f3c:	4640      	mov	r0, r8
 8002f3e:	4649      	mov	r1, r9
 8002f40:	f7fd f91a 	bl	8000178 <__aeabi_uldivmod>
 8002f44:	4602      	mov	r2, r0
 8002f46:	460b      	mov	r3, r1
 8002f48:	4613      	mov	r3, r2
 8002f4a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002f4c:	6a3b      	ldr	r3, [r7, #32]
 8002f4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f52:	d308      	bcc.n	8002f66 <UART_SetConfig+0x322>
 8002f54:	6a3b      	ldr	r3, [r7, #32]
 8002f56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f5a:	d204      	bcs.n	8002f66 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	6a3a      	ldr	r2, [r7, #32]
 8002f62:	60da      	str	r2, [r3, #12]
 8002f64:	e0c8      	b.n	80030f8 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002f6c:	e0c4      	b.n	80030f8 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	69db      	ldr	r3, [r3, #28]
 8002f72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f76:	d167      	bne.n	8003048 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8002f78:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002f7c:	2b08      	cmp	r3, #8
 8002f7e:	d828      	bhi.n	8002fd2 <UART_SetConfig+0x38e>
 8002f80:	a201      	add	r2, pc, #4	@ (adr r2, 8002f88 <UART_SetConfig+0x344>)
 8002f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f86:	bf00      	nop
 8002f88:	08002fad 	.word	0x08002fad
 8002f8c:	08002fb5 	.word	0x08002fb5
 8002f90:	08002fbd 	.word	0x08002fbd
 8002f94:	08002fd3 	.word	0x08002fd3
 8002f98:	08002fc3 	.word	0x08002fc3
 8002f9c:	08002fd3 	.word	0x08002fd3
 8002fa0:	08002fd3 	.word	0x08002fd3
 8002fa4:	08002fd3 	.word	0x08002fd3
 8002fa8:	08002fcb 	.word	0x08002fcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fac:	f7ff fa6e 	bl	800248c <HAL_RCC_GetPCLK1Freq>
 8002fb0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002fb2:	e014      	b.n	8002fde <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002fb4:	f7ff fa7c 	bl	80024b0 <HAL_RCC_GetPCLK2Freq>
 8002fb8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002fba:	e010      	b.n	8002fde <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fbc:	4b5a      	ldr	r3, [pc, #360]	@ (8003128 <UART_SetConfig+0x4e4>)
 8002fbe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002fc0:	e00d      	b.n	8002fde <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fc2:	f7ff f9af 	bl	8002324 <HAL_RCC_GetSysClockFreq>
 8002fc6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002fc8:	e009      	b.n	8002fde <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002fce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002fd0:	e005      	b.n	8002fde <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002fdc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	f000 8089 	beq.w	80030f8 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fea:	4a4e      	ldr	r2, [pc, #312]	@ (8003124 <UART_SetConfig+0x4e0>)
 8002fec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff4:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ff8:	005a      	lsls	r2, r3, #1
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	085b      	lsrs	r3, r3, #1
 8003000:	441a      	add	r2, r3
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	fbb2 f3f3 	udiv	r3, r2, r3
 800300a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800300c:	6a3b      	ldr	r3, [r7, #32]
 800300e:	2b0f      	cmp	r3, #15
 8003010:	d916      	bls.n	8003040 <UART_SetConfig+0x3fc>
 8003012:	6a3b      	ldr	r3, [r7, #32]
 8003014:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003018:	d212      	bcs.n	8003040 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800301a:	6a3b      	ldr	r3, [r7, #32]
 800301c:	b29b      	uxth	r3, r3
 800301e:	f023 030f 	bic.w	r3, r3, #15
 8003022:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003024:	6a3b      	ldr	r3, [r7, #32]
 8003026:	085b      	lsrs	r3, r3, #1
 8003028:	b29b      	uxth	r3, r3
 800302a:	f003 0307 	and.w	r3, r3, #7
 800302e:	b29a      	uxth	r2, r3
 8003030:	8bfb      	ldrh	r3, [r7, #30]
 8003032:	4313      	orrs	r3, r2
 8003034:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	8bfa      	ldrh	r2, [r7, #30]
 800303c:	60da      	str	r2, [r3, #12]
 800303e:	e05b      	b.n	80030f8 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003046:	e057      	b.n	80030f8 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003048:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800304c:	2b08      	cmp	r3, #8
 800304e:	d828      	bhi.n	80030a2 <UART_SetConfig+0x45e>
 8003050:	a201      	add	r2, pc, #4	@ (adr r2, 8003058 <UART_SetConfig+0x414>)
 8003052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003056:	bf00      	nop
 8003058:	0800307d 	.word	0x0800307d
 800305c:	08003085 	.word	0x08003085
 8003060:	0800308d 	.word	0x0800308d
 8003064:	080030a3 	.word	0x080030a3
 8003068:	08003093 	.word	0x08003093
 800306c:	080030a3 	.word	0x080030a3
 8003070:	080030a3 	.word	0x080030a3
 8003074:	080030a3 	.word	0x080030a3
 8003078:	0800309b 	.word	0x0800309b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800307c:	f7ff fa06 	bl	800248c <HAL_RCC_GetPCLK1Freq>
 8003080:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003082:	e014      	b.n	80030ae <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003084:	f7ff fa14 	bl	80024b0 <HAL_RCC_GetPCLK2Freq>
 8003088:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800308a:	e010      	b.n	80030ae <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800308c:	4b26      	ldr	r3, [pc, #152]	@ (8003128 <UART_SetConfig+0x4e4>)
 800308e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003090:	e00d      	b.n	80030ae <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003092:	f7ff f947 	bl	8002324 <HAL_RCC_GetSysClockFreq>
 8003096:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003098:	e009      	b.n	80030ae <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800309a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800309e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80030a0:	e005      	b.n	80030ae <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 80030a2:	2300      	movs	r3, #0
 80030a4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80030ac:	bf00      	nop
    }

    if (pclk != 0U)
 80030ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d021      	beq.n	80030f8 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b8:	4a1a      	ldr	r2, [pc, #104]	@ (8003124 <UART_SetConfig+0x4e0>)
 80030ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030be:	461a      	mov	r2, r3
 80030c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c2:	fbb3 f2f2 	udiv	r2, r3, r2
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	085b      	lsrs	r3, r3, #1
 80030cc:	441a      	add	r2, r3
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030d8:	6a3b      	ldr	r3, [r7, #32]
 80030da:	2b0f      	cmp	r3, #15
 80030dc:	d909      	bls.n	80030f2 <UART_SetConfig+0x4ae>
 80030de:	6a3b      	ldr	r3, [r7, #32]
 80030e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030e4:	d205      	bcs.n	80030f2 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80030e6:	6a3b      	ldr	r3, [r7, #32]
 80030e8:	b29a      	uxth	r2, r3
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	60da      	str	r2, [r3, #12]
 80030f0:	e002      	b.n	80030f8 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	2201      	movs	r2, #1
 8003104:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	2200      	movs	r2, #0
 800310c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	2200      	movs	r2, #0
 8003112:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003114:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003118:	4618      	mov	r0, r3
 800311a:	3730      	adds	r7, #48	@ 0x30
 800311c:	46bd      	mov	sp, r7
 800311e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003122:	bf00      	nop
 8003124:	080041e4 	.word	0x080041e4
 8003128:	00f42400 	.word	0x00f42400

0800312c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003138:	f003 0308 	and.w	r3, r3, #8
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00a      	beq.n	8003156 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	430a      	orrs	r2, r1
 8003154:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00a      	beq.n	8003178 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	430a      	orrs	r2, r1
 8003176:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d00a      	beq.n	800319a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	430a      	orrs	r2, r1
 8003198:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800319e:	f003 0304 	and.w	r3, r3, #4
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00a      	beq.n	80031bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	430a      	orrs	r2, r1
 80031ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031c0:	f003 0310 	and.w	r3, r3, #16
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00a      	beq.n	80031de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	430a      	orrs	r2, r1
 80031dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031e2:	f003 0320 	and.w	r3, r3, #32
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00a      	beq.n	8003200 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	430a      	orrs	r2, r1
 80031fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003204:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003208:	2b00      	cmp	r3, #0
 800320a:	d01a      	beq.n	8003242 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	430a      	orrs	r2, r1
 8003220:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003226:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800322a:	d10a      	bne.n	8003242 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	430a      	orrs	r2, r1
 8003240:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003246:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00a      	beq.n	8003264 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	430a      	orrs	r2, r1
 8003262:	605a      	str	r2, [r3, #4]
  }
}
 8003264:	bf00      	nop
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	bc80      	pop	{r7}
 800326c:	4770      	bx	lr

0800326e <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800326e:	b580      	push	{r7, lr}
 8003270:	b086      	sub	sp, #24
 8003272:	af02      	add	r7, sp, #8
 8003274:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800327e:	f7fd fd03 	bl	8000c88 <HAL_GetTick>
 8003282:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0308 	and.w	r3, r3, #8
 800328e:	2b08      	cmp	r3, #8
 8003290:	d10e      	bne.n	80032b0 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003292:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003296:	9300      	str	r3, [sp, #0]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f000 f832 	bl	800330a <UART_WaitOnFlagUntilTimeout>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d001      	beq.n	80032b0 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e028      	b.n	8003302 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0304 	and.w	r3, r3, #4
 80032ba:	2b04      	cmp	r3, #4
 80032bc:	d10e      	bne.n	80032dc <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032be:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80032c2:	9300      	str	r3, [sp, #0]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 f81c 	bl	800330a <UART_WaitOnFlagUntilTimeout>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e012      	b.n	8003302 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2220      	movs	r2, #32
 80032e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2220      	movs	r2, #32
 80032e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3710      	adds	r7, #16
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800330a:	b580      	push	{r7, lr}
 800330c:	b09c      	sub	sp, #112	@ 0x70
 800330e:	af00      	add	r7, sp, #0
 8003310:	60f8      	str	r0, [r7, #12]
 8003312:	60b9      	str	r1, [r7, #8]
 8003314:	603b      	str	r3, [r7, #0]
 8003316:	4613      	mov	r3, r2
 8003318:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800331a:	e0af      	b.n	800347c <UART_WaitOnFlagUntilTimeout+0x172>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800331c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800331e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003322:	f000 80ab 	beq.w	800347c <UART_WaitOnFlagUntilTimeout+0x172>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003326:	f7fd fcaf 	bl	8000c88 <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8003332:	429a      	cmp	r2, r3
 8003334:	d302      	bcc.n	800333c <UART_WaitOnFlagUntilTimeout+0x32>
 8003336:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003338:	2b00      	cmp	r3, #0
 800333a:	d140      	bne.n	80033be <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003342:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003344:	e853 3f00 	ldrex	r3, [r3]
 8003348:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800334a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800334c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003350:	667b      	str	r3, [r7, #100]	@ 0x64
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	461a      	mov	r2, r3
 8003358:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800335a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800335c:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800335e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003360:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003362:	e841 2300 	strex	r3, r2, [r1]
 8003366:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8003368:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1e6      	bne.n	800333c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	3308      	adds	r3, #8
 8003374:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003376:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003378:	e853 3f00 	ldrex	r3, [r3]
 800337c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800337e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003380:	f023 0301 	bic.w	r3, r3, #1
 8003384:	663b      	str	r3, [r7, #96]	@ 0x60
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	3308      	adds	r3, #8
 800338c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800338e:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003390:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003392:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003394:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003396:	e841 2300 	strex	r3, r2, [r1]
 800339a:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800339c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1e5      	bne.n	800336e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2220      	movs	r2, #32
 80033a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2220      	movs	r2, #32
 80033ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e06f      	b.n	800349e <UART_WaitOnFlagUntilTimeout+0x194>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0304 	and.w	r3, r3, #4
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d057      	beq.n	800347c <UART_WaitOnFlagUntilTimeout+0x172>
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	2b80      	cmp	r3, #128	@ 0x80
 80033d0:	d054      	beq.n	800347c <UART_WaitOnFlagUntilTimeout+0x172>
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	2b40      	cmp	r3, #64	@ 0x40
 80033d6:	d051      	beq.n	800347c <UART_WaitOnFlagUntilTimeout+0x172>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	69db      	ldr	r3, [r3, #28]
 80033de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033e6:	d149      	bne.n	800347c <UART_WaitOnFlagUntilTimeout+0x172>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80033f0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033fa:	e853 3f00 	ldrex	r3, [r3]
 80033fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003402:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003406:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	461a      	mov	r2, r3
 800340e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003410:	637b      	str	r3, [r7, #52]	@ 0x34
 8003412:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003414:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003416:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003418:	e841 2300 	strex	r3, r2, [r1]
 800341c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800341e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1e6      	bne.n	80033f2 <UART_WaitOnFlagUntilTimeout+0xe8>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	3308      	adds	r3, #8
 800342a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	e853 3f00 	ldrex	r3, [r3]
 8003432:	613b      	str	r3, [r7, #16]
   return(result);
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	f023 0301 	bic.w	r3, r3, #1
 800343a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	3308      	adds	r3, #8
 8003442:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003444:	623a      	str	r2, [r7, #32]
 8003446:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003448:	69f9      	ldr	r1, [r7, #28]
 800344a:	6a3a      	ldr	r2, [r7, #32]
 800344c:	e841 2300 	strex	r3, r2, [r1]
 8003450:	61bb      	str	r3, [r7, #24]
   return(result);
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1e5      	bne.n	8003424 <UART_WaitOnFlagUntilTimeout+0x11a>

          huart->gState = HAL_UART_STATE_READY;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2220      	movs	r2, #32
 800345c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2220      	movs	r2, #32
 8003464:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2220      	movs	r2, #32
 800346c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e010      	b.n	800349e <UART_WaitOnFlagUntilTimeout+0x194>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	69da      	ldr	r2, [r3, #28]
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	4013      	ands	r3, r2
 8003486:	68ba      	ldr	r2, [r7, #8]
 8003488:	429a      	cmp	r2, r3
 800348a:	bf0c      	ite	eq
 800348c:	2301      	moveq	r3, #1
 800348e:	2300      	movne	r3, #0
 8003490:	b2db      	uxtb	r3, r3
 8003492:	461a      	mov	r2, r3
 8003494:	79fb      	ldrb	r3, [r7, #7]
 8003496:	429a      	cmp	r2, r3
 8003498:	f43f af40 	beq.w	800331c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3770      	adds	r7, #112	@ 0x70
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80034a6:	b480      	push	{r7}
 80034a8:	b085      	sub	sp, #20
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d101      	bne.n	80034bc <HAL_UARTEx_DisableFifoMode+0x16>
 80034b8:	2302      	movs	r3, #2
 80034ba:	e027      	b.n	800350c <HAL_UARTEx_DisableFifoMode+0x66>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2224      	movs	r2, #36	@ 0x24
 80034c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f022 0201 	bic.w	r2, r2, #1
 80034e2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80034ea:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68fa      	ldr	r2, [r7, #12]
 80034f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2220      	movs	r2, #32
 80034fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3714      	adds	r7, #20
 8003510:	46bd      	mov	sp, r7
 8003512:	bc80      	pop	{r7}
 8003514:	4770      	bx	lr

08003516 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b084      	sub	sp, #16
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
 800351e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003526:	2b01      	cmp	r3, #1
 8003528:	d101      	bne.n	800352e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800352a:	2302      	movs	r3, #2
 800352c:	e02d      	b.n	800358a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2201      	movs	r2, #1
 8003532:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2224      	movs	r2, #36	@ 0x24
 800353a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 0201 	bic.w	r2, r2, #1
 8003554:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	683a      	ldr	r2, [r7, #0]
 8003566:	430a      	orrs	r2, r1
 8003568:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 f850 	bl	8003610 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2220      	movs	r2, #32
 800357c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003592:	b580      	push	{r7, lr}
 8003594:	b084      	sub	sp, #16
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
 800359a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d101      	bne.n	80035aa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80035a6:	2302      	movs	r3, #2
 80035a8:	e02d      	b.n	8003606 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2201      	movs	r2, #1
 80035ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2224      	movs	r2, #36	@ 0x24
 80035b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f022 0201 	bic.w	r2, r2, #1
 80035d0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	683a      	ldr	r2, [r7, #0]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 f812 	bl	8003610 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2220      	movs	r2, #32
 80035f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3710      	adds	r7, #16
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
	...

08003610 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003610:	b480      	push	{r7}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800361c:	2b00      	cmp	r3, #0
 800361e:	d108      	bne.n	8003632 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003630:	e031      	b.n	8003696 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003632:	2308      	movs	r3, #8
 8003634:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003636:	2308      	movs	r3, #8
 8003638:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	0e5b      	lsrs	r3, r3, #25
 8003642:	b2db      	uxtb	r3, r3
 8003644:	f003 0307 	and.w	r3, r3, #7
 8003648:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	0f5b      	lsrs	r3, r3, #29
 8003652:	b2db      	uxtb	r3, r3
 8003654:	f003 0307 	and.w	r3, r3, #7
 8003658:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800365a:	7bbb      	ldrb	r3, [r7, #14]
 800365c:	7b3a      	ldrb	r2, [r7, #12]
 800365e:	4910      	ldr	r1, [pc, #64]	@ (80036a0 <UARTEx_SetNbDataToProcess+0x90>)
 8003660:	5c8a      	ldrb	r2, [r1, r2]
 8003662:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003666:	7b3a      	ldrb	r2, [r7, #12]
 8003668:	490e      	ldr	r1, [pc, #56]	@ (80036a4 <UARTEx_SetNbDataToProcess+0x94>)
 800366a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800366c:	fb93 f3f2 	sdiv	r3, r3, r2
 8003670:	b29a      	uxth	r2, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003678:	7bfb      	ldrb	r3, [r7, #15]
 800367a:	7b7a      	ldrb	r2, [r7, #13]
 800367c:	4908      	ldr	r1, [pc, #32]	@ (80036a0 <UARTEx_SetNbDataToProcess+0x90>)
 800367e:	5c8a      	ldrb	r2, [r1, r2]
 8003680:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003684:	7b7a      	ldrb	r2, [r7, #13]
 8003686:	4907      	ldr	r1, [pc, #28]	@ (80036a4 <UARTEx_SetNbDataToProcess+0x94>)
 8003688:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800368a:	fb93 f3f2 	sdiv	r3, r3, r2
 800368e:	b29a      	uxth	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8003696:	bf00      	nop
 8003698:	3714      	adds	r7, #20
 800369a:	46bd      	mov	sp, r7
 800369c:	bc80      	pop	{r7}
 800369e:	4770      	bx	lr
 80036a0:	080041fc 	.word	0x080041fc
 80036a4:	08004204 	.word	0x08004204

080036a8 <std>:
 80036a8:	2300      	movs	r3, #0
 80036aa:	b510      	push	{r4, lr}
 80036ac:	4604      	mov	r4, r0
 80036ae:	e9c0 3300 	strd	r3, r3, [r0]
 80036b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80036b6:	6083      	str	r3, [r0, #8]
 80036b8:	8181      	strh	r1, [r0, #12]
 80036ba:	6643      	str	r3, [r0, #100]	@ 0x64
 80036bc:	81c2      	strh	r2, [r0, #14]
 80036be:	6183      	str	r3, [r0, #24]
 80036c0:	4619      	mov	r1, r3
 80036c2:	2208      	movs	r2, #8
 80036c4:	305c      	adds	r0, #92	@ 0x5c
 80036c6:	f000 f9e7 	bl	8003a98 <memset>
 80036ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003700 <std+0x58>)
 80036cc:	6263      	str	r3, [r4, #36]	@ 0x24
 80036ce:	4b0d      	ldr	r3, [pc, #52]	@ (8003704 <std+0x5c>)
 80036d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80036d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003708 <std+0x60>)
 80036d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80036d6:	4b0d      	ldr	r3, [pc, #52]	@ (800370c <std+0x64>)
 80036d8:	6323      	str	r3, [r4, #48]	@ 0x30
 80036da:	4b0d      	ldr	r3, [pc, #52]	@ (8003710 <std+0x68>)
 80036dc:	6224      	str	r4, [r4, #32]
 80036de:	429c      	cmp	r4, r3
 80036e0:	d006      	beq.n	80036f0 <std+0x48>
 80036e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80036e6:	4294      	cmp	r4, r2
 80036e8:	d002      	beq.n	80036f0 <std+0x48>
 80036ea:	33d0      	adds	r3, #208	@ 0xd0
 80036ec:	429c      	cmp	r4, r3
 80036ee:	d105      	bne.n	80036fc <std+0x54>
 80036f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80036f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036f8:	f000 ba46 	b.w	8003b88 <__retarget_lock_init_recursive>
 80036fc:	bd10      	pop	{r4, pc}
 80036fe:	bf00      	nop
 8003700:	080038e9 	.word	0x080038e9
 8003704:	0800390b 	.word	0x0800390b
 8003708:	08003943 	.word	0x08003943
 800370c:	08003967 	.word	0x08003967
 8003710:	20000120 	.word	0x20000120

08003714 <stdio_exit_handler>:
 8003714:	4a02      	ldr	r2, [pc, #8]	@ (8003720 <stdio_exit_handler+0xc>)
 8003716:	4903      	ldr	r1, [pc, #12]	@ (8003724 <stdio_exit_handler+0x10>)
 8003718:	4803      	ldr	r0, [pc, #12]	@ (8003728 <stdio_exit_handler+0x14>)
 800371a:	f000 b869 	b.w	80037f0 <_fwalk_sglue>
 800371e:	bf00      	nop
 8003720:	2000000c 	.word	0x2000000c
 8003724:	08003e81 	.word	0x08003e81
 8003728:	2000001c 	.word	0x2000001c

0800372c <cleanup_stdio>:
 800372c:	6841      	ldr	r1, [r0, #4]
 800372e:	4b0c      	ldr	r3, [pc, #48]	@ (8003760 <cleanup_stdio+0x34>)
 8003730:	4299      	cmp	r1, r3
 8003732:	b510      	push	{r4, lr}
 8003734:	4604      	mov	r4, r0
 8003736:	d001      	beq.n	800373c <cleanup_stdio+0x10>
 8003738:	f000 fba2 	bl	8003e80 <_fflush_r>
 800373c:	68a1      	ldr	r1, [r4, #8]
 800373e:	4b09      	ldr	r3, [pc, #36]	@ (8003764 <cleanup_stdio+0x38>)
 8003740:	4299      	cmp	r1, r3
 8003742:	d002      	beq.n	800374a <cleanup_stdio+0x1e>
 8003744:	4620      	mov	r0, r4
 8003746:	f000 fb9b 	bl	8003e80 <_fflush_r>
 800374a:	68e1      	ldr	r1, [r4, #12]
 800374c:	4b06      	ldr	r3, [pc, #24]	@ (8003768 <cleanup_stdio+0x3c>)
 800374e:	4299      	cmp	r1, r3
 8003750:	d004      	beq.n	800375c <cleanup_stdio+0x30>
 8003752:	4620      	mov	r0, r4
 8003754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003758:	f000 bb92 	b.w	8003e80 <_fflush_r>
 800375c:	bd10      	pop	{r4, pc}
 800375e:	bf00      	nop
 8003760:	20000120 	.word	0x20000120
 8003764:	20000188 	.word	0x20000188
 8003768:	200001f0 	.word	0x200001f0

0800376c <global_stdio_init.part.0>:
 800376c:	b510      	push	{r4, lr}
 800376e:	4b0b      	ldr	r3, [pc, #44]	@ (800379c <global_stdio_init.part.0+0x30>)
 8003770:	4c0b      	ldr	r4, [pc, #44]	@ (80037a0 <global_stdio_init.part.0+0x34>)
 8003772:	4a0c      	ldr	r2, [pc, #48]	@ (80037a4 <global_stdio_init.part.0+0x38>)
 8003774:	601a      	str	r2, [r3, #0]
 8003776:	4620      	mov	r0, r4
 8003778:	2200      	movs	r2, #0
 800377a:	2104      	movs	r1, #4
 800377c:	f7ff ff94 	bl	80036a8 <std>
 8003780:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003784:	2201      	movs	r2, #1
 8003786:	2109      	movs	r1, #9
 8003788:	f7ff ff8e 	bl	80036a8 <std>
 800378c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003790:	2202      	movs	r2, #2
 8003792:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003796:	2112      	movs	r1, #18
 8003798:	f7ff bf86 	b.w	80036a8 <std>
 800379c:	20000258 	.word	0x20000258
 80037a0:	20000120 	.word	0x20000120
 80037a4:	08003715 	.word	0x08003715

080037a8 <__sfp_lock_acquire>:
 80037a8:	4801      	ldr	r0, [pc, #4]	@ (80037b0 <__sfp_lock_acquire+0x8>)
 80037aa:	f000 b9ee 	b.w	8003b8a <__retarget_lock_acquire_recursive>
 80037ae:	bf00      	nop
 80037b0:	20000261 	.word	0x20000261

080037b4 <__sfp_lock_release>:
 80037b4:	4801      	ldr	r0, [pc, #4]	@ (80037bc <__sfp_lock_release+0x8>)
 80037b6:	f000 b9e9 	b.w	8003b8c <__retarget_lock_release_recursive>
 80037ba:	bf00      	nop
 80037bc:	20000261 	.word	0x20000261

080037c0 <__sinit>:
 80037c0:	b510      	push	{r4, lr}
 80037c2:	4604      	mov	r4, r0
 80037c4:	f7ff fff0 	bl	80037a8 <__sfp_lock_acquire>
 80037c8:	6a23      	ldr	r3, [r4, #32]
 80037ca:	b11b      	cbz	r3, 80037d4 <__sinit+0x14>
 80037cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037d0:	f7ff bff0 	b.w	80037b4 <__sfp_lock_release>
 80037d4:	4b04      	ldr	r3, [pc, #16]	@ (80037e8 <__sinit+0x28>)
 80037d6:	6223      	str	r3, [r4, #32]
 80037d8:	4b04      	ldr	r3, [pc, #16]	@ (80037ec <__sinit+0x2c>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d1f5      	bne.n	80037cc <__sinit+0xc>
 80037e0:	f7ff ffc4 	bl	800376c <global_stdio_init.part.0>
 80037e4:	e7f2      	b.n	80037cc <__sinit+0xc>
 80037e6:	bf00      	nop
 80037e8:	0800372d 	.word	0x0800372d
 80037ec:	20000258 	.word	0x20000258

080037f0 <_fwalk_sglue>:
 80037f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037f4:	4607      	mov	r7, r0
 80037f6:	4688      	mov	r8, r1
 80037f8:	4614      	mov	r4, r2
 80037fa:	2600      	movs	r6, #0
 80037fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003800:	f1b9 0901 	subs.w	r9, r9, #1
 8003804:	d505      	bpl.n	8003812 <_fwalk_sglue+0x22>
 8003806:	6824      	ldr	r4, [r4, #0]
 8003808:	2c00      	cmp	r4, #0
 800380a:	d1f7      	bne.n	80037fc <_fwalk_sglue+0xc>
 800380c:	4630      	mov	r0, r6
 800380e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003812:	89ab      	ldrh	r3, [r5, #12]
 8003814:	2b01      	cmp	r3, #1
 8003816:	d907      	bls.n	8003828 <_fwalk_sglue+0x38>
 8003818:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800381c:	3301      	adds	r3, #1
 800381e:	d003      	beq.n	8003828 <_fwalk_sglue+0x38>
 8003820:	4629      	mov	r1, r5
 8003822:	4638      	mov	r0, r7
 8003824:	47c0      	blx	r8
 8003826:	4306      	orrs	r6, r0
 8003828:	3568      	adds	r5, #104	@ 0x68
 800382a:	e7e9      	b.n	8003800 <_fwalk_sglue+0x10>

0800382c <_puts_r>:
 800382c:	6a03      	ldr	r3, [r0, #32]
 800382e:	b570      	push	{r4, r5, r6, lr}
 8003830:	6884      	ldr	r4, [r0, #8]
 8003832:	4605      	mov	r5, r0
 8003834:	460e      	mov	r6, r1
 8003836:	b90b      	cbnz	r3, 800383c <_puts_r+0x10>
 8003838:	f7ff ffc2 	bl	80037c0 <__sinit>
 800383c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800383e:	07db      	lsls	r3, r3, #31
 8003840:	d405      	bmi.n	800384e <_puts_r+0x22>
 8003842:	89a3      	ldrh	r3, [r4, #12]
 8003844:	0598      	lsls	r0, r3, #22
 8003846:	d402      	bmi.n	800384e <_puts_r+0x22>
 8003848:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800384a:	f000 f99e 	bl	8003b8a <__retarget_lock_acquire_recursive>
 800384e:	89a3      	ldrh	r3, [r4, #12]
 8003850:	0719      	lsls	r1, r3, #28
 8003852:	d502      	bpl.n	800385a <_puts_r+0x2e>
 8003854:	6923      	ldr	r3, [r4, #16]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d135      	bne.n	80038c6 <_puts_r+0x9a>
 800385a:	4621      	mov	r1, r4
 800385c:	4628      	mov	r0, r5
 800385e:	f000 f8c5 	bl	80039ec <__swsetup_r>
 8003862:	b380      	cbz	r0, 80038c6 <_puts_r+0x9a>
 8003864:	f04f 35ff 	mov.w	r5, #4294967295
 8003868:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800386a:	07da      	lsls	r2, r3, #31
 800386c:	d405      	bmi.n	800387a <_puts_r+0x4e>
 800386e:	89a3      	ldrh	r3, [r4, #12]
 8003870:	059b      	lsls	r3, r3, #22
 8003872:	d402      	bmi.n	800387a <_puts_r+0x4e>
 8003874:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003876:	f000 f989 	bl	8003b8c <__retarget_lock_release_recursive>
 800387a:	4628      	mov	r0, r5
 800387c:	bd70      	pop	{r4, r5, r6, pc}
 800387e:	2b00      	cmp	r3, #0
 8003880:	da04      	bge.n	800388c <_puts_r+0x60>
 8003882:	69a2      	ldr	r2, [r4, #24]
 8003884:	429a      	cmp	r2, r3
 8003886:	dc17      	bgt.n	80038b8 <_puts_r+0x8c>
 8003888:	290a      	cmp	r1, #10
 800388a:	d015      	beq.n	80038b8 <_puts_r+0x8c>
 800388c:	6823      	ldr	r3, [r4, #0]
 800388e:	1c5a      	adds	r2, r3, #1
 8003890:	6022      	str	r2, [r4, #0]
 8003892:	7019      	strb	r1, [r3, #0]
 8003894:	68a3      	ldr	r3, [r4, #8]
 8003896:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800389a:	3b01      	subs	r3, #1
 800389c:	60a3      	str	r3, [r4, #8]
 800389e:	2900      	cmp	r1, #0
 80038a0:	d1ed      	bne.n	800387e <_puts_r+0x52>
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	da11      	bge.n	80038ca <_puts_r+0x9e>
 80038a6:	4622      	mov	r2, r4
 80038a8:	210a      	movs	r1, #10
 80038aa:	4628      	mov	r0, r5
 80038ac:	f000 f85f 	bl	800396e <__swbuf_r>
 80038b0:	3001      	adds	r0, #1
 80038b2:	d0d7      	beq.n	8003864 <_puts_r+0x38>
 80038b4:	250a      	movs	r5, #10
 80038b6:	e7d7      	b.n	8003868 <_puts_r+0x3c>
 80038b8:	4622      	mov	r2, r4
 80038ba:	4628      	mov	r0, r5
 80038bc:	f000 f857 	bl	800396e <__swbuf_r>
 80038c0:	3001      	adds	r0, #1
 80038c2:	d1e7      	bne.n	8003894 <_puts_r+0x68>
 80038c4:	e7ce      	b.n	8003864 <_puts_r+0x38>
 80038c6:	3e01      	subs	r6, #1
 80038c8:	e7e4      	b.n	8003894 <_puts_r+0x68>
 80038ca:	6823      	ldr	r3, [r4, #0]
 80038cc:	1c5a      	adds	r2, r3, #1
 80038ce:	6022      	str	r2, [r4, #0]
 80038d0:	220a      	movs	r2, #10
 80038d2:	701a      	strb	r2, [r3, #0]
 80038d4:	e7ee      	b.n	80038b4 <_puts_r+0x88>
	...

080038d8 <puts>:
 80038d8:	4b02      	ldr	r3, [pc, #8]	@ (80038e4 <puts+0xc>)
 80038da:	4601      	mov	r1, r0
 80038dc:	6818      	ldr	r0, [r3, #0]
 80038de:	f7ff bfa5 	b.w	800382c <_puts_r>
 80038e2:	bf00      	nop
 80038e4:	20000018 	.word	0x20000018

080038e8 <__sread>:
 80038e8:	b510      	push	{r4, lr}
 80038ea:	460c      	mov	r4, r1
 80038ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038f0:	f000 f8fc 	bl	8003aec <_read_r>
 80038f4:	2800      	cmp	r0, #0
 80038f6:	bfab      	itete	ge
 80038f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80038fa:	89a3      	ldrhlt	r3, [r4, #12]
 80038fc:	181b      	addge	r3, r3, r0
 80038fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003902:	bfac      	ite	ge
 8003904:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003906:	81a3      	strhlt	r3, [r4, #12]
 8003908:	bd10      	pop	{r4, pc}

0800390a <__swrite>:
 800390a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800390e:	461f      	mov	r7, r3
 8003910:	898b      	ldrh	r3, [r1, #12]
 8003912:	05db      	lsls	r3, r3, #23
 8003914:	4605      	mov	r5, r0
 8003916:	460c      	mov	r4, r1
 8003918:	4616      	mov	r6, r2
 800391a:	d505      	bpl.n	8003928 <__swrite+0x1e>
 800391c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003920:	2302      	movs	r3, #2
 8003922:	2200      	movs	r2, #0
 8003924:	f000 f8d0 	bl	8003ac8 <_lseek_r>
 8003928:	89a3      	ldrh	r3, [r4, #12]
 800392a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800392e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003932:	81a3      	strh	r3, [r4, #12]
 8003934:	4632      	mov	r2, r6
 8003936:	463b      	mov	r3, r7
 8003938:	4628      	mov	r0, r5
 800393a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800393e:	f000 b8e7 	b.w	8003b10 <_write_r>

08003942 <__sseek>:
 8003942:	b510      	push	{r4, lr}
 8003944:	460c      	mov	r4, r1
 8003946:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800394a:	f000 f8bd 	bl	8003ac8 <_lseek_r>
 800394e:	1c43      	adds	r3, r0, #1
 8003950:	89a3      	ldrh	r3, [r4, #12]
 8003952:	bf15      	itete	ne
 8003954:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003956:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800395a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800395e:	81a3      	strheq	r3, [r4, #12]
 8003960:	bf18      	it	ne
 8003962:	81a3      	strhne	r3, [r4, #12]
 8003964:	bd10      	pop	{r4, pc}

08003966 <__sclose>:
 8003966:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800396a:	f000 b89d 	b.w	8003aa8 <_close_r>

0800396e <__swbuf_r>:
 800396e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003970:	460e      	mov	r6, r1
 8003972:	4614      	mov	r4, r2
 8003974:	4605      	mov	r5, r0
 8003976:	b118      	cbz	r0, 8003980 <__swbuf_r+0x12>
 8003978:	6a03      	ldr	r3, [r0, #32]
 800397a:	b90b      	cbnz	r3, 8003980 <__swbuf_r+0x12>
 800397c:	f7ff ff20 	bl	80037c0 <__sinit>
 8003980:	69a3      	ldr	r3, [r4, #24]
 8003982:	60a3      	str	r3, [r4, #8]
 8003984:	89a3      	ldrh	r3, [r4, #12]
 8003986:	071a      	lsls	r2, r3, #28
 8003988:	d501      	bpl.n	800398e <__swbuf_r+0x20>
 800398a:	6923      	ldr	r3, [r4, #16]
 800398c:	b943      	cbnz	r3, 80039a0 <__swbuf_r+0x32>
 800398e:	4621      	mov	r1, r4
 8003990:	4628      	mov	r0, r5
 8003992:	f000 f82b 	bl	80039ec <__swsetup_r>
 8003996:	b118      	cbz	r0, 80039a0 <__swbuf_r+0x32>
 8003998:	f04f 37ff 	mov.w	r7, #4294967295
 800399c:	4638      	mov	r0, r7
 800399e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039a0:	6823      	ldr	r3, [r4, #0]
 80039a2:	6922      	ldr	r2, [r4, #16]
 80039a4:	1a98      	subs	r0, r3, r2
 80039a6:	6963      	ldr	r3, [r4, #20]
 80039a8:	b2f6      	uxtb	r6, r6
 80039aa:	4283      	cmp	r3, r0
 80039ac:	4637      	mov	r7, r6
 80039ae:	dc05      	bgt.n	80039bc <__swbuf_r+0x4e>
 80039b0:	4621      	mov	r1, r4
 80039b2:	4628      	mov	r0, r5
 80039b4:	f000 fa64 	bl	8003e80 <_fflush_r>
 80039b8:	2800      	cmp	r0, #0
 80039ba:	d1ed      	bne.n	8003998 <__swbuf_r+0x2a>
 80039bc:	68a3      	ldr	r3, [r4, #8]
 80039be:	3b01      	subs	r3, #1
 80039c0:	60a3      	str	r3, [r4, #8]
 80039c2:	6823      	ldr	r3, [r4, #0]
 80039c4:	1c5a      	adds	r2, r3, #1
 80039c6:	6022      	str	r2, [r4, #0]
 80039c8:	701e      	strb	r6, [r3, #0]
 80039ca:	6962      	ldr	r2, [r4, #20]
 80039cc:	1c43      	adds	r3, r0, #1
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d004      	beq.n	80039dc <__swbuf_r+0x6e>
 80039d2:	89a3      	ldrh	r3, [r4, #12]
 80039d4:	07db      	lsls	r3, r3, #31
 80039d6:	d5e1      	bpl.n	800399c <__swbuf_r+0x2e>
 80039d8:	2e0a      	cmp	r6, #10
 80039da:	d1df      	bne.n	800399c <__swbuf_r+0x2e>
 80039dc:	4621      	mov	r1, r4
 80039de:	4628      	mov	r0, r5
 80039e0:	f000 fa4e 	bl	8003e80 <_fflush_r>
 80039e4:	2800      	cmp	r0, #0
 80039e6:	d0d9      	beq.n	800399c <__swbuf_r+0x2e>
 80039e8:	e7d6      	b.n	8003998 <__swbuf_r+0x2a>
	...

080039ec <__swsetup_r>:
 80039ec:	b538      	push	{r3, r4, r5, lr}
 80039ee:	4b29      	ldr	r3, [pc, #164]	@ (8003a94 <__swsetup_r+0xa8>)
 80039f0:	4605      	mov	r5, r0
 80039f2:	6818      	ldr	r0, [r3, #0]
 80039f4:	460c      	mov	r4, r1
 80039f6:	b118      	cbz	r0, 8003a00 <__swsetup_r+0x14>
 80039f8:	6a03      	ldr	r3, [r0, #32]
 80039fa:	b90b      	cbnz	r3, 8003a00 <__swsetup_r+0x14>
 80039fc:	f7ff fee0 	bl	80037c0 <__sinit>
 8003a00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a04:	0719      	lsls	r1, r3, #28
 8003a06:	d422      	bmi.n	8003a4e <__swsetup_r+0x62>
 8003a08:	06da      	lsls	r2, r3, #27
 8003a0a:	d407      	bmi.n	8003a1c <__swsetup_r+0x30>
 8003a0c:	2209      	movs	r2, #9
 8003a0e:	602a      	str	r2, [r5, #0]
 8003a10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a14:	81a3      	strh	r3, [r4, #12]
 8003a16:	f04f 30ff 	mov.w	r0, #4294967295
 8003a1a:	e033      	b.n	8003a84 <__swsetup_r+0x98>
 8003a1c:	0758      	lsls	r0, r3, #29
 8003a1e:	d512      	bpl.n	8003a46 <__swsetup_r+0x5a>
 8003a20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003a22:	b141      	cbz	r1, 8003a36 <__swsetup_r+0x4a>
 8003a24:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003a28:	4299      	cmp	r1, r3
 8003a2a:	d002      	beq.n	8003a32 <__swsetup_r+0x46>
 8003a2c:	4628      	mov	r0, r5
 8003a2e:	f000 f8af 	bl	8003b90 <_free_r>
 8003a32:	2300      	movs	r3, #0
 8003a34:	6363      	str	r3, [r4, #52]	@ 0x34
 8003a36:	89a3      	ldrh	r3, [r4, #12]
 8003a38:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003a3c:	81a3      	strh	r3, [r4, #12]
 8003a3e:	2300      	movs	r3, #0
 8003a40:	6063      	str	r3, [r4, #4]
 8003a42:	6923      	ldr	r3, [r4, #16]
 8003a44:	6023      	str	r3, [r4, #0]
 8003a46:	89a3      	ldrh	r3, [r4, #12]
 8003a48:	f043 0308 	orr.w	r3, r3, #8
 8003a4c:	81a3      	strh	r3, [r4, #12]
 8003a4e:	6923      	ldr	r3, [r4, #16]
 8003a50:	b94b      	cbnz	r3, 8003a66 <__swsetup_r+0x7a>
 8003a52:	89a3      	ldrh	r3, [r4, #12]
 8003a54:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003a58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a5c:	d003      	beq.n	8003a66 <__swsetup_r+0x7a>
 8003a5e:	4621      	mov	r1, r4
 8003a60:	4628      	mov	r0, r5
 8003a62:	f000 fa5b 	bl	8003f1c <__smakebuf_r>
 8003a66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a6a:	f013 0201 	ands.w	r2, r3, #1
 8003a6e:	d00a      	beq.n	8003a86 <__swsetup_r+0x9a>
 8003a70:	2200      	movs	r2, #0
 8003a72:	60a2      	str	r2, [r4, #8]
 8003a74:	6962      	ldr	r2, [r4, #20]
 8003a76:	4252      	negs	r2, r2
 8003a78:	61a2      	str	r2, [r4, #24]
 8003a7a:	6922      	ldr	r2, [r4, #16]
 8003a7c:	b942      	cbnz	r2, 8003a90 <__swsetup_r+0xa4>
 8003a7e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003a82:	d1c5      	bne.n	8003a10 <__swsetup_r+0x24>
 8003a84:	bd38      	pop	{r3, r4, r5, pc}
 8003a86:	0799      	lsls	r1, r3, #30
 8003a88:	bf58      	it	pl
 8003a8a:	6962      	ldrpl	r2, [r4, #20]
 8003a8c:	60a2      	str	r2, [r4, #8]
 8003a8e:	e7f4      	b.n	8003a7a <__swsetup_r+0x8e>
 8003a90:	2000      	movs	r0, #0
 8003a92:	e7f7      	b.n	8003a84 <__swsetup_r+0x98>
 8003a94:	20000018 	.word	0x20000018

08003a98 <memset>:
 8003a98:	4402      	add	r2, r0
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d100      	bne.n	8003aa2 <memset+0xa>
 8003aa0:	4770      	bx	lr
 8003aa2:	f803 1b01 	strb.w	r1, [r3], #1
 8003aa6:	e7f9      	b.n	8003a9c <memset+0x4>

08003aa8 <_close_r>:
 8003aa8:	b538      	push	{r3, r4, r5, lr}
 8003aaa:	4d06      	ldr	r5, [pc, #24]	@ (8003ac4 <_close_r+0x1c>)
 8003aac:	2300      	movs	r3, #0
 8003aae:	4604      	mov	r4, r0
 8003ab0:	4608      	mov	r0, r1
 8003ab2:	602b      	str	r3, [r5, #0]
 8003ab4:	f7fc ffe5 	bl	8000a82 <_close>
 8003ab8:	1c43      	adds	r3, r0, #1
 8003aba:	d102      	bne.n	8003ac2 <_close_r+0x1a>
 8003abc:	682b      	ldr	r3, [r5, #0]
 8003abe:	b103      	cbz	r3, 8003ac2 <_close_r+0x1a>
 8003ac0:	6023      	str	r3, [r4, #0]
 8003ac2:	bd38      	pop	{r3, r4, r5, pc}
 8003ac4:	2000025c 	.word	0x2000025c

08003ac8 <_lseek_r>:
 8003ac8:	b538      	push	{r3, r4, r5, lr}
 8003aca:	4d07      	ldr	r5, [pc, #28]	@ (8003ae8 <_lseek_r+0x20>)
 8003acc:	4604      	mov	r4, r0
 8003ace:	4608      	mov	r0, r1
 8003ad0:	4611      	mov	r1, r2
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	602a      	str	r2, [r5, #0]
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	f7fc fff7 	bl	8000aca <_lseek>
 8003adc:	1c43      	adds	r3, r0, #1
 8003ade:	d102      	bne.n	8003ae6 <_lseek_r+0x1e>
 8003ae0:	682b      	ldr	r3, [r5, #0]
 8003ae2:	b103      	cbz	r3, 8003ae6 <_lseek_r+0x1e>
 8003ae4:	6023      	str	r3, [r4, #0]
 8003ae6:	bd38      	pop	{r3, r4, r5, pc}
 8003ae8:	2000025c 	.word	0x2000025c

08003aec <_read_r>:
 8003aec:	b538      	push	{r3, r4, r5, lr}
 8003aee:	4d07      	ldr	r5, [pc, #28]	@ (8003b0c <_read_r+0x20>)
 8003af0:	4604      	mov	r4, r0
 8003af2:	4608      	mov	r0, r1
 8003af4:	4611      	mov	r1, r2
 8003af6:	2200      	movs	r2, #0
 8003af8:	602a      	str	r2, [r5, #0]
 8003afa:	461a      	mov	r2, r3
 8003afc:	f7fc ff88 	bl	8000a10 <_read>
 8003b00:	1c43      	adds	r3, r0, #1
 8003b02:	d102      	bne.n	8003b0a <_read_r+0x1e>
 8003b04:	682b      	ldr	r3, [r5, #0]
 8003b06:	b103      	cbz	r3, 8003b0a <_read_r+0x1e>
 8003b08:	6023      	str	r3, [r4, #0]
 8003b0a:	bd38      	pop	{r3, r4, r5, pc}
 8003b0c:	2000025c 	.word	0x2000025c

08003b10 <_write_r>:
 8003b10:	b538      	push	{r3, r4, r5, lr}
 8003b12:	4d07      	ldr	r5, [pc, #28]	@ (8003b30 <_write_r+0x20>)
 8003b14:	4604      	mov	r4, r0
 8003b16:	4608      	mov	r0, r1
 8003b18:	4611      	mov	r1, r2
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	602a      	str	r2, [r5, #0]
 8003b1e:	461a      	mov	r2, r3
 8003b20:	f7fc ff93 	bl	8000a4a <_write>
 8003b24:	1c43      	adds	r3, r0, #1
 8003b26:	d102      	bne.n	8003b2e <_write_r+0x1e>
 8003b28:	682b      	ldr	r3, [r5, #0]
 8003b2a:	b103      	cbz	r3, 8003b2e <_write_r+0x1e>
 8003b2c:	6023      	str	r3, [r4, #0]
 8003b2e:	bd38      	pop	{r3, r4, r5, pc}
 8003b30:	2000025c 	.word	0x2000025c

08003b34 <__errno>:
 8003b34:	4b01      	ldr	r3, [pc, #4]	@ (8003b3c <__errno+0x8>)
 8003b36:	6818      	ldr	r0, [r3, #0]
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	20000018 	.word	0x20000018

08003b40 <__libc_init_array>:
 8003b40:	b570      	push	{r4, r5, r6, lr}
 8003b42:	4d0d      	ldr	r5, [pc, #52]	@ (8003b78 <__libc_init_array+0x38>)
 8003b44:	4c0d      	ldr	r4, [pc, #52]	@ (8003b7c <__libc_init_array+0x3c>)
 8003b46:	1b64      	subs	r4, r4, r5
 8003b48:	10a4      	asrs	r4, r4, #2
 8003b4a:	2600      	movs	r6, #0
 8003b4c:	42a6      	cmp	r6, r4
 8003b4e:	d109      	bne.n	8003b64 <__libc_init_array+0x24>
 8003b50:	4d0b      	ldr	r5, [pc, #44]	@ (8003b80 <__libc_init_array+0x40>)
 8003b52:	4c0c      	ldr	r4, [pc, #48]	@ (8003b84 <__libc_init_array+0x44>)
 8003b54:	f000 fa50 	bl	8003ff8 <_init>
 8003b58:	1b64      	subs	r4, r4, r5
 8003b5a:	10a4      	asrs	r4, r4, #2
 8003b5c:	2600      	movs	r6, #0
 8003b5e:	42a6      	cmp	r6, r4
 8003b60:	d105      	bne.n	8003b6e <__libc_init_array+0x2e>
 8003b62:	bd70      	pop	{r4, r5, r6, pc}
 8003b64:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b68:	4798      	blx	r3
 8003b6a:	3601      	adds	r6, #1
 8003b6c:	e7ee      	b.n	8003b4c <__libc_init_array+0xc>
 8003b6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b72:	4798      	blx	r3
 8003b74:	3601      	adds	r6, #1
 8003b76:	e7f2      	b.n	8003b5e <__libc_init_array+0x1e>
 8003b78:	08004214 	.word	0x08004214
 8003b7c:	08004214 	.word	0x08004214
 8003b80:	08004214 	.word	0x08004214
 8003b84:	08004218 	.word	0x08004218

08003b88 <__retarget_lock_init_recursive>:
 8003b88:	4770      	bx	lr

08003b8a <__retarget_lock_acquire_recursive>:
 8003b8a:	4770      	bx	lr

08003b8c <__retarget_lock_release_recursive>:
 8003b8c:	4770      	bx	lr
	...

08003b90 <_free_r>:
 8003b90:	b538      	push	{r3, r4, r5, lr}
 8003b92:	4605      	mov	r5, r0
 8003b94:	2900      	cmp	r1, #0
 8003b96:	d041      	beq.n	8003c1c <_free_r+0x8c>
 8003b98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b9c:	1f0c      	subs	r4, r1, #4
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	bfb8      	it	lt
 8003ba2:	18e4      	addlt	r4, r4, r3
 8003ba4:	f000 f8e0 	bl	8003d68 <__malloc_lock>
 8003ba8:	4a1d      	ldr	r2, [pc, #116]	@ (8003c20 <_free_r+0x90>)
 8003baa:	6813      	ldr	r3, [r2, #0]
 8003bac:	b933      	cbnz	r3, 8003bbc <_free_r+0x2c>
 8003bae:	6063      	str	r3, [r4, #4]
 8003bb0:	6014      	str	r4, [r2, #0]
 8003bb2:	4628      	mov	r0, r5
 8003bb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003bb8:	f000 b8dc 	b.w	8003d74 <__malloc_unlock>
 8003bbc:	42a3      	cmp	r3, r4
 8003bbe:	d908      	bls.n	8003bd2 <_free_r+0x42>
 8003bc0:	6820      	ldr	r0, [r4, #0]
 8003bc2:	1821      	adds	r1, r4, r0
 8003bc4:	428b      	cmp	r3, r1
 8003bc6:	bf01      	itttt	eq
 8003bc8:	6819      	ldreq	r1, [r3, #0]
 8003bca:	685b      	ldreq	r3, [r3, #4]
 8003bcc:	1809      	addeq	r1, r1, r0
 8003bce:	6021      	streq	r1, [r4, #0]
 8003bd0:	e7ed      	b.n	8003bae <_free_r+0x1e>
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	b10b      	cbz	r3, 8003bdc <_free_r+0x4c>
 8003bd8:	42a3      	cmp	r3, r4
 8003bda:	d9fa      	bls.n	8003bd2 <_free_r+0x42>
 8003bdc:	6811      	ldr	r1, [r2, #0]
 8003bde:	1850      	adds	r0, r2, r1
 8003be0:	42a0      	cmp	r0, r4
 8003be2:	d10b      	bne.n	8003bfc <_free_r+0x6c>
 8003be4:	6820      	ldr	r0, [r4, #0]
 8003be6:	4401      	add	r1, r0
 8003be8:	1850      	adds	r0, r2, r1
 8003bea:	4283      	cmp	r3, r0
 8003bec:	6011      	str	r1, [r2, #0]
 8003bee:	d1e0      	bne.n	8003bb2 <_free_r+0x22>
 8003bf0:	6818      	ldr	r0, [r3, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	6053      	str	r3, [r2, #4]
 8003bf6:	4408      	add	r0, r1
 8003bf8:	6010      	str	r0, [r2, #0]
 8003bfa:	e7da      	b.n	8003bb2 <_free_r+0x22>
 8003bfc:	d902      	bls.n	8003c04 <_free_r+0x74>
 8003bfe:	230c      	movs	r3, #12
 8003c00:	602b      	str	r3, [r5, #0]
 8003c02:	e7d6      	b.n	8003bb2 <_free_r+0x22>
 8003c04:	6820      	ldr	r0, [r4, #0]
 8003c06:	1821      	adds	r1, r4, r0
 8003c08:	428b      	cmp	r3, r1
 8003c0a:	bf04      	itt	eq
 8003c0c:	6819      	ldreq	r1, [r3, #0]
 8003c0e:	685b      	ldreq	r3, [r3, #4]
 8003c10:	6063      	str	r3, [r4, #4]
 8003c12:	bf04      	itt	eq
 8003c14:	1809      	addeq	r1, r1, r0
 8003c16:	6021      	streq	r1, [r4, #0]
 8003c18:	6054      	str	r4, [r2, #4]
 8003c1a:	e7ca      	b.n	8003bb2 <_free_r+0x22>
 8003c1c:	bd38      	pop	{r3, r4, r5, pc}
 8003c1e:	bf00      	nop
 8003c20:	20000268 	.word	0x20000268

08003c24 <sbrk_aligned>:
 8003c24:	b570      	push	{r4, r5, r6, lr}
 8003c26:	4e0f      	ldr	r6, [pc, #60]	@ (8003c64 <sbrk_aligned+0x40>)
 8003c28:	460c      	mov	r4, r1
 8003c2a:	6831      	ldr	r1, [r6, #0]
 8003c2c:	4605      	mov	r5, r0
 8003c2e:	b911      	cbnz	r1, 8003c36 <sbrk_aligned+0x12>
 8003c30:	f000 f9d2 	bl	8003fd8 <_sbrk_r>
 8003c34:	6030      	str	r0, [r6, #0]
 8003c36:	4621      	mov	r1, r4
 8003c38:	4628      	mov	r0, r5
 8003c3a:	f000 f9cd 	bl	8003fd8 <_sbrk_r>
 8003c3e:	1c43      	adds	r3, r0, #1
 8003c40:	d103      	bne.n	8003c4a <sbrk_aligned+0x26>
 8003c42:	f04f 34ff 	mov.w	r4, #4294967295
 8003c46:	4620      	mov	r0, r4
 8003c48:	bd70      	pop	{r4, r5, r6, pc}
 8003c4a:	1cc4      	adds	r4, r0, #3
 8003c4c:	f024 0403 	bic.w	r4, r4, #3
 8003c50:	42a0      	cmp	r0, r4
 8003c52:	d0f8      	beq.n	8003c46 <sbrk_aligned+0x22>
 8003c54:	1a21      	subs	r1, r4, r0
 8003c56:	4628      	mov	r0, r5
 8003c58:	f000 f9be 	bl	8003fd8 <_sbrk_r>
 8003c5c:	3001      	adds	r0, #1
 8003c5e:	d1f2      	bne.n	8003c46 <sbrk_aligned+0x22>
 8003c60:	e7ef      	b.n	8003c42 <sbrk_aligned+0x1e>
 8003c62:	bf00      	nop
 8003c64:	20000264 	.word	0x20000264

08003c68 <_malloc_r>:
 8003c68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c6c:	1ccd      	adds	r5, r1, #3
 8003c6e:	f025 0503 	bic.w	r5, r5, #3
 8003c72:	3508      	adds	r5, #8
 8003c74:	2d0c      	cmp	r5, #12
 8003c76:	bf38      	it	cc
 8003c78:	250c      	movcc	r5, #12
 8003c7a:	2d00      	cmp	r5, #0
 8003c7c:	4606      	mov	r6, r0
 8003c7e:	db01      	blt.n	8003c84 <_malloc_r+0x1c>
 8003c80:	42a9      	cmp	r1, r5
 8003c82:	d904      	bls.n	8003c8e <_malloc_r+0x26>
 8003c84:	230c      	movs	r3, #12
 8003c86:	6033      	str	r3, [r6, #0]
 8003c88:	2000      	movs	r0, #0
 8003c8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c8e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003d64 <_malloc_r+0xfc>
 8003c92:	f000 f869 	bl	8003d68 <__malloc_lock>
 8003c96:	f8d8 3000 	ldr.w	r3, [r8]
 8003c9a:	461c      	mov	r4, r3
 8003c9c:	bb44      	cbnz	r4, 8003cf0 <_malloc_r+0x88>
 8003c9e:	4629      	mov	r1, r5
 8003ca0:	4630      	mov	r0, r6
 8003ca2:	f7ff ffbf 	bl	8003c24 <sbrk_aligned>
 8003ca6:	1c43      	adds	r3, r0, #1
 8003ca8:	4604      	mov	r4, r0
 8003caa:	d158      	bne.n	8003d5e <_malloc_r+0xf6>
 8003cac:	f8d8 4000 	ldr.w	r4, [r8]
 8003cb0:	4627      	mov	r7, r4
 8003cb2:	2f00      	cmp	r7, #0
 8003cb4:	d143      	bne.n	8003d3e <_malloc_r+0xd6>
 8003cb6:	2c00      	cmp	r4, #0
 8003cb8:	d04b      	beq.n	8003d52 <_malloc_r+0xea>
 8003cba:	6823      	ldr	r3, [r4, #0]
 8003cbc:	4639      	mov	r1, r7
 8003cbe:	4630      	mov	r0, r6
 8003cc0:	eb04 0903 	add.w	r9, r4, r3
 8003cc4:	f000 f988 	bl	8003fd8 <_sbrk_r>
 8003cc8:	4581      	cmp	r9, r0
 8003cca:	d142      	bne.n	8003d52 <_malloc_r+0xea>
 8003ccc:	6821      	ldr	r1, [r4, #0]
 8003cce:	1a6d      	subs	r5, r5, r1
 8003cd0:	4629      	mov	r1, r5
 8003cd2:	4630      	mov	r0, r6
 8003cd4:	f7ff ffa6 	bl	8003c24 <sbrk_aligned>
 8003cd8:	3001      	adds	r0, #1
 8003cda:	d03a      	beq.n	8003d52 <_malloc_r+0xea>
 8003cdc:	6823      	ldr	r3, [r4, #0]
 8003cde:	442b      	add	r3, r5
 8003ce0:	6023      	str	r3, [r4, #0]
 8003ce2:	f8d8 3000 	ldr.w	r3, [r8]
 8003ce6:	685a      	ldr	r2, [r3, #4]
 8003ce8:	bb62      	cbnz	r2, 8003d44 <_malloc_r+0xdc>
 8003cea:	f8c8 7000 	str.w	r7, [r8]
 8003cee:	e00f      	b.n	8003d10 <_malloc_r+0xa8>
 8003cf0:	6822      	ldr	r2, [r4, #0]
 8003cf2:	1b52      	subs	r2, r2, r5
 8003cf4:	d420      	bmi.n	8003d38 <_malloc_r+0xd0>
 8003cf6:	2a0b      	cmp	r2, #11
 8003cf8:	d917      	bls.n	8003d2a <_malloc_r+0xc2>
 8003cfa:	1961      	adds	r1, r4, r5
 8003cfc:	42a3      	cmp	r3, r4
 8003cfe:	6025      	str	r5, [r4, #0]
 8003d00:	bf18      	it	ne
 8003d02:	6059      	strne	r1, [r3, #4]
 8003d04:	6863      	ldr	r3, [r4, #4]
 8003d06:	bf08      	it	eq
 8003d08:	f8c8 1000 	streq.w	r1, [r8]
 8003d0c:	5162      	str	r2, [r4, r5]
 8003d0e:	604b      	str	r3, [r1, #4]
 8003d10:	4630      	mov	r0, r6
 8003d12:	f000 f82f 	bl	8003d74 <__malloc_unlock>
 8003d16:	f104 000b 	add.w	r0, r4, #11
 8003d1a:	1d23      	adds	r3, r4, #4
 8003d1c:	f020 0007 	bic.w	r0, r0, #7
 8003d20:	1ac2      	subs	r2, r0, r3
 8003d22:	bf1c      	itt	ne
 8003d24:	1a1b      	subne	r3, r3, r0
 8003d26:	50a3      	strne	r3, [r4, r2]
 8003d28:	e7af      	b.n	8003c8a <_malloc_r+0x22>
 8003d2a:	6862      	ldr	r2, [r4, #4]
 8003d2c:	42a3      	cmp	r3, r4
 8003d2e:	bf0c      	ite	eq
 8003d30:	f8c8 2000 	streq.w	r2, [r8]
 8003d34:	605a      	strne	r2, [r3, #4]
 8003d36:	e7eb      	b.n	8003d10 <_malloc_r+0xa8>
 8003d38:	4623      	mov	r3, r4
 8003d3a:	6864      	ldr	r4, [r4, #4]
 8003d3c:	e7ae      	b.n	8003c9c <_malloc_r+0x34>
 8003d3e:	463c      	mov	r4, r7
 8003d40:	687f      	ldr	r7, [r7, #4]
 8003d42:	e7b6      	b.n	8003cb2 <_malloc_r+0x4a>
 8003d44:	461a      	mov	r2, r3
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	42a3      	cmp	r3, r4
 8003d4a:	d1fb      	bne.n	8003d44 <_malloc_r+0xdc>
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	6053      	str	r3, [r2, #4]
 8003d50:	e7de      	b.n	8003d10 <_malloc_r+0xa8>
 8003d52:	230c      	movs	r3, #12
 8003d54:	6033      	str	r3, [r6, #0]
 8003d56:	4630      	mov	r0, r6
 8003d58:	f000 f80c 	bl	8003d74 <__malloc_unlock>
 8003d5c:	e794      	b.n	8003c88 <_malloc_r+0x20>
 8003d5e:	6005      	str	r5, [r0, #0]
 8003d60:	e7d6      	b.n	8003d10 <_malloc_r+0xa8>
 8003d62:	bf00      	nop
 8003d64:	20000268 	.word	0x20000268

08003d68 <__malloc_lock>:
 8003d68:	4801      	ldr	r0, [pc, #4]	@ (8003d70 <__malloc_lock+0x8>)
 8003d6a:	f7ff bf0e 	b.w	8003b8a <__retarget_lock_acquire_recursive>
 8003d6e:	bf00      	nop
 8003d70:	20000260 	.word	0x20000260

08003d74 <__malloc_unlock>:
 8003d74:	4801      	ldr	r0, [pc, #4]	@ (8003d7c <__malloc_unlock+0x8>)
 8003d76:	f7ff bf09 	b.w	8003b8c <__retarget_lock_release_recursive>
 8003d7a:	bf00      	nop
 8003d7c:	20000260 	.word	0x20000260

08003d80 <__sflush_r>:
 8003d80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d86:	0716      	lsls	r6, r2, #28
 8003d88:	4605      	mov	r5, r0
 8003d8a:	460c      	mov	r4, r1
 8003d8c:	d454      	bmi.n	8003e38 <__sflush_r+0xb8>
 8003d8e:	684b      	ldr	r3, [r1, #4]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	dc02      	bgt.n	8003d9a <__sflush_r+0x1a>
 8003d94:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	dd48      	ble.n	8003e2c <__sflush_r+0xac>
 8003d9a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003d9c:	2e00      	cmp	r6, #0
 8003d9e:	d045      	beq.n	8003e2c <__sflush_r+0xac>
 8003da0:	2300      	movs	r3, #0
 8003da2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003da6:	682f      	ldr	r7, [r5, #0]
 8003da8:	6a21      	ldr	r1, [r4, #32]
 8003daa:	602b      	str	r3, [r5, #0]
 8003dac:	d030      	beq.n	8003e10 <__sflush_r+0x90>
 8003dae:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003db0:	89a3      	ldrh	r3, [r4, #12]
 8003db2:	0759      	lsls	r1, r3, #29
 8003db4:	d505      	bpl.n	8003dc2 <__sflush_r+0x42>
 8003db6:	6863      	ldr	r3, [r4, #4]
 8003db8:	1ad2      	subs	r2, r2, r3
 8003dba:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003dbc:	b10b      	cbz	r3, 8003dc2 <__sflush_r+0x42>
 8003dbe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003dc0:	1ad2      	subs	r2, r2, r3
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003dc6:	6a21      	ldr	r1, [r4, #32]
 8003dc8:	4628      	mov	r0, r5
 8003dca:	47b0      	blx	r6
 8003dcc:	1c43      	adds	r3, r0, #1
 8003dce:	89a3      	ldrh	r3, [r4, #12]
 8003dd0:	d106      	bne.n	8003de0 <__sflush_r+0x60>
 8003dd2:	6829      	ldr	r1, [r5, #0]
 8003dd4:	291d      	cmp	r1, #29
 8003dd6:	d82b      	bhi.n	8003e30 <__sflush_r+0xb0>
 8003dd8:	4a28      	ldr	r2, [pc, #160]	@ (8003e7c <__sflush_r+0xfc>)
 8003dda:	40ca      	lsrs	r2, r1
 8003ddc:	07d6      	lsls	r6, r2, #31
 8003dde:	d527      	bpl.n	8003e30 <__sflush_r+0xb0>
 8003de0:	2200      	movs	r2, #0
 8003de2:	6062      	str	r2, [r4, #4]
 8003de4:	04d9      	lsls	r1, r3, #19
 8003de6:	6922      	ldr	r2, [r4, #16]
 8003de8:	6022      	str	r2, [r4, #0]
 8003dea:	d504      	bpl.n	8003df6 <__sflush_r+0x76>
 8003dec:	1c42      	adds	r2, r0, #1
 8003dee:	d101      	bne.n	8003df4 <__sflush_r+0x74>
 8003df0:	682b      	ldr	r3, [r5, #0]
 8003df2:	b903      	cbnz	r3, 8003df6 <__sflush_r+0x76>
 8003df4:	6560      	str	r0, [r4, #84]	@ 0x54
 8003df6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003df8:	602f      	str	r7, [r5, #0]
 8003dfa:	b1b9      	cbz	r1, 8003e2c <__sflush_r+0xac>
 8003dfc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003e00:	4299      	cmp	r1, r3
 8003e02:	d002      	beq.n	8003e0a <__sflush_r+0x8a>
 8003e04:	4628      	mov	r0, r5
 8003e06:	f7ff fec3 	bl	8003b90 <_free_r>
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	6363      	str	r3, [r4, #52]	@ 0x34
 8003e0e:	e00d      	b.n	8003e2c <__sflush_r+0xac>
 8003e10:	2301      	movs	r3, #1
 8003e12:	4628      	mov	r0, r5
 8003e14:	47b0      	blx	r6
 8003e16:	4602      	mov	r2, r0
 8003e18:	1c50      	adds	r0, r2, #1
 8003e1a:	d1c9      	bne.n	8003db0 <__sflush_r+0x30>
 8003e1c:	682b      	ldr	r3, [r5, #0]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d0c6      	beq.n	8003db0 <__sflush_r+0x30>
 8003e22:	2b1d      	cmp	r3, #29
 8003e24:	d001      	beq.n	8003e2a <__sflush_r+0xaa>
 8003e26:	2b16      	cmp	r3, #22
 8003e28:	d11d      	bne.n	8003e66 <__sflush_r+0xe6>
 8003e2a:	602f      	str	r7, [r5, #0]
 8003e2c:	2000      	movs	r0, #0
 8003e2e:	e021      	b.n	8003e74 <__sflush_r+0xf4>
 8003e30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e34:	b21b      	sxth	r3, r3
 8003e36:	e01a      	b.n	8003e6e <__sflush_r+0xee>
 8003e38:	690f      	ldr	r7, [r1, #16]
 8003e3a:	2f00      	cmp	r7, #0
 8003e3c:	d0f6      	beq.n	8003e2c <__sflush_r+0xac>
 8003e3e:	0793      	lsls	r3, r2, #30
 8003e40:	680e      	ldr	r6, [r1, #0]
 8003e42:	bf08      	it	eq
 8003e44:	694b      	ldreq	r3, [r1, #20]
 8003e46:	600f      	str	r7, [r1, #0]
 8003e48:	bf18      	it	ne
 8003e4a:	2300      	movne	r3, #0
 8003e4c:	1bf6      	subs	r6, r6, r7
 8003e4e:	608b      	str	r3, [r1, #8]
 8003e50:	2e00      	cmp	r6, #0
 8003e52:	ddeb      	ble.n	8003e2c <__sflush_r+0xac>
 8003e54:	6a21      	ldr	r1, [r4, #32]
 8003e56:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8003e5a:	4633      	mov	r3, r6
 8003e5c:	463a      	mov	r2, r7
 8003e5e:	4628      	mov	r0, r5
 8003e60:	47e0      	blx	ip
 8003e62:	2800      	cmp	r0, #0
 8003e64:	dc07      	bgt.n	8003e76 <__sflush_r+0xf6>
 8003e66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e6e:	81a3      	strh	r3, [r4, #12]
 8003e70:	f04f 30ff 	mov.w	r0, #4294967295
 8003e74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e76:	4407      	add	r7, r0
 8003e78:	1a36      	subs	r6, r6, r0
 8003e7a:	e7e9      	b.n	8003e50 <__sflush_r+0xd0>
 8003e7c:	20400001 	.word	0x20400001

08003e80 <_fflush_r>:
 8003e80:	b538      	push	{r3, r4, r5, lr}
 8003e82:	690b      	ldr	r3, [r1, #16]
 8003e84:	4605      	mov	r5, r0
 8003e86:	460c      	mov	r4, r1
 8003e88:	b913      	cbnz	r3, 8003e90 <_fflush_r+0x10>
 8003e8a:	2500      	movs	r5, #0
 8003e8c:	4628      	mov	r0, r5
 8003e8e:	bd38      	pop	{r3, r4, r5, pc}
 8003e90:	b118      	cbz	r0, 8003e9a <_fflush_r+0x1a>
 8003e92:	6a03      	ldr	r3, [r0, #32]
 8003e94:	b90b      	cbnz	r3, 8003e9a <_fflush_r+0x1a>
 8003e96:	f7ff fc93 	bl	80037c0 <__sinit>
 8003e9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d0f3      	beq.n	8003e8a <_fflush_r+0xa>
 8003ea2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003ea4:	07d0      	lsls	r0, r2, #31
 8003ea6:	d404      	bmi.n	8003eb2 <_fflush_r+0x32>
 8003ea8:	0599      	lsls	r1, r3, #22
 8003eaa:	d402      	bmi.n	8003eb2 <_fflush_r+0x32>
 8003eac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003eae:	f7ff fe6c 	bl	8003b8a <__retarget_lock_acquire_recursive>
 8003eb2:	4628      	mov	r0, r5
 8003eb4:	4621      	mov	r1, r4
 8003eb6:	f7ff ff63 	bl	8003d80 <__sflush_r>
 8003eba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003ebc:	07da      	lsls	r2, r3, #31
 8003ebe:	4605      	mov	r5, r0
 8003ec0:	d4e4      	bmi.n	8003e8c <_fflush_r+0xc>
 8003ec2:	89a3      	ldrh	r3, [r4, #12]
 8003ec4:	059b      	lsls	r3, r3, #22
 8003ec6:	d4e1      	bmi.n	8003e8c <_fflush_r+0xc>
 8003ec8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003eca:	f7ff fe5f 	bl	8003b8c <__retarget_lock_release_recursive>
 8003ece:	e7dd      	b.n	8003e8c <_fflush_r+0xc>

08003ed0 <__swhatbuf_r>:
 8003ed0:	b570      	push	{r4, r5, r6, lr}
 8003ed2:	460c      	mov	r4, r1
 8003ed4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ed8:	2900      	cmp	r1, #0
 8003eda:	b096      	sub	sp, #88	@ 0x58
 8003edc:	4615      	mov	r5, r2
 8003ede:	461e      	mov	r6, r3
 8003ee0:	da0d      	bge.n	8003efe <__swhatbuf_r+0x2e>
 8003ee2:	89a3      	ldrh	r3, [r4, #12]
 8003ee4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003ee8:	f04f 0100 	mov.w	r1, #0
 8003eec:	bf14      	ite	ne
 8003eee:	2340      	movne	r3, #64	@ 0x40
 8003ef0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003ef4:	2000      	movs	r0, #0
 8003ef6:	6031      	str	r1, [r6, #0]
 8003ef8:	602b      	str	r3, [r5, #0]
 8003efa:	b016      	add	sp, #88	@ 0x58
 8003efc:	bd70      	pop	{r4, r5, r6, pc}
 8003efe:	466a      	mov	r2, sp
 8003f00:	f000 f848 	bl	8003f94 <_fstat_r>
 8003f04:	2800      	cmp	r0, #0
 8003f06:	dbec      	blt.n	8003ee2 <__swhatbuf_r+0x12>
 8003f08:	9901      	ldr	r1, [sp, #4]
 8003f0a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003f0e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003f12:	4259      	negs	r1, r3
 8003f14:	4159      	adcs	r1, r3
 8003f16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003f1a:	e7eb      	b.n	8003ef4 <__swhatbuf_r+0x24>

08003f1c <__smakebuf_r>:
 8003f1c:	898b      	ldrh	r3, [r1, #12]
 8003f1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f20:	079d      	lsls	r5, r3, #30
 8003f22:	4606      	mov	r6, r0
 8003f24:	460c      	mov	r4, r1
 8003f26:	d507      	bpl.n	8003f38 <__smakebuf_r+0x1c>
 8003f28:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003f2c:	6023      	str	r3, [r4, #0]
 8003f2e:	6123      	str	r3, [r4, #16]
 8003f30:	2301      	movs	r3, #1
 8003f32:	6163      	str	r3, [r4, #20]
 8003f34:	b003      	add	sp, #12
 8003f36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f38:	ab01      	add	r3, sp, #4
 8003f3a:	466a      	mov	r2, sp
 8003f3c:	f7ff ffc8 	bl	8003ed0 <__swhatbuf_r>
 8003f40:	9f00      	ldr	r7, [sp, #0]
 8003f42:	4605      	mov	r5, r0
 8003f44:	4639      	mov	r1, r7
 8003f46:	4630      	mov	r0, r6
 8003f48:	f7ff fe8e 	bl	8003c68 <_malloc_r>
 8003f4c:	b948      	cbnz	r0, 8003f62 <__smakebuf_r+0x46>
 8003f4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f52:	059a      	lsls	r2, r3, #22
 8003f54:	d4ee      	bmi.n	8003f34 <__smakebuf_r+0x18>
 8003f56:	f023 0303 	bic.w	r3, r3, #3
 8003f5a:	f043 0302 	orr.w	r3, r3, #2
 8003f5e:	81a3      	strh	r3, [r4, #12]
 8003f60:	e7e2      	b.n	8003f28 <__smakebuf_r+0xc>
 8003f62:	89a3      	ldrh	r3, [r4, #12]
 8003f64:	6020      	str	r0, [r4, #0]
 8003f66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f6a:	81a3      	strh	r3, [r4, #12]
 8003f6c:	9b01      	ldr	r3, [sp, #4]
 8003f6e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003f72:	b15b      	cbz	r3, 8003f8c <__smakebuf_r+0x70>
 8003f74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f78:	4630      	mov	r0, r6
 8003f7a:	f000 f81d 	bl	8003fb8 <_isatty_r>
 8003f7e:	b128      	cbz	r0, 8003f8c <__smakebuf_r+0x70>
 8003f80:	89a3      	ldrh	r3, [r4, #12]
 8003f82:	f023 0303 	bic.w	r3, r3, #3
 8003f86:	f043 0301 	orr.w	r3, r3, #1
 8003f8a:	81a3      	strh	r3, [r4, #12]
 8003f8c:	89a3      	ldrh	r3, [r4, #12]
 8003f8e:	431d      	orrs	r5, r3
 8003f90:	81a5      	strh	r5, [r4, #12]
 8003f92:	e7cf      	b.n	8003f34 <__smakebuf_r+0x18>

08003f94 <_fstat_r>:
 8003f94:	b538      	push	{r3, r4, r5, lr}
 8003f96:	4d07      	ldr	r5, [pc, #28]	@ (8003fb4 <_fstat_r+0x20>)
 8003f98:	2300      	movs	r3, #0
 8003f9a:	4604      	mov	r4, r0
 8003f9c:	4608      	mov	r0, r1
 8003f9e:	4611      	mov	r1, r2
 8003fa0:	602b      	str	r3, [r5, #0]
 8003fa2:	f7fc fd79 	bl	8000a98 <_fstat>
 8003fa6:	1c43      	adds	r3, r0, #1
 8003fa8:	d102      	bne.n	8003fb0 <_fstat_r+0x1c>
 8003faa:	682b      	ldr	r3, [r5, #0]
 8003fac:	b103      	cbz	r3, 8003fb0 <_fstat_r+0x1c>
 8003fae:	6023      	str	r3, [r4, #0]
 8003fb0:	bd38      	pop	{r3, r4, r5, pc}
 8003fb2:	bf00      	nop
 8003fb4:	2000025c 	.word	0x2000025c

08003fb8 <_isatty_r>:
 8003fb8:	b538      	push	{r3, r4, r5, lr}
 8003fba:	4d06      	ldr	r5, [pc, #24]	@ (8003fd4 <_isatty_r+0x1c>)
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	4604      	mov	r4, r0
 8003fc0:	4608      	mov	r0, r1
 8003fc2:	602b      	str	r3, [r5, #0]
 8003fc4:	f7fc fd77 	bl	8000ab6 <_isatty>
 8003fc8:	1c43      	adds	r3, r0, #1
 8003fca:	d102      	bne.n	8003fd2 <_isatty_r+0x1a>
 8003fcc:	682b      	ldr	r3, [r5, #0]
 8003fce:	b103      	cbz	r3, 8003fd2 <_isatty_r+0x1a>
 8003fd0:	6023      	str	r3, [r4, #0]
 8003fd2:	bd38      	pop	{r3, r4, r5, pc}
 8003fd4:	2000025c 	.word	0x2000025c

08003fd8 <_sbrk_r>:
 8003fd8:	b538      	push	{r3, r4, r5, lr}
 8003fda:	4d06      	ldr	r5, [pc, #24]	@ (8003ff4 <_sbrk_r+0x1c>)
 8003fdc:	2300      	movs	r3, #0
 8003fde:	4604      	mov	r4, r0
 8003fe0:	4608      	mov	r0, r1
 8003fe2:	602b      	str	r3, [r5, #0]
 8003fe4:	f7fc fd7e 	bl	8000ae4 <_sbrk>
 8003fe8:	1c43      	adds	r3, r0, #1
 8003fea:	d102      	bne.n	8003ff2 <_sbrk_r+0x1a>
 8003fec:	682b      	ldr	r3, [r5, #0]
 8003fee:	b103      	cbz	r3, 8003ff2 <_sbrk_r+0x1a>
 8003ff0:	6023      	str	r3, [r4, #0]
 8003ff2:	bd38      	pop	{r3, r4, r5, pc}
 8003ff4:	2000025c 	.word	0x2000025c

08003ff8 <_init>:
 8003ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ffa:	bf00      	nop
 8003ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ffe:	bc08      	pop	{r3}
 8004000:	469e      	mov	lr, r3
 8004002:	4770      	bx	lr

08004004 <_fini>:
 8004004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004006:	bf00      	nop
 8004008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800400a:	bc08      	pop	{r3}
 800400c:	469e      	mov	lr, r3
 800400e:	4770      	bx	lr
