
STOP1_WL55_1CPU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004928  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d4  08004a68  08004a68  00005a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d3c  08004d3c  0000606c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004d3c  08004d3c  00005d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d44  08004d44  0000606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d44  08004d44  00005d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004d48  08004d48  00005d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08004d4c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  2000006c  08004db8  0000606c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  08004db8  00006274  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fcc4  00000000  00000000  00006096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025b3  00000000  00000000  00015d5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001038  00000000  00000000  00018310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c40  00000000  00000000  00019348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d136  00000000  00000000  00019f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f2a4  00000000  00000000  000370be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b230d  00000000  00000000  00046362  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f866f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a28  00000000  00000000  000f86b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000fd0dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000006c 	.word	0x2000006c
 800015c:	00000000 	.word	0x00000000
 8000160:	08004a50 	.word	0x08004a50

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000070 	.word	0x20000070
 800017c:	08004a50 	.word	0x08004a50

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b988 	b.w	8000548 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	468e      	mov	lr, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d962      	bls.n	800032c <__udivmoddi4+0xdc>
 8000266:	fab2 f682 	clz	r6, r2
 800026a:	b14e      	cbz	r6, 8000280 <__udivmoddi4+0x30>
 800026c:	f1c6 0320 	rsb	r3, r6, #32
 8000270:	fa01 f806 	lsl.w	r8, r1, r6
 8000274:	fa20 f303 	lsr.w	r3, r0, r3
 8000278:	40b7      	lsls	r7, r6
 800027a:	ea43 0808 	orr.w	r8, r3, r8
 800027e:	40b4      	lsls	r4, r6
 8000280:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000284:	fa1f fc87 	uxth.w	ip, r7
 8000288:	fbb8 f1fe 	udiv	r1, r8, lr
 800028c:	0c23      	lsrs	r3, r4, #16
 800028e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000292:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000296:	fb01 f20c 	mul.w	r2, r1, ip
 800029a:	429a      	cmp	r2, r3
 800029c:	d909      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029e:	18fb      	adds	r3, r7, r3
 80002a0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002a4:	f080 80ea 	bcs.w	800047c <__udivmoddi4+0x22c>
 80002a8:	429a      	cmp	r2, r3
 80002aa:	f240 80e7 	bls.w	800047c <__udivmoddi4+0x22c>
 80002ae:	3902      	subs	r1, #2
 80002b0:	443b      	add	r3, r7
 80002b2:	1a9a      	subs	r2, r3, r2
 80002b4:	b2a3      	uxth	r3, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002c2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c6:	459c      	cmp	ip, r3
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0x8e>
 80002ca:	18fb      	adds	r3, r7, r3
 80002cc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d0:	f080 80d6 	bcs.w	8000480 <__udivmoddi4+0x230>
 80002d4:	459c      	cmp	ip, r3
 80002d6:	f240 80d3 	bls.w	8000480 <__udivmoddi4+0x230>
 80002da:	443b      	add	r3, r7
 80002dc:	3802      	subs	r0, #2
 80002de:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e2:	eba3 030c 	sub.w	r3, r3, ip
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11d      	cbz	r5, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40f3      	lsrs	r3, r6
 80002ec:	2200      	movs	r2, #0
 80002ee:	e9c5 3200 	strd	r3, r2, [r5]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d905      	bls.n	8000306 <__udivmoddi4+0xb6>
 80002fa:	b10d      	cbz	r5, 8000300 <__udivmoddi4+0xb0>
 80002fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000300:	2100      	movs	r1, #0
 8000302:	4608      	mov	r0, r1
 8000304:	e7f5      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000306:	fab3 f183 	clz	r1, r3
 800030a:	2900      	cmp	r1, #0
 800030c:	d146      	bne.n	800039c <__udivmoddi4+0x14c>
 800030e:	4573      	cmp	r3, lr
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xc8>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 8105 	bhi.w	8000522 <__udivmoddi4+0x2d2>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb6e 0203 	sbc.w	r2, lr, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4690      	mov	r8, r2
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e5      	beq.n	80002f2 <__udivmoddi4+0xa2>
 8000326:	e9c5 4800 	strd	r4, r8, [r5]
 800032a:	e7e2      	b.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	2a00      	cmp	r2, #0
 800032e:	f000 8090 	beq.w	8000452 <__udivmoddi4+0x202>
 8000332:	fab2 f682 	clz	r6, r2
 8000336:	2e00      	cmp	r6, #0
 8000338:	f040 80a4 	bne.w	8000484 <__udivmoddi4+0x234>
 800033c:	1a8a      	subs	r2, r1, r2
 800033e:	0c03      	lsrs	r3, r0, #16
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	b280      	uxth	r0, r0
 8000346:	b2bc      	uxth	r4, r7
 8000348:	2101      	movs	r1, #1
 800034a:	fbb2 fcfe 	udiv	ip, r2, lr
 800034e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000356:	fb04 f20c 	mul.w	r2, r4, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d907      	bls.n	800036e <__udivmoddi4+0x11e>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x11c>
 8000366:	429a      	cmp	r2, r3
 8000368:	f200 80e0 	bhi.w	800052c <__udivmoddi4+0x2dc>
 800036c:	46c4      	mov	ip, r8
 800036e:	1a9b      	subs	r3, r3, r2
 8000370:	fbb3 f2fe 	udiv	r2, r3, lr
 8000374:	fb0e 3312 	mls	r3, lr, r2, r3
 8000378:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800037c:	fb02 f404 	mul.w	r4, r2, r4
 8000380:	429c      	cmp	r4, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x144>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f102 30ff 	add.w	r0, r2, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x142>
 800038c:	429c      	cmp	r4, r3
 800038e:	f200 80ca 	bhi.w	8000526 <__udivmoddi4+0x2d6>
 8000392:	4602      	mov	r2, r0
 8000394:	1b1b      	subs	r3, r3, r4
 8000396:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0x98>
 800039c:	f1c1 0620 	rsb	r6, r1, #32
 80003a0:	408b      	lsls	r3, r1
 80003a2:	fa22 f706 	lsr.w	r7, r2, r6
 80003a6:	431f      	orrs	r7, r3
 80003a8:	fa0e f401 	lsl.w	r4, lr, r1
 80003ac:	fa20 f306 	lsr.w	r3, r0, r6
 80003b0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003b4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b8:	4323      	orrs	r3, r4
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	fa1f fc87 	uxth.w	ip, r7
 80003c2:	fbbe f0f9 	udiv	r0, lr, r9
 80003c6:	0c1c      	lsrs	r4, r3, #16
 80003c8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003cc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003d0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1a0>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 3aff 	add.w	sl, r0, #4294967295
 80003e2:	f080 809c 	bcs.w	800051e <__udivmoddi4+0x2ce>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f240 8099 	bls.w	800051e <__udivmoddi4+0x2ce>
 80003ec:	3802      	subs	r0, #2
 80003ee:	443c      	add	r4, r7
 80003f0:	eba4 040e 	sub.w	r4, r4, lr
 80003f4:	fa1f fe83 	uxth.w	lr, r3
 80003f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003fc:	fb09 4413 	mls	r4, r9, r3, r4
 8000400:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000404:	fb03 fc0c 	mul.w	ip, r3, ip
 8000408:	45a4      	cmp	ip, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1ce>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000412:	f080 8082 	bcs.w	800051a <__udivmoddi4+0x2ca>
 8000416:	45a4      	cmp	ip, r4
 8000418:	d97f      	bls.n	800051a <__udivmoddi4+0x2ca>
 800041a:	3b02      	subs	r3, #2
 800041c:	443c      	add	r4, r7
 800041e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	fba0 ec02 	umull	lr, ip, r0, r2
 800042a:	4564      	cmp	r4, ip
 800042c:	4673      	mov	r3, lr
 800042e:	46e1      	mov	r9, ip
 8000430:	d362      	bcc.n	80004f8 <__udivmoddi4+0x2a8>
 8000432:	d05f      	beq.n	80004f4 <__udivmoddi4+0x2a4>
 8000434:	b15d      	cbz	r5, 800044e <__udivmoddi4+0x1fe>
 8000436:	ebb8 0203 	subs.w	r2, r8, r3
 800043a:	eb64 0409 	sbc.w	r4, r4, r9
 800043e:	fa04 f606 	lsl.w	r6, r4, r6
 8000442:	fa22 f301 	lsr.w	r3, r2, r1
 8000446:	431e      	orrs	r6, r3
 8000448:	40cc      	lsrs	r4, r1
 800044a:	e9c5 6400 	strd	r6, r4, [r5]
 800044e:	2100      	movs	r1, #0
 8000450:	e74f      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000452:	fbb1 fcf2 	udiv	ip, r1, r2
 8000456:	0c01      	lsrs	r1, r0, #16
 8000458:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800045c:	b280      	uxth	r0, r0
 800045e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000462:	463b      	mov	r3, r7
 8000464:	4638      	mov	r0, r7
 8000466:	463c      	mov	r4, r7
 8000468:	46b8      	mov	r8, r7
 800046a:	46be      	mov	lr, r7
 800046c:	2620      	movs	r6, #32
 800046e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000472:	eba2 0208 	sub.w	r2, r2, r8
 8000476:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800047a:	e766      	b.n	800034a <__udivmoddi4+0xfa>
 800047c:	4601      	mov	r1, r0
 800047e:	e718      	b.n	80002b2 <__udivmoddi4+0x62>
 8000480:	4610      	mov	r0, r2
 8000482:	e72c      	b.n	80002de <__udivmoddi4+0x8e>
 8000484:	f1c6 0220 	rsb	r2, r6, #32
 8000488:	fa2e f302 	lsr.w	r3, lr, r2
 800048c:	40b7      	lsls	r7, r6
 800048e:	40b1      	lsls	r1, r6
 8000490:	fa20 f202 	lsr.w	r2, r0, r2
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	430a      	orrs	r2, r1
 800049a:	fbb3 f8fe 	udiv	r8, r3, lr
 800049e:	b2bc      	uxth	r4, r7
 80004a0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb08 f904 	mul.w	r9, r8, r4
 80004ae:	40b0      	lsls	r0, r6
 80004b0:	4589      	cmp	r9, r1
 80004b2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004b6:	b280      	uxth	r0, r0
 80004b8:	d93e      	bls.n	8000538 <__udivmoddi4+0x2e8>
 80004ba:	1879      	adds	r1, r7, r1
 80004bc:	f108 3cff 	add.w	ip, r8, #4294967295
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x276>
 80004c2:	4589      	cmp	r9, r1
 80004c4:	d81f      	bhi.n	8000506 <__udivmoddi4+0x2b6>
 80004c6:	eba1 0109 	sub.w	r1, r1, r9
 80004ca:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ce:	fb09 f804 	mul.w	r8, r9, r4
 80004d2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004d6:	b292      	uxth	r2, r2
 80004d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004dc:	4542      	cmp	r2, r8
 80004de:	d229      	bcs.n	8000534 <__udivmoddi4+0x2e4>
 80004e0:	18ba      	adds	r2, r7, r2
 80004e2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004e6:	d2c4      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004e8:	4542      	cmp	r2, r8
 80004ea:	d2c2      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004ec:	f1a9 0102 	sub.w	r1, r9, #2
 80004f0:	443a      	add	r2, r7
 80004f2:	e7be      	b.n	8000472 <__udivmoddi4+0x222>
 80004f4:	45f0      	cmp	r8, lr
 80004f6:	d29d      	bcs.n	8000434 <__udivmoddi4+0x1e4>
 80004f8:	ebbe 0302 	subs.w	r3, lr, r2
 80004fc:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000500:	3801      	subs	r0, #1
 8000502:	46e1      	mov	r9, ip
 8000504:	e796      	b.n	8000434 <__udivmoddi4+0x1e4>
 8000506:	eba7 0909 	sub.w	r9, r7, r9
 800050a:	4449      	add	r1, r9
 800050c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000510:	fbb1 f9fe 	udiv	r9, r1, lr
 8000514:	fb09 f804 	mul.w	r8, r9, r4
 8000518:	e7db      	b.n	80004d2 <__udivmoddi4+0x282>
 800051a:	4673      	mov	r3, lr
 800051c:	e77f      	b.n	800041e <__udivmoddi4+0x1ce>
 800051e:	4650      	mov	r0, sl
 8000520:	e766      	b.n	80003f0 <__udivmoddi4+0x1a0>
 8000522:	4608      	mov	r0, r1
 8000524:	e6fd      	b.n	8000322 <__udivmoddi4+0xd2>
 8000526:	443b      	add	r3, r7
 8000528:	3a02      	subs	r2, #2
 800052a:	e733      	b.n	8000394 <__udivmoddi4+0x144>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	443b      	add	r3, r7
 8000532:	e71c      	b.n	800036e <__udivmoddi4+0x11e>
 8000534:	4649      	mov	r1, r9
 8000536:	e79c      	b.n	8000472 <__udivmoddi4+0x222>
 8000538:	eba1 0109 	sub.w	r1, r1, r9
 800053c:	46c4      	mov	ip, r8
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fb09 f804 	mul.w	r8, r9, r4
 8000546:	e7c4      	b.n	80004d2 <__udivmoddi4+0x282>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <LL_PWR_IsActiveFlag_REGLPS>:
  * @note   Take care, return value "0" means the regulator is ready. Return value "1" means the output voltage range is still changing.
  * @rmtoll SR2          REGLPS        LL_PWR_IsActiveFlag_REGLPS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_REGLPS(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_REGLPS) == (PWR_SR2_REGLPS)) ? 1UL : 0UL);
 8000550:	4b06      	ldr	r3, [pc, #24]	@ (800056c <LL_PWR_IsActiveFlag_REGLPS+0x20>)
 8000552:	695b      	ldr	r3, [r3, #20]
 8000554:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000558:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800055c:	d101      	bne.n	8000562 <LL_PWR_IsActiveFlag_REGLPS+0x16>
 800055e:	2301      	movs	r3, #1
 8000560:	e000      	b.n	8000564 <LL_PWR_IsActiveFlag_REGLPS+0x18>
 8000562:	2300      	movs	r3, #0
}
 8000564:	4618      	mov	r0, r3
 8000566:	46bd      	mov	sp, r7
 8000568:	bc80      	pop	{r7}
 800056a:	4770      	bx	lr
 800056c:	58000400 	.word	0x58000400

08000570 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8000574:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000578:	689b      	ldr	r3, [r3, #8]
 800057a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800057e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000582:	d101      	bne.n	8000588 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8000584:	2301      	movs	r3, #1
 8000586:	e000      	b.n	800058a <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8000588:	2300      	movs	r3, #0
}
 800058a:	4618      	mov	r0, r3
 800058c:	46bd      	mov	sp, r7
 800058e:	bc80      	pop	{r7}
 8000590:	4770      	bx	lr
	...

08000594 <__io_putchar>:
#include "./../Inc/STOP1_example.h"

/** @brief  Redirect the output of printf to USART2
  * @retval int
  */
int __io_putchar(int ch){
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, &ch, 1, 1000);
 800059c:	1d39      	adds	r1, r7, #4
 800059e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005a2:	2201      	movs	r2, #1
 80005a4:	4803      	ldr	r0, [pc, #12]	@ (80005b4 <__io_putchar+0x20>)
 80005a6:	f002 fd14 	bl	8002fd2 <HAL_UART_Transmit>
}
 80005aa:	bf00      	nop
 80005ac:	4618      	mov	r0, r3
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	20000088 	.word	0x20000088

080005b8 <delay>:

/** @brief Simple software delay (blocking)
  * @param ms: approximate milliseconds to delay (not precise, depends on CPU speed)
  * @retval None
  */
void delay(uint32_t ms){
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
    uint32_t freq = HAL_RCC_GetHCLKFreq();
 80005c0:	f002 f99e 	bl	8002900 <HAL_RCC_GetHCLKFreq>
 80005c4:	60b8      	str	r0, [r7, #8]
    uint32_t count = (freq / 4000) * ms; // 4 cycles per loop (approx.)
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	4a09      	ldr	r2, [pc, #36]	@ (80005f0 <delay+0x38>)
 80005ca:	fba2 2303 	umull	r2, r3, r2, r3
 80005ce:	0a1a      	lsrs	r2, r3, #8
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	fb02 f303 	mul.w	r3, r2, r3
 80005d6:	60fb      	str	r3, [r7, #12]
    while(count--) {
 80005d8:	e000      	b.n	80005dc <delay+0x24>
        __NOP();
 80005da:	bf00      	nop
    while(count--) {
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	1e5a      	subs	r2, r3, #1
 80005e0:	60fa      	str	r2, [r7, #12]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d1f9      	bne.n	80005da <delay+0x22>
    }
}
 80005e6:	bf00      	nop
 80005e8:	bf00      	nop
 80005ea:	3710      	adds	r7, #16
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	10624dd3 	.word	0x10624dd3

080005f4 <Divide_HCLK1_By>:
  * 2, 3, 4, 5, 6, 8, 10, 16, 32, 64, 128, 256, 512.
  * Any other value does not divide SYSCLK (1 does not divide, >512 divides too much,
  * and by default, any unusual value will not divide).
  * @retval None
  */
void Divide_HCLK1_By(uint16_t dividerX){
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	80fb      	strh	r3, [r7, #6]
    uint8_t HCLK1_prescaler;
    if (dividerX >= 2 && dividerX <= 512){
 80005fe:	88fb      	ldrh	r3, [r7, #6]
 8000600:	2b01      	cmp	r3, #1
 8000602:	f240 80cf 	bls.w	80007a4 <Divide_HCLK1_By+0x1b0>
 8000606:	88fb      	ldrh	r3, [r7, #6]
 8000608:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800060c:	f200 80ca 	bhi.w	80007a4 <Divide_HCLK1_By+0x1b0>
      switch(dividerX){
 8000610:	88fb      	ldrh	r3, [r7, #6]
 8000612:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000616:	f000 80be 	beq.w	8000796 <Divide_HCLK1_By+0x1a2>
 800061a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800061e:	f300 80bd 	bgt.w	800079c <Divide_HCLK1_By+0x1a8>
 8000622:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000626:	f000 80b3 	beq.w	8000790 <Divide_HCLK1_By+0x19c>
 800062a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800062e:	f300 80b5 	bgt.w	800079c <Divide_HCLK1_By+0x1a8>
 8000632:	2b40      	cmp	r3, #64	@ 0x40
 8000634:	f300 8088 	bgt.w	8000748 <Divide_HCLK1_By+0x154>
 8000638:	2b02      	cmp	r3, #2
 800063a:	f2c0 80af 	blt.w	800079c <Divide_HCLK1_By+0x1a8>
 800063e:	3b02      	subs	r3, #2
 8000640:	2b3e      	cmp	r3, #62	@ 0x3e
 8000642:	f200 80ab 	bhi.w	800079c <Divide_HCLK1_By+0x1a8>
 8000646:	a201      	add	r2, pc, #4	@ (adr r2, 800064c <Divide_HCLK1_By+0x58>)
 8000648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800064c:	0800074f 	.word	0x0800074f
 8000650:	08000755 	.word	0x08000755
 8000654:	0800075b 	.word	0x0800075b
 8000658:	08000761 	.word	0x08000761
 800065c:	08000767 	.word	0x08000767
 8000660:	0800079d 	.word	0x0800079d
 8000664:	0800076d 	.word	0x0800076d
 8000668:	0800079d 	.word	0x0800079d
 800066c:	08000773 	.word	0x08000773
 8000670:	0800079d 	.word	0x0800079d
 8000674:	0800079d 	.word	0x0800079d
 8000678:	0800079d 	.word	0x0800079d
 800067c:	0800079d 	.word	0x0800079d
 8000680:	0800079d 	.word	0x0800079d
 8000684:	08000779 	.word	0x08000779
 8000688:	0800079d 	.word	0x0800079d
 800068c:	0800079d 	.word	0x0800079d
 8000690:	0800079d 	.word	0x0800079d
 8000694:	0800079d 	.word	0x0800079d
 8000698:	0800079d 	.word	0x0800079d
 800069c:	0800079d 	.word	0x0800079d
 80006a0:	0800079d 	.word	0x0800079d
 80006a4:	0800079d 	.word	0x0800079d
 80006a8:	0800079d 	.word	0x0800079d
 80006ac:	0800079d 	.word	0x0800079d
 80006b0:	0800079d 	.word	0x0800079d
 80006b4:	0800079d 	.word	0x0800079d
 80006b8:	0800079d 	.word	0x0800079d
 80006bc:	0800079d 	.word	0x0800079d
 80006c0:	0800079d 	.word	0x0800079d
 80006c4:	0800077f 	.word	0x0800077f
 80006c8:	0800079d 	.word	0x0800079d
 80006cc:	0800079d 	.word	0x0800079d
 80006d0:	0800079d 	.word	0x0800079d
 80006d4:	0800079d 	.word	0x0800079d
 80006d8:	0800079d 	.word	0x0800079d
 80006dc:	0800079d 	.word	0x0800079d
 80006e0:	0800079d 	.word	0x0800079d
 80006e4:	0800079d 	.word	0x0800079d
 80006e8:	0800079d 	.word	0x0800079d
 80006ec:	0800079d 	.word	0x0800079d
 80006f0:	0800079d 	.word	0x0800079d
 80006f4:	0800079d 	.word	0x0800079d
 80006f8:	0800079d 	.word	0x0800079d
 80006fc:	0800079d 	.word	0x0800079d
 8000700:	0800079d 	.word	0x0800079d
 8000704:	0800079d 	.word	0x0800079d
 8000708:	0800079d 	.word	0x0800079d
 800070c:	0800079d 	.word	0x0800079d
 8000710:	0800079d 	.word	0x0800079d
 8000714:	0800079d 	.word	0x0800079d
 8000718:	0800079d 	.word	0x0800079d
 800071c:	0800079d 	.word	0x0800079d
 8000720:	0800079d 	.word	0x0800079d
 8000724:	0800079d 	.word	0x0800079d
 8000728:	0800079d 	.word	0x0800079d
 800072c:	0800079d 	.word	0x0800079d
 8000730:	0800079d 	.word	0x0800079d
 8000734:	0800079d 	.word	0x0800079d
 8000738:	0800079d 	.word	0x0800079d
 800073c:	0800079d 	.word	0x0800079d
 8000740:	0800079d 	.word	0x0800079d
 8000744:	08000785 	.word	0x08000785
 8000748:	2b80      	cmp	r3, #128	@ 0x80
 800074a:	d01e      	beq.n	800078a <Divide_HCLK1_By+0x196>
 800074c:	e026      	b.n	800079c <Divide_HCLK1_By+0x1a8>
        case 2:   HCLK1_prescaler = 8;    break; // "1000"
 800074e:	2308      	movs	r3, #8
 8000750:	73fb      	strb	r3, [r7, #15]
 8000752:	e026      	b.n	80007a2 <Divide_HCLK1_By+0x1ae>
        case 3:   HCLK1_prescaler = 1;    break; // "0001"
 8000754:	2301      	movs	r3, #1
 8000756:	73fb      	strb	r3, [r7, #15]
 8000758:	e023      	b.n	80007a2 <Divide_HCLK1_By+0x1ae>
        case 4:   HCLK1_prescaler = 9;    break; // "1001"
 800075a:	2309      	movs	r3, #9
 800075c:	73fb      	strb	r3, [r7, #15]
 800075e:	e020      	b.n	80007a2 <Divide_HCLK1_By+0x1ae>
        case 5:   HCLK1_prescaler = 2;    break; // "0010"
 8000760:	2302      	movs	r3, #2
 8000762:	73fb      	strb	r3, [r7, #15]
 8000764:	e01d      	b.n	80007a2 <Divide_HCLK1_By+0x1ae>
        case 6:   HCLK1_prescaler = 5;    break; // "0101"
 8000766:	2305      	movs	r3, #5
 8000768:	73fb      	strb	r3, [r7, #15]
 800076a:	e01a      	b.n	80007a2 <Divide_HCLK1_By+0x1ae>
        case 8:   HCLK1_prescaler = 10;   break; // "1010"
 800076c:	230a      	movs	r3, #10
 800076e:	73fb      	strb	r3, [r7, #15]
 8000770:	e017      	b.n	80007a2 <Divide_HCLK1_By+0x1ae>
        case 10:  HCLK1_prescaler = 6;    break; // "0110"
 8000772:	2306      	movs	r3, #6
 8000774:	73fb      	strb	r3, [r7, #15]
 8000776:	e014      	b.n	80007a2 <Divide_HCLK1_By+0x1ae>
        case 16:  HCLK1_prescaler = 11;   break; // "1011"
 8000778:	230b      	movs	r3, #11
 800077a:	73fb      	strb	r3, [r7, #15]
 800077c:	e011      	b.n	80007a2 <Divide_HCLK1_By+0x1ae>
        case 32:  HCLK1_prescaler = 7;    break; // "0111"
 800077e:	2307      	movs	r3, #7
 8000780:	73fb      	strb	r3, [r7, #15]
 8000782:	e00e      	b.n	80007a2 <Divide_HCLK1_By+0x1ae>
        case 64:  HCLK1_prescaler = 12;   break; // "1100"
 8000784:	230c      	movs	r3, #12
 8000786:	73fb      	strb	r3, [r7, #15]
 8000788:	e00b      	b.n	80007a2 <Divide_HCLK1_By+0x1ae>
        case 128: HCLK1_prescaler = 13;   break; // "1101"
 800078a:	230d      	movs	r3, #13
 800078c:	73fb      	strb	r3, [r7, #15]
 800078e:	e008      	b.n	80007a2 <Divide_HCLK1_By+0x1ae>
        case 256: HCLK1_prescaler = 14;   break; // "1110"
 8000790:	230e      	movs	r3, #14
 8000792:	73fb      	strb	r3, [r7, #15]
 8000794:	e005      	b.n	80007a2 <Divide_HCLK1_By+0x1ae>
        case 512: HCLK1_prescaler = 15;   break; // "1111"
 8000796:	230f      	movs	r3, #15
 8000798:	73fb      	strb	r3, [r7, #15]
 800079a:	e002      	b.n	80007a2 <Divide_HCLK1_By+0x1ae>
        default:  HCLK1_prescaler = 0; break; // "0000", no division
 800079c:	2300      	movs	r3, #0
 800079e:	73fb      	strb	r3, [r7, #15]
 80007a0:	bf00      	nop
      switch(dividerX){
 80007a2:	e001      	b.n	80007a8 <Divide_HCLK1_By+0x1b4>
      }
    } else HCLK1_prescaler = 0; // no division
 80007a4:	2300      	movs	r3, #0
 80007a6:	73fb      	strb	r3, [r7, #15]

    // Reset the current prescaler value into bits 7 to 4 (HPRE)
    RCC -> CFGR &= ~(0xF << 4);
 80007a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80007ac:	689b      	ldr	r3, [r3, #8]
 80007ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80007b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80007b6:	6093      	str	r3, [r2, #8]
    // Insert the new prescaler value
    RCC -> CFGR |= (HCLK1_prescaler << 4);
 80007b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80007bc:	689a      	ldr	r2, [r3, #8]
 80007be:	7bfb      	ldrb	r3, [r7, #15]
 80007c0:	011b      	lsls	r3, r3, #4
 80007c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80007c6:	4313      	orrs	r3, r2
 80007c8:	608b      	str	r3, [r1, #8]
    /* Wait for the hardware to aknowledge the new prescaler value
     * using HCLK1 prescaler flag (HPREF) on bit 16:
     * 0 → HCLK1 prescaler value not yet applied
     * 1 → HCLK1 prescaler value applied (RCC -> CFGR & (1 << 16))
     * OR using LL function `LL_RCC_IsActiveFlag_HPRE(void)`
     */ while(!(LL_RCC_IsActiveFlag_HPRE())){}
 80007ca:	bf00      	nop
 80007cc:	f7ff fed0 	bl	8000570 <LL_RCC_IsActiveFlag_HPRE>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d0fa      	beq.n	80007cc <Divide_HCLK1_By+0x1d8>
}
 80007d6:	bf00      	nop
 80007d8:	bf00      	nop
 80007da:	3710      	adds	r7, #16
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}

080007e0 <Enter_LowPowerRunMode>:
/** @brief Makes the CPU goes into low power run mode (LPRun),
  * according to the datasheet guidance. HSE32 is not used,
  * HSI16 is.
  * @retval None
  */
void Enter_LowPowerRunMode(void){
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
	// 1. set the FPDR bit in PWR_CR1.
	HAL_PWREx_EnableFlashPowerDown(PWR_FLASHPD_LPRUN);
 80007e4:	2010      	movs	r0, #16
 80007e6:	f000 ffe7 	bl	80017b8 <HAL_PWREx_EnableFlashPowerDown>
	/* 3. Decrease the HCLK clock frequencies below 2 MHz.
	 * 16 MHz / X ≤ 2 MHz → X ≥ 8; and 8 is a usual value of divider
	 * among 1, 2, 3, 4, 5, 6, 8, 10, 16, 32, 64, 128, 256 and 512.
	 * But we will take the next higher value, 10, to ensure we are below 2 MHz.
	 */
    Divide_HCLK1_By(10);
 80007ea:	200a      	movs	r0, #10
 80007ec:	f7ff ff02 	bl	80005f4 <Divide_HCLK1_By>

	// 4. Set the LPR bit in PWR_CR1.
	HAL_PWREx_EnableLowPowerRunMode();
 80007f0:	f000 fffc 	bl	80017ec <HAL_PWREx_EnableLowPowerRunMode>

	// 5. Check if the low-power regulator is ready,
	// by checking the REGLPS bit (PWR_SR2, bit 8)
	while(!(LL_PWR_IsActiveFlag_REGLPS())){}
 80007f4:	bf00      	nop
 80007f6:	f7ff fea9 	bl	800054c <LL_PWR_IsActiveFlag_REGLPS>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d0fa      	beq.n	80007f6 <Enter_LowPowerRunMode+0x16>
}
 8000800:	bf00      	nop
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}

08000806 <Exit_LowPowerRunMode>:
  * HCLK1 frequency over 2 MHz, can take the following values:
  * 1, 2, 3, 4, 5, 6, 8, 10, 16, 32, 64, 128, 256, 512, but MUST BE lower than 10;
  * e.g. among the nine first values.
  * @retval None
  */
void Exit_LowPowerRunMode(uint8_t newHCLKFreq){
 8000806:	b580      	push	{r7, lr}
 8000808:	b082      	sub	sp, #8
 800080a:	af00      	add	r7, sp, #0
 800080c:	4603      	mov	r3, r0
 800080e:	71fb      	strb	r3, [r7, #7]
	// 1. Clear the LPR bit in PWR_CR1, and,
	// 2. wait until REGLPF bit is cleared in PWR_SR2.
	HAL_PWREx_DisableLowPowerRunMode();
 8000810:	f000 fffa 	bl	8001808 <HAL_PWREx_DisableLowPowerRunMode>

	// 3. Increase the HCLK clock frequencies over 2 MHz.
	// 48 MHz / X ≥ 2 MHz → X ≤ 24; but 24 is not
	// a usual value of divider (1, 2, 3, 4, 5, 6, 8, 10, 16, 32, 64, 128, 256, 512).
	// So we can take one of the nine lower values, 1 to 16.
	Divide_HCLK1_By(newHCLKFreq);
 8000814:	79fb      	ldrb	r3, [r7, #7]
 8000816:	b29b      	uxth	r3, r3
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff feeb 	bl	80005f4 <Divide_HCLK1_By>
	// (HSE32 is not used here, so we skip this optionnal step.)
}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
	...

08000828 <Enter_STOP1Mode_OnWFI>:
/** @brief Makes the CPU go into STOP1 mode,
  * according to the datasheet guidance.
  * We are waiting on an Interrupt (WFI).
  * @retval None
  */
void Enter_STOP1Mode_OnWFI(void){
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
	 * and the peripheral flags generating wake-up interrupts must be cleared.
	 * Otherwise, the Stop 1 mode entry procedure is ignored and program execution continues.
	 * These bits are cleared when writing '1' to them.
	 */
	// EXTI_PR1 - 19 bits: 22, 21, 16 to 0.
	EXTI -> PR1 |= (3 << 21); // bits 22 & 21
 800082c:	4b18      	ldr	r3, [pc, #96]	@ (8000890 <Enter_STOP1Mode_OnWFI+0x68>)
 800082e:	68db      	ldr	r3, [r3, #12]
 8000830:	4a17      	ldr	r2, [pc, #92]	@ (8000890 <Enter_STOP1Mode_OnWFI+0x68>)
 8000832:	f443 03c0 	orr.w	r3, r3, #6291456	@ 0x600000
 8000836:	60d3      	str	r3, [r2, #12]
	EXTI -> PR1 |= (1 << 16); // bit 16
 8000838:	4b15      	ldr	r3, [pc, #84]	@ (8000890 <Enter_STOP1Mode_OnWFI+0x68>)
 800083a:	68db      	ldr	r3, [r3, #12]
 800083c:	4a14      	ldr	r2, [pc, #80]	@ (8000890 <Enter_STOP1Mode_OnWFI+0x68>)
 800083e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000842:	60d3      	str	r3, [r2, #12]
	EXTI -> PR1 |= (0xFFFF << 0); // bits 15 to 0
 8000844:	4b12      	ldr	r3, [pc, #72]	@ (8000890 <Enter_STOP1Mode_OnWFI+0x68>)
 8000846:	68db      	ldr	r3, [r3, #12]
 8000848:	4a11      	ldr	r2, [pc, #68]	@ (8000890 <Enter_STOP1Mode_OnWFI+0x68>)
 800084a:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 800084e:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8000852:	60d3      	str	r3, [r2, #12]
	// EXTI_PR2 - 4 bits: 13, 9, 8, 2.
	EXTI -> PR1 |= (1 << 13); // bit 13
 8000854:	4b0e      	ldr	r3, [pc, #56]	@ (8000890 <Enter_STOP1Mode_OnWFI+0x68>)
 8000856:	68db      	ldr	r3, [r3, #12]
 8000858:	4a0d      	ldr	r2, [pc, #52]	@ (8000890 <Enter_STOP1Mode_OnWFI+0x68>)
 800085a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800085e:	60d3      	str	r3, [r2, #12]
	EXTI -> PR1 |= (3 << 8); // bits 9 & 8
 8000860:	4b0b      	ldr	r3, [pc, #44]	@ (8000890 <Enter_STOP1Mode_OnWFI+0x68>)
 8000862:	68db      	ldr	r3, [r3, #12]
 8000864:	4a0a      	ldr	r2, [pc, #40]	@ (8000890 <Enter_STOP1Mode_OnWFI+0x68>)
 8000866:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800086a:	60d3      	str	r3, [r2, #12]
	EXTI -> PR1 |= (1 << 2); // bit 2
 800086c:	4b08      	ldr	r3, [pc, #32]	@ (8000890 <Enter_STOP1Mode_OnWFI+0x68>)
 800086e:	68db      	ldr	r3, [r3, #12]
 8000870:	4a07      	ldr	r2, [pc, #28]	@ (8000890 <Enter_STOP1Mode_OnWFI+0x68>)
 8000872:	f043 0304 	orr.w	r3, r3, #4
 8000876:	60d3      	str	r3, [r2, #12]

	// Wait a bit before entering STOP1 mode
	HAL_Delay(500);
 8000878:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800087c:	f000 fc8e 	bl	800119c <HAL_Delay>

	// Suspend the tick to prevent the SysTick interrupt every 1 ms
	HAL_SuspendTick();
 8000880:	f000 fcb0 	bl	80011e4 <HAL_SuspendTick>

	// Enter the STOP1 mode, waiting for an interrupt
	HAL_PWREx_EnterSTOP1Mode(PWR_SLEEPENTRY_WFI);
 8000884:	2001      	movs	r0, #1
 8000886:	f000 fff5 	bl	8001874 <HAL_PWREx_EnterSTOP1Mode>
	/* ####----####----####----####
	 * MCU is asleep in STOP1 mode
	 * ####----####----####----####
	 */
}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	58000800 	.word	0x58000800

08000894 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000894:	b480      	push	{r7}
 8000896:	b085      	sub	sp, #20
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800089c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80008a0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80008a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	4313      	orrs	r3, r2
 80008aa:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80008ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80008b0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4013      	ands	r3, r2
 80008b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008b8:	68fb      	ldr	r3, [r7, #12]
}
 80008ba:	bf00      	nop
 80008bc:	3714      	adds	r7, #20
 80008be:	46bd      	mov	sp, r7
 80008c0:	bc80      	pop	{r7}
 80008c2:	4770      	bx	lr

080008c4 <LL_APB1_GRP1_DisableClockSleep>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1

  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClockSleep(uint32_t Periphs)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1SMENR1, Periphs);
 80008cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80008d0:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	43db      	mvns	r3, r3
 80008d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80008da:	4013      	ands	r3, r2
 80008dc:	678b      	str	r3, [r1, #120]	@ 0x78
}
 80008de:	bf00      	nop
 80008e0:	370c      	adds	r7, #12
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bc80      	pop	{r7}
 80008e6:	4770      	bx	lr

080008e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ec:	f000 fbe0 	bl	80010b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008f0:	f000 f83e 	bl	8000970 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008f4:	f000 f8d8 	bl	8000aa8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008f8:	f000 f88a 	bl	8000a10 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    printf("\r\n\r\nTest d'une appli mode veille profonde sur STM32.\r\n");
 80008fc:	4813      	ldr	r0, [pc, #76]	@ (800094c <main+0x64>)
 80008fe:	f003 fa4b 	bl	8003d98 <puts>
    printf("Les différents modes testés sont:\r\n");
 8000902:	4813      	ldr	r0, [pc, #76]	@ (8000950 <main+0x68>)
 8000904:	f003 fa48 	bl	8003d98 <puts>
    printf("\tRUN = 0, LPRUN = 1, STOP1 = 2\r\n");
 8000908:	4812      	ldr	r0, [pc, #72]	@ (8000954 <main+0x6c>)
 800090a:	f003 fa45 	bl	8003d98 <puts>
  while (1)
  {
	  button_pressed = 0; // Reset flag before waiting
 800090e:	4b12      	ldr	r3, [pc, #72]	@ (8000958 <main+0x70>)
 8000910:	2200      	movs	r2, #0
 8000912:	701a      	strb	r2, [r3, #0]
	  printf("Exécution de la boucle While.\r\n");
 8000914:	4811      	ldr	r0, [pc, #68]	@ (800095c <main+0x74>)
 8000916:	f003 fa3f 	bl	8003d98 <puts>
	  printf("Modes disponibles:\r\n");
 800091a:	4811      	ldr	r0, [pc, #68]	@ (8000960 <main+0x78>)
 800091c:	f003 fa3c 	bl	8003d98 <puts>
	  printf("\tRUN = 0, LPRUN = 1, STOP1 = 2\r\n");
 8000920:	480c      	ldr	r0, [pc, #48]	@ (8000954 <main+0x6c>)
 8000922:	f003 fa39 	bl	8003d98 <puts>
	  printf("\tMode actuel: %d\r\n\r\n", currentMode);
 8000926:	4b0f      	ldr	r3, [pc, #60]	@ (8000964 <main+0x7c>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	4619      	mov	r1, r3
 800092c:	480e      	ldr	r0, [pc, #56]	@ (8000968 <main+0x80>)
 800092e:	f003 f9cb 	bl	8003cc8 <iprintf>

	  while (button_pressed == 0){}
 8000932:	bf00      	nop
 8000934:	4b08      	ldr	r3, [pc, #32]	@ (8000958 <main+0x70>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	b2db      	uxtb	r3, r3
 800093a:	2b00      	cmp	r3, #0
 800093c:	d0fa      	beq.n	8000934 <main+0x4c>

	  Switch_Mode(last_button_pin);
 800093e:	4b0b      	ldr	r3, [pc, #44]	@ (800096c <main+0x84>)
 8000940:	881b      	ldrh	r3, [r3, #0]
 8000942:	b29b      	uxth	r3, r3
 8000944:	4618      	mov	r0, r3
 8000946:	f000 f971 	bl	8000c2c <Switch_Mode>
  {
 800094a:	e7e0      	b.n	800090e <main+0x26>
 800094c:	08004a68 	.word	0x08004a68
 8000950:	08004aa0 	.word	0x08004aa0
 8000954:	08004ac8 	.word	0x08004ac8
 8000958:	2000011d 	.word	0x2000011d
 800095c:	08004ae8 	.word	0x08004ae8
 8000960:	08004b08 	.word	0x08004b08
 8000964:	2000011c 	.word	0x2000011c
 8000968:	08004b1c 	.word	0x08004b1c
 800096c:	20000000 	.word	0x20000000

08000970 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b09a      	sub	sp, #104	@ 0x68
 8000974:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000976:	f107 0320 	add.w	r3, r7, #32
 800097a:	2248      	movs	r2, #72	@ 0x48
 800097c:	2100      	movs	r1, #0
 800097e:	4618      	mov	r0, r3
 8000980:	f003 faea 	bl	8003f58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000984:	1d3b      	adds	r3, r7, #4
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]
 800098c:	609a      	str	r2, [r3, #8]
 800098e:	60da      	str	r2, [r3, #12]
 8000990:	611a      	str	r2, [r3, #16]
 8000992:	615a      	str	r2, [r3, #20]
 8000994:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000996:	4b1d      	ldr	r3, [pc, #116]	@ (8000a0c <SystemClock_Config+0x9c>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800099e:	4a1b      	ldr	r2, [pc, #108]	@ (8000a0c <SystemClock_Config+0x9c>)
 80009a0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009a4:	6013      	str	r3, [r2, #0]
 80009a6:	4b19      	ldr	r3, [pc, #100]	@ (8000a0c <SystemClock_Config+0x9c>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80009ae:	603b      	str	r3, [r7, #0]
 80009b0:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009b2:	2302      	movs	r3, #2
 80009b4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009ba:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009bc:	2340      	movs	r3, #64	@ 0x40
 80009be:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009c0:	2300      	movs	r3, #0
 80009c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c4:	f107 0320 	add.w	r3, r7, #32
 80009c8:	4618      	mov	r0, r3
 80009ca:	f001 fa35 	bl	8001e38 <HAL_RCC_OscConfig>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80009d4:	f000 f9da 	bl	8000d8c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80009d8:	234f      	movs	r3, #79	@ 0x4f
 80009da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009dc:	2301      	movs	r3, #1
 80009de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009e0:	2300      	movs	r3, #0
 80009e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009e4:	2300      	movs	r3, #0
 80009e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009e8:	2300      	movs	r3, #0
 80009ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80009ec:	2300      	movs	r3, #0
 80009ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009f0:	1d3b      	adds	r3, r7, #4
 80009f2:	2100      	movs	r1, #0
 80009f4:	4618      	mov	r0, r3
 80009f6:	f001 fda1 	bl	800253c <HAL_RCC_ClockConfig>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a00:	f000 f9c4 	bl	8000d8c <Error_Handler>
  }
}
 8000a04:	bf00      	nop
 8000a06:	3768      	adds	r7, #104	@ 0x68
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	58000400 	.word	0x58000400

08000a10 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a14:	4b22      	ldr	r3, [pc, #136]	@ (8000aa0 <MX_USART2_UART_Init+0x90>)
 8000a16:	4a23      	ldr	r2, [pc, #140]	@ (8000aa4 <MX_USART2_UART_Init+0x94>)
 8000a18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000a1a:	4b21      	ldr	r3, [pc, #132]	@ (8000aa0 <MX_USART2_UART_Init+0x90>)
 8000a1c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000a20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a22:	4b1f      	ldr	r3, [pc, #124]	@ (8000aa0 <MX_USART2_UART_Init+0x90>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a28:	4b1d      	ldr	r3, [pc, #116]	@ (8000aa0 <MX_USART2_UART_Init+0x90>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a2e:	4b1c      	ldr	r3, [pc, #112]	@ (8000aa0 <MX_USART2_UART_Init+0x90>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a34:	4b1a      	ldr	r3, [pc, #104]	@ (8000aa0 <MX_USART2_UART_Init+0x90>)
 8000a36:	220c      	movs	r2, #12
 8000a38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a3a:	4b19      	ldr	r3, [pc, #100]	@ (8000aa0 <MX_USART2_UART_Init+0x90>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a40:	4b17      	ldr	r3, [pc, #92]	@ (8000aa0 <MX_USART2_UART_Init+0x90>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a46:	4b16      	ldr	r3, [pc, #88]	@ (8000aa0 <MX_USART2_UART_Init+0x90>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a4c:	4b14      	ldr	r3, [pc, #80]	@ (8000aa0 <MX_USART2_UART_Init+0x90>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a52:	4b13      	ldr	r3, [pc, #76]	@ (8000aa0 <MX_USART2_UART_Init+0x90>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a58:	4811      	ldr	r0, [pc, #68]	@ (8000aa0 <MX_USART2_UART_Init+0x90>)
 8000a5a:	f002 fa6a 	bl	8002f32 <HAL_UART_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a64:	f000 f992 	bl	8000d8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a68:	2100      	movs	r1, #0
 8000a6a:	480d      	ldr	r0, [pc, #52]	@ (8000aa0 <MX_USART2_UART_Init+0x90>)
 8000a6c:	f002 ffa1 	bl	80039b2 <HAL_UARTEx_SetTxFifoThreshold>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000a76:	f000 f989 	bl	8000d8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	4808      	ldr	r0, [pc, #32]	@ (8000aa0 <MX_USART2_UART_Init+0x90>)
 8000a7e:	f002 ffd6 	bl	8003a2e <HAL_UARTEx_SetRxFifoThreshold>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000a88:	f000 f980 	bl	8000d8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a8c:	4804      	ldr	r0, [pc, #16]	@ (8000aa0 <MX_USART2_UART_Init+0x90>)
 8000a8e:	f002 ff58 	bl	8003942 <HAL_UARTEx_DisableFifoMode>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a98:	f000 f978 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	20000088 	.word	0x20000088
 8000aa4:	40004400 	.word	0x40004400

08000aa8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
 8000ab8:	60da      	str	r2, [r3, #12]
 8000aba:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000abc:	2002      	movs	r0, #2
 8000abe:	f7ff fee9 	bl	8000894 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac2:	2004      	movs	r0, #4
 8000ac4:	f7ff fee6 	bl	8000894 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac8:	2001      	movs	r0, #1
 8000aca:	f7ff fee3 	bl	8000894 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BLED_Pin|GLED_Pin|RLED_Pin, GPIO_PIN_RESET);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	f44f 410a 	mov.w	r1, #35328	@ 0x8a00
 8000ad4:	482b      	ldr	r0, [pc, #172]	@ (8000b84 <MX_GPIO_Init+0xdc>)
 8000ad6:	f000 fe0d 	bl	80016f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2138      	movs	r1, #56	@ 0x38
 8000ade:	482a      	ldr	r0, [pc, #168]	@ (8000b88 <MX_GPIO_Init+0xe0>)
 8000ae0:	f000 fe08 	bl	80016f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BLED_Pin GLED_Pin RLED_Pin */
  GPIO_InitStruct.Pin = BLED_Pin|GLED_Pin|RLED_Pin;
 8000ae4:	f44f 430a 	mov.w	r3, #35328	@ 0x8a00
 8000ae8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aea:	2301      	movs	r3, #1
 8000aec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af2:	2300      	movs	r3, #0
 8000af4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af6:	1d3b      	adds	r3, r7, #4
 8000af8:	4619      	mov	r1, r3
 8000afa:	4822      	ldr	r0, [pc, #136]	@ (8000b84 <MX_GPIO_Init+0xdc>)
 8000afc:	f000 fc9a 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pins : FE_CTRL3_Pin FE_CTRL2_Pin FE_CTRL1_Pin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 8000b00:	2338      	movs	r3, #56	@ 0x38
 8000b02:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b04:	2301      	movs	r3, #1
 8000b06:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0c:	2303      	movs	r3, #3
 8000b0e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	4619      	mov	r1, r3
 8000b14:	481c      	ldr	r0, [pc, #112]	@ (8000b88 <MX_GPIO_Init+0xe0>)
 8000b16:	f000 fc8d 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pins : UB1_Pin UB2_Pin */
  GPIO_InitStruct.Pin = UB1_Pin|UB2_Pin;
 8000b1a:	2303      	movs	r3, #3
 8000b1c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b1e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b22:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b24:	2301      	movs	r3, #1
 8000b26:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b30:	f000 fc80 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pin : UB3_Pin */
  GPIO_InitStruct.Pin = UB3_Pin;
 8000b34:	2340      	movs	r3, #64	@ 0x40
 8000b36:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b38:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b3c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(UB3_GPIO_Port, &GPIO_InitStruct);
 8000b42:	1d3b      	adds	r3, r7, #4
 8000b44:	4619      	mov	r1, r3
 8000b46:	4810      	ldr	r0, [pc, #64]	@ (8000b88 <MX_GPIO_Init+0xe0>)
 8000b48:	f000 fc74 	bl	8001434 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2100      	movs	r1, #0
 8000b50:	2006      	movs	r0, #6
 8000b52:	f000 fc3a 	bl	80013ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b56:	2006      	movs	r0, #6
 8000b58:	f000 fc51 	bl	80013fe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2100      	movs	r1, #0
 8000b60:	2007      	movs	r0, #7
 8000b62:	f000 fc32 	bl	80013ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000b66:	2007      	movs	r0, #7
 8000b68:	f000 fc49 	bl	80013fe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	2100      	movs	r1, #0
 8000b70:	2016      	movs	r0, #22
 8000b72:	f000 fc2a 	bl	80013ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000b76:	2016      	movs	r0, #22
 8000b78:	f000 fc41 	bl	80013fe <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b7c:	bf00      	nop
 8000b7e:	3718      	adds	r7, #24
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	48000400 	.word	0x48000400
 8000b88:	48000800 	.word	0x48000800

08000b8c <HAL_GPIO_EXTI_Callback>:
  * `currentMode` is updated.
  * @param GPIO_Pin: Pin number that triggered the interrupt
  * @note  This function is called by the HAL when an external interrupt occurs.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	80fb      	strh	r3, [r7, #6]
	// Update our user defined flags
	button_pressed = 1;
 8000b96:	4b1e      	ldr	r3, [pc, #120]	@ (8000c10 <HAL_GPIO_EXTI_Callback+0x84>)
 8000b98:	2201      	movs	r2, #1
 8000b9a:	701a      	strb	r2, [r3, #0]
	last_button_pin = GPIO_Pin;
 8000b9c:	4a1d      	ldr	r2, [pc, #116]	@ (8000c14 <HAL_GPIO_EXTI_Callback+0x88>)
 8000b9e:	88fb      	ldrh	r3, [r7, #6]
 8000ba0:	8013      	strh	r3, [r2, #0]
    // Cases differ depending on the button pressed

	// Actions to do if we are currently in STOP1 mode
	if (currentMode == MODE_STOP1 || currentMode == MODE_LPRUN){
 8000ba2:	4b1d      	ldr	r3, [pc, #116]	@ (8000c18 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	2b02      	cmp	r3, #2
 8000ba8:	d003      	beq.n	8000bb2 <HAL_GPIO_EXTI_Callback+0x26>
 8000baa:	4b1b      	ldr	r3, [pc, #108]	@ (8000c18 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d10b      	bne.n	8000bca <HAL_GPIO_EXTI_Callback+0x3e>
		if (currentMode == MODE_STOP1){
 8000bb2:	4b19      	ldr	r3, [pc, #100]	@ (8000c18 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	2b02      	cmp	r3, #2
 8000bb8:	d101      	bne.n	8000bbe <HAL_GPIO_EXTI_Callback+0x32>
			// Resume the SysTick increment
			HAL_ResumeTick();
 8000bba:	f000 fb21 	bl	8001200 <HAL_ResumeTick>
		}
		// (Re)Initialize the peripherals
		HAL_Init(); 			// all peripherals, Flash interface and SysTick
 8000bbe:	f000 fa77 	bl	80010b0 <HAL_Init>
		MX_GPIO_Init();			// GPIO
 8000bc2:	f7ff ff71 	bl	8000aa8 <MX_GPIO_Init>
		MX_USART2_UART_Init(); 	// USART2
 8000bc6:	f7ff ff23 	bl	8000a10 <MX_USART2_UART_Init>
	}
    /* If user button 1 (UB1, on PA0) is pressed,
     * we are currently in STOP1 mode, so no change.
     */
	if (GPIO_Pin == UB1_Pin){
 8000bca:	88fb      	ldrh	r3, [r7, #6]
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d102      	bne.n	8000bd6 <HAL_GPIO_EXTI_Callback+0x4a>
		last_button_pin = UB1_Pin;
 8000bd0:	4b10      	ldr	r3, [pc, #64]	@ (8000c14 <HAL_GPIO_EXTI_Callback+0x88>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	801a      	strh	r2, [r3, #0]
	}

	/* If user button 2 (UB2, on PA1) is pressed,
	 * switch mode to LPRun mode.
	 */
	if (GPIO_Pin == UB2_Pin){
 8000bd6:	88fb      	ldrh	r3, [r7, #6]
 8000bd8:	2b02      	cmp	r3, #2
 8000bda:	d108      	bne.n	8000bee <HAL_GPIO_EXTI_Callback+0x62>
		printf("Pression du Bouton 2 détectée.\r\n");
 8000bdc:	480f      	ldr	r0, [pc, #60]	@ (8000c1c <HAL_GPIO_EXTI_Callback+0x90>)
 8000bde:	f003 f8db 	bl	8003d98 <puts>
		printf("Le µCU entrera en mode LPRun.\r\n");
 8000be2:	480f      	ldr	r0, [pc, #60]	@ (8000c20 <HAL_GPIO_EXTI_Callback+0x94>)
 8000be4:	f003 f8d8 	bl	8003d98 <puts>
		last_button_pin = UB2_Pin;
 8000be8:	4b0a      	ldr	r3, [pc, #40]	@ (8000c14 <HAL_GPIO_EXTI_Callback+0x88>)
 8000bea:	2202      	movs	r2, #2
 8000bec:	801a      	strh	r2, [r3, #0]
	}

	/* If user button 3 (UB3, on PC6) is pressed,
	 * switch mode to Run mode.
	 */
	if (GPIO_Pin == UB3_Pin){
 8000bee:	88fb      	ldrh	r3, [r7, #6]
 8000bf0:	2b40      	cmp	r3, #64	@ 0x40
 8000bf2:	d108      	bne.n	8000c06 <HAL_GPIO_EXTI_Callback+0x7a>
		printf("Pression du Bouton 3 détectée.\r\n");
 8000bf4:	480b      	ldr	r0, [pc, #44]	@ (8000c24 <HAL_GPIO_EXTI_Callback+0x98>)
 8000bf6:	f003 f8cf 	bl	8003d98 <puts>
		printf("Le µCU entrera en mode Run.\r\n");
 8000bfa:	480b      	ldr	r0, [pc, #44]	@ (8000c28 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000bfc:	f003 f8cc 	bl	8003d98 <puts>
		last_button_pin = UB3_Pin;
 8000c00:	4b04      	ldr	r3, [pc, #16]	@ (8000c14 <HAL_GPIO_EXTI_Callback+0x88>)
 8000c02:	2240      	movs	r2, #64	@ 0x40
 8000c04:	801a      	strh	r2, [r3, #0]
		// Set the current mode to STOP1
		//currentMode = MODE_RUN;
	}
}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	2000011d 	.word	0x2000011d
 8000c14:	20000000 	.word	0x20000000
 8000c18:	2000011c 	.word	0x2000011c
 8000c1c:	08004b34 	.word	0x08004b34
 8000c20:	08004b58 	.word	0x08004b58
 8000c24:	08004b78 	.word	0x08004b78
 8000c28:	08004b9c 	.word	0x08004b9c

08000c2c <Switch_Mode>:
  * 	GPIO_Pin_0 || UB1_Pin sets the CPU to STOP1 mode
  * 	GPIO_Pin_1 || UB2_Pin sets the CPU to LPRun mode
  * 	GPIO_Pin_6 || UB3_Pin sets the CPU to Run mode
  * @retval None
  */
void Switch_Mode(uint16_t GPIO_Pin){
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	80fb      	strh	r3, [r7, #6]
	button_pressed = 1;
 8000c36:	4b4f      	ldr	r3, [pc, #316]	@ (8000d74 <Switch_Mode+0x148>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	701a      	strb	r2, [r3, #0]
	// Cases differ depending on the button pressed

	/* If user button 1 (UB1, on PA0) is pressed,
	 * switch mode to STOP1 mode.
	 */
	if (GPIO_Pin == UB1_Pin){
 8000c3c:	88fb      	ldrh	r3, [r7, #6]
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d12f      	bne.n	8000ca2 <Switch_Mode+0x76>
		//printf("Pression du Bouton 1 détectée.\r\n");
		// Launch blue LED sequence (3 quick blinks)
		for (int _ = 0; _ < 6; _++){
 8000c42:	2300      	movs	r3, #0
 8000c44:	617b      	str	r3, [r7, #20]
 8000c46:	e00a      	b.n	8000c5e <Switch_Mode+0x32>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);
 8000c48:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c4c:	484a      	ldr	r0, [pc, #296]	@ (8000d78 <Switch_Mode+0x14c>)
 8000c4e:	f000 fd68 	bl	8001722 <HAL_GPIO_TogglePin>
			delay(50);
 8000c52:	2032      	movs	r0, #50	@ 0x32
 8000c54:	f7ff fcb0 	bl	80005b8 <delay>
		for (int _ = 0; _ < 6; _++){
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	617b      	str	r3, [r7, #20]
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	2b05      	cmp	r3, #5
 8000c62:	ddf1      	ble.n	8000c48 <Switch_Mode+0x1c>
		}

		// If we are in LPRun or Run mode, switch to STOP1 mode
		if (currentMode == MODE_RUN || currentMode == MODE_LPRUN){
 8000c64:	4b45      	ldr	r3, [pc, #276]	@ (8000d7c <Switch_Mode+0x150>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d003      	beq.n	8000c74 <Switch_Mode+0x48>
 8000c6c:	4b43      	ldr	r3, [pc, #268]	@ (8000d7c <Switch_Mode+0x150>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d116      	bne.n	8000ca2 <Switch_Mode+0x76>
			// Procedure to enter STOP1 mode is the same, but exiting LPRun is an extra step
			if (currentMode == MODE_LPRUN){
 8000c74:	4b41      	ldr	r3, [pc, #260]	@ (8000d7c <Switch_Mode+0x150>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d104      	bne.n	8000c86 <Switch_Mode+0x5a>
				// Exit first from LPRun, working back at 16 MHz
				Exit_LowPowerRunMode(1);
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	f7ff fdc2 	bl	8000806 <Exit_LowPowerRunMode>
				// Reset the USART2 peripheral, as HCLK1 frequency is now different
				MX_USART2_UART_Init();
 8000c82:	f7ff fec5 	bl	8000a10 <MX_USART2_UART_Init>
			}
			printf("Le µCU entre en mode STOP1 via WFI.\r\n");
 8000c86:	483e      	ldr	r0, [pc, #248]	@ (8000d80 <Switch_Mode+0x154>)
 8000c88:	f003 f886 	bl	8003d98 <puts>
			// Suspend the SysTick increment
			HAL_SuspendTick();
 8000c8c:	f000 faaa 	bl	80011e4 <HAL_SuspendTick>
			// Clock-gating the USART2 peripheral
			__HAL_RCC_USART2_CLK_SLEEP_DISABLE();
 8000c90:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000c94:	f7ff fe16 	bl	80008c4 <LL_APB1_GRP1_DisableClockSleep>
			// Set the current mode to STOP1
			currentMode = MODE_STOP1;
 8000c98:	4b38      	ldr	r3, [pc, #224]	@ (8000d7c <Switch_Mode+0x150>)
 8000c9a:	2202      	movs	r2, #2
 8000c9c:	701a      	strb	r2, [r3, #0]
			Enter_STOP1Mode_OnWFI();
 8000c9e:	f7ff fdc3 	bl	8000828 <Enter_STOP1Mode_OnWFI>
	}

	/* If user button 2 (UB2, on PA1) is pressed,
	 * switch mode to LPRun mode.
	 */
	if (GPIO_Pin == UB2_Pin){
 8000ca2:	88fb      	ldrh	r3, [r7, #6]
 8000ca4:	2b02      	cmp	r3, #2
 8000ca6:	d12c      	bne.n	8000d02 <Switch_Mode+0xd6>
		//printf("Pression du Bouton 2 détectée.\r\n");
		// Launch green LED sequence (3 quick blinks)
		for (int _ = 0; _ < 6; _++){
 8000ca8:	2300      	movs	r3, #0
 8000caa:	613b      	str	r3, [r7, #16]
 8000cac:	e00a      	b.n	8000cc4 <Switch_Mode+0x98>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 8000cae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000cb2:	4831      	ldr	r0, [pc, #196]	@ (8000d78 <Switch_Mode+0x14c>)
 8000cb4:	f000 fd35 	bl	8001722 <HAL_GPIO_TogglePin>
			delay(50);
 8000cb8:	2032      	movs	r0, #50	@ 0x32
 8000cba:	f7ff fc7d 	bl	80005b8 <delay>
		for (int _ = 0; _ < 6; _++){
 8000cbe:	693b      	ldr	r3, [r7, #16]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	613b      	str	r3, [r7, #16]
 8000cc4:	693b      	ldr	r3, [r7, #16]
 8000cc6:	2b05      	cmp	r3, #5
 8000cc8:	ddf1      	ble.n	8000cae <Switch_Mode+0x82>
		}

		// If we are in Run or STOP1 mode, switch to LPRun mode
		if (currentMode == MODE_RUN || currentMode == MODE_STOP1){
 8000cca:	4b2c      	ldr	r3, [pc, #176]	@ (8000d7c <Switch_Mode+0x150>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d003      	beq.n	8000cda <Switch_Mode+0xae>
 8000cd2:	4b2a      	ldr	r3, [pc, #168]	@ (8000d7c <Switch_Mode+0x150>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	2b02      	cmp	r3, #2
 8000cd8:	d113      	bne.n	8000d02 <Switch_Mode+0xd6>
			// Procedure to enter LPRun mode is the same, but exiting STOP1 requires extra steps
			if (currentMode == MODE_STOP1){
 8000cda:	4b28      	ldr	r3, [pc, #160]	@ (8000d7c <Switch_Mode+0x150>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	2b02      	cmp	r3, #2
 8000ce0:	d105      	bne.n	8000cee <Switch_Mode+0xc2>
				// Resume the SysTick increment
				HAL_ResumeTick();
 8000ce2:	f000 fa8d 	bl	8001200 <HAL_ResumeTick>
				// (Re)Initialize the peripherals
				HAL_Init(); 			// all peripherals, Flash interface and SysTick
 8000ce6:	f000 f9e3 	bl	80010b0 <HAL_Init>
				MX_GPIO_Init();			// GPIO
 8000cea:	f7ff fedd 	bl	8000aa8 <MX_GPIO_Init>
			}
			// Reset the USART2 peripheral
			MX_USART2_UART_Init();
 8000cee:	f7ff fe8f 	bl	8000a10 <MX_USART2_UART_Init>
			printf("Le µCU entre en mode LPRun.\r\n\r\n");
 8000cf2:	4824      	ldr	r0, [pc, #144]	@ (8000d84 <Switch_Mode+0x158>)
 8000cf4:	f003 f850 	bl	8003d98 <puts>
			// Set the current mode to LPRun
			currentMode = MODE_LPRUN;
 8000cf8:	4b20      	ldr	r3, [pc, #128]	@ (8000d7c <Switch_Mode+0x150>)
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	701a      	strb	r2, [r3, #0]
			// Enter LPRun mode
			Enter_LowPowerRunMode();
 8000cfe:	f7ff fd6f 	bl	80007e0 <Enter_LowPowerRunMode>
	}

	/* If user button 3 (UB3, on PC6) is pressed,
	 * switch mode to Run mode.
	 */
	if (GPIO_Pin == UB3_Pin){
 8000d02:	88fb      	ldrh	r3, [r7, #6]
 8000d04:	2b40      	cmp	r3, #64	@ 0x40
 8000d06:	d131      	bne.n	8000d6c <Switch_Mode+0x140>
		//printf("Pression du Bouton 3 détectée.\r\n");
		// Launch red LED sequence (2 slow blinks)
		for (int _ = 0; _ < 4; _++){
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	e00a      	b.n	8000d24 <Switch_Mode+0xf8>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_11);
 8000d0e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d12:	4819      	ldr	r0, [pc, #100]	@ (8000d78 <Switch_Mode+0x14c>)
 8000d14:	f000 fd05 	bl	8001722 <HAL_GPIO_TogglePin>
			delay(200);
 8000d18:	20c8      	movs	r0, #200	@ 0xc8
 8000d1a:	f7ff fc4d 	bl	80005b8 <delay>
		for (int _ = 0; _ < 4; _++){
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	3301      	adds	r3, #1
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	2b03      	cmp	r3, #3
 8000d28:	ddf1      	ble.n	8000d0e <Switch_Mode+0xe2>
		}

		// If we are in LPRun or STOP1 mode, switch to Run mode
		if (currentMode == MODE_LPRUN || currentMode == MODE_STOP1){
 8000d2a:	4b14      	ldr	r3, [pc, #80]	@ (8000d7c <Switch_Mode+0x150>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d003      	beq.n	8000d3a <Switch_Mode+0x10e>
 8000d32:	4b12      	ldr	r3, [pc, #72]	@ (8000d7c <Switch_Mode+0x150>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	2b02      	cmp	r3, #2
 8000d38:	d118      	bne.n	8000d6c <Switch_Mode+0x140>
			if (currentMode == MODE_LPRUN){
 8000d3a:	4b10      	ldr	r3, [pc, #64]	@ (8000d7c <Switch_Mode+0x150>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d102      	bne.n	8000d48 <Switch_Mode+0x11c>
				// Exit first from LPRun, working back at 16 MHz
				Exit_LowPowerRunMode(1);
 8000d42:	2001      	movs	r0, #1
 8000d44:	f7ff fd5f 	bl	8000806 <Exit_LowPowerRunMode>
			} if (currentMode == MODE_STOP1){
 8000d48:	4b0c      	ldr	r3, [pc, #48]	@ (8000d7c <Switch_Mode+0x150>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2b02      	cmp	r3, #2
 8000d4e:	d101      	bne.n	8000d54 <Switch_Mode+0x128>
				// Resume the SysTick increment
				HAL_ResumeTick();
 8000d50:	f000 fa56 	bl	8001200 <HAL_ResumeTick>
			}
			// (Re)Initialize the peripherals
			HAL_Init(); 			// all peripherals, Flash interface and SysTick
 8000d54:	f000 f9ac 	bl	80010b0 <HAL_Init>
			MX_GPIO_Init();			// GPIO
 8000d58:	f7ff fea6 	bl	8000aa8 <MX_GPIO_Init>
			MX_USART2_UART_Init(); 	// USART2
 8000d5c:	f7ff fe58 	bl	8000a10 <MX_USART2_UART_Init>
			printf("Le µCU entre en mode Run.\r\n\r\n");
 8000d60:	4809      	ldr	r0, [pc, #36]	@ (8000d88 <Switch_Mode+0x15c>)
 8000d62:	f003 f819 	bl	8003d98 <puts>
			// Set the current mode to STOP1
			currentMode = MODE_RUN;
 8000d66:	4b05      	ldr	r3, [pc, #20]	@ (8000d7c <Switch_Mode+0x150>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000d6c:	bf00      	nop
 8000d6e:	3718      	adds	r7, #24
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	2000011d 	.word	0x2000011d
 8000d78:	48000400 	.word	0x48000400
 8000d7c:	2000011c 	.word	0x2000011c
 8000d80:	08004bbc 	.word	0x08004bbc
 8000d84:	08004be4 	.word	0x08004be4
 8000d88:	08004c04 	.word	0x08004c04

08000d8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d90:	b672      	cpsid	i
}
 8000d92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d94:	bf00      	nop
 8000d96:	e7fd      	b.n	8000d94 <Error_Handler+0x8>

08000d98 <LL_AHB2_GRP1_EnableClock>:
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000da0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000da4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000da6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000db0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000db4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4013      	ands	r3, r2
 8000dba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000dbc:	68fb      	ldr	r3, [r7, #12]
}
 8000dbe:	bf00      	nop
 8000dc0:	3714      	adds	r7, #20
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bc80      	pop	{r7}
 8000dc6:	4770      	bx	lr

08000dc8 <LL_APB1_GRP1_EnableClock>:
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000dd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000dd4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000dd6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000de0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000de4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4013      	ands	r3, r2
 8000dea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000dec:	68fb      	ldr	r3, [r7, #12]
}
 8000dee:	bf00      	nop
 8000df0:	3714      	adds	r7, #20
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bc80      	pop	{r7}
 8000df6:	4770      	bx	lr

08000df8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bc80      	pop	{r7}
 8000e02:	4770      	bx	lr

08000e04 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b096      	sub	sp, #88	@ 0x58
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e1c:	f107 030c 	add.w	r3, r7, #12
 8000e20:	2238      	movs	r2, #56	@ 0x38
 8000e22:	2100      	movs	r1, #0
 8000e24:	4618      	mov	r0, r3
 8000e26:	f003 f897 	bl	8003f58 <memset>
  if(huart->Instance==USART2)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a17      	ldr	r2, [pc, #92]	@ (8000e8c <HAL_UART_MspInit+0x88>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d126      	bne.n	8000e82 <HAL_UART_MspInit+0x7e>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e34:	2302      	movs	r3, #2
 8000e36:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e38:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 8000e3c:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e3e:	f107 030c 	add.w	r3, r7, #12
 8000e42:	4618      	mov	r0, r3
 8000e44:	f001 ff3a 	bl	8002cbc <HAL_RCCEx_PeriphCLKConfig>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e4e:	f7ff ff9d 	bl	8000d8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e52:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000e56:	f7ff ffb7 	bl	8000dc8 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5a:	2001      	movs	r0, #1
 8000e5c:	f7ff ff9c 	bl	8000d98 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8000e60:	230c      	movs	r3, #12
 8000e62:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e64:	2302      	movs	r3, #2
 8000e66:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e70:	2307      	movs	r3, #7
 8000e72:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e74:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000e78:	4619      	mov	r1, r3
 8000e7a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e7e:	f000 fad9 	bl	8001434 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000e82:	bf00      	nop
 8000e84:	3758      	adds	r7, #88	@ 0x58
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40004400 	.word	0x40004400

08000e90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e94:	bf00      	nop
 8000e96:	e7fd      	b.n	8000e94 <NMI_Handler+0x4>

08000e98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e9c:	bf00      	nop
 8000e9e:	e7fd      	b.n	8000e9c <HardFault_Handler+0x4>

08000ea0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea4:	bf00      	nop
 8000ea6:	e7fd      	b.n	8000ea4 <MemManage_Handler+0x4>

08000ea8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eac:	bf00      	nop
 8000eae:	e7fd      	b.n	8000eac <BusFault_Handler+0x4>

08000eb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb4:	bf00      	nop
 8000eb6:	e7fd      	b.n	8000eb4 <UsageFault_Handler+0x4>

08000eb8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bc80      	pop	{r7}
 8000ec2:	4770      	bx	lr

08000ec4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bc80      	pop	{r7}
 8000ece:	4770      	bx	lr

08000ed0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bc80      	pop	{r7}
 8000eda:	4770      	bx	lr

08000edc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ee0:	f000 f940 	bl	8001164 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line 0 Interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UB1_Pin);
 8000eec:	2001      	movs	r0, #1
 8000eee:	f000 fc31 	bl	8001754 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UB2_Pin);
 8000efa:	2002      	movs	r0, #2
 8000efc:	f000 fc2a 	bl	8001754 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [9:5] Interrupt.
  */
void EXTI9_5_IRQHandler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UB3_Pin);
 8000f08:	2040      	movs	r0, #64	@ 0x40
 8000f0a:	f000 fc23 	bl	8001754 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b086      	sub	sp, #24
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	60f8      	str	r0, [r7, #12]
 8000f1a:	60b9      	str	r1, [r7, #8]
 8000f1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f1e:	2300      	movs	r3, #0
 8000f20:	617b      	str	r3, [r7, #20]
 8000f22:	e00a      	b.n	8000f3a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f24:	f3af 8000 	nop.w
 8000f28:	4601      	mov	r1, r0
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	1c5a      	adds	r2, r3, #1
 8000f2e:	60ba      	str	r2, [r7, #8]
 8000f30:	b2ca      	uxtb	r2, r1
 8000f32:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	3301      	adds	r3, #1
 8000f38:	617b      	str	r3, [r7, #20]
 8000f3a:	697a      	ldr	r2, [r7, #20]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	dbf0      	blt.n	8000f24 <_read+0x12>
  }

  return len;
 8000f42:	687b      	ldr	r3, [r7, #4]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3718      	adds	r7, #24
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]
 8000f5c:	e009      	b.n	8000f72 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	1c5a      	adds	r2, r3, #1
 8000f62:	60ba      	str	r2, [r7, #8]
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff fb14 	bl	8000594 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	617b      	str	r3, [r7, #20]
 8000f72:	697a      	ldr	r2, [r7, #20]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	429a      	cmp	r2, r3
 8000f78:	dbf1      	blt.n	8000f5e <_write+0x12>
  }
  return len;
 8000f7a:	687b      	ldr	r3, [r7, #4]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3718      	adds	r7, #24
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <_close>:

int _close(int file)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bc80      	pop	{r7}
 8000f98:	4770      	bx	lr

08000f9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	b083      	sub	sp, #12
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
 8000fa2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000faa:	605a      	str	r2, [r3, #4]
  return 0;
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bc80      	pop	{r7}
 8000fb6:	4770      	bx	lr

08000fb8 <_isatty>:

int _isatty(int file)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fc0:	2301      	movs	r3, #1
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bc80      	pop	{r7}
 8000fca:	4770      	bx	lr

08000fcc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3714      	adds	r7, #20
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bc80      	pop	{r7}
 8000fe2:	4770      	bx	lr

08000fe4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fec:	4a14      	ldr	r2, [pc, #80]	@ (8001040 <_sbrk+0x5c>)
 8000fee:	4b15      	ldr	r3, [pc, #84]	@ (8001044 <_sbrk+0x60>)
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ff8:	4b13      	ldr	r3, [pc, #76]	@ (8001048 <_sbrk+0x64>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d102      	bne.n	8001006 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001000:	4b11      	ldr	r3, [pc, #68]	@ (8001048 <_sbrk+0x64>)
 8001002:	4a12      	ldr	r2, [pc, #72]	@ (800104c <_sbrk+0x68>)
 8001004:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001006:	4b10      	ldr	r3, [pc, #64]	@ (8001048 <_sbrk+0x64>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4413      	add	r3, r2
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	429a      	cmp	r2, r3
 8001012:	d207      	bcs.n	8001024 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001014:	f002 ffee 	bl	8003ff4 <__errno>
 8001018:	4603      	mov	r3, r0
 800101a:	220c      	movs	r2, #12
 800101c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800101e:	f04f 33ff 	mov.w	r3, #4294967295
 8001022:	e009      	b.n	8001038 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001024:	4b08      	ldr	r3, [pc, #32]	@ (8001048 <_sbrk+0x64>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800102a:	4b07      	ldr	r3, [pc, #28]	@ (8001048 <_sbrk+0x64>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4413      	add	r3, r2
 8001032:	4a05      	ldr	r2, [pc, #20]	@ (8001048 <_sbrk+0x64>)
 8001034:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001036:	68fb      	ldr	r3, [r7, #12]
}
 8001038:	4618      	mov	r0, r3
 800103a:	3718      	adds	r7, #24
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20010000 	.word	0x20010000
 8001044:	00000400 	.word	0x00000400
 8001048:	20000120 	.word	0x20000120
 800104c:	20000278 	.word	0x20000278

08001050 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	bc80      	pop	{r7}
 800105a:	4770      	bx	lr

0800105c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800105c:	480d      	ldr	r0, [pc, #52]	@ (8001094 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800105e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001060:	f7ff fff6 	bl	8001050 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001064:	480c      	ldr	r0, [pc, #48]	@ (8001098 <LoopForever+0x6>)
  ldr r1, =_edata
 8001066:	490d      	ldr	r1, [pc, #52]	@ (800109c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001068:	4a0d      	ldr	r2, [pc, #52]	@ (80010a0 <LoopForever+0xe>)
  movs r3, #0
 800106a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800106c:	e002      	b.n	8001074 <LoopCopyDataInit>

0800106e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800106e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001070:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001072:	3304      	adds	r3, #4

08001074 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001074:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001076:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001078:	d3f9      	bcc.n	800106e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800107a:	4a0a      	ldr	r2, [pc, #40]	@ (80010a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800107c:	4c0a      	ldr	r4, [pc, #40]	@ (80010a8 <LoopForever+0x16>)
  movs r3, #0
 800107e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001080:	e001      	b.n	8001086 <LoopFillZerobss>

08001082 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001082:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001084:	3204      	adds	r2, #4

08001086 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001086:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001088:	d3fb      	bcc.n	8001082 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800108a:	f002 ffb9 	bl	8004000 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800108e:	f7ff fc2b 	bl	80008e8 <main>

08001092 <LoopForever>:

LoopForever:
    b LoopForever
 8001092:	e7fe      	b.n	8001092 <LoopForever>
  ldr   r0, =_estack
 8001094:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001098:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800109c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80010a0:	08004d4c 	.word	0x08004d4c
  ldr r2, =_sbss
 80010a4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80010a8:	20000274 	.word	0x20000274

080010ac <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010ac:	e7fe      	b.n	80010ac <ADC_IRQHandler>
	...

080010b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010b6:	2300      	movs	r3, #0
 80010b8:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ba:	2003      	movs	r0, #3
 80010bc:	f000 f97a 	bl	80013b4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80010c0:	f001 fc1e 	bl	8002900 <HAL_RCC_GetHCLKFreq>
 80010c4:	4603      	mov	r3, r0
 80010c6:	4a09      	ldr	r2, [pc, #36]	@ (80010ec <HAL_Init+0x3c>)
 80010c8:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010ca:	2000      	movs	r0, #0
 80010cc:	f000 f810 	bl	80010f0 <HAL_InitTick>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d002      	beq.n	80010dc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	71fb      	strb	r3, [r7, #7]
 80010da:	e001      	b.n	80010e0 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010dc:	f7ff fe8c 	bl	8000df8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010e0:	79fb      	ldrb	r3, [r7, #7]
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000004 	.word	0x20000004

080010f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010f8:	2300      	movs	r3, #0
 80010fa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80010fc:	4b17      	ldr	r3, [pc, #92]	@ (800115c <HAL_InitTick+0x6c>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d024      	beq.n	800114e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001104:	f001 fbfc 	bl	8002900 <HAL_RCC_GetHCLKFreq>
 8001108:	4602      	mov	r2, r0
 800110a:	4b14      	ldr	r3, [pc, #80]	@ (800115c <HAL_InitTick+0x6c>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	4619      	mov	r1, r3
 8001110:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001114:	fbb3 f3f1 	udiv	r3, r3, r1
 8001118:	fbb2 f3f3 	udiv	r3, r2, r3
 800111c:	4618      	mov	r0, r3
 800111e:	f000 f97c 	bl	800141a <HAL_SYSTICK_Config>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d10f      	bne.n	8001148 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2b0f      	cmp	r3, #15
 800112c:	d809      	bhi.n	8001142 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800112e:	2200      	movs	r2, #0
 8001130:	6879      	ldr	r1, [r7, #4]
 8001132:	f04f 30ff 	mov.w	r0, #4294967295
 8001136:	f000 f948 	bl	80013ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800113a:	4a09      	ldr	r2, [pc, #36]	@ (8001160 <HAL_InitTick+0x70>)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6013      	str	r3, [r2, #0]
 8001140:	e007      	b.n	8001152 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	73fb      	strb	r3, [r7, #15]
 8001146:	e004      	b.n	8001152 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	73fb      	strb	r3, [r7, #15]
 800114c:	e001      	b.n	8001152 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001152:	7bfb      	ldrb	r3, [r7, #15]
}
 8001154:	4618      	mov	r0, r3
 8001156:	3710      	adds	r7, #16
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	2000000c 	.word	0x2000000c
 8001160:	20000008 	.word	0x20000008

08001164 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001168:	4b05      	ldr	r3, [pc, #20]	@ (8001180 <HAL_IncTick+0x1c>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	461a      	mov	r2, r3
 800116e:	4b05      	ldr	r3, [pc, #20]	@ (8001184 <HAL_IncTick+0x20>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4413      	add	r3, r2
 8001174:	4a03      	ldr	r2, [pc, #12]	@ (8001184 <HAL_IncTick+0x20>)
 8001176:	6013      	str	r3, [r2, #0]
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	bc80      	pop	{r7}
 800117e:	4770      	bx	lr
 8001180:	2000000c 	.word	0x2000000c
 8001184:	20000124 	.word	0x20000124

08001188 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  return uwTick;
 800118c:	4b02      	ldr	r3, [pc, #8]	@ (8001198 <HAL_GetTick+0x10>)
 800118e:	681b      	ldr	r3, [r3, #0]
}
 8001190:	4618      	mov	r0, r3
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr
 8001198:	20000124 	.word	0x20000124

0800119c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011a4:	f7ff fff0 	bl	8001188 <HAL_GetTick>
 80011a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011b4:	d005      	beq.n	80011c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011b6:	4b0a      	ldr	r3, [pc, #40]	@ (80011e0 <HAL_Delay+0x44>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	461a      	mov	r2, r3
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	4413      	add	r3, r2
 80011c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011c2:	bf00      	nop
 80011c4:	f7ff ffe0 	bl	8001188 <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	68fa      	ldr	r2, [r7, #12]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d8f7      	bhi.n	80011c4 <HAL_Delay+0x28>
  {
  }
}
 80011d4:	bf00      	nop
 80011d6:	bf00      	nop
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	2000000c 	.word	0x2000000c

080011e4 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80011e8:	4b04      	ldr	r3, [pc, #16]	@ (80011fc <HAL_SuspendTick+0x18>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a03      	ldr	r2, [pc, #12]	@ (80011fc <HAL_SuspendTick+0x18>)
 80011ee:	f023 0302 	bic.w	r3, r3, #2
 80011f2:	6013      	str	r3, [r2, #0]
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bc80      	pop	{r7}
 80011fa:	4770      	bx	lr
 80011fc:	e000e010 	.word	0xe000e010

08001200 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001204:	4b04      	ldr	r3, [pc, #16]	@ (8001218 <HAL_ResumeTick+0x18>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a03      	ldr	r2, [pc, #12]	@ (8001218 <HAL_ResumeTick+0x18>)
 800120a:	f043 0302 	orr.w	r3, r3, #2
 800120e:	6013      	str	r3, [r2, #0]
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	bc80      	pop	{r7}
 8001216:	4770      	bx	lr
 8001218:	e000e010 	.word	0xe000e010

0800121c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800122c:	4b0c      	ldr	r3, [pc, #48]	@ (8001260 <__NVIC_SetPriorityGrouping+0x44>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001232:	68ba      	ldr	r2, [r7, #8]
 8001234:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001238:	4013      	ands	r3, r2
 800123a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001244:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001248:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800124c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800124e:	4a04      	ldr	r2, [pc, #16]	@ (8001260 <__NVIC_SetPriorityGrouping+0x44>)
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	60d3      	str	r3, [r2, #12]
}
 8001254:	bf00      	nop
 8001256:	3714      	adds	r7, #20
 8001258:	46bd      	mov	sp, r7
 800125a:	bc80      	pop	{r7}
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001268:	4b04      	ldr	r3, [pc, #16]	@ (800127c <__NVIC_GetPriorityGrouping+0x18>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	0a1b      	lsrs	r3, r3, #8
 800126e:	f003 0307 	and.w	r3, r3, #7
}
 8001272:	4618      	mov	r0, r3
 8001274:	46bd      	mov	sp, r7
 8001276:	bc80      	pop	{r7}
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800128a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128e:	2b00      	cmp	r3, #0
 8001290:	db0b      	blt.n	80012aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	f003 021f 	and.w	r2, r3, #31
 8001298:	4906      	ldr	r1, [pc, #24]	@ (80012b4 <__NVIC_EnableIRQ+0x34>)
 800129a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129e:	095b      	lsrs	r3, r3, #5
 80012a0:	2001      	movs	r0, #1
 80012a2:	fa00 f202 	lsl.w	r2, r0, r2
 80012a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bc80      	pop	{r7}
 80012b2:	4770      	bx	lr
 80012b4:	e000e100 	.word	0xe000e100

080012b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	6039      	str	r1, [r7, #0]
 80012c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	db0a      	blt.n	80012e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	b2da      	uxtb	r2, r3
 80012d0:	490c      	ldr	r1, [pc, #48]	@ (8001304 <__NVIC_SetPriority+0x4c>)
 80012d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d6:	0112      	lsls	r2, r2, #4
 80012d8:	b2d2      	uxtb	r2, r2
 80012da:	440b      	add	r3, r1
 80012dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012e0:	e00a      	b.n	80012f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	b2da      	uxtb	r2, r3
 80012e6:	4908      	ldr	r1, [pc, #32]	@ (8001308 <__NVIC_SetPriority+0x50>)
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	f003 030f 	and.w	r3, r3, #15
 80012ee:	3b04      	subs	r3, #4
 80012f0:	0112      	lsls	r2, r2, #4
 80012f2:	b2d2      	uxtb	r2, r2
 80012f4:	440b      	add	r3, r1
 80012f6:	761a      	strb	r2, [r3, #24]
}
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc80      	pop	{r7}
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	e000e100 	.word	0xe000e100
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800130c:	b480      	push	{r7}
 800130e:	b089      	sub	sp, #36	@ 0x24
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	f003 0307 	and.w	r3, r3, #7
 800131e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	f1c3 0307 	rsb	r3, r3, #7
 8001326:	2b04      	cmp	r3, #4
 8001328:	bf28      	it	cs
 800132a:	2304      	movcs	r3, #4
 800132c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	3304      	adds	r3, #4
 8001332:	2b06      	cmp	r3, #6
 8001334:	d902      	bls.n	800133c <NVIC_EncodePriority+0x30>
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	3b03      	subs	r3, #3
 800133a:	e000      	b.n	800133e <NVIC_EncodePriority+0x32>
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001340:	f04f 32ff 	mov.w	r2, #4294967295
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43da      	mvns	r2, r3
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	401a      	ands	r2, r3
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001354:	f04f 31ff 	mov.w	r1, #4294967295
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	fa01 f303 	lsl.w	r3, r1, r3
 800135e:	43d9      	mvns	r1, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001364:	4313      	orrs	r3, r2
         );
}
 8001366:	4618      	mov	r0, r3
 8001368:	3724      	adds	r7, #36	@ 0x24
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr

08001370 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	3b01      	subs	r3, #1
 800137c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001380:	d301      	bcc.n	8001386 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001382:	2301      	movs	r3, #1
 8001384:	e00f      	b.n	80013a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001386:	4a0a      	ldr	r2, [pc, #40]	@ (80013b0 <SysTick_Config+0x40>)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	3b01      	subs	r3, #1
 800138c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800138e:	210f      	movs	r1, #15
 8001390:	f04f 30ff 	mov.w	r0, #4294967295
 8001394:	f7ff ff90 	bl	80012b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001398:	4b05      	ldr	r3, [pc, #20]	@ (80013b0 <SysTick_Config+0x40>)
 800139a:	2200      	movs	r2, #0
 800139c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800139e:	4b04      	ldr	r3, [pc, #16]	@ (80013b0 <SysTick_Config+0x40>)
 80013a0:	2207      	movs	r2, #7
 80013a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	e000e010 	.word	0xe000e010

080013b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f7ff ff2d 	bl	800121c <__NVIC_SetPriorityGrouping>
}
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b086      	sub	sp, #24
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	4603      	mov	r3, r0
 80013d2:	60b9      	str	r1, [r7, #8]
 80013d4:	607a      	str	r2, [r7, #4]
 80013d6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013d8:	f7ff ff44 	bl	8001264 <__NVIC_GetPriorityGrouping>
 80013dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	68b9      	ldr	r1, [r7, #8]
 80013e2:	6978      	ldr	r0, [r7, #20]
 80013e4:	f7ff ff92 	bl	800130c <NVIC_EncodePriority>
 80013e8:	4602      	mov	r2, r0
 80013ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ee:	4611      	mov	r1, r2
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff ff61 	bl	80012b8 <__NVIC_SetPriority>
}
 80013f6:	bf00      	nop
 80013f8:	3718      	adds	r7, #24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b082      	sub	sp, #8
 8001402:	af00      	add	r7, sp, #0
 8001404:	4603      	mov	r3, r0
 8001406:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff ff37 	bl	8001280 <__NVIC_EnableIRQ>
}
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b082      	sub	sp, #8
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f7ff ffa4 	bl	8001370 <SysTick_Config>
 8001428:	4603      	mov	r3, r0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001434:	b480      	push	{r7}
 8001436:	b087      	sub	sp, #28
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001442:	e140      	b.n	80016c6 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	2101      	movs	r1, #1
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	fa01 f303 	lsl.w	r3, r1, r3
 8001450:	4013      	ands	r3, r2
 8001452:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2b00      	cmp	r3, #0
 8001458:	f000 8132 	beq.w	80016c0 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f003 0303 	and.w	r3, r3, #3
 8001464:	2b01      	cmp	r3, #1
 8001466:	d005      	beq.n	8001474 <HAL_GPIO_Init+0x40>
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f003 0303 	and.w	r3, r3, #3
 8001470:	2b02      	cmp	r3, #2
 8001472:	d130      	bne.n	80014d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	2203      	movs	r2, #3
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	43db      	mvns	r3, r3
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	4013      	ands	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	68da      	ldr	r2, [r3, #12]
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	4313      	orrs	r3, r2
 800149c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014aa:	2201      	movs	r2, #1
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	43db      	mvns	r3, r3
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	4013      	ands	r3, r2
 80014b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	091b      	lsrs	r3, r3, #4
 80014c0:	f003 0201 	and.w	r2, r3, #1
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f003 0303 	and.w	r3, r3, #3
 80014de:	2b03      	cmp	r3, #3
 80014e0:	d017      	beq.n	8001512 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	2203      	movs	r2, #3
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	43db      	mvns	r3, r3
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	4013      	ands	r3, r2
 80014f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	689a      	ldr	r2, [r3, #8]
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	4313      	orrs	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f003 0303 	and.w	r3, r3, #3
 800151a:	2b02      	cmp	r3, #2
 800151c:	d123      	bne.n	8001566 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	08da      	lsrs	r2, r3, #3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	3208      	adds	r2, #8
 8001526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800152a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	220f      	movs	r2, #15
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43db      	mvns	r3, r3
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	4013      	ands	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	691a      	ldr	r2, [r3, #16]
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	f003 0307 	and.w	r3, r3, #7
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	4313      	orrs	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	08da      	lsrs	r2, r3, #3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3208      	adds	r2, #8
 8001560:	6939      	ldr	r1, [r7, #16]
 8001562:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	2203      	movs	r2, #3
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43db      	mvns	r3, r3
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	4013      	ands	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f003 0203 	and.w	r2, r3, #3
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	4313      	orrs	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f000 808c 	beq.w	80016c0 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80015a8:	4a4e      	ldr	r2, [pc, #312]	@ (80016e4 <HAL_GPIO_Init+0x2b0>)
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	089b      	lsrs	r3, r3, #2
 80015ae:	3302      	adds	r3, #2
 80015b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	f003 0303 	and.w	r3, r3, #3
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	2207      	movs	r2, #7
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	43db      	mvns	r3, r3
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	4013      	ands	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80015d2:	d00d      	beq.n	80015f0 <HAL_GPIO_Init+0x1bc>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4a44      	ldr	r2, [pc, #272]	@ (80016e8 <HAL_GPIO_Init+0x2b4>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d007      	beq.n	80015ec <HAL_GPIO_Init+0x1b8>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	4a43      	ldr	r2, [pc, #268]	@ (80016ec <HAL_GPIO_Init+0x2b8>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d101      	bne.n	80015e8 <HAL_GPIO_Init+0x1b4>
 80015e4:	2302      	movs	r3, #2
 80015e6:	e004      	b.n	80015f2 <HAL_GPIO_Init+0x1be>
 80015e8:	2307      	movs	r3, #7
 80015ea:	e002      	b.n	80015f2 <HAL_GPIO_Init+0x1be>
 80015ec:	2301      	movs	r3, #1
 80015ee:	e000      	b.n	80015f2 <HAL_GPIO_Init+0x1be>
 80015f0:	2300      	movs	r3, #0
 80015f2:	697a      	ldr	r2, [r7, #20]
 80015f4:	f002 0203 	and.w	r2, r2, #3
 80015f8:	0092      	lsls	r2, r2, #2
 80015fa:	4093      	lsls	r3, r2
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	4313      	orrs	r3, r2
 8001600:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001602:	4938      	ldr	r1, [pc, #224]	@ (80016e4 <HAL_GPIO_Init+0x2b0>)
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	089b      	lsrs	r3, r3, #2
 8001608:	3302      	adds	r3, #2
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001610:	4b37      	ldr	r3, [pc, #220]	@ (80016f0 <HAL_GPIO_Init+0x2bc>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	43db      	mvns	r3, r3
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	4013      	ands	r3, r2
 800161e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d003      	beq.n	8001634 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 800162c:	693a      	ldr	r2, [r7, #16]
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	4313      	orrs	r3, r2
 8001632:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001634:	4a2e      	ldr	r2, [pc, #184]	@ (80016f0 <HAL_GPIO_Init+0x2bc>)
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800163a:	4b2d      	ldr	r3, [pc, #180]	@ (80016f0 <HAL_GPIO_Init+0x2bc>)
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	43db      	mvns	r3, r3
 8001644:	693a      	ldr	r2, [r7, #16]
 8001646:	4013      	ands	r3, r2
 8001648:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d003      	beq.n	800165e <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	4313      	orrs	r3, r2
 800165c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800165e:	4a24      	ldr	r2, [pc, #144]	@ (80016f0 <HAL_GPIO_Init+0x2bc>)
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001664:	4b22      	ldr	r3, [pc, #136]	@ (80016f0 <HAL_GPIO_Init+0x2bc>)
 8001666:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800166a:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	43db      	mvns	r3, r3
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	4013      	ands	r3, r2
 8001674:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d003      	beq.n	800168a <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	4313      	orrs	r3, r2
 8001688:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800168a:	4a19      	ldr	r2, [pc, #100]	@ (80016f0 <HAL_GPIO_Init+0x2bc>)
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8001692:	4b17      	ldr	r3, [pc, #92]	@ (80016f0 <HAL_GPIO_Init+0x2bc>)
 8001694:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001698:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	43db      	mvns	r3, r3
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	4013      	ands	r3, r2
 80016a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d003      	beq.n	80016b8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80016b8:	4a0d      	ldr	r2, [pc, #52]	@ (80016f0 <HAL_GPIO_Init+0x2bc>)
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	3301      	adds	r3, #1
 80016c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	fa22 f303 	lsr.w	r3, r2, r3
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f47f aeb7 	bne.w	8001444 <HAL_GPIO_Init+0x10>
  }
}
 80016d6:	bf00      	nop
 80016d8:	bf00      	nop
 80016da:	371c      	adds	r7, #28
 80016dc:	46bd      	mov	sp, r7
 80016de:	bc80      	pop	{r7}
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	40010000 	.word	0x40010000
 80016e8:	48000400 	.word	0x48000400
 80016ec:	48000800 	.word	0x48000800
 80016f0:	58000800 	.word	0x58000800

080016f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	460b      	mov	r3, r1
 80016fe:	807b      	strh	r3, [r7, #2]
 8001700:	4613      	mov	r3, r2
 8001702:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001704:	787b      	ldrb	r3, [r7, #1]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d003      	beq.n	8001712 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800170a:	887a      	ldrh	r2, [r7, #2]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001710:	e002      	b.n	8001718 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001712:	887a      	ldrh	r2, [r7, #2]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr

08001722 <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001722:	b480      	push	{r7}
 8001724:	b085      	sub	sp, #20
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
 800172a:	460b      	mov	r3, r1
 800172c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	695b      	ldr	r3, [r3, #20]
 8001732:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001734:	887a      	ldrh	r2, [r7, #2]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	4013      	ands	r3, r2
 800173a:	041a      	lsls	r2, r3, #16
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	43d9      	mvns	r1, r3
 8001740:	887b      	ldrh	r3, [r7, #2]
 8001742:	400b      	ands	r3, r1
 8001744:	431a      	orrs	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	619a      	str	r2, [r3, #24]
}
 800174a:	bf00      	nop
 800174c:	3714      	adds	r7, #20
 800174e:	46bd      	mov	sp, r7
 8001750:	bc80      	pop	{r7}
 8001752:	4770      	bx	lr

08001754 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800175e:	4b08      	ldr	r3, [pc, #32]	@ (8001780 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001760:	68da      	ldr	r2, [r3, #12]
 8001762:	88fb      	ldrh	r3, [r7, #6]
 8001764:	4013      	ands	r3, r2
 8001766:	2b00      	cmp	r3, #0
 8001768:	d006      	beq.n	8001778 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800176a:	4a05      	ldr	r2, [pc, #20]	@ (8001780 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800176c:	88fb      	ldrh	r3, [r7, #6]
 800176e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001770:	88fb      	ldrh	r3, [r7, #6]
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff fa0a 	bl	8000b8c <HAL_GPIO_EXTI_Callback>
  }
}
 8001778:	bf00      	nop
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	58000800 	.word	0x58000800

08001784 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001788:	4b04      	ldr	r3, [pc, #16]	@ (800179c <HAL_PWR_EnableBkUpAccess+0x18>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a03      	ldr	r2, [pc, #12]	@ (800179c <HAL_PWR_EnableBkUpAccess+0x18>)
 800178e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001792:	6013      	str	r3, [r2, #0]
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr
 800179c:	58000400 	.word	0x58000400

080017a0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80017a4:	4b03      	ldr	r3, [pc, #12]	@ (80017b4 <HAL_PWREx_GetVoltageRange+0x14>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr
 80017b4:	58000400 	.word	0x58000400

080017b8 <HAL_PWREx_EnableFlashPowerDown>:
  *           @arg @ref PWR_FLASHPD_LPRUN
  *           @arg @ref PWR_FLASHPD_LPSLEEP
  * @retval None
  */
void HAL_PWREx_EnableFlashPowerDown(uint32_t PowerMode)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  }

  /* Set flash power down mode */
  SET_BIT(PWR->C2CR1, PowerMode);
#else
  if ((PowerMode & PWR_FLASHPD_LPRUN) != 0U)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f003 0310 	and.w	r3, r3, #16
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d003      	beq.n	80017d2 <HAL_PWREx_EnableFlashPowerDown+0x1a>
  {
    /* Unlock bit FPDR */
    WRITE_REG(PWR->CR1, PWR_FLASH_POWER_MODE_UNLOCK_CODE);
 80017ca:	4b07      	ldr	r3, [pc, #28]	@ (80017e8 <HAL_PWREx_EnableFlashPowerDown+0x30>)
 80017cc:	f24c 12b0 	movw	r2, #49584	@ 0xc1b0
 80017d0:	601a      	str	r2, [r3, #0]
  }

  /* Set flash power down mode */
  SET_BIT(PWR->CR1, PowerMode);
 80017d2:	4b05      	ldr	r3, [pc, #20]	@ (80017e8 <HAL_PWREx_EnableFlashPowerDown+0x30>)
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	4904      	ldr	r1, [pc, #16]	@ (80017e8 <HAL_PWREx_EnableFlashPowerDown+0x30>)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	4313      	orrs	r3, r2
 80017dc:	600b      	str	r3, [r1, #0]
#endif
}
 80017de:	bf00      	nop
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bc80      	pop	{r7}
 80017e6:	4770      	bx	lr
 80017e8:	58000400 	.word	0x58000400

080017ec <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 80017f0:	4b04      	ldr	r3, [pc, #16]	@ (8001804 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a03      	ldr	r2, [pc, #12]	@ (8001804 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80017f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017fa:	6013      	str	r3, [r2, #0]
}
 80017fc:	bf00      	nop
 80017fe:	46bd      	mov	sp, r7
 8001800:	bc80      	pop	{r7}
 8001802:	4770      	bx	lr
 8001804:	58000400 	.word	0x58000400

08001808 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800180e:	4b16      	ldr	r3, [pc, #88]	@ (8001868 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a15      	ldr	r2, [pc, #84]	@ (8001868 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8001814:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001818:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 800181a:	4b14      	ldr	r3, [pc, #80]	@ (800186c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2232      	movs	r2, #50	@ 0x32
 8001820:	fb02 f303 	mul.w	r3, r2, r3
 8001824:	4a12      	ldr	r2, [pc, #72]	@ (8001870 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8001826:	fba2 2303 	umull	r2, r3, r2, r3
 800182a:	0c9b      	lsrs	r3, r3, #18
 800182c:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800182e:	e002      	b.n	8001836 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	3b01      	subs	r3, #1
 8001834:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8001836:	4b0c      	ldr	r3, [pc, #48]	@ (8001868 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8001838:	695b      	ldr	r3, [r3, #20]
 800183a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800183e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001842:	d102      	bne.n	800184a <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1f2      	bne.n	8001830 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800184a:	4b07      	ldr	r3, [pc, #28]	@ (8001868 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 800184c:	695b      	ldr	r3, [r3, #20]
 800184e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001852:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001856:	d101      	bne.n	800185c <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e000      	b.n	800185e <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	bc80      	pop	{r7}
 8001866:	4770      	bx	lr
 8001868:	58000400 	.word	0x58000400
 800186c:	20000004 	.word	0x20000004
 8001870:	431bde83 	.word	0x431bde83

08001874 <HAL_PWREx_EnterSTOP1Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP1Mode(uint8_t STOPEntry)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
#else
  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 800187e:	4b10      	ldr	r3, [pc, #64]	@ (80018c0 <HAL_PWREx_EnterSTOP1Mode+0x4c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f023 0307 	bic.w	r3, r3, #7
 8001886:	4a0e      	ldr	r2, [pc, #56]	@ (80018c0 <HAL_PWREx_EnterSTOP1Mode+0x4c>)
 8001888:	f043 0301 	orr.w	r3, r3, #1
 800188c:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800188e:	4b0d      	ldr	r3, [pc, #52]	@ (80018c4 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	4a0c      	ldr	r2, [pc, #48]	@ (80018c4 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8001894:	f043 0304 	orr.w	r3, r3, #4
 8001898:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800189a:	79fb      	ldrb	r3, [r7, #7]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d101      	bne.n	80018a4 <HAL_PWREx_EnterSTOP1Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80018a0:	bf30      	wfi
 80018a2:	e002      	b.n	80018aa <HAL_PWREx_EnterSTOP1Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80018a4:	bf40      	sev
    __WFE();
 80018a6:	bf20      	wfe
    __WFE();
 80018a8:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80018aa:	4b06      	ldr	r3, [pc, #24]	@ (80018c4 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	4a05      	ldr	r2, [pc, #20]	@ (80018c4 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 80018b0:	f023 0304 	bic.w	r3, r3, #4
 80018b4:	6113      	str	r3, [r2, #16]
}
 80018b6:	bf00      	nop
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bc80      	pop	{r7}
 80018be:	4770      	bx	lr
 80018c0:	58000400 	.word	0x58000400
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <LL_PWR_IsEnabledBkUpAccess>:
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80018cc:	4b06      	ldr	r3, [pc, #24]	@ (80018e8 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80018d8:	d101      	bne.n	80018de <LL_PWR_IsEnabledBkUpAccess+0x16>
 80018da:	2301      	movs	r3, #1
 80018dc:	e000      	b.n	80018e0 <LL_PWR_IsEnabledBkUpAccess+0x18>
 80018de:	2300      	movs	r3, #0
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bc80      	pop	{r7}
 80018e6:	4770      	bx	lr
 80018e8:	58000400 	.word	0x58000400

080018ec <LL_RCC_HSE_EnableTcxo>:
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80018f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80018fa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80018fe:	6013      	str	r3, [r2, #0]
}
 8001900:	bf00      	nop
 8001902:	46bd      	mov	sp, r7
 8001904:	bc80      	pop	{r7}
 8001906:	4770      	bx	lr

08001908 <LL_RCC_HSE_DisableTcxo>:
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800190c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001916:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800191a:	6013      	str	r3, [r2, #0]
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	bc80      	pop	{r7}
 8001922:	4770      	bx	lr

08001924 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001928:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001932:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001936:	d101      	bne.n	800193c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001938:	2301      	movs	r3, #1
 800193a:	e000      	b.n	800193e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	46bd      	mov	sp, r7
 8001942:	bc80      	pop	{r7}
 8001944:	4770      	bx	lr

08001946 <LL_RCC_HSE_Enable>:
{
 8001946:	b480      	push	{r7}
 8001948:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800194a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001954:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001958:	6013      	str	r3, [r2, #0]
}
 800195a:	bf00      	nop
 800195c:	46bd      	mov	sp, r7
 800195e:	bc80      	pop	{r7}
 8001960:	4770      	bx	lr

08001962 <LL_RCC_HSE_Disable>:
{
 8001962:	b480      	push	{r7}
 8001964:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001966:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001970:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001974:	6013      	str	r3, [r2, #0]
}
 8001976:	bf00      	nop
 8001978:	46bd      	mov	sp, r7
 800197a:	bc80      	pop	{r7}
 800197c:	4770      	bx	lr

0800197e <LL_RCC_HSE_IsReady>:
{
 800197e:	b480      	push	{r7}
 8001980:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001982:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800198c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001990:	d101      	bne.n	8001996 <LL_RCC_HSE_IsReady+0x18>
 8001992:	2301      	movs	r3, #1
 8001994:	e000      	b.n	8001998 <LL_RCC_HSE_IsReady+0x1a>
 8001996:	2300      	movs	r3, #0
}
 8001998:	4618      	mov	r0, r3
 800199a:	46bd      	mov	sp, r7
 800199c:	bc80      	pop	{r7}
 800199e:	4770      	bx	lr

080019a0 <LL_RCC_HSI_Enable>:
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80019a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80019ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019b2:	6013      	str	r3, [r2, #0]
}
 80019b4:	bf00      	nop
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bc80      	pop	{r7}
 80019ba:	4770      	bx	lr

080019bc <LL_RCC_HSI_Disable>:
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80019c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80019ca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80019ce:	6013      	str	r3, [r2, #0]
}
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr

080019d8 <LL_RCC_HSI_IsReady>:
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80019dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019ea:	d101      	bne.n	80019f0 <LL_RCC_HSI_IsReady+0x18>
 80019ec:	2301      	movs	r3, #1
 80019ee:	e000      	b.n	80019f2 <LL_RCC_HSI_IsReady+0x1a>
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bc80      	pop	{r7}
 80019f8:	4770      	bx	lr

080019fa <LL_RCC_HSI_SetCalibTrimming>:
{
 80019fa:	b480      	push	{r7}
 80019fc:	b083      	sub	sp, #12
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001a02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	061b      	lsls	r3, r3, #24
 8001a10:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a14:	4313      	orrs	r3, r2
 8001a16:	604b      	str	r3, [r1, #4]
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bc80      	pop	{r7}
 8001a20:	4770      	bx	lr

08001a22 <LL_RCC_LSE_IsReady>:
{
 8001a22:	b480      	push	{r7}
 8001a24:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001a26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d101      	bne.n	8001a3a <LL_RCC_LSE_IsReady+0x18>
 8001a36:	2301      	movs	r3, #1
 8001a38:	e000      	b.n	8001a3c <LL_RCC_LSE_IsReady+0x1a>
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr

08001a44 <LL_RCC_LSI_Enable>:
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001a48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a50:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a54:	f043 0301 	orr.w	r3, r3, #1
 8001a58:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr

08001a64 <LL_RCC_LSI_Disable>:
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001a68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a70:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a74:	f023 0301 	bic.w	r3, r3, #1
 8001a78:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001a7c:	bf00      	nop
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bc80      	pop	{r7}
 8001a82:	4770      	bx	lr

08001a84 <LL_RCC_LSI_IsReady>:
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8001a88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a90:	f003 0302 	and.w	r3, r3, #2
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d101      	bne.n	8001a9c <LL_RCC_LSI_IsReady+0x18>
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e000      	b.n	8001a9e <LL_RCC_LSI_IsReady+0x1a>
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bc80      	pop	{r7}
 8001aa4:	4770      	bx	lr

08001aa6 <LL_RCC_MSI_Enable>:
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001aaa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	6013      	str	r3, [r2, #0]
}
 8001aba:	bf00      	nop
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bc80      	pop	{r7}
 8001ac0:	4770      	bx	lr

08001ac2 <LL_RCC_MSI_Disable>:
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001ac6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ad0:	f023 0301 	bic.w	r3, r3, #1
 8001ad4:	6013      	str	r3, [r2, #0]
}
 8001ad6:	bf00      	nop
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bc80      	pop	{r7}
 8001adc:	4770      	bx	lr

08001ade <LL_RCC_MSI_IsReady>:
{
 8001ade:	b480      	push	{r7}
 8001ae0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001ae2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d101      	bne.n	8001af4 <LL_RCC_MSI_IsReady+0x16>
 8001af0:	2301      	movs	r3, #1
 8001af2:	e000      	b.n	8001af6 <LL_RCC_MSI_IsReady+0x18>
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bc80      	pop	{r7}
 8001afc:	4770      	bx	lr

08001afe <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8001b02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0308 	and.w	r3, r3, #8
 8001b0c:	2b08      	cmp	r3, #8
 8001b0e:	d101      	bne.n	8001b14 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001b10:	2301      	movs	r3, #1
 8001b12:	e000      	b.n	8001b16 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bc80      	pop	{r7}
 8001b1c:	4770      	bx	lr

08001b1e <LL_RCC_MSI_GetRange>:
{
 8001b1e:	b480      	push	{r7}
 8001b20:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8001b22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bc80      	pop	{r7}
 8001b32:	4770      	bx	lr

08001b34 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001b38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b40:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bc80      	pop	{r7}
 8001b4a:	4770      	bx	lr

08001b4c <LL_RCC_MSI_SetCalibTrimming>:
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001b54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	021b      	lsls	r3, r3, #8
 8001b62:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001b66:	4313      	orrs	r3, r2
 8001b68:	604b      	str	r3, [r1, #4]
}
 8001b6a:	bf00      	nop
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bc80      	pop	{r7}
 8001b72:	4770      	bx	lr

08001b74 <LL_RCC_SetSysClkSource>:
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001b7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f023 0203 	bic.w	r2, r3, #3
 8001b86:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	608b      	str	r3, [r1, #8]
}
 8001b90:	bf00      	nop
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bc80      	pop	{r7}
 8001b98:	4770      	bx	lr

08001b9a <LL_RCC_GetSysClkSource>:
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001b9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f003 030c 	and.w	r3, r3, #12
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bc80      	pop	{r7}
 8001bae:	4770      	bx	lr

08001bb0 <LL_RCC_SetAHBPrescaler>:
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001bb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bc2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	608b      	str	r3, [r1, #8]
}
 8001bcc:	bf00      	nop
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bc80      	pop	{r7}
 8001bd4:	4770      	bx	lr

08001bd6 <LL_C2_RCC_SetAHBPrescaler>:
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	b083      	sub	sp, #12
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001bde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001be2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001be6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8001bf6:	bf00      	nop
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bc80      	pop	{r7}
 8001bfe:	4770      	bx	lr

08001c00 <LL_RCC_SetAHB3Prescaler>:
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001c08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c0c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001c10:	f023 020f 	bic.w	r2, r3, #15
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	091b      	lsrs	r3, r3, #4
 8001c18:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr

08001c2c <LL_RCC_SetAPB1Prescaler>:
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001c34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c3e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	608b      	str	r3, [r1, #8]
}
 8001c48:	bf00      	nop
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bc80      	pop	{r7}
 8001c50:	4770      	bx	lr

08001c52 <LL_RCC_SetAPB2Prescaler>:
{
 8001c52:	b480      	push	{r7}
 8001c54:	b083      	sub	sp, #12
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001c5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c64:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	608b      	str	r3, [r1, #8]
}
 8001c6e:	bf00      	nop
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bc80      	pop	{r7}
 8001c76:	4770      	bx	lr

08001c78 <LL_RCC_GetAHBPrescaler>:
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001c7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bc80      	pop	{r7}
 8001c8c:	4770      	bx	lr

08001c8e <LL_RCC_GetAHB3Prescaler>:
{
 8001c8e:	b480      	push	{r7}
 8001c90:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001c92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c96:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001c9a:	011b      	lsls	r3, r3, #4
 8001c9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc80      	pop	{r7}
 8001ca6:	4770      	bx	lr

08001ca8 <LL_RCC_GetAPB1Prescaler>:
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001cac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bc80      	pop	{r7}
 8001cbc:	4770      	bx	lr

08001cbe <LL_RCC_GetAPB2Prescaler>:
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001cc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bc80      	pop	{r7}
 8001cd2:	4770      	bx	lr

08001cd4 <LL_RCC_PLL_Enable>:
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001cd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ce2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ce6:	6013      	str	r3, [r2, #0]
}
 8001ce8:	bf00      	nop
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bc80      	pop	{r7}
 8001cee:	4770      	bx	lr

08001cf0 <LL_RCC_PLL_Disable>:
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001cf4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001cfe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d02:	6013      	str	r3, [r2, #0]
}
 8001d04:	bf00      	nop
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bc80      	pop	{r7}
 8001d0a:	4770      	bx	lr

08001d0c <LL_RCC_PLL_IsReady>:
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001d10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d1a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001d1e:	d101      	bne.n	8001d24 <LL_RCC_PLL_IsReady+0x18>
 8001d20:	2301      	movs	r3, #1
 8001d22:	e000      	b.n	8001d26 <LL_RCC_PLL_IsReady+0x1a>
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bc80      	pop	{r7}
 8001d2c:	4770      	bx	lr

08001d2e <LL_RCC_PLL_GetN>:
{
 8001d2e:	b480      	push	{r7}
 8001d30:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001d32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	0a1b      	lsrs	r3, r3, #8
 8001d3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bc80      	pop	{r7}
 8001d44:	4770      	bx	lr

08001d46 <LL_RCC_PLL_GetR>:
{
 8001d46:	b480      	push	{r7}
 8001d48:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001d4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr

08001d5c <LL_RCC_PLL_GetDivider>:
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001d60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bc80      	pop	{r7}
 8001d70:	4770      	bx	lr

08001d72 <LL_RCC_PLL_GetMainSource>:
{
 8001d72:	b480      	push	{r7}
 8001d74:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001d76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	f003 0303 	and.w	r3, r3, #3
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bc80      	pop	{r7}
 8001d86:	4770      	bx	lr

08001d88 <LL_RCC_IsActiveFlag_HPRE>:
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001d8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d9a:	d101      	bne.n	8001da0 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e000      	b.n	8001da2 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bc80      	pop	{r7}
 8001da8:	4770      	bx	lr

08001daa <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001daa:	b480      	push	{r7}
 8001dac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001dae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001db2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001db6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001dbe:	d101      	bne.n	8001dc4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e000      	b.n	8001dc6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bc80      	pop	{r7}
 8001dcc:	4770      	bx	lr

08001dce <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001dd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dd6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001dda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001de2:	d101      	bne.n	8001de8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001de4:	2301      	movs	r3, #1
 8001de6:	e000      	b.n	8001dea <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bc80      	pop	{r7}
 8001df0:	4770      	bx	lr

08001df2 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001df2:	b480      	push	{r7}
 8001df4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001df6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001e04:	d101      	bne.n	8001e0a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001e06:	2301      	movs	r3, #1
 8001e08:	e000      	b.n	8001e0c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001e0a:	2300      	movs	r3, #0
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bc80      	pop	{r7}
 8001e12:	4770      	bx	lr

08001e14 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001e18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e22:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001e26:	d101      	bne.n	8001e2c <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e000      	b.n	8001e2e <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bc80      	pop	{r7}
 8001e34:	4770      	bx	lr
	...

08001e38 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b088      	sub	sp, #32
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d101      	bne.n	8001e4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e36f      	b.n	800252a <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e4a:	f7ff fea6 	bl	8001b9a <LL_RCC_GetSysClkSource>
 8001e4e:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e50:	f7ff ff8f 	bl	8001d72 <LL_RCC_PLL_GetMainSource>
 8001e54:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0320 	and.w	r3, r3, #32
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	f000 80c4 	beq.w	8001fec <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d005      	beq.n	8001e76 <HAL_RCC_OscConfig+0x3e>
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	2b0c      	cmp	r3, #12
 8001e6e:	d176      	bne.n	8001f5e <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d173      	bne.n	8001f5e <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a1b      	ldr	r3, [r3, #32]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e353      	b.n	800252a <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0308 	and.w	r3, r3, #8
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d005      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x68>
 8001e94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e9e:	e006      	b.n	8001eae <HAL_RCC_OscConfig+0x76>
 8001ea0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ea4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ea8:	091b      	lsrs	r3, r3, #4
 8001eaa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d222      	bcs.n	8001ef8 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f000 fd5a 	bl	8002970 <RCC_SetFlashLatencyFromMSIRange>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e331      	b.n	800252a <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ec6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ed0:	f043 0308 	orr.w	r3, r3, #8
 8001ed4:	6013      	str	r3, [r2, #0]
 8001ed6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ee4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff fe2b 	bl	8001b4c <LL_RCC_MSI_SetCalibTrimming>
 8001ef6:	e021      	b.n	8001f3c <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ef8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f02:	f043 0308 	orr.w	r3, r3, #8
 8001f06:	6013      	str	r3, [r2, #0]
 8001f08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f16:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff fe12 	bl	8001b4c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f000 fd1f 	bl	8002970 <RCC_SetFlashLatencyFromMSIRange>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e2f6      	b.n	800252a <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001f3c:	f000 fce0 	bl	8002900 <HAL_RCC_GetHCLKFreq>
 8001f40:	4603      	mov	r3, r0
 8001f42:	4aa7      	ldr	r2, [pc, #668]	@ (80021e0 <HAL_RCC_OscConfig+0x3a8>)
 8001f44:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8001f46:	4ba7      	ldr	r3, [pc, #668]	@ (80021e4 <HAL_RCC_OscConfig+0x3ac>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7ff f8d0 	bl	80010f0 <HAL_InitTick>
 8001f50:	4603      	mov	r3, r0
 8001f52:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8001f54:	7cfb      	ldrb	r3, [r7, #19]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d047      	beq.n	8001fea <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8001f5a:	7cfb      	ldrb	r3, [r7, #19]
 8001f5c:	e2e5      	b.n	800252a <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a1b      	ldr	r3, [r3, #32]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d02c      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f66:	f7ff fd9e 	bl	8001aa6 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f6a:	f7ff f90d 	bl	8001188 <HAL_GetTick>
 8001f6e:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001f70:	e008      	b.n	8001f84 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f72:	f7ff f909 	bl	8001188 <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d901      	bls.n	8001f84 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e2d2      	b.n	800252a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001f84:	f7ff fdab 	bl	8001ade <LL_RCC_MSI_IsReady>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d0f1      	beq.n	8001f72 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f98:	f043 0308 	orr.w	r3, r3, #8
 8001f9c:	6013      	str	r3, [r2, #0]
 8001f9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff fdc7 	bl	8001b4c <LL_RCC_MSI_SetCalibTrimming>
 8001fbe:	e015      	b.n	8001fec <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001fc0:	f7ff fd7f 	bl	8001ac2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001fc4:	f7ff f8e0 	bl	8001188 <HAL_GetTick>
 8001fc8:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001fca:	e008      	b.n	8001fde <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fcc:	f7ff f8dc 	bl	8001188 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e2a5      	b.n	800252a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001fde:	f7ff fd7e 	bl	8001ade <LL_RCC_MSI_IsReady>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d1f1      	bne.n	8001fcc <HAL_RCC_OscConfig+0x194>
 8001fe8:	e000      	b.n	8001fec <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001fea:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0301 	and.w	r3, r3, #1
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d058      	beq.n	80020aa <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	2b08      	cmp	r3, #8
 8001ffc:	d005      	beq.n	800200a <HAL_RCC_OscConfig+0x1d2>
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	2b0c      	cmp	r3, #12
 8002002:	d108      	bne.n	8002016 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	2b03      	cmp	r3, #3
 8002008:	d105      	bne.n	8002016 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d14b      	bne.n	80020aa <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e289      	b.n	800252a <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002016:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002028:	4313      	orrs	r3, r2
 800202a:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002034:	d102      	bne.n	800203c <HAL_RCC_OscConfig+0x204>
 8002036:	f7ff fc86 	bl	8001946 <LL_RCC_HSE_Enable>
 800203a:	e00d      	b.n	8002058 <HAL_RCC_OscConfig+0x220>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8002044:	d104      	bne.n	8002050 <HAL_RCC_OscConfig+0x218>
 8002046:	f7ff fc51 	bl	80018ec <LL_RCC_HSE_EnableTcxo>
 800204a:	f7ff fc7c 	bl	8001946 <LL_RCC_HSE_Enable>
 800204e:	e003      	b.n	8002058 <HAL_RCC_OscConfig+0x220>
 8002050:	f7ff fc87 	bl	8001962 <LL_RCC_HSE_Disable>
 8002054:	f7ff fc58 	bl	8001908 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d012      	beq.n	8002086 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002060:	f7ff f892 	bl	8001188 <HAL_GetTick>
 8002064:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002068:	f7ff f88e 	bl	8001188 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b64      	cmp	r3, #100	@ 0x64
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e257      	b.n	800252a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 800207a:	f7ff fc80 	bl	800197e <LL_RCC_HSE_IsReady>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d0f1      	beq.n	8002068 <HAL_RCC_OscConfig+0x230>
 8002084:	e011      	b.n	80020aa <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002086:	f7ff f87f 	bl	8001188 <HAL_GetTick>
 800208a:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800208c:	e008      	b.n	80020a0 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800208e:	f7ff f87b 	bl	8001188 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b64      	cmp	r3, #100	@ 0x64
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e244      	b.n	800252a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 80020a0:	f7ff fc6d 	bl	800197e <LL_RCC_HSE_IsReady>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1f1      	bne.n	800208e <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d046      	beq.n	8002144 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	2b04      	cmp	r3, #4
 80020ba:	d005      	beq.n	80020c8 <HAL_RCC_OscConfig+0x290>
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	2b0c      	cmp	r3, #12
 80020c0:	d10e      	bne.n	80020e0 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d10b      	bne.n	80020e0 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d101      	bne.n	80020d4 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e22a      	b.n	800252a <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	695b      	ldr	r3, [r3, #20]
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff fc8e 	bl	80019fa <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80020de:	e031      	b.n	8002144 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	691b      	ldr	r3, [r3, #16]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d019      	beq.n	800211c <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020e8:	f7ff fc5a 	bl	80019a0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ec:	f7ff f84c 	bl	8001188 <HAL_GetTick>
 80020f0:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80020f2:	e008      	b.n	8002106 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020f4:	f7ff f848 	bl	8001188 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e211      	b.n	800252a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002106:	f7ff fc67 	bl	80019d8 <LL_RCC_HSI_IsReady>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d0f1      	beq.n	80020f4 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	695b      	ldr	r3, [r3, #20]
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff fc70 	bl	80019fa <LL_RCC_HSI_SetCalibTrimming>
 800211a:	e013      	b.n	8002144 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800211c:	f7ff fc4e 	bl	80019bc <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002120:	f7ff f832 	bl	8001188 <HAL_GetTick>
 8002124:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002126:	e008      	b.n	800213a <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002128:	f7ff f82e 	bl	8001188 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b02      	cmp	r3, #2
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e1f7      	b.n	800252a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 800213a:	f7ff fc4d 	bl	80019d8 <LL_RCC_HSI_IsReady>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d1f1      	bne.n	8002128 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0308 	and.w	r3, r3, #8
 800214c:	2b00      	cmp	r3, #0
 800214e:	d06e      	beq.n	800222e <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d056      	beq.n	8002206 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8002158:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800215c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002160:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	69da      	ldr	r2, [r3, #28]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f003 0310 	and.w	r3, r3, #16
 800216c:	429a      	cmp	r2, r3
 800216e:	d031      	beq.n	80021d4 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d006      	beq.n	8002188 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002180:	2b00      	cmp	r3, #0
 8002182:	d101      	bne.n	8002188 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e1d0      	b.n	800252a <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	2b00      	cmp	r3, #0
 8002190:	d013      	beq.n	80021ba <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8002192:	f7ff fc67 	bl	8001a64 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002196:	f7fe fff7 	bl	8001188 <HAL_GetTick>
 800219a:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 800219c:	e008      	b.n	80021b0 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800219e:	f7fe fff3 	bl	8001188 <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	2b11      	cmp	r3, #17
 80021aa:	d901      	bls.n	80021b0 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e1bc      	b.n	800252a <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 80021b0:	f7ff fc68 	bl	8001a84 <LL_RCC_LSI_IsReady>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1f1      	bne.n	800219e <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80021ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021c2:	f023 0210 	bic.w	r2, r3, #16
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	69db      	ldr	r3, [r3, #28]
 80021ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80021ce:	4313      	orrs	r3, r2
 80021d0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021d4:	f7ff fc36 	bl	8001a44 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d8:	f7fe ffd6 	bl	8001188 <HAL_GetTick>
 80021dc:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80021de:	e00c      	b.n	80021fa <HAL_RCC_OscConfig+0x3c2>
 80021e0:	20000004 	.word	0x20000004
 80021e4:	20000008 	.word	0x20000008
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021e8:	f7fe ffce 	bl	8001188 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b11      	cmp	r3, #17
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e197      	b.n	800252a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 80021fa:	f7ff fc43 	bl	8001a84 <LL_RCC_LSI_IsReady>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d0f1      	beq.n	80021e8 <HAL_RCC_OscConfig+0x3b0>
 8002204:	e013      	b.n	800222e <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002206:	f7ff fc2d 	bl	8001a64 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800220a:	f7fe ffbd 	bl	8001188 <HAL_GetTick>
 800220e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8002210:	e008      	b.n	8002224 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002212:	f7fe ffb9 	bl	8001188 <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	2b11      	cmp	r3, #17
 800221e:	d901      	bls.n	8002224 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e182      	b.n	800252a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8002224:	f7ff fc2e 	bl	8001a84 <LL_RCC_LSI_IsReady>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1f1      	bne.n	8002212 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0304 	and.w	r3, r3, #4
 8002236:	2b00      	cmp	r3, #0
 8002238:	f000 80d8 	beq.w	80023ec <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800223c:	f7ff fb44 	bl	80018c8 <LL_PWR_IsEnabledBkUpAccess>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d113      	bne.n	800226e <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002246:	f7ff fa9d 	bl	8001784 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800224a:	f7fe ff9d 	bl	8001188 <HAL_GetTick>
 800224e:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002250:	e008      	b.n	8002264 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002252:	f7fe ff99 	bl	8001188 <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	2b02      	cmp	r3, #2
 800225e:	d901      	bls.n	8002264 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e162      	b.n	800252a <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002264:	f7ff fb30 	bl	80018c8 <LL_PWR_IsEnabledBkUpAccess>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d0f1      	beq.n	8002252 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d07b      	beq.n	800236e <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	2b85      	cmp	r3, #133	@ 0x85
 800227c:	d003      	beq.n	8002286 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	2b05      	cmp	r3, #5
 8002284:	d109      	bne.n	800229a <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002286:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800228a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800228e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002292:	f043 0304 	orr.w	r3, r3, #4
 8002296:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800229a:	f7fe ff75 	bl	8001188 <HAL_GetTick>
 800229e:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80022a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80022ac:	f043 0301 	orr.w	r3, r3, #1
 80022b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80022b4:	e00a      	b.n	80022cc <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022b6:	f7fe ff67 	bl	8001188 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d901      	bls.n	80022cc <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e12e      	b.n	800252a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 80022cc:	f7ff fba9 	bl	8001a22 <LL_RCC_LSE_IsReady>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d0ef      	beq.n	80022b6 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	2b81      	cmp	r3, #129	@ 0x81
 80022dc:	d003      	beq.n	80022e6 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	2b85      	cmp	r3, #133	@ 0x85
 80022e4:	d121      	bne.n	800232a <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e6:	f7fe ff4f 	bl	8001188 <HAL_GetTick>
 80022ea:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80022ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022f4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80022f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002300:	e00a      	b.n	8002318 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002302:	f7fe ff41 	bl	8001188 <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002310:	4293      	cmp	r3, r2
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e108      	b.n	800252a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002318:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800231c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002320:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002324:	2b00      	cmp	r3, #0
 8002326:	d0ec      	beq.n	8002302 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002328:	e060      	b.n	80023ec <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232a:	f7fe ff2d 	bl	8001188 <HAL_GetTick>
 800232e:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002330:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002334:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002338:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800233c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002340:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002344:	e00a      	b.n	800235c <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002346:	f7fe ff1f 	bl	8001188 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002354:	4293      	cmp	r3, r2
 8002356:	d901      	bls.n	800235c <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e0e6      	b.n	800252a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800235c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002360:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002364:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002368:	2b00      	cmp	r3, #0
 800236a:	d1ec      	bne.n	8002346 <HAL_RCC_OscConfig+0x50e>
 800236c:	e03e      	b.n	80023ec <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800236e:	f7fe ff0b 	bl	8001188 <HAL_GetTick>
 8002372:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002374:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002378:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800237c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002380:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002384:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002388:	e00a      	b.n	80023a0 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800238a:	f7fe fefd 	bl	8001188 <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002398:	4293      	cmp	r3, r2
 800239a:	d901      	bls.n	80023a0 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e0c4      	b.n	800252a <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80023a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1ec      	bne.n	800238a <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023b0:	f7fe feea 	bl	8001188 <HAL_GetTick>
 80023b4:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80023b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80023c2:	f023 0301 	bic.w	r3, r3, #1
 80023c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80023ca:	e00a      	b.n	80023e2 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023cc:	f7fe fedc 	bl	8001188 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023da:	4293      	cmp	r3, r2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e0a3      	b.n	800252a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 80023e2:	f7ff fb1e 	bl	8001a22 <LL_RCC_LSE_IsReady>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d1ef      	bne.n	80023cc <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f000 8099 	beq.w	8002528 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	2b0c      	cmp	r3, #12
 80023fa:	d06c      	beq.n	80024d6 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002400:	2b02      	cmp	r3, #2
 8002402:	d14b      	bne.n	800249c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002404:	f7ff fc74 	bl	8001cf0 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002408:	f7fe febe 	bl	8001188 <HAL_GetTick>
 800240c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002410:	f7fe feba 	bl	8001188 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b0a      	cmp	r3, #10
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e083      	b.n	800252a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002422:	f7ff fc73 	bl	8001d0c <LL_RCC_PLL_IsReady>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d1f1      	bne.n	8002410 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800242c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002430:	68da      	ldr	r2, [r3, #12]
 8002432:	4b40      	ldr	r3, [pc, #256]	@ (8002534 <HAL_RCC_OscConfig+0x6fc>)
 8002434:	4013      	ands	r3, r2
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800243e:	4311      	orrs	r1, r2
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002444:	0212      	lsls	r2, r2, #8
 8002446:	4311      	orrs	r1, r2
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800244c:	4311      	orrs	r1, r2
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002452:	4311      	orrs	r1, r2
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002458:	430a      	orrs	r2, r1
 800245a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800245e:	4313      	orrs	r3, r2
 8002460:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002462:	f7ff fc37 	bl	8001cd4 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002466:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002470:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002474:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002476:	f7fe fe87 	bl	8001188 <HAL_GetTick>
 800247a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 800247c:	e008      	b.n	8002490 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800247e:	f7fe fe83 	bl	8001188 <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	2b0a      	cmp	r3, #10
 800248a:	d901      	bls.n	8002490 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e04c      	b.n	800252a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8002490:	f7ff fc3c 	bl	8001d0c <LL_RCC_PLL_IsReady>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d0f1      	beq.n	800247e <HAL_RCC_OscConfig+0x646>
 800249a:	e045      	b.n	8002528 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800249c:	f7ff fc28 	bl	8001cf0 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a0:	f7fe fe72 	bl	8001188 <HAL_GetTick>
 80024a4:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024a8:	f7fe fe6e 	bl	8001188 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b0a      	cmp	r3, #10
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e037      	b.n	800252a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80024ba:	f7ff fc27 	bl	8001d0c <LL_RCC_PLL_IsReady>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d1f1      	bne.n	80024a8 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80024c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024c8:	68da      	ldr	r2, [r3, #12]
 80024ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80024ce:	4b1a      	ldr	r3, [pc, #104]	@ (8002538 <HAL_RCC_OscConfig+0x700>)
 80024d0:	4013      	ands	r3, r2
 80024d2:	60cb      	str	r3, [r1, #12]
 80024d4:	e028      	b.n	8002528 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d101      	bne.n	80024e2 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e023      	b.n	800252a <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	f003 0203 	and.w	r2, r3, #3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d115      	bne.n	8002524 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002502:	429a      	cmp	r2, r3
 8002504:	d10e      	bne.n	8002524 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002510:	021b      	lsls	r3, r3, #8
 8002512:	429a      	cmp	r2, r3
 8002514:	d106      	bne.n	8002524 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002520:	429a      	cmp	r2, r3
 8002522:	d001      	beq.n	8002528 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e000      	b.n	800252a <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3720      	adds	r7, #32
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	11c1808c 	.word	0x11c1808c
 8002538:	eefefffc 	.word	0xeefefffc

0800253c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d101      	bne.n	8002550 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e12c      	b.n	80027aa <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002550:	4b98      	ldr	r3, [pc, #608]	@ (80027b4 <HAL_RCC_ClockConfig+0x278>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0307 	and.w	r3, r3, #7
 8002558:	683a      	ldr	r2, [r7, #0]
 800255a:	429a      	cmp	r2, r3
 800255c:	d91b      	bls.n	8002596 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800255e:	4b95      	ldr	r3, [pc, #596]	@ (80027b4 <HAL_RCC_ClockConfig+0x278>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f023 0207 	bic.w	r2, r3, #7
 8002566:	4993      	ldr	r1, [pc, #588]	@ (80027b4 <HAL_RCC_ClockConfig+0x278>)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	4313      	orrs	r3, r2
 800256c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800256e:	f7fe fe0b 	bl	8001188 <HAL_GetTick>
 8002572:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002574:	e008      	b.n	8002588 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002576:	f7fe fe07 	bl	8001188 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d901      	bls.n	8002588 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e110      	b.n	80027aa <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002588:	4b8a      	ldr	r3, [pc, #552]	@ (80027b4 <HAL_RCC_ClockConfig+0x278>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0307 	and.w	r3, r3, #7
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	429a      	cmp	r2, r3
 8002594:	d1ef      	bne.n	8002576 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d016      	beq.n	80025d0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff fb02 	bl	8001bb0 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80025ac:	f7fe fdec 	bl	8001188 <HAL_GetTick>
 80025b0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80025b2:	e008      	b.n	80025c6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80025b4:	f7fe fde8 	bl	8001188 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e0f1      	b.n	80027aa <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80025c6:	f7ff fbdf 	bl	8001d88 <LL_RCC_IsActiveFlag_HPRE>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0f1      	beq.n	80025b4 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0320 	and.w	r3, r3, #32
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d016      	beq.n	800260a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	695b      	ldr	r3, [r3, #20]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7ff faf8 	bl	8001bd6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80025e6:	f7fe fdcf 	bl	8001188 <HAL_GetTick>
 80025ea:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80025ec:	e008      	b.n	8002600 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80025ee:	f7fe fdcb 	bl	8001188 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e0d4      	b.n	80027aa <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002600:	f7ff fbd3 	bl	8001daa <LL_RCC_IsActiveFlag_C2HPRE>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d0f1      	beq.n	80025ee <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002612:	2b00      	cmp	r3, #0
 8002614:	d016      	beq.n	8002644 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	4618      	mov	r0, r3
 800261c:	f7ff faf0 	bl	8001c00 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002620:	f7fe fdb2 	bl	8001188 <HAL_GetTick>
 8002624:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002626:	e008      	b.n	800263a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002628:	f7fe fdae 	bl	8001188 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d901      	bls.n	800263a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e0b7      	b.n	80027aa <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800263a:	f7ff fbc8 	bl	8001dce <LL_RCC_IsActiveFlag_SHDHPRE>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d0f1      	beq.n	8002628 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0304 	and.w	r3, r3, #4
 800264c:	2b00      	cmp	r3, #0
 800264e:	d016      	beq.n	800267e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff fae9 	bl	8001c2c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800265a:	f7fe fd95 	bl	8001188 <HAL_GetTick>
 800265e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002660:	e008      	b.n	8002674 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002662:	f7fe fd91 	bl	8001188 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d901      	bls.n	8002674 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e09a      	b.n	80027aa <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002674:	f7ff fbbd 	bl	8001df2 <LL_RCC_IsActiveFlag_PPRE1>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d0f1      	beq.n	8002662 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0308 	and.w	r3, r3, #8
 8002686:	2b00      	cmp	r3, #0
 8002688:	d017      	beq.n	80026ba <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	4618      	mov	r0, r3
 8002692:	f7ff fade 	bl	8001c52 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002696:	f7fe fd77 	bl	8001188 <HAL_GetTick>
 800269a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800269c:	e008      	b.n	80026b0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800269e:	f7fe fd73 	bl	8001188 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e07c      	b.n	80027aa <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80026b0:	f7ff fbb0 	bl	8001e14 <LL_RCC_IsActiveFlag_PPRE2>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d0f1      	beq.n	800269e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d043      	beq.n	800274e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d106      	bne.n	80026dc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80026ce:	f7ff f956 	bl	800197e <LL_RCC_HSE_IsReady>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d11e      	bne.n	8002716 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e066      	b.n	80027aa <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	2b03      	cmp	r3, #3
 80026e2:	d106      	bne.n	80026f2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80026e4:	f7ff fb12 	bl	8001d0c <LL_RCC_PLL_IsReady>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d113      	bne.n	8002716 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e05b      	b.n	80027aa <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d106      	bne.n	8002708 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80026fa:	f7ff f9f0 	bl	8001ade <LL_RCC_MSI_IsReady>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d108      	bne.n	8002716 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e050      	b.n	80027aa <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002708:	f7ff f966 	bl	80019d8 <LL_RCC_HSI_IsReady>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e049      	b.n	80027aa <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff fa2a 	bl	8001b74 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002720:	f7fe fd32 	bl	8001188 <HAL_GetTick>
 8002724:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002726:	e00a      	b.n	800273e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002728:	f7fe fd2e 	bl	8001188 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002736:	4293      	cmp	r3, r2
 8002738:	d901      	bls.n	800273e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e035      	b.n	80027aa <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800273e:	f7ff fa2c 	bl	8001b9a <LL_RCC_GetSysClkSource>
 8002742:	4602      	mov	r2, r0
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	429a      	cmp	r2, r3
 800274c:	d1ec      	bne.n	8002728 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800274e:	4b19      	ldr	r3, [pc, #100]	@ (80027b4 <HAL_RCC_ClockConfig+0x278>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0307 	and.w	r3, r3, #7
 8002756:	683a      	ldr	r2, [r7, #0]
 8002758:	429a      	cmp	r2, r3
 800275a:	d21b      	bcs.n	8002794 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800275c:	4b15      	ldr	r3, [pc, #84]	@ (80027b4 <HAL_RCC_ClockConfig+0x278>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f023 0207 	bic.w	r2, r3, #7
 8002764:	4913      	ldr	r1, [pc, #76]	@ (80027b4 <HAL_RCC_ClockConfig+0x278>)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	4313      	orrs	r3, r2
 800276a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800276c:	f7fe fd0c 	bl	8001188 <HAL_GetTick>
 8002770:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002772:	e008      	b.n	8002786 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002774:	f7fe fd08 	bl	8001188 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e011      	b.n	80027aa <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002786:	4b0b      	ldr	r3, [pc, #44]	@ (80027b4 <HAL_RCC_ClockConfig+0x278>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0307 	and.w	r3, r3, #7
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	429a      	cmp	r2, r3
 8002792:	d1ef      	bne.n	8002774 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002794:	f000 f8b4 	bl	8002900 <HAL_RCC_GetHCLKFreq>
 8002798:	4603      	mov	r3, r0
 800279a:	4a07      	ldr	r2, [pc, #28]	@ (80027b8 <HAL_RCC_ClockConfig+0x27c>)
 800279c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 800279e:	4b07      	ldr	r3, [pc, #28]	@ (80027bc <HAL_RCC_ClockConfig+0x280>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7fe fca4 	bl	80010f0 <HAL_InitTick>
 80027a8:	4603      	mov	r3, r0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	58004000 	.word	0x58004000
 80027b8:	20000004 	.word	0x20000004
 80027bc:	20000008 	.word	0x20000008

080027c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027c0:	b590      	push	{r4, r7, lr}
 80027c2:	b087      	sub	sp, #28
 80027c4:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80027c6:	2300      	movs	r3, #0
 80027c8:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80027ca:	2300      	movs	r3, #0
 80027cc:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027ce:	f7ff f9e4 	bl	8001b9a <LL_RCC_GetSysClkSource>
 80027d2:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027d4:	f7ff facd 	bl	8001d72 <LL_RCC_PLL_GetMainSource>
 80027d8:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d005      	beq.n	80027ec <HAL_RCC_GetSysClockFreq+0x2c>
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	2b0c      	cmp	r3, #12
 80027e4:	d139      	bne.n	800285a <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d136      	bne.n	800285a <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80027ec:	f7ff f987 	bl	8001afe <LL_RCC_MSI_IsEnabledRangeSelect>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d115      	bne.n	8002822 <HAL_RCC_GetSysClockFreq+0x62>
 80027f6:	f7ff f982 	bl	8001afe <LL_RCC_MSI_IsEnabledRangeSelect>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d106      	bne.n	800280e <HAL_RCC_GetSysClockFreq+0x4e>
 8002800:	f7ff f98d 	bl	8001b1e <LL_RCC_MSI_GetRange>
 8002804:	4603      	mov	r3, r0
 8002806:	0a1b      	lsrs	r3, r3, #8
 8002808:	f003 030f 	and.w	r3, r3, #15
 800280c:	e005      	b.n	800281a <HAL_RCC_GetSysClockFreq+0x5a>
 800280e:	f7ff f991 	bl	8001b34 <LL_RCC_MSI_GetRangeAfterStandby>
 8002812:	4603      	mov	r3, r0
 8002814:	0a1b      	lsrs	r3, r3, #8
 8002816:	f003 030f 	and.w	r3, r3, #15
 800281a:	4a36      	ldr	r2, [pc, #216]	@ (80028f4 <HAL_RCC_GetSysClockFreq+0x134>)
 800281c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002820:	e014      	b.n	800284c <HAL_RCC_GetSysClockFreq+0x8c>
 8002822:	f7ff f96c 	bl	8001afe <LL_RCC_MSI_IsEnabledRangeSelect>
 8002826:	4603      	mov	r3, r0
 8002828:	2b01      	cmp	r3, #1
 800282a:	d106      	bne.n	800283a <HAL_RCC_GetSysClockFreq+0x7a>
 800282c:	f7ff f977 	bl	8001b1e <LL_RCC_MSI_GetRange>
 8002830:	4603      	mov	r3, r0
 8002832:	091b      	lsrs	r3, r3, #4
 8002834:	f003 030f 	and.w	r3, r3, #15
 8002838:	e005      	b.n	8002846 <HAL_RCC_GetSysClockFreq+0x86>
 800283a:	f7ff f97b 	bl	8001b34 <LL_RCC_MSI_GetRangeAfterStandby>
 800283e:	4603      	mov	r3, r0
 8002840:	091b      	lsrs	r3, r3, #4
 8002842:	f003 030f 	and.w	r3, r3, #15
 8002846:	4a2b      	ldr	r2, [pc, #172]	@ (80028f4 <HAL_RCC_GetSysClockFreq+0x134>)
 8002848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800284c:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d115      	bne.n	8002880 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002858:	e012      	b.n	8002880 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	2b04      	cmp	r3, #4
 800285e:	d102      	bne.n	8002866 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002860:	4b25      	ldr	r3, [pc, #148]	@ (80028f8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002862:	617b      	str	r3, [r7, #20]
 8002864:	e00c      	b.n	8002880 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	2b08      	cmp	r3, #8
 800286a:	d109      	bne.n	8002880 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800286c:	f7ff f85a 	bl	8001924 <LL_RCC_HSE_IsEnabledDiv2>
 8002870:	4603      	mov	r3, r0
 8002872:	2b01      	cmp	r3, #1
 8002874:	d102      	bne.n	800287c <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002876:	4b20      	ldr	r3, [pc, #128]	@ (80028f8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002878:	617b      	str	r3, [r7, #20]
 800287a:	e001      	b.n	8002880 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800287c:	4b1f      	ldr	r3, [pc, #124]	@ (80028fc <HAL_RCC_GetSysClockFreq+0x13c>)
 800287e:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002880:	f7ff f98b 	bl	8001b9a <LL_RCC_GetSysClkSource>
 8002884:	4603      	mov	r3, r0
 8002886:	2b0c      	cmp	r3, #12
 8002888:	d12f      	bne.n	80028ea <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800288a:	f7ff fa72 	bl	8001d72 <LL_RCC_PLL_GetMainSource>
 800288e:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2b02      	cmp	r3, #2
 8002894:	d003      	beq.n	800289e <HAL_RCC_GetSysClockFreq+0xde>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2b03      	cmp	r3, #3
 800289a:	d003      	beq.n	80028a4 <HAL_RCC_GetSysClockFreq+0xe4>
 800289c:	e00d      	b.n	80028ba <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800289e:	4b16      	ldr	r3, [pc, #88]	@ (80028f8 <HAL_RCC_GetSysClockFreq+0x138>)
 80028a0:	60fb      	str	r3, [r7, #12]
        break;
 80028a2:	e00d      	b.n	80028c0 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80028a4:	f7ff f83e 	bl	8001924 <LL_RCC_HSE_IsEnabledDiv2>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d102      	bne.n	80028b4 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80028ae:	4b12      	ldr	r3, [pc, #72]	@ (80028f8 <HAL_RCC_GetSysClockFreq+0x138>)
 80028b0:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80028b2:	e005      	b.n	80028c0 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80028b4:	4b11      	ldr	r3, [pc, #68]	@ (80028fc <HAL_RCC_GetSysClockFreq+0x13c>)
 80028b6:	60fb      	str	r3, [r7, #12]
        break;
 80028b8:	e002      	b.n	80028c0 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	60fb      	str	r3, [r7, #12]
        break;
 80028be:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80028c0:	f7ff fa35 	bl	8001d2e <LL_RCC_PLL_GetN>
 80028c4:	4602      	mov	r2, r0
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	fb03 f402 	mul.w	r4, r3, r2
 80028cc:	f7ff fa46 	bl	8001d5c <LL_RCC_PLL_GetDivider>
 80028d0:	4603      	mov	r3, r0
 80028d2:	091b      	lsrs	r3, r3, #4
 80028d4:	3301      	adds	r3, #1
 80028d6:	fbb4 f4f3 	udiv	r4, r4, r3
 80028da:	f7ff fa34 	bl	8001d46 <LL_RCC_PLL_GetR>
 80028de:	4603      	mov	r3, r0
 80028e0:	0f5b      	lsrs	r3, r3, #29
 80028e2:	3301      	adds	r3, #1
 80028e4:	fbb4 f3f3 	udiv	r3, r4, r3
 80028e8:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80028ea:	697b      	ldr	r3, [r7, #20]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	371c      	adds	r7, #28
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd90      	pop	{r4, r7, pc}
 80028f4:	08004ca0 	.word	0x08004ca0
 80028f8:	00f42400 	.word	0x00f42400
 80028fc:	01e84800 	.word	0x01e84800

08002900 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002900:	b598      	push	{r3, r4, r7, lr}
 8002902:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002904:	f7ff ff5c 	bl	80027c0 <HAL_RCC_GetSysClockFreq>
 8002908:	4604      	mov	r4, r0
 800290a:	f7ff f9b5 	bl	8001c78 <LL_RCC_GetAHBPrescaler>
 800290e:	4603      	mov	r3, r0
 8002910:	091b      	lsrs	r3, r3, #4
 8002912:	f003 030f 	and.w	r3, r3, #15
 8002916:	4a03      	ldr	r2, [pc, #12]	@ (8002924 <HAL_RCC_GetHCLKFreq+0x24>)
 8002918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800291c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002920:	4618      	mov	r0, r3
 8002922:	bd98      	pop	{r3, r4, r7, pc}
 8002924:	08004c40 	.word	0x08004c40

08002928 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002928:	b598      	push	{r3, r4, r7, lr}
 800292a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800292c:	f7ff ffe8 	bl	8002900 <HAL_RCC_GetHCLKFreq>
 8002930:	4604      	mov	r4, r0
 8002932:	f7ff f9b9 	bl	8001ca8 <LL_RCC_GetAPB1Prescaler>
 8002936:	4603      	mov	r3, r0
 8002938:	0a1b      	lsrs	r3, r3, #8
 800293a:	4a03      	ldr	r2, [pc, #12]	@ (8002948 <HAL_RCC_GetPCLK1Freq+0x20>)
 800293c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002940:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002944:	4618      	mov	r0, r3
 8002946:	bd98      	pop	{r3, r4, r7, pc}
 8002948:	08004c80 	.word	0x08004c80

0800294c <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800294c:	b598      	push	{r3, r4, r7, lr}
 800294e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002950:	f7ff ffd6 	bl	8002900 <HAL_RCC_GetHCLKFreq>
 8002954:	4604      	mov	r4, r0
 8002956:	f7ff f9b2 	bl	8001cbe <LL_RCC_GetAPB2Prescaler>
 800295a:	4603      	mov	r3, r0
 800295c:	0adb      	lsrs	r3, r3, #11
 800295e:	4a03      	ldr	r2, [pc, #12]	@ (800296c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002964:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002968:	4618      	mov	r0, r3
 800296a:	bd98      	pop	{r3, r4, r7, pc}
 800296c:	08004c80 	.word	0x08004c80

08002970 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002970:	b590      	push	{r4, r7, lr}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	091b      	lsrs	r3, r3, #4
 800297c:	f003 030f 	and.w	r3, r3, #15
 8002980:	4a10      	ldr	r2, [pc, #64]	@ (80029c4 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8002982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002986:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8002988:	f7ff f981 	bl	8001c8e <LL_RCC_GetAHB3Prescaler>
 800298c:	4603      	mov	r3, r0
 800298e:	091b      	lsrs	r3, r3, #4
 8002990:	f003 030f 	and.w	r3, r3, #15
 8002994:	4a0c      	ldr	r2, [pc, #48]	@ (80029c8 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8002996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a0:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	4a09      	ldr	r2, [pc, #36]	@ (80029cc <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80029a6:	fba2 2303 	umull	r2, r3, r2, r3
 80029aa:	0c9c      	lsrs	r4, r3, #18
 80029ac:	f7fe fef8 	bl	80017a0 <HAL_PWREx_GetVoltageRange>
 80029b0:	4603      	mov	r3, r0
 80029b2:	4619      	mov	r1, r3
 80029b4:	4620      	mov	r0, r4
 80029b6:	f000 f80b 	bl	80029d0 <RCC_SetFlashLatency>
 80029ba:	4603      	mov	r3, r0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3714      	adds	r7, #20
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd90      	pop	{r4, r7, pc}
 80029c4:	08004ca0 	.word	0x08004ca0
 80029c8:	08004c40 	.word	0x08004c40
 80029cc:	431bde83 	.word	0x431bde83

080029d0 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b08e      	sub	sp, #56	@ 0x38
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80029da:	4a3a      	ldr	r2, [pc, #232]	@ (8002ac4 <RCC_SetFlashLatency+0xf4>)
 80029dc:	f107 0320 	add.w	r3, r7, #32
 80029e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80029e4:	6018      	str	r0, [r3, #0]
 80029e6:	3304      	adds	r3, #4
 80029e8:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80029ea:	4a37      	ldr	r2, [pc, #220]	@ (8002ac8 <RCC_SetFlashLatency+0xf8>)
 80029ec:	f107 0318 	add.w	r3, r7, #24
 80029f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80029f4:	6018      	str	r0, [r3, #0]
 80029f6:	3304      	adds	r3, #4
 80029f8:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80029fa:	4a34      	ldr	r2, [pc, #208]	@ (8002acc <RCC_SetFlashLatency+0xfc>)
 80029fc:	f107 030c 	add.w	r3, r7, #12
 8002a00:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a02:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002a06:	2300      	movs	r3, #0
 8002a08:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a10:	d11b      	bne.n	8002a4a <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002a12:	2300      	movs	r3, #0
 8002a14:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a16:	e014      	b.n	8002a42 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	3338      	adds	r3, #56	@ 0x38
 8002a1e:	443b      	add	r3, r7
 8002a20:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002a24:	461a      	mov	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d807      	bhi.n	8002a3c <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	3338      	adds	r3, #56	@ 0x38
 8002a32:	443b      	add	r3, r7
 8002a34:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002a38:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002a3a:	e021      	b.n	8002a80 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a3e:	3301      	adds	r3, #1
 8002a40:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d9e7      	bls.n	8002a18 <RCC_SetFlashLatency+0x48>
 8002a48:	e01a      	b.n	8002a80 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a4e:	e014      	b.n	8002a7a <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	3338      	adds	r3, #56	@ 0x38
 8002a56:	443b      	add	r3, r7
 8002a58:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d807      	bhi.n	8002a74 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002a64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	3338      	adds	r3, #56	@ 0x38
 8002a6a:	443b      	add	r3, r7
 8002a6c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002a70:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002a72:	e005      	b.n	8002a80 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a76:	3301      	adds	r3, #1
 8002a78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d9e7      	bls.n	8002a50 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a80:	4b13      	ldr	r3, [pc, #76]	@ (8002ad0 <RCC_SetFlashLatency+0x100>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f023 0207 	bic.w	r2, r3, #7
 8002a88:	4911      	ldr	r1, [pc, #68]	@ (8002ad0 <RCC_SetFlashLatency+0x100>)
 8002a8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002a90:	f7fe fb7a 	bl	8001188 <HAL_GetTick>
 8002a94:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002a96:	e008      	b.n	8002aaa <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002a98:	f7fe fb76 	bl	8001188 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d901      	bls.n	8002aaa <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e007      	b.n	8002aba <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002aaa:	4b09      	ldr	r3, [pc, #36]	@ (8002ad0 <RCC_SetFlashLatency+0x100>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0307 	and.w	r3, r3, #7
 8002ab2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d1ef      	bne.n	8002a98 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3738      	adds	r7, #56	@ 0x38
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	08004c24 	.word	0x08004c24
 8002ac8:	08004c2c 	.word	0x08004c2c
 8002acc:	08004c34 	.word	0x08004c34
 8002ad0:	58004000 	.word	0x58004000

08002ad4 <LL_RCC_LSE_IsReady>:
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002ad8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d101      	bne.n	8002aec <LL_RCC_LSE_IsReady+0x18>
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e000      	b.n	8002aee <LL_RCC_LSE_IsReady+0x1a>
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bc80      	pop	{r7}
 8002af4:	4770      	bx	lr

08002af6 <LL_RCC_SetUSARTClockSource>:
{
 8002af6:	b480      	push	{r7}
 8002af8:	b083      	sub	sp, #12
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8002afe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b02:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	0c1b      	lsrs	r3, r3, #16
 8002b0a:	43db      	mvns	r3, r3
 8002b0c:	401a      	ands	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b16:	4313      	orrs	r3, r2
 8002b18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bc80      	pop	{r7}
 8002b24:	4770      	bx	lr

08002b26 <LL_RCC_SetI2SClockSource>:
{
 8002b26:	b480      	push	{r7}
 8002b28:	b083      	sub	sp, #12
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8002b2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b36:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b3a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002b46:	bf00      	nop
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bc80      	pop	{r7}
 8002b4e:	4770      	bx	lr

08002b50 <LL_RCC_SetLPUARTClockSource>:
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002b58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b60:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002b64:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bc80      	pop	{r7}
 8002b78:	4770      	bx	lr

08002b7a <LL_RCC_SetI2CClockSource>:
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b083      	sub	sp, #12
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002b82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b86:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	091b      	lsrs	r3, r3, #4
 8002b8e:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8002b92:	43db      	mvns	r3, r3
 8002b94:	401a      	ands	r2, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	011b      	lsls	r3, r3, #4
 8002b9a:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8002b9e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bc80      	pop	{r7}
 8002bb0:	4770      	bx	lr

08002bb2 <LL_RCC_SetLPTIMClockSource>:
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b083      	sub	sp, #12
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002bba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bbe:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	0c1b      	lsrs	r3, r3, #16
 8002bc6:	041b      	lsls	r3, r3, #16
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	401a      	ands	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	041b      	lsls	r3, r3, #16
 8002bd0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bc80      	pop	{r7}
 8002be2:	4770      	bx	lr

08002be4 <LL_RCC_SetRNGClockSource>:
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002bec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bf4:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002bf8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bc80      	pop	{r7}
 8002c0c:	4770      	bx	lr

08002c0e <LL_RCC_SetADCClockSource>:
{
 8002c0e:	b480      	push	{r7}
 8002c10:	b083      	sub	sp, #12
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002c16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c1e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002c22:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002c2e:	bf00      	nop
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bc80      	pop	{r7}
 8002c36:	4770      	bx	lr

08002c38 <LL_RCC_SetRTCClockSource>:
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002c40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c48:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c4c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bc80      	pop	{r7}
 8002c60:	4770      	bx	lr

08002c62 <LL_RCC_GetRTCClockSource>:
{
 8002c62:	b480      	push	{r7}
 8002c64:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002c66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bc80      	pop	{r7}
 8002c78:	4770      	bx	lr

08002c7a <LL_RCC_ForceBackupDomainReset>:
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002c7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c86:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c8e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002c92:	bf00      	nop
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bc80      	pop	{r7}
 8002c98:	4770      	bx	lr

08002c9a <LL_RCC_ReleaseBackupDomainReset>:
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002c9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ca6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002caa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002cb2:	bf00      	nop
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bc80      	pop	{r7}
 8002cb8:	4770      	bx	lr
	...

08002cbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8002cc8:	2300      	movs	r3, #0
 8002cca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002ccc:	2300      	movs	r3, #0
 8002cce:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d058      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8002cdc:	f7fe fd52 	bl	8001784 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ce0:	f7fe fa52 	bl	8001188 <HAL_GetTick>
 8002ce4:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002ce6:	e009      	b.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ce8:	f7fe fa4e 	bl	8001188 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d902      	bls.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	74fb      	strb	r3, [r7, #19]
        break;
 8002cfa:	e006      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002cfc:	4b7b      	ldr	r3, [pc, #492]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d08:	d1ee      	bne.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8002d0a:	7cfb      	ldrb	r3, [r7, #19]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d13c      	bne.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002d10:	f7ff ffa7 	bl	8002c62 <LL_RCC_GetRTCClockSource>
 8002d14:	4602      	mov	r2, r0
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d00f      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d2a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d2c:	f7ff ffa5 	bl	8002c7a <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d30:	f7ff ffb3 	bl	8002c9a <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d34:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d014      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d48:	f7fe fa1e 	bl	8001188 <HAL_GetTick>
 8002d4c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8002d4e:	e00b      	b.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d50:	f7fe fa1a 	bl	8001188 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d902      	bls.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	74fb      	strb	r3, [r7, #19]
            break;
 8002d66:	e004      	b.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8002d68:	f7ff feb4 	bl	8002ad4 <LL_RCC_LSE_IsReady>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d1ee      	bne.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8002d72:	7cfb      	ldrb	r3, [r7, #19]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d105      	bne.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7ff ff5b 	bl	8002c38 <LL_RCC_SetRTCClockSource>
 8002d82:	e004      	b.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d84:	7cfb      	ldrb	r3, [r7, #19]
 8002d86:	74bb      	strb	r3, [r7, #18]
 8002d88:	e001      	b.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d8a:	7cfb      	ldrb	r3, [r7, #19]
 8002d8c:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d004      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7ff fea9 	bl	8002af6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d004      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7ff fe9e 	bl	8002af6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0320 	and.w	r3, r3, #32
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d004      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7ff fec0 	bl	8002b50 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d004      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a1b      	ldr	r3, [r3, #32]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7ff fee6 	bl	8002bb2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d004      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7ff fedb 	bl	8002bb2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d004      	beq.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff fed0 	bl	8002bb2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d004      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7ff fea9 	bl	8002b7a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d004      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7ff fe9e 	bl	8002b7a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d004      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7ff fe93 	bl	8002b7a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0310 	and.w	r3, r3, #16
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d011      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7ff fe5e 	bl	8002b26 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e72:	d107      	bne.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8002e74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e82:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d010      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7ff fea5 	bl	8002be4 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d107      	bne.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002ea2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002eac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002eb0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d011      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7ff fea3 	bl	8002c0e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ecc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ed0:	d107      	bne.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002ed2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002edc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ee0:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8002ee2:	7cbb      	ldrb	r3, [r7, #18]
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3718      	adds	r7, #24
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	58000400 	.word	0x58000400

08002ef0 <LL_RCC_GetUSARTClockSource>:
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8002ef8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002efc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	401a      	ands	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	041b      	lsls	r3, r3, #16
 8002f08:	4313      	orrs	r3, r2
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bc80      	pop	{r7}
 8002f12:	4770      	bx	lr

08002f14 <LL_RCC_GetLPUARTClockSource>:
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8002f1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f20:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4013      	ands	r3, r2
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bc80      	pop	{r7}
 8002f30:	4770      	bx	lr

08002f32 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b082      	sub	sp, #8
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d101      	bne.n	8002f44 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e042      	b.n	8002fca <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d106      	bne.n	8002f5c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f7fd ff54 	bl	8000e04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2224      	movs	r2, #36	@ 0x24
 8002f60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f022 0201 	bic.w	r2, r2, #1
 8002f72:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d002      	beq.n	8002f82 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 fb23 	bl	80035c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 f8ac 	bl	80030e0 <UART_SetConfig>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d101      	bne.n	8002f92 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e01b      	b.n	8002fca <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	685a      	ldr	r2, [r3, #4]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002fa0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	689a      	ldr	r2, [r3, #8]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002fb0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f042 0201 	orr.w	r2, r2, #1
 8002fc0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 fba1 	bl	800370a <UART_CheckIdleState>
 8002fc8:	4603      	mov	r3, r0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b08a      	sub	sp, #40	@ 0x28
 8002fd6:	af02      	add	r7, sp, #8
 8002fd8:	60f8      	str	r0, [r7, #12]
 8002fda:	60b9      	str	r1, [r7, #8]
 8002fdc:	603b      	str	r3, [r7, #0]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fe8:	2b20      	cmp	r3, #32
 8002fea:	d173      	bne.n	80030d4 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d002      	beq.n	8002ff8 <HAL_UART_Transmit+0x26>
 8002ff2:	88fb      	ldrh	r3, [r7, #6]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d101      	bne.n	8002ffc <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e06c      	b.n	80030d6 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2221      	movs	r2, #33	@ 0x21
 8003008:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800300c:	f7fe f8bc 	bl	8001188 <HAL_GetTick>
 8003010:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	88fa      	ldrh	r2, [r7, #6]
 8003016:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	88fa      	ldrh	r2, [r7, #6]
 800301e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800302a:	d108      	bne.n	800303e <HAL_UART_Transmit+0x6c>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d104      	bne.n	800303e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003034:	2300      	movs	r3, #0
 8003036:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	61bb      	str	r3, [r7, #24]
 800303c:	e003      	b.n	8003046 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003042:	2300      	movs	r3, #0
 8003044:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003046:	e02c      	b.n	80030a2 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	2200      	movs	r2, #0
 8003050:	2180      	movs	r1, #128	@ 0x80
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f000 fba7 	bl	80037a6 <UART_WaitOnFlagUntilTimeout>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e039      	b.n	80030d6 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d10b      	bne.n	8003080 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	881b      	ldrh	r3, [r3, #0]
 800306c:	461a      	mov	r2, r3
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003076:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	3302      	adds	r3, #2
 800307c:	61bb      	str	r3, [r7, #24]
 800307e:	e007      	b.n	8003090 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	781a      	ldrb	r2, [r3, #0]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	3301      	adds	r3, #1
 800308e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003096:	b29b      	uxth	r3, r3
 8003098:	3b01      	subs	r3, #1
 800309a:	b29a      	uxth	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1cc      	bne.n	8003048 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	9300      	str	r3, [sp, #0]
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	2200      	movs	r2, #0
 80030b6:	2140      	movs	r1, #64	@ 0x40
 80030b8:	68f8      	ldr	r0, [r7, #12]
 80030ba:	f000 fb74 	bl	80037a6 <UART_WaitOnFlagUntilTimeout>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e006      	b.n	80030d6 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2220      	movs	r2, #32
 80030cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80030d0:	2300      	movs	r3, #0
 80030d2:	e000      	b.n	80030d6 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 80030d4:	2302      	movs	r3, #2
  }
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3720      	adds	r7, #32
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
	...

080030e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030e4:	b08c      	sub	sp, #48	@ 0x30
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80030ea:	2300      	movs	r3, #0
 80030ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	689a      	ldr	r2, [r3, #8]
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	431a      	orrs	r2, r3
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	431a      	orrs	r2, r3
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	69db      	ldr	r3, [r3, #28]
 8003104:	4313      	orrs	r3, r2
 8003106:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	4b94      	ldr	r3, [pc, #592]	@ (8003360 <UART_SetConfig+0x280>)
 8003110:	4013      	ands	r3, r2
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	6812      	ldr	r2, [r2, #0]
 8003116:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003118:	430b      	orrs	r3, r1
 800311a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	68da      	ldr	r2, [r3, #12]
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	430a      	orrs	r2, r1
 8003130:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a89      	ldr	r2, [pc, #548]	@ (8003364 <UART_SetConfig+0x284>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d004      	beq.n	800314c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003148:	4313      	orrs	r3, r2
 800314a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003156:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	6812      	ldr	r2, [r2, #0]
 800315e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003160:	430b      	orrs	r3, r1
 8003162:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800316a:	f023 010f 	bic.w	r1, r3, #15
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	430a      	orrs	r2, r1
 8003178:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a7a      	ldr	r2, [pc, #488]	@ (8003368 <UART_SetConfig+0x288>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d127      	bne.n	80031d4 <UART_SetConfig+0xf4>
 8003184:	2003      	movs	r0, #3
 8003186:	f7ff feb3 	bl	8002ef0 <LL_RCC_GetUSARTClockSource>
 800318a:	4603      	mov	r3, r0
 800318c:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8003190:	2b03      	cmp	r3, #3
 8003192:	d81b      	bhi.n	80031cc <UART_SetConfig+0xec>
 8003194:	a201      	add	r2, pc, #4	@ (adr r2, 800319c <UART_SetConfig+0xbc>)
 8003196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800319a:	bf00      	nop
 800319c:	080031ad 	.word	0x080031ad
 80031a0:	080031bd 	.word	0x080031bd
 80031a4:	080031b5 	.word	0x080031b5
 80031a8:	080031c5 	.word	0x080031c5
 80031ac:	2301      	movs	r3, #1
 80031ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031b2:	e080      	b.n	80032b6 <UART_SetConfig+0x1d6>
 80031b4:	2302      	movs	r3, #2
 80031b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031ba:	e07c      	b.n	80032b6 <UART_SetConfig+0x1d6>
 80031bc:	2304      	movs	r3, #4
 80031be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031c2:	e078      	b.n	80032b6 <UART_SetConfig+0x1d6>
 80031c4:	2308      	movs	r3, #8
 80031c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031ca:	e074      	b.n	80032b6 <UART_SetConfig+0x1d6>
 80031cc:	2310      	movs	r3, #16
 80031ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031d2:	e070      	b.n	80032b6 <UART_SetConfig+0x1d6>
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a64      	ldr	r2, [pc, #400]	@ (800336c <UART_SetConfig+0x28c>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d138      	bne.n	8003250 <UART_SetConfig+0x170>
 80031de:	200c      	movs	r0, #12
 80031e0:	f7ff fe86 	bl	8002ef0 <LL_RCC_GetUSARTClockSource>
 80031e4:	4603      	mov	r3, r0
 80031e6:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 80031ea:	2b0c      	cmp	r3, #12
 80031ec:	d82c      	bhi.n	8003248 <UART_SetConfig+0x168>
 80031ee:	a201      	add	r2, pc, #4	@ (adr r2, 80031f4 <UART_SetConfig+0x114>)
 80031f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f4:	08003229 	.word	0x08003229
 80031f8:	08003249 	.word	0x08003249
 80031fc:	08003249 	.word	0x08003249
 8003200:	08003249 	.word	0x08003249
 8003204:	08003239 	.word	0x08003239
 8003208:	08003249 	.word	0x08003249
 800320c:	08003249 	.word	0x08003249
 8003210:	08003249 	.word	0x08003249
 8003214:	08003231 	.word	0x08003231
 8003218:	08003249 	.word	0x08003249
 800321c:	08003249 	.word	0x08003249
 8003220:	08003249 	.word	0x08003249
 8003224:	08003241 	.word	0x08003241
 8003228:	2300      	movs	r3, #0
 800322a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800322e:	e042      	b.n	80032b6 <UART_SetConfig+0x1d6>
 8003230:	2302      	movs	r3, #2
 8003232:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003236:	e03e      	b.n	80032b6 <UART_SetConfig+0x1d6>
 8003238:	2304      	movs	r3, #4
 800323a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800323e:	e03a      	b.n	80032b6 <UART_SetConfig+0x1d6>
 8003240:	2308      	movs	r3, #8
 8003242:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003246:	e036      	b.n	80032b6 <UART_SetConfig+0x1d6>
 8003248:	2310      	movs	r3, #16
 800324a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800324e:	e032      	b.n	80032b6 <UART_SetConfig+0x1d6>
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a43      	ldr	r2, [pc, #268]	@ (8003364 <UART_SetConfig+0x284>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d12a      	bne.n	80032b0 <UART_SetConfig+0x1d0>
 800325a:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800325e:	f7ff fe59 	bl	8002f14 <LL_RCC_GetLPUARTClockSource>
 8003262:	4603      	mov	r3, r0
 8003264:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003268:	d01a      	beq.n	80032a0 <UART_SetConfig+0x1c0>
 800326a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800326e:	d81b      	bhi.n	80032a8 <UART_SetConfig+0x1c8>
 8003270:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003274:	d00c      	beq.n	8003290 <UART_SetConfig+0x1b0>
 8003276:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800327a:	d815      	bhi.n	80032a8 <UART_SetConfig+0x1c8>
 800327c:	2b00      	cmp	r3, #0
 800327e:	d003      	beq.n	8003288 <UART_SetConfig+0x1a8>
 8003280:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003284:	d008      	beq.n	8003298 <UART_SetConfig+0x1b8>
 8003286:	e00f      	b.n	80032a8 <UART_SetConfig+0x1c8>
 8003288:	2300      	movs	r3, #0
 800328a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800328e:	e012      	b.n	80032b6 <UART_SetConfig+0x1d6>
 8003290:	2302      	movs	r3, #2
 8003292:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003296:	e00e      	b.n	80032b6 <UART_SetConfig+0x1d6>
 8003298:	2304      	movs	r3, #4
 800329a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800329e:	e00a      	b.n	80032b6 <UART_SetConfig+0x1d6>
 80032a0:	2308      	movs	r3, #8
 80032a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032a6:	e006      	b.n	80032b6 <UART_SetConfig+0x1d6>
 80032a8:	2310      	movs	r3, #16
 80032aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032ae:	e002      	b.n	80032b6 <UART_SetConfig+0x1d6>
 80032b0:	2310      	movs	r3, #16
 80032b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a2a      	ldr	r2, [pc, #168]	@ (8003364 <UART_SetConfig+0x284>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	f040 80a4 	bne.w	800340a <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80032c2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80032c6:	2b08      	cmp	r3, #8
 80032c8:	d823      	bhi.n	8003312 <UART_SetConfig+0x232>
 80032ca:	a201      	add	r2, pc, #4	@ (adr r2, 80032d0 <UART_SetConfig+0x1f0>)
 80032cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d0:	080032f5 	.word	0x080032f5
 80032d4:	08003313 	.word	0x08003313
 80032d8:	080032fd 	.word	0x080032fd
 80032dc:	08003313 	.word	0x08003313
 80032e0:	08003303 	.word	0x08003303
 80032e4:	08003313 	.word	0x08003313
 80032e8:	08003313 	.word	0x08003313
 80032ec:	08003313 	.word	0x08003313
 80032f0:	0800330b 	.word	0x0800330b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032f4:	f7ff fb18 	bl	8002928 <HAL_RCC_GetPCLK1Freq>
 80032f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80032fa:	e010      	b.n	800331e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032fc:	4b1c      	ldr	r3, [pc, #112]	@ (8003370 <UART_SetConfig+0x290>)
 80032fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003300:	e00d      	b.n	800331e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003302:	f7ff fa5d 	bl	80027c0 <HAL_RCC_GetSysClockFreq>
 8003306:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003308:	e009      	b.n	800331e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800330a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800330e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003310:	e005      	b.n	800331e <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8003312:	2300      	movs	r3, #0
 8003314:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800331c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800331e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003320:	2b00      	cmp	r3, #0
 8003322:	f000 8137 	beq.w	8003594 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800332a:	4a12      	ldr	r2, [pc, #72]	@ (8003374 <UART_SetConfig+0x294>)
 800332c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003330:	461a      	mov	r2, r3
 8003332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003334:	fbb3 f3f2 	udiv	r3, r3, r2
 8003338:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	685a      	ldr	r2, [r3, #4]
 800333e:	4613      	mov	r3, r2
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	4413      	add	r3, r2
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	429a      	cmp	r2, r3
 8003348:	d305      	bcc.n	8003356 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	429a      	cmp	r2, r3
 8003354:	d910      	bls.n	8003378 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800335c:	e11a      	b.n	8003594 <UART_SetConfig+0x4b4>
 800335e:	bf00      	nop
 8003360:	cfff69f3 	.word	0xcfff69f3
 8003364:	40008000 	.word	0x40008000
 8003368:	40013800 	.word	0x40013800
 800336c:	40004400 	.word	0x40004400
 8003370:	00f42400 	.word	0x00f42400
 8003374:	08004ce0 	.word	0x08004ce0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800337a:	2200      	movs	r2, #0
 800337c:	60bb      	str	r3, [r7, #8]
 800337e:	60fa      	str	r2, [r7, #12]
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003384:	4a8e      	ldr	r2, [pc, #568]	@ (80035c0 <UART_SetConfig+0x4e0>)
 8003386:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800338a:	b29b      	uxth	r3, r3
 800338c:	2200      	movs	r2, #0
 800338e:	603b      	str	r3, [r7, #0]
 8003390:	607a      	str	r2, [r7, #4]
 8003392:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003396:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800339a:	f7fc ff41 	bl	8000220 <__aeabi_uldivmod>
 800339e:	4602      	mov	r2, r0
 80033a0:	460b      	mov	r3, r1
 80033a2:	4610      	mov	r0, r2
 80033a4:	4619      	mov	r1, r3
 80033a6:	f04f 0200 	mov.w	r2, #0
 80033aa:	f04f 0300 	mov.w	r3, #0
 80033ae:	020b      	lsls	r3, r1, #8
 80033b0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80033b4:	0202      	lsls	r2, r0, #8
 80033b6:	6979      	ldr	r1, [r7, #20]
 80033b8:	6849      	ldr	r1, [r1, #4]
 80033ba:	0849      	lsrs	r1, r1, #1
 80033bc:	2000      	movs	r0, #0
 80033be:	460c      	mov	r4, r1
 80033c0:	4605      	mov	r5, r0
 80033c2:	eb12 0804 	adds.w	r8, r2, r4
 80033c6:	eb43 0905 	adc.w	r9, r3, r5
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	469a      	mov	sl, r3
 80033d2:	4693      	mov	fp, r2
 80033d4:	4652      	mov	r2, sl
 80033d6:	465b      	mov	r3, fp
 80033d8:	4640      	mov	r0, r8
 80033da:	4649      	mov	r1, r9
 80033dc:	f7fc ff20 	bl	8000220 <__aeabi_uldivmod>
 80033e0:	4602      	mov	r2, r0
 80033e2:	460b      	mov	r3, r1
 80033e4:	4613      	mov	r3, r2
 80033e6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80033e8:	6a3b      	ldr	r3, [r7, #32]
 80033ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80033ee:	d308      	bcc.n	8003402 <UART_SetConfig+0x322>
 80033f0:	6a3b      	ldr	r3, [r7, #32]
 80033f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033f6:	d204      	bcs.n	8003402 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6a3a      	ldr	r2, [r7, #32]
 80033fe:	60da      	str	r2, [r3, #12]
 8003400:	e0c8      	b.n	8003594 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003408:	e0c4      	b.n	8003594 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003412:	d167      	bne.n	80034e4 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8003414:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003418:	2b08      	cmp	r3, #8
 800341a:	d828      	bhi.n	800346e <UART_SetConfig+0x38e>
 800341c:	a201      	add	r2, pc, #4	@ (adr r2, 8003424 <UART_SetConfig+0x344>)
 800341e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003422:	bf00      	nop
 8003424:	08003449 	.word	0x08003449
 8003428:	08003451 	.word	0x08003451
 800342c:	08003459 	.word	0x08003459
 8003430:	0800346f 	.word	0x0800346f
 8003434:	0800345f 	.word	0x0800345f
 8003438:	0800346f 	.word	0x0800346f
 800343c:	0800346f 	.word	0x0800346f
 8003440:	0800346f 	.word	0x0800346f
 8003444:	08003467 	.word	0x08003467
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003448:	f7ff fa6e 	bl	8002928 <HAL_RCC_GetPCLK1Freq>
 800344c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800344e:	e014      	b.n	800347a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003450:	f7ff fa7c 	bl	800294c <HAL_RCC_GetPCLK2Freq>
 8003454:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003456:	e010      	b.n	800347a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003458:	4b5a      	ldr	r3, [pc, #360]	@ (80035c4 <UART_SetConfig+0x4e4>)
 800345a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800345c:	e00d      	b.n	800347a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800345e:	f7ff f9af 	bl	80027c0 <HAL_RCC_GetSysClockFreq>
 8003462:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003464:	e009      	b.n	800347a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003466:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800346a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800346c:	e005      	b.n	800347a <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800346e:	2300      	movs	r3, #0
 8003470:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003478:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800347a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800347c:	2b00      	cmp	r3, #0
 800347e:	f000 8089 	beq.w	8003594 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003486:	4a4e      	ldr	r2, [pc, #312]	@ (80035c0 <UART_SetConfig+0x4e0>)
 8003488:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800348c:	461a      	mov	r2, r3
 800348e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003490:	fbb3 f3f2 	udiv	r3, r3, r2
 8003494:	005a      	lsls	r2, r3, #1
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	085b      	lsrs	r3, r3, #1
 800349c:	441a      	add	r2, r3
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034a8:	6a3b      	ldr	r3, [r7, #32]
 80034aa:	2b0f      	cmp	r3, #15
 80034ac:	d916      	bls.n	80034dc <UART_SetConfig+0x3fc>
 80034ae:	6a3b      	ldr	r3, [r7, #32]
 80034b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034b4:	d212      	bcs.n	80034dc <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034b6:	6a3b      	ldr	r3, [r7, #32]
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	f023 030f 	bic.w	r3, r3, #15
 80034be:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034c0:	6a3b      	ldr	r3, [r7, #32]
 80034c2:	085b      	lsrs	r3, r3, #1
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	f003 0307 	and.w	r3, r3, #7
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	8bfb      	ldrh	r3, [r7, #30]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	8bfa      	ldrh	r2, [r7, #30]
 80034d8:	60da      	str	r2, [r3, #12]
 80034da:	e05b      	b.n	8003594 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80034e2:	e057      	b.n	8003594 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80034e4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80034e8:	2b08      	cmp	r3, #8
 80034ea:	d828      	bhi.n	800353e <UART_SetConfig+0x45e>
 80034ec:	a201      	add	r2, pc, #4	@ (adr r2, 80034f4 <UART_SetConfig+0x414>)
 80034ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f2:	bf00      	nop
 80034f4:	08003519 	.word	0x08003519
 80034f8:	08003521 	.word	0x08003521
 80034fc:	08003529 	.word	0x08003529
 8003500:	0800353f 	.word	0x0800353f
 8003504:	0800352f 	.word	0x0800352f
 8003508:	0800353f 	.word	0x0800353f
 800350c:	0800353f 	.word	0x0800353f
 8003510:	0800353f 	.word	0x0800353f
 8003514:	08003537 	.word	0x08003537
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003518:	f7ff fa06 	bl	8002928 <HAL_RCC_GetPCLK1Freq>
 800351c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800351e:	e014      	b.n	800354a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003520:	f7ff fa14 	bl	800294c <HAL_RCC_GetPCLK2Freq>
 8003524:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003526:	e010      	b.n	800354a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003528:	4b26      	ldr	r3, [pc, #152]	@ (80035c4 <UART_SetConfig+0x4e4>)
 800352a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800352c:	e00d      	b.n	800354a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800352e:	f7ff f947 	bl	80027c0 <HAL_RCC_GetSysClockFreq>
 8003532:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003534:	e009      	b.n	800354a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003536:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800353a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800353c:	e005      	b.n	800354a <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800353e:	2300      	movs	r3, #0
 8003540:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003548:	bf00      	nop
    }

    if (pclk != 0U)
 800354a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800354c:	2b00      	cmp	r3, #0
 800354e:	d021      	beq.n	8003594 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003554:	4a1a      	ldr	r2, [pc, #104]	@ (80035c0 <UART_SetConfig+0x4e0>)
 8003556:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800355a:	461a      	mov	r2, r3
 800355c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800355e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	085b      	lsrs	r3, r3, #1
 8003568:	441a      	add	r2, r3
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003572:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003574:	6a3b      	ldr	r3, [r7, #32]
 8003576:	2b0f      	cmp	r3, #15
 8003578:	d909      	bls.n	800358e <UART_SetConfig+0x4ae>
 800357a:	6a3b      	ldr	r3, [r7, #32]
 800357c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003580:	d205      	bcs.n	800358e <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003582:	6a3b      	ldr	r3, [r7, #32]
 8003584:	b29a      	uxth	r2, r3
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	60da      	str	r2, [r3, #12]
 800358c:	e002      	b.n	8003594 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	2201      	movs	r2, #1
 8003598:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	2201      	movs	r2, #1
 80035a0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	2200      	movs	r2, #0
 80035a8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	2200      	movs	r2, #0
 80035ae:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80035b0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3730      	adds	r7, #48	@ 0x30
 80035b8:	46bd      	mov	sp, r7
 80035ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035be:	bf00      	nop
 80035c0:	08004ce0 	.word	0x08004ce0
 80035c4:	00f42400 	.word	0x00f42400

080035c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035d4:	f003 0308 	and.w	r3, r3, #8
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d00a      	beq.n	80035f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	430a      	orrs	r2, r1
 80035f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00a      	beq.n	8003614 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	430a      	orrs	r2, r1
 8003612:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003618:	f003 0302 	and.w	r3, r3, #2
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00a      	beq.n	8003636 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	430a      	orrs	r2, r1
 8003634:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800363a:	f003 0304 	and.w	r3, r3, #4
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00a      	beq.n	8003658 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	430a      	orrs	r2, r1
 8003656:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800365c:	f003 0310 	and.w	r3, r3, #16
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00a      	beq.n	800367a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	430a      	orrs	r2, r1
 8003678:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800367e:	f003 0320 	and.w	r3, r3, #32
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00a      	beq.n	800369c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	430a      	orrs	r2, r1
 800369a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d01a      	beq.n	80036de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80036c6:	d10a      	bne.n	80036de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	430a      	orrs	r2, r1
 80036dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00a      	beq.n	8003700 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	430a      	orrs	r2, r1
 80036fe:	605a      	str	r2, [r3, #4]
  }
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	bc80      	pop	{r7}
 8003708:	4770      	bx	lr

0800370a <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800370a:	b580      	push	{r7, lr}
 800370c:	b086      	sub	sp, #24
 800370e:	af02      	add	r7, sp, #8
 8003710:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800371a:	f7fd fd35 	bl	8001188 <HAL_GetTick>
 800371e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0308 	and.w	r3, r3, #8
 800372a:	2b08      	cmp	r3, #8
 800372c:	d10e      	bne.n	800374c <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800372e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003732:	9300      	str	r3, [sp, #0]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 f832 	bl	80037a6 <UART_WaitOnFlagUntilTimeout>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d001      	beq.n	800374c <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e028      	b.n	800379e <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0304 	and.w	r3, r3, #4
 8003756:	2b04      	cmp	r3, #4
 8003758:	d10e      	bne.n	8003778 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800375a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800375e:	9300      	str	r3, [sp, #0]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f000 f81c 	bl	80037a6 <UART_WaitOnFlagUntilTimeout>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d001      	beq.n	8003778 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e012      	b.n	800379e <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2220      	movs	r2, #32
 800377c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2220      	movs	r2, #32
 8003784:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b09c      	sub	sp, #112	@ 0x70
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	60f8      	str	r0, [r7, #12]
 80037ae:	60b9      	str	r1, [r7, #8]
 80037b0:	603b      	str	r3, [r7, #0]
 80037b2:	4613      	mov	r3, r2
 80037b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037b6:	e0af      	b.n	8003918 <UART_WaitOnFlagUntilTimeout+0x172>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80037ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037be:	f000 80ab 	beq.w	8003918 <UART_WaitOnFlagUntilTimeout+0x172>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037c2:	f7fd fce1 	bl	8001188 <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d302      	bcc.n	80037d8 <UART_WaitOnFlagUntilTimeout+0x32>
 80037d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d140      	bne.n	800385a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037e0:	e853 3f00 	ldrex	r3, [r3]
 80037e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80037e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037e8:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80037ec:	667b      	str	r3, [r7, #100]	@ 0x64
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	461a      	mov	r2, r3
 80037f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80037f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80037f8:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037fa:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80037fc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80037fe:	e841 2300 	strex	r3, r2, [r1]
 8003802:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8003804:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1e6      	bne.n	80037d8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	3308      	adds	r3, #8
 8003810:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003812:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003814:	e853 3f00 	ldrex	r3, [r3]
 8003818:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800381a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800381c:	f023 0301 	bic.w	r3, r3, #1
 8003820:	663b      	str	r3, [r7, #96]	@ 0x60
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	3308      	adds	r3, #8
 8003828:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800382a:	64ba      	str	r2, [r7, #72]	@ 0x48
 800382c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800382e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003830:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003832:	e841 2300 	strex	r3, r2, [r1]
 8003836:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003838:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1e5      	bne.n	800380a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2220      	movs	r2, #32
 8003842:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2220      	movs	r2, #32
 800384a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e06f      	b.n	800393a <UART_WaitOnFlagUntilTimeout+0x194>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0304 	and.w	r3, r3, #4
 8003864:	2b00      	cmp	r3, #0
 8003866:	d057      	beq.n	8003918 <UART_WaitOnFlagUntilTimeout+0x172>
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	2b80      	cmp	r3, #128	@ 0x80
 800386c:	d054      	beq.n	8003918 <UART_WaitOnFlagUntilTimeout+0x172>
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	2b40      	cmp	r3, #64	@ 0x40
 8003872:	d051      	beq.n	8003918 <UART_WaitOnFlagUntilTimeout+0x172>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	69db      	ldr	r3, [r3, #28]
 800387a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800387e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003882:	d149      	bne.n	8003918 <UART_WaitOnFlagUntilTimeout+0x172>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800388c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003896:	e853 3f00 	ldrex	r3, [r3]
 800389a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800389c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800389e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80038a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	461a      	mov	r2, r3
 80038aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80038ae:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80038b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80038b4:	e841 2300 	strex	r3, r2, [r1]
 80038b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80038ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d1e6      	bne.n	800388e <UART_WaitOnFlagUntilTimeout+0xe8>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	3308      	adds	r3, #8
 80038c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	e853 3f00 	ldrex	r3, [r3]
 80038ce:	613b      	str	r3, [r7, #16]
   return(result);
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	f023 0301 	bic.w	r3, r3, #1
 80038d6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	3308      	adds	r3, #8
 80038de:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80038e0:	623a      	str	r2, [r7, #32]
 80038e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e4:	69f9      	ldr	r1, [r7, #28]
 80038e6:	6a3a      	ldr	r2, [r7, #32]
 80038e8:	e841 2300 	strex	r3, r2, [r1]
 80038ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d1e5      	bne.n	80038c0 <UART_WaitOnFlagUntilTimeout+0x11a>

          huart->gState = HAL_UART_STATE_READY;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2220      	movs	r2, #32
 80038f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2220      	movs	r2, #32
 8003900:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2220      	movs	r2, #32
 8003908:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e010      	b.n	800393a <UART_WaitOnFlagUntilTimeout+0x194>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	69da      	ldr	r2, [r3, #28]
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	4013      	ands	r3, r2
 8003922:	68ba      	ldr	r2, [r7, #8]
 8003924:	429a      	cmp	r2, r3
 8003926:	bf0c      	ite	eq
 8003928:	2301      	moveq	r3, #1
 800392a:	2300      	movne	r3, #0
 800392c:	b2db      	uxtb	r3, r3
 800392e:	461a      	mov	r2, r3
 8003930:	79fb      	ldrb	r3, [r7, #7]
 8003932:	429a      	cmp	r2, r3
 8003934:	f43f af40 	beq.w	80037b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3770      	adds	r7, #112	@ 0x70
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003942:	b480      	push	{r7}
 8003944:	b085      	sub	sp, #20
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003950:	2b01      	cmp	r3, #1
 8003952:	d101      	bne.n	8003958 <HAL_UARTEx_DisableFifoMode+0x16>
 8003954:	2302      	movs	r3, #2
 8003956:	e027      	b.n	80039a8 <HAL_UARTEx_DisableFifoMode+0x66>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2224      	movs	r2, #36	@ 0x24
 8003964:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f022 0201 	bic.w	r2, r2, #1
 800397e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8003986:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68fa      	ldr	r2, [r7, #12]
 8003994:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2220      	movs	r2, #32
 800399a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80039a6:	2300      	movs	r3, #0
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3714      	adds	r7, #20
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bc80      	pop	{r7}
 80039b0:	4770      	bx	lr

080039b2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b084      	sub	sp, #16
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
 80039ba:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d101      	bne.n	80039ca <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80039c6:	2302      	movs	r3, #2
 80039c8:	e02d      	b.n	8003a26 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2201      	movs	r2, #1
 80039ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2224      	movs	r2, #36	@ 0x24
 80039d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f022 0201 	bic.w	r2, r2, #1
 80039f0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	683a      	ldr	r2, [r7, #0]
 8003a02:	430a      	orrs	r2, r1
 8003a04:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 f850 	bl	8003aac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2220      	movs	r2, #32
 8003a18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3710      	adds	r7, #16
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}

08003a2e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003a2e:	b580      	push	{r7, lr}
 8003a30:	b084      	sub	sp, #16
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
 8003a36:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d101      	bne.n	8003a46 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003a42:	2302      	movs	r3, #2
 8003a44:	e02d      	b.n	8003aa2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2224      	movs	r2, #36	@ 0x24
 8003a52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f022 0201 	bic.w	r2, r2, #1
 8003a6c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	683a      	ldr	r2, [r7, #0]
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 f812 	bl	8003aac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68fa      	ldr	r2, [r7, #12]
 8003a8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2220      	movs	r2, #32
 8003a94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3710      	adds	r7, #16
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
	...

08003aac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b085      	sub	sp, #20
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d108      	bne.n	8003ace <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003acc:	e031      	b.n	8003b32 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003ace:	2308      	movs	r3, #8
 8003ad0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003ad2:	2308      	movs	r3, #8
 8003ad4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	0e5b      	lsrs	r3, r3, #25
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	f003 0307 	and.w	r3, r3, #7
 8003ae4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	0f5b      	lsrs	r3, r3, #29
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	f003 0307 	and.w	r3, r3, #7
 8003af4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003af6:	7bbb      	ldrb	r3, [r7, #14]
 8003af8:	7b3a      	ldrb	r2, [r7, #12]
 8003afa:	4910      	ldr	r1, [pc, #64]	@ (8003b3c <UARTEx_SetNbDataToProcess+0x90>)
 8003afc:	5c8a      	ldrb	r2, [r1, r2]
 8003afe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003b02:	7b3a      	ldrb	r2, [r7, #12]
 8003b04:	490e      	ldr	r1, [pc, #56]	@ (8003b40 <UARTEx_SetNbDataToProcess+0x94>)
 8003b06:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003b08:	fb93 f3f2 	sdiv	r3, r3, r2
 8003b0c:	b29a      	uxth	r2, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003b14:	7bfb      	ldrb	r3, [r7, #15]
 8003b16:	7b7a      	ldrb	r2, [r7, #13]
 8003b18:	4908      	ldr	r1, [pc, #32]	@ (8003b3c <UARTEx_SetNbDataToProcess+0x90>)
 8003b1a:	5c8a      	ldrb	r2, [r1, r2]
 8003b1c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003b20:	7b7a      	ldrb	r2, [r7, #13]
 8003b22:	4907      	ldr	r1, [pc, #28]	@ (8003b40 <UARTEx_SetNbDataToProcess+0x94>)
 8003b24:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003b26:	fb93 f3f2 	sdiv	r3, r3, r2
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8003b32:	bf00      	nop
 8003b34:	3714      	adds	r7, #20
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bc80      	pop	{r7}
 8003b3a:	4770      	bx	lr
 8003b3c:	08004cf8 	.word	0x08004cf8
 8003b40:	08004d00 	.word	0x08004d00

08003b44 <std>:
 8003b44:	2300      	movs	r3, #0
 8003b46:	b510      	push	{r4, lr}
 8003b48:	4604      	mov	r4, r0
 8003b4a:	e9c0 3300 	strd	r3, r3, [r0]
 8003b4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003b52:	6083      	str	r3, [r0, #8]
 8003b54:	8181      	strh	r1, [r0, #12]
 8003b56:	6643      	str	r3, [r0, #100]	@ 0x64
 8003b58:	81c2      	strh	r2, [r0, #14]
 8003b5a:	6183      	str	r3, [r0, #24]
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	2208      	movs	r2, #8
 8003b60:	305c      	adds	r0, #92	@ 0x5c
 8003b62:	f000 f9f9 	bl	8003f58 <memset>
 8003b66:	4b0d      	ldr	r3, [pc, #52]	@ (8003b9c <std+0x58>)
 8003b68:	6263      	str	r3, [r4, #36]	@ 0x24
 8003b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ba0 <std+0x5c>)
 8003b6c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ba4 <std+0x60>)
 8003b70:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003b72:	4b0d      	ldr	r3, [pc, #52]	@ (8003ba8 <std+0x64>)
 8003b74:	6323      	str	r3, [r4, #48]	@ 0x30
 8003b76:	4b0d      	ldr	r3, [pc, #52]	@ (8003bac <std+0x68>)
 8003b78:	6224      	str	r4, [r4, #32]
 8003b7a:	429c      	cmp	r4, r3
 8003b7c:	d006      	beq.n	8003b8c <std+0x48>
 8003b7e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003b82:	4294      	cmp	r4, r2
 8003b84:	d002      	beq.n	8003b8c <std+0x48>
 8003b86:	33d0      	adds	r3, #208	@ 0xd0
 8003b88:	429c      	cmp	r4, r3
 8003b8a:	d105      	bne.n	8003b98 <std+0x54>
 8003b8c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b94:	f000 ba58 	b.w	8004048 <__retarget_lock_init_recursive>
 8003b98:	bd10      	pop	{r4, pc}
 8003b9a:	bf00      	nop
 8003b9c:	08003da9 	.word	0x08003da9
 8003ba0:	08003dcb 	.word	0x08003dcb
 8003ba4:	08003e03 	.word	0x08003e03
 8003ba8:	08003e27 	.word	0x08003e27
 8003bac:	20000128 	.word	0x20000128

08003bb0 <stdio_exit_handler>:
 8003bb0:	4a02      	ldr	r2, [pc, #8]	@ (8003bbc <stdio_exit_handler+0xc>)
 8003bb2:	4903      	ldr	r1, [pc, #12]	@ (8003bc0 <stdio_exit_handler+0x10>)
 8003bb4:	4803      	ldr	r0, [pc, #12]	@ (8003bc4 <stdio_exit_handler+0x14>)
 8003bb6:	f000 b869 	b.w	8003c8c <_fwalk_sglue>
 8003bba:	bf00      	nop
 8003bbc:	20000010 	.word	0x20000010
 8003bc0:	080048d9 	.word	0x080048d9
 8003bc4:	20000020 	.word	0x20000020

08003bc8 <cleanup_stdio>:
 8003bc8:	6841      	ldr	r1, [r0, #4]
 8003bca:	4b0c      	ldr	r3, [pc, #48]	@ (8003bfc <cleanup_stdio+0x34>)
 8003bcc:	4299      	cmp	r1, r3
 8003bce:	b510      	push	{r4, lr}
 8003bd0:	4604      	mov	r4, r0
 8003bd2:	d001      	beq.n	8003bd8 <cleanup_stdio+0x10>
 8003bd4:	f000 fe80 	bl	80048d8 <_fflush_r>
 8003bd8:	68a1      	ldr	r1, [r4, #8]
 8003bda:	4b09      	ldr	r3, [pc, #36]	@ (8003c00 <cleanup_stdio+0x38>)
 8003bdc:	4299      	cmp	r1, r3
 8003bde:	d002      	beq.n	8003be6 <cleanup_stdio+0x1e>
 8003be0:	4620      	mov	r0, r4
 8003be2:	f000 fe79 	bl	80048d8 <_fflush_r>
 8003be6:	68e1      	ldr	r1, [r4, #12]
 8003be8:	4b06      	ldr	r3, [pc, #24]	@ (8003c04 <cleanup_stdio+0x3c>)
 8003bea:	4299      	cmp	r1, r3
 8003bec:	d004      	beq.n	8003bf8 <cleanup_stdio+0x30>
 8003bee:	4620      	mov	r0, r4
 8003bf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bf4:	f000 be70 	b.w	80048d8 <_fflush_r>
 8003bf8:	bd10      	pop	{r4, pc}
 8003bfa:	bf00      	nop
 8003bfc:	20000128 	.word	0x20000128
 8003c00:	20000190 	.word	0x20000190
 8003c04:	200001f8 	.word	0x200001f8

08003c08 <global_stdio_init.part.0>:
 8003c08:	b510      	push	{r4, lr}
 8003c0a:	4b0b      	ldr	r3, [pc, #44]	@ (8003c38 <global_stdio_init.part.0+0x30>)
 8003c0c:	4c0b      	ldr	r4, [pc, #44]	@ (8003c3c <global_stdio_init.part.0+0x34>)
 8003c0e:	4a0c      	ldr	r2, [pc, #48]	@ (8003c40 <global_stdio_init.part.0+0x38>)
 8003c10:	601a      	str	r2, [r3, #0]
 8003c12:	4620      	mov	r0, r4
 8003c14:	2200      	movs	r2, #0
 8003c16:	2104      	movs	r1, #4
 8003c18:	f7ff ff94 	bl	8003b44 <std>
 8003c1c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003c20:	2201      	movs	r2, #1
 8003c22:	2109      	movs	r1, #9
 8003c24:	f7ff ff8e 	bl	8003b44 <std>
 8003c28:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003c2c:	2202      	movs	r2, #2
 8003c2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c32:	2112      	movs	r1, #18
 8003c34:	f7ff bf86 	b.w	8003b44 <std>
 8003c38:	20000260 	.word	0x20000260
 8003c3c:	20000128 	.word	0x20000128
 8003c40:	08003bb1 	.word	0x08003bb1

08003c44 <__sfp_lock_acquire>:
 8003c44:	4801      	ldr	r0, [pc, #4]	@ (8003c4c <__sfp_lock_acquire+0x8>)
 8003c46:	f000 ba00 	b.w	800404a <__retarget_lock_acquire_recursive>
 8003c4a:	bf00      	nop
 8003c4c:	20000269 	.word	0x20000269

08003c50 <__sfp_lock_release>:
 8003c50:	4801      	ldr	r0, [pc, #4]	@ (8003c58 <__sfp_lock_release+0x8>)
 8003c52:	f000 b9fb 	b.w	800404c <__retarget_lock_release_recursive>
 8003c56:	bf00      	nop
 8003c58:	20000269 	.word	0x20000269

08003c5c <__sinit>:
 8003c5c:	b510      	push	{r4, lr}
 8003c5e:	4604      	mov	r4, r0
 8003c60:	f7ff fff0 	bl	8003c44 <__sfp_lock_acquire>
 8003c64:	6a23      	ldr	r3, [r4, #32]
 8003c66:	b11b      	cbz	r3, 8003c70 <__sinit+0x14>
 8003c68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c6c:	f7ff bff0 	b.w	8003c50 <__sfp_lock_release>
 8003c70:	4b04      	ldr	r3, [pc, #16]	@ (8003c84 <__sinit+0x28>)
 8003c72:	6223      	str	r3, [r4, #32]
 8003c74:	4b04      	ldr	r3, [pc, #16]	@ (8003c88 <__sinit+0x2c>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1f5      	bne.n	8003c68 <__sinit+0xc>
 8003c7c:	f7ff ffc4 	bl	8003c08 <global_stdio_init.part.0>
 8003c80:	e7f2      	b.n	8003c68 <__sinit+0xc>
 8003c82:	bf00      	nop
 8003c84:	08003bc9 	.word	0x08003bc9
 8003c88:	20000260 	.word	0x20000260

08003c8c <_fwalk_sglue>:
 8003c8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c90:	4607      	mov	r7, r0
 8003c92:	4688      	mov	r8, r1
 8003c94:	4614      	mov	r4, r2
 8003c96:	2600      	movs	r6, #0
 8003c98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003c9c:	f1b9 0901 	subs.w	r9, r9, #1
 8003ca0:	d505      	bpl.n	8003cae <_fwalk_sglue+0x22>
 8003ca2:	6824      	ldr	r4, [r4, #0]
 8003ca4:	2c00      	cmp	r4, #0
 8003ca6:	d1f7      	bne.n	8003c98 <_fwalk_sglue+0xc>
 8003ca8:	4630      	mov	r0, r6
 8003caa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003cae:	89ab      	ldrh	r3, [r5, #12]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d907      	bls.n	8003cc4 <_fwalk_sglue+0x38>
 8003cb4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003cb8:	3301      	adds	r3, #1
 8003cba:	d003      	beq.n	8003cc4 <_fwalk_sglue+0x38>
 8003cbc:	4629      	mov	r1, r5
 8003cbe:	4638      	mov	r0, r7
 8003cc0:	47c0      	blx	r8
 8003cc2:	4306      	orrs	r6, r0
 8003cc4:	3568      	adds	r5, #104	@ 0x68
 8003cc6:	e7e9      	b.n	8003c9c <_fwalk_sglue+0x10>

08003cc8 <iprintf>:
 8003cc8:	b40f      	push	{r0, r1, r2, r3}
 8003cca:	b507      	push	{r0, r1, r2, lr}
 8003ccc:	4906      	ldr	r1, [pc, #24]	@ (8003ce8 <iprintf+0x20>)
 8003cce:	ab04      	add	r3, sp, #16
 8003cd0:	6808      	ldr	r0, [r1, #0]
 8003cd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8003cd6:	6881      	ldr	r1, [r0, #8]
 8003cd8:	9301      	str	r3, [sp, #4]
 8003cda:	f000 fad9 	bl	8004290 <_vfiprintf_r>
 8003cde:	b003      	add	sp, #12
 8003ce0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ce4:	b004      	add	sp, #16
 8003ce6:	4770      	bx	lr
 8003ce8:	2000001c 	.word	0x2000001c

08003cec <_puts_r>:
 8003cec:	6a03      	ldr	r3, [r0, #32]
 8003cee:	b570      	push	{r4, r5, r6, lr}
 8003cf0:	6884      	ldr	r4, [r0, #8]
 8003cf2:	4605      	mov	r5, r0
 8003cf4:	460e      	mov	r6, r1
 8003cf6:	b90b      	cbnz	r3, 8003cfc <_puts_r+0x10>
 8003cf8:	f7ff ffb0 	bl	8003c5c <__sinit>
 8003cfc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003cfe:	07db      	lsls	r3, r3, #31
 8003d00:	d405      	bmi.n	8003d0e <_puts_r+0x22>
 8003d02:	89a3      	ldrh	r3, [r4, #12]
 8003d04:	0598      	lsls	r0, r3, #22
 8003d06:	d402      	bmi.n	8003d0e <_puts_r+0x22>
 8003d08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003d0a:	f000 f99e 	bl	800404a <__retarget_lock_acquire_recursive>
 8003d0e:	89a3      	ldrh	r3, [r4, #12]
 8003d10:	0719      	lsls	r1, r3, #28
 8003d12:	d502      	bpl.n	8003d1a <_puts_r+0x2e>
 8003d14:	6923      	ldr	r3, [r4, #16]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d135      	bne.n	8003d86 <_puts_r+0x9a>
 8003d1a:	4621      	mov	r1, r4
 8003d1c:	4628      	mov	r0, r5
 8003d1e:	f000 f8c5 	bl	8003eac <__swsetup_r>
 8003d22:	b380      	cbz	r0, 8003d86 <_puts_r+0x9a>
 8003d24:	f04f 35ff 	mov.w	r5, #4294967295
 8003d28:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003d2a:	07da      	lsls	r2, r3, #31
 8003d2c:	d405      	bmi.n	8003d3a <_puts_r+0x4e>
 8003d2e:	89a3      	ldrh	r3, [r4, #12]
 8003d30:	059b      	lsls	r3, r3, #22
 8003d32:	d402      	bmi.n	8003d3a <_puts_r+0x4e>
 8003d34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003d36:	f000 f989 	bl	800404c <__retarget_lock_release_recursive>
 8003d3a:	4628      	mov	r0, r5
 8003d3c:	bd70      	pop	{r4, r5, r6, pc}
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	da04      	bge.n	8003d4c <_puts_r+0x60>
 8003d42:	69a2      	ldr	r2, [r4, #24]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	dc17      	bgt.n	8003d78 <_puts_r+0x8c>
 8003d48:	290a      	cmp	r1, #10
 8003d4a:	d015      	beq.n	8003d78 <_puts_r+0x8c>
 8003d4c:	6823      	ldr	r3, [r4, #0]
 8003d4e:	1c5a      	adds	r2, r3, #1
 8003d50:	6022      	str	r2, [r4, #0]
 8003d52:	7019      	strb	r1, [r3, #0]
 8003d54:	68a3      	ldr	r3, [r4, #8]
 8003d56:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	60a3      	str	r3, [r4, #8]
 8003d5e:	2900      	cmp	r1, #0
 8003d60:	d1ed      	bne.n	8003d3e <_puts_r+0x52>
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	da11      	bge.n	8003d8a <_puts_r+0x9e>
 8003d66:	4622      	mov	r2, r4
 8003d68:	210a      	movs	r1, #10
 8003d6a:	4628      	mov	r0, r5
 8003d6c:	f000 f85f 	bl	8003e2e <__swbuf_r>
 8003d70:	3001      	adds	r0, #1
 8003d72:	d0d7      	beq.n	8003d24 <_puts_r+0x38>
 8003d74:	250a      	movs	r5, #10
 8003d76:	e7d7      	b.n	8003d28 <_puts_r+0x3c>
 8003d78:	4622      	mov	r2, r4
 8003d7a:	4628      	mov	r0, r5
 8003d7c:	f000 f857 	bl	8003e2e <__swbuf_r>
 8003d80:	3001      	adds	r0, #1
 8003d82:	d1e7      	bne.n	8003d54 <_puts_r+0x68>
 8003d84:	e7ce      	b.n	8003d24 <_puts_r+0x38>
 8003d86:	3e01      	subs	r6, #1
 8003d88:	e7e4      	b.n	8003d54 <_puts_r+0x68>
 8003d8a:	6823      	ldr	r3, [r4, #0]
 8003d8c:	1c5a      	adds	r2, r3, #1
 8003d8e:	6022      	str	r2, [r4, #0]
 8003d90:	220a      	movs	r2, #10
 8003d92:	701a      	strb	r2, [r3, #0]
 8003d94:	e7ee      	b.n	8003d74 <_puts_r+0x88>
	...

08003d98 <puts>:
 8003d98:	4b02      	ldr	r3, [pc, #8]	@ (8003da4 <puts+0xc>)
 8003d9a:	4601      	mov	r1, r0
 8003d9c:	6818      	ldr	r0, [r3, #0]
 8003d9e:	f7ff bfa5 	b.w	8003cec <_puts_r>
 8003da2:	bf00      	nop
 8003da4:	2000001c 	.word	0x2000001c

08003da8 <__sread>:
 8003da8:	b510      	push	{r4, lr}
 8003daa:	460c      	mov	r4, r1
 8003dac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003db0:	f000 f8fc 	bl	8003fac <_read_r>
 8003db4:	2800      	cmp	r0, #0
 8003db6:	bfab      	itete	ge
 8003db8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003dba:	89a3      	ldrhlt	r3, [r4, #12]
 8003dbc:	181b      	addge	r3, r3, r0
 8003dbe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003dc2:	bfac      	ite	ge
 8003dc4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003dc6:	81a3      	strhlt	r3, [r4, #12]
 8003dc8:	bd10      	pop	{r4, pc}

08003dca <__swrite>:
 8003dca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dce:	461f      	mov	r7, r3
 8003dd0:	898b      	ldrh	r3, [r1, #12]
 8003dd2:	05db      	lsls	r3, r3, #23
 8003dd4:	4605      	mov	r5, r0
 8003dd6:	460c      	mov	r4, r1
 8003dd8:	4616      	mov	r6, r2
 8003dda:	d505      	bpl.n	8003de8 <__swrite+0x1e>
 8003ddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003de0:	2302      	movs	r3, #2
 8003de2:	2200      	movs	r2, #0
 8003de4:	f000 f8d0 	bl	8003f88 <_lseek_r>
 8003de8:	89a3      	ldrh	r3, [r4, #12]
 8003dea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003dee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003df2:	81a3      	strh	r3, [r4, #12]
 8003df4:	4632      	mov	r2, r6
 8003df6:	463b      	mov	r3, r7
 8003df8:	4628      	mov	r0, r5
 8003dfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003dfe:	f000 b8e7 	b.w	8003fd0 <_write_r>

08003e02 <__sseek>:
 8003e02:	b510      	push	{r4, lr}
 8003e04:	460c      	mov	r4, r1
 8003e06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e0a:	f000 f8bd 	bl	8003f88 <_lseek_r>
 8003e0e:	1c43      	adds	r3, r0, #1
 8003e10:	89a3      	ldrh	r3, [r4, #12]
 8003e12:	bf15      	itete	ne
 8003e14:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003e16:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003e1a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003e1e:	81a3      	strheq	r3, [r4, #12]
 8003e20:	bf18      	it	ne
 8003e22:	81a3      	strhne	r3, [r4, #12]
 8003e24:	bd10      	pop	{r4, pc}

08003e26 <__sclose>:
 8003e26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e2a:	f000 b89d 	b.w	8003f68 <_close_r>

08003e2e <__swbuf_r>:
 8003e2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e30:	460e      	mov	r6, r1
 8003e32:	4614      	mov	r4, r2
 8003e34:	4605      	mov	r5, r0
 8003e36:	b118      	cbz	r0, 8003e40 <__swbuf_r+0x12>
 8003e38:	6a03      	ldr	r3, [r0, #32]
 8003e3a:	b90b      	cbnz	r3, 8003e40 <__swbuf_r+0x12>
 8003e3c:	f7ff ff0e 	bl	8003c5c <__sinit>
 8003e40:	69a3      	ldr	r3, [r4, #24]
 8003e42:	60a3      	str	r3, [r4, #8]
 8003e44:	89a3      	ldrh	r3, [r4, #12]
 8003e46:	071a      	lsls	r2, r3, #28
 8003e48:	d501      	bpl.n	8003e4e <__swbuf_r+0x20>
 8003e4a:	6923      	ldr	r3, [r4, #16]
 8003e4c:	b943      	cbnz	r3, 8003e60 <__swbuf_r+0x32>
 8003e4e:	4621      	mov	r1, r4
 8003e50:	4628      	mov	r0, r5
 8003e52:	f000 f82b 	bl	8003eac <__swsetup_r>
 8003e56:	b118      	cbz	r0, 8003e60 <__swbuf_r+0x32>
 8003e58:	f04f 37ff 	mov.w	r7, #4294967295
 8003e5c:	4638      	mov	r0, r7
 8003e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e60:	6823      	ldr	r3, [r4, #0]
 8003e62:	6922      	ldr	r2, [r4, #16]
 8003e64:	1a98      	subs	r0, r3, r2
 8003e66:	6963      	ldr	r3, [r4, #20]
 8003e68:	b2f6      	uxtb	r6, r6
 8003e6a:	4283      	cmp	r3, r0
 8003e6c:	4637      	mov	r7, r6
 8003e6e:	dc05      	bgt.n	8003e7c <__swbuf_r+0x4e>
 8003e70:	4621      	mov	r1, r4
 8003e72:	4628      	mov	r0, r5
 8003e74:	f000 fd30 	bl	80048d8 <_fflush_r>
 8003e78:	2800      	cmp	r0, #0
 8003e7a:	d1ed      	bne.n	8003e58 <__swbuf_r+0x2a>
 8003e7c:	68a3      	ldr	r3, [r4, #8]
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	60a3      	str	r3, [r4, #8]
 8003e82:	6823      	ldr	r3, [r4, #0]
 8003e84:	1c5a      	adds	r2, r3, #1
 8003e86:	6022      	str	r2, [r4, #0]
 8003e88:	701e      	strb	r6, [r3, #0]
 8003e8a:	6962      	ldr	r2, [r4, #20]
 8003e8c:	1c43      	adds	r3, r0, #1
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d004      	beq.n	8003e9c <__swbuf_r+0x6e>
 8003e92:	89a3      	ldrh	r3, [r4, #12]
 8003e94:	07db      	lsls	r3, r3, #31
 8003e96:	d5e1      	bpl.n	8003e5c <__swbuf_r+0x2e>
 8003e98:	2e0a      	cmp	r6, #10
 8003e9a:	d1df      	bne.n	8003e5c <__swbuf_r+0x2e>
 8003e9c:	4621      	mov	r1, r4
 8003e9e:	4628      	mov	r0, r5
 8003ea0:	f000 fd1a 	bl	80048d8 <_fflush_r>
 8003ea4:	2800      	cmp	r0, #0
 8003ea6:	d0d9      	beq.n	8003e5c <__swbuf_r+0x2e>
 8003ea8:	e7d6      	b.n	8003e58 <__swbuf_r+0x2a>
	...

08003eac <__swsetup_r>:
 8003eac:	b538      	push	{r3, r4, r5, lr}
 8003eae:	4b29      	ldr	r3, [pc, #164]	@ (8003f54 <__swsetup_r+0xa8>)
 8003eb0:	4605      	mov	r5, r0
 8003eb2:	6818      	ldr	r0, [r3, #0]
 8003eb4:	460c      	mov	r4, r1
 8003eb6:	b118      	cbz	r0, 8003ec0 <__swsetup_r+0x14>
 8003eb8:	6a03      	ldr	r3, [r0, #32]
 8003eba:	b90b      	cbnz	r3, 8003ec0 <__swsetup_r+0x14>
 8003ebc:	f7ff fece 	bl	8003c5c <__sinit>
 8003ec0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ec4:	0719      	lsls	r1, r3, #28
 8003ec6:	d422      	bmi.n	8003f0e <__swsetup_r+0x62>
 8003ec8:	06da      	lsls	r2, r3, #27
 8003eca:	d407      	bmi.n	8003edc <__swsetup_r+0x30>
 8003ecc:	2209      	movs	r2, #9
 8003ece:	602a      	str	r2, [r5, #0]
 8003ed0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ed4:	81a3      	strh	r3, [r4, #12]
 8003ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8003eda:	e033      	b.n	8003f44 <__swsetup_r+0x98>
 8003edc:	0758      	lsls	r0, r3, #29
 8003ede:	d512      	bpl.n	8003f06 <__swsetup_r+0x5a>
 8003ee0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003ee2:	b141      	cbz	r1, 8003ef6 <__swsetup_r+0x4a>
 8003ee4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003ee8:	4299      	cmp	r1, r3
 8003eea:	d002      	beq.n	8003ef2 <__swsetup_r+0x46>
 8003eec:	4628      	mov	r0, r5
 8003eee:	f000 f8af 	bl	8004050 <_free_r>
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	6363      	str	r3, [r4, #52]	@ 0x34
 8003ef6:	89a3      	ldrh	r3, [r4, #12]
 8003ef8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003efc:	81a3      	strh	r3, [r4, #12]
 8003efe:	2300      	movs	r3, #0
 8003f00:	6063      	str	r3, [r4, #4]
 8003f02:	6923      	ldr	r3, [r4, #16]
 8003f04:	6023      	str	r3, [r4, #0]
 8003f06:	89a3      	ldrh	r3, [r4, #12]
 8003f08:	f043 0308 	orr.w	r3, r3, #8
 8003f0c:	81a3      	strh	r3, [r4, #12]
 8003f0e:	6923      	ldr	r3, [r4, #16]
 8003f10:	b94b      	cbnz	r3, 8003f26 <__swsetup_r+0x7a>
 8003f12:	89a3      	ldrh	r3, [r4, #12]
 8003f14:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003f18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f1c:	d003      	beq.n	8003f26 <__swsetup_r+0x7a>
 8003f1e:	4621      	mov	r1, r4
 8003f20:	4628      	mov	r0, r5
 8003f22:	f000 fd27 	bl	8004974 <__smakebuf_r>
 8003f26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f2a:	f013 0201 	ands.w	r2, r3, #1
 8003f2e:	d00a      	beq.n	8003f46 <__swsetup_r+0x9a>
 8003f30:	2200      	movs	r2, #0
 8003f32:	60a2      	str	r2, [r4, #8]
 8003f34:	6962      	ldr	r2, [r4, #20]
 8003f36:	4252      	negs	r2, r2
 8003f38:	61a2      	str	r2, [r4, #24]
 8003f3a:	6922      	ldr	r2, [r4, #16]
 8003f3c:	b942      	cbnz	r2, 8003f50 <__swsetup_r+0xa4>
 8003f3e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003f42:	d1c5      	bne.n	8003ed0 <__swsetup_r+0x24>
 8003f44:	bd38      	pop	{r3, r4, r5, pc}
 8003f46:	0799      	lsls	r1, r3, #30
 8003f48:	bf58      	it	pl
 8003f4a:	6962      	ldrpl	r2, [r4, #20]
 8003f4c:	60a2      	str	r2, [r4, #8]
 8003f4e:	e7f4      	b.n	8003f3a <__swsetup_r+0x8e>
 8003f50:	2000      	movs	r0, #0
 8003f52:	e7f7      	b.n	8003f44 <__swsetup_r+0x98>
 8003f54:	2000001c 	.word	0x2000001c

08003f58 <memset>:
 8003f58:	4402      	add	r2, r0
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d100      	bne.n	8003f62 <memset+0xa>
 8003f60:	4770      	bx	lr
 8003f62:	f803 1b01 	strb.w	r1, [r3], #1
 8003f66:	e7f9      	b.n	8003f5c <memset+0x4>

08003f68 <_close_r>:
 8003f68:	b538      	push	{r3, r4, r5, lr}
 8003f6a:	4d06      	ldr	r5, [pc, #24]	@ (8003f84 <_close_r+0x1c>)
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	4604      	mov	r4, r0
 8003f70:	4608      	mov	r0, r1
 8003f72:	602b      	str	r3, [r5, #0]
 8003f74:	f7fd f806 	bl	8000f84 <_close>
 8003f78:	1c43      	adds	r3, r0, #1
 8003f7a:	d102      	bne.n	8003f82 <_close_r+0x1a>
 8003f7c:	682b      	ldr	r3, [r5, #0]
 8003f7e:	b103      	cbz	r3, 8003f82 <_close_r+0x1a>
 8003f80:	6023      	str	r3, [r4, #0]
 8003f82:	bd38      	pop	{r3, r4, r5, pc}
 8003f84:	20000264 	.word	0x20000264

08003f88 <_lseek_r>:
 8003f88:	b538      	push	{r3, r4, r5, lr}
 8003f8a:	4d07      	ldr	r5, [pc, #28]	@ (8003fa8 <_lseek_r+0x20>)
 8003f8c:	4604      	mov	r4, r0
 8003f8e:	4608      	mov	r0, r1
 8003f90:	4611      	mov	r1, r2
 8003f92:	2200      	movs	r2, #0
 8003f94:	602a      	str	r2, [r5, #0]
 8003f96:	461a      	mov	r2, r3
 8003f98:	f7fd f818 	bl	8000fcc <_lseek>
 8003f9c:	1c43      	adds	r3, r0, #1
 8003f9e:	d102      	bne.n	8003fa6 <_lseek_r+0x1e>
 8003fa0:	682b      	ldr	r3, [r5, #0]
 8003fa2:	b103      	cbz	r3, 8003fa6 <_lseek_r+0x1e>
 8003fa4:	6023      	str	r3, [r4, #0]
 8003fa6:	bd38      	pop	{r3, r4, r5, pc}
 8003fa8:	20000264 	.word	0x20000264

08003fac <_read_r>:
 8003fac:	b538      	push	{r3, r4, r5, lr}
 8003fae:	4d07      	ldr	r5, [pc, #28]	@ (8003fcc <_read_r+0x20>)
 8003fb0:	4604      	mov	r4, r0
 8003fb2:	4608      	mov	r0, r1
 8003fb4:	4611      	mov	r1, r2
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	602a      	str	r2, [r5, #0]
 8003fba:	461a      	mov	r2, r3
 8003fbc:	f7fc ffa9 	bl	8000f12 <_read>
 8003fc0:	1c43      	adds	r3, r0, #1
 8003fc2:	d102      	bne.n	8003fca <_read_r+0x1e>
 8003fc4:	682b      	ldr	r3, [r5, #0]
 8003fc6:	b103      	cbz	r3, 8003fca <_read_r+0x1e>
 8003fc8:	6023      	str	r3, [r4, #0]
 8003fca:	bd38      	pop	{r3, r4, r5, pc}
 8003fcc:	20000264 	.word	0x20000264

08003fd0 <_write_r>:
 8003fd0:	b538      	push	{r3, r4, r5, lr}
 8003fd2:	4d07      	ldr	r5, [pc, #28]	@ (8003ff0 <_write_r+0x20>)
 8003fd4:	4604      	mov	r4, r0
 8003fd6:	4608      	mov	r0, r1
 8003fd8:	4611      	mov	r1, r2
 8003fda:	2200      	movs	r2, #0
 8003fdc:	602a      	str	r2, [r5, #0]
 8003fde:	461a      	mov	r2, r3
 8003fe0:	f7fc ffb4 	bl	8000f4c <_write>
 8003fe4:	1c43      	adds	r3, r0, #1
 8003fe6:	d102      	bne.n	8003fee <_write_r+0x1e>
 8003fe8:	682b      	ldr	r3, [r5, #0]
 8003fea:	b103      	cbz	r3, 8003fee <_write_r+0x1e>
 8003fec:	6023      	str	r3, [r4, #0]
 8003fee:	bd38      	pop	{r3, r4, r5, pc}
 8003ff0:	20000264 	.word	0x20000264

08003ff4 <__errno>:
 8003ff4:	4b01      	ldr	r3, [pc, #4]	@ (8003ffc <__errno+0x8>)
 8003ff6:	6818      	ldr	r0, [r3, #0]
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	2000001c 	.word	0x2000001c

08004000 <__libc_init_array>:
 8004000:	b570      	push	{r4, r5, r6, lr}
 8004002:	4d0d      	ldr	r5, [pc, #52]	@ (8004038 <__libc_init_array+0x38>)
 8004004:	4c0d      	ldr	r4, [pc, #52]	@ (800403c <__libc_init_array+0x3c>)
 8004006:	1b64      	subs	r4, r4, r5
 8004008:	10a4      	asrs	r4, r4, #2
 800400a:	2600      	movs	r6, #0
 800400c:	42a6      	cmp	r6, r4
 800400e:	d109      	bne.n	8004024 <__libc_init_array+0x24>
 8004010:	4d0b      	ldr	r5, [pc, #44]	@ (8004040 <__libc_init_array+0x40>)
 8004012:	4c0c      	ldr	r4, [pc, #48]	@ (8004044 <__libc_init_array+0x44>)
 8004014:	f000 fd1c 	bl	8004a50 <_init>
 8004018:	1b64      	subs	r4, r4, r5
 800401a:	10a4      	asrs	r4, r4, #2
 800401c:	2600      	movs	r6, #0
 800401e:	42a6      	cmp	r6, r4
 8004020:	d105      	bne.n	800402e <__libc_init_array+0x2e>
 8004022:	bd70      	pop	{r4, r5, r6, pc}
 8004024:	f855 3b04 	ldr.w	r3, [r5], #4
 8004028:	4798      	blx	r3
 800402a:	3601      	adds	r6, #1
 800402c:	e7ee      	b.n	800400c <__libc_init_array+0xc>
 800402e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004032:	4798      	blx	r3
 8004034:	3601      	adds	r6, #1
 8004036:	e7f2      	b.n	800401e <__libc_init_array+0x1e>
 8004038:	08004d44 	.word	0x08004d44
 800403c:	08004d44 	.word	0x08004d44
 8004040:	08004d44 	.word	0x08004d44
 8004044:	08004d48 	.word	0x08004d48

08004048 <__retarget_lock_init_recursive>:
 8004048:	4770      	bx	lr

0800404a <__retarget_lock_acquire_recursive>:
 800404a:	4770      	bx	lr

0800404c <__retarget_lock_release_recursive>:
 800404c:	4770      	bx	lr
	...

08004050 <_free_r>:
 8004050:	b538      	push	{r3, r4, r5, lr}
 8004052:	4605      	mov	r5, r0
 8004054:	2900      	cmp	r1, #0
 8004056:	d041      	beq.n	80040dc <_free_r+0x8c>
 8004058:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800405c:	1f0c      	subs	r4, r1, #4
 800405e:	2b00      	cmp	r3, #0
 8004060:	bfb8      	it	lt
 8004062:	18e4      	addlt	r4, r4, r3
 8004064:	f000 f8e0 	bl	8004228 <__malloc_lock>
 8004068:	4a1d      	ldr	r2, [pc, #116]	@ (80040e0 <_free_r+0x90>)
 800406a:	6813      	ldr	r3, [r2, #0]
 800406c:	b933      	cbnz	r3, 800407c <_free_r+0x2c>
 800406e:	6063      	str	r3, [r4, #4]
 8004070:	6014      	str	r4, [r2, #0]
 8004072:	4628      	mov	r0, r5
 8004074:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004078:	f000 b8dc 	b.w	8004234 <__malloc_unlock>
 800407c:	42a3      	cmp	r3, r4
 800407e:	d908      	bls.n	8004092 <_free_r+0x42>
 8004080:	6820      	ldr	r0, [r4, #0]
 8004082:	1821      	adds	r1, r4, r0
 8004084:	428b      	cmp	r3, r1
 8004086:	bf01      	itttt	eq
 8004088:	6819      	ldreq	r1, [r3, #0]
 800408a:	685b      	ldreq	r3, [r3, #4]
 800408c:	1809      	addeq	r1, r1, r0
 800408e:	6021      	streq	r1, [r4, #0]
 8004090:	e7ed      	b.n	800406e <_free_r+0x1e>
 8004092:	461a      	mov	r2, r3
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	b10b      	cbz	r3, 800409c <_free_r+0x4c>
 8004098:	42a3      	cmp	r3, r4
 800409a:	d9fa      	bls.n	8004092 <_free_r+0x42>
 800409c:	6811      	ldr	r1, [r2, #0]
 800409e:	1850      	adds	r0, r2, r1
 80040a0:	42a0      	cmp	r0, r4
 80040a2:	d10b      	bne.n	80040bc <_free_r+0x6c>
 80040a4:	6820      	ldr	r0, [r4, #0]
 80040a6:	4401      	add	r1, r0
 80040a8:	1850      	adds	r0, r2, r1
 80040aa:	4283      	cmp	r3, r0
 80040ac:	6011      	str	r1, [r2, #0]
 80040ae:	d1e0      	bne.n	8004072 <_free_r+0x22>
 80040b0:	6818      	ldr	r0, [r3, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	6053      	str	r3, [r2, #4]
 80040b6:	4408      	add	r0, r1
 80040b8:	6010      	str	r0, [r2, #0]
 80040ba:	e7da      	b.n	8004072 <_free_r+0x22>
 80040bc:	d902      	bls.n	80040c4 <_free_r+0x74>
 80040be:	230c      	movs	r3, #12
 80040c0:	602b      	str	r3, [r5, #0]
 80040c2:	e7d6      	b.n	8004072 <_free_r+0x22>
 80040c4:	6820      	ldr	r0, [r4, #0]
 80040c6:	1821      	adds	r1, r4, r0
 80040c8:	428b      	cmp	r3, r1
 80040ca:	bf04      	itt	eq
 80040cc:	6819      	ldreq	r1, [r3, #0]
 80040ce:	685b      	ldreq	r3, [r3, #4]
 80040d0:	6063      	str	r3, [r4, #4]
 80040d2:	bf04      	itt	eq
 80040d4:	1809      	addeq	r1, r1, r0
 80040d6:	6021      	streq	r1, [r4, #0]
 80040d8:	6054      	str	r4, [r2, #4]
 80040da:	e7ca      	b.n	8004072 <_free_r+0x22>
 80040dc:	bd38      	pop	{r3, r4, r5, pc}
 80040de:	bf00      	nop
 80040e0:	20000270 	.word	0x20000270

080040e4 <sbrk_aligned>:
 80040e4:	b570      	push	{r4, r5, r6, lr}
 80040e6:	4e0f      	ldr	r6, [pc, #60]	@ (8004124 <sbrk_aligned+0x40>)
 80040e8:	460c      	mov	r4, r1
 80040ea:	6831      	ldr	r1, [r6, #0]
 80040ec:	4605      	mov	r5, r0
 80040ee:	b911      	cbnz	r1, 80040f6 <sbrk_aligned+0x12>
 80040f0:	f000 fc9e 	bl	8004a30 <_sbrk_r>
 80040f4:	6030      	str	r0, [r6, #0]
 80040f6:	4621      	mov	r1, r4
 80040f8:	4628      	mov	r0, r5
 80040fa:	f000 fc99 	bl	8004a30 <_sbrk_r>
 80040fe:	1c43      	adds	r3, r0, #1
 8004100:	d103      	bne.n	800410a <sbrk_aligned+0x26>
 8004102:	f04f 34ff 	mov.w	r4, #4294967295
 8004106:	4620      	mov	r0, r4
 8004108:	bd70      	pop	{r4, r5, r6, pc}
 800410a:	1cc4      	adds	r4, r0, #3
 800410c:	f024 0403 	bic.w	r4, r4, #3
 8004110:	42a0      	cmp	r0, r4
 8004112:	d0f8      	beq.n	8004106 <sbrk_aligned+0x22>
 8004114:	1a21      	subs	r1, r4, r0
 8004116:	4628      	mov	r0, r5
 8004118:	f000 fc8a 	bl	8004a30 <_sbrk_r>
 800411c:	3001      	adds	r0, #1
 800411e:	d1f2      	bne.n	8004106 <sbrk_aligned+0x22>
 8004120:	e7ef      	b.n	8004102 <sbrk_aligned+0x1e>
 8004122:	bf00      	nop
 8004124:	2000026c 	.word	0x2000026c

08004128 <_malloc_r>:
 8004128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800412c:	1ccd      	adds	r5, r1, #3
 800412e:	f025 0503 	bic.w	r5, r5, #3
 8004132:	3508      	adds	r5, #8
 8004134:	2d0c      	cmp	r5, #12
 8004136:	bf38      	it	cc
 8004138:	250c      	movcc	r5, #12
 800413a:	2d00      	cmp	r5, #0
 800413c:	4606      	mov	r6, r0
 800413e:	db01      	blt.n	8004144 <_malloc_r+0x1c>
 8004140:	42a9      	cmp	r1, r5
 8004142:	d904      	bls.n	800414e <_malloc_r+0x26>
 8004144:	230c      	movs	r3, #12
 8004146:	6033      	str	r3, [r6, #0]
 8004148:	2000      	movs	r0, #0
 800414a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800414e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004224 <_malloc_r+0xfc>
 8004152:	f000 f869 	bl	8004228 <__malloc_lock>
 8004156:	f8d8 3000 	ldr.w	r3, [r8]
 800415a:	461c      	mov	r4, r3
 800415c:	bb44      	cbnz	r4, 80041b0 <_malloc_r+0x88>
 800415e:	4629      	mov	r1, r5
 8004160:	4630      	mov	r0, r6
 8004162:	f7ff ffbf 	bl	80040e4 <sbrk_aligned>
 8004166:	1c43      	adds	r3, r0, #1
 8004168:	4604      	mov	r4, r0
 800416a:	d158      	bne.n	800421e <_malloc_r+0xf6>
 800416c:	f8d8 4000 	ldr.w	r4, [r8]
 8004170:	4627      	mov	r7, r4
 8004172:	2f00      	cmp	r7, #0
 8004174:	d143      	bne.n	80041fe <_malloc_r+0xd6>
 8004176:	2c00      	cmp	r4, #0
 8004178:	d04b      	beq.n	8004212 <_malloc_r+0xea>
 800417a:	6823      	ldr	r3, [r4, #0]
 800417c:	4639      	mov	r1, r7
 800417e:	4630      	mov	r0, r6
 8004180:	eb04 0903 	add.w	r9, r4, r3
 8004184:	f000 fc54 	bl	8004a30 <_sbrk_r>
 8004188:	4581      	cmp	r9, r0
 800418a:	d142      	bne.n	8004212 <_malloc_r+0xea>
 800418c:	6821      	ldr	r1, [r4, #0]
 800418e:	1a6d      	subs	r5, r5, r1
 8004190:	4629      	mov	r1, r5
 8004192:	4630      	mov	r0, r6
 8004194:	f7ff ffa6 	bl	80040e4 <sbrk_aligned>
 8004198:	3001      	adds	r0, #1
 800419a:	d03a      	beq.n	8004212 <_malloc_r+0xea>
 800419c:	6823      	ldr	r3, [r4, #0]
 800419e:	442b      	add	r3, r5
 80041a0:	6023      	str	r3, [r4, #0]
 80041a2:	f8d8 3000 	ldr.w	r3, [r8]
 80041a6:	685a      	ldr	r2, [r3, #4]
 80041a8:	bb62      	cbnz	r2, 8004204 <_malloc_r+0xdc>
 80041aa:	f8c8 7000 	str.w	r7, [r8]
 80041ae:	e00f      	b.n	80041d0 <_malloc_r+0xa8>
 80041b0:	6822      	ldr	r2, [r4, #0]
 80041b2:	1b52      	subs	r2, r2, r5
 80041b4:	d420      	bmi.n	80041f8 <_malloc_r+0xd0>
 80041b6:	2a0b      	cmp	r2, #11
 80041b8:	d917      	bls.n	80041ea <_malloc_r+0xc2>
 80041ba:	1961      	adds	r1, r4, r5
 80041bc:	42a3      	cmp	r3, r4
 80041be:	6025      	str	r5, [r4, #0]
 80041c0:	bf18      	it	ne
 80041c2:	6059      	strne	r1, [r3, #4]
 80041c4:	6863      	ldr	r3, [r4, #4]
 80041c6:	bf08      	it	eq
 80041c8:	f8c8 1000 	streq.w	r1, [r8]
 80041cc:	5162      	str	r2, [r4, r5]
 80041ce:	604b      	str	r3, [r1, #4]
 80041d0:	4630      	mov	r0, r6
 80041d2:	f000 f82f 	bl	8004234 <__malloc_unlock>
 80041d6:	f104 000b 	add.w	r0, r4, #11
 80041da:	1d23      	adds	r3, r4, #4
 80041dc:	f020 0007 	bic.w	r0, r0, #7
 80041e0:	1ac2      	subs	r2, r0, r3
 80041e2:	bf1c      	itt	ne
 80041e4:	1a1b      	subne	r3, r3, r0
 80041e6:	50a3      	strne	r3, [r4, r2]
 80041e8:	e7af      	b.n	800414a <_malloc_r+0x22>
 80041ea:	6862      	ldr	r2, [r4, #4]
 80041ec:	42a3      	cmp	r3, r4
 80041ee:	bf0c      	ite	eq
 80041f0:	f8c8 2000 	streq.w	r2, [r8]
 80041f4:	605a      	strne	r2, [r3, #4]
 80041f6:	e7eb      	b.n	80041d0 <_malloc_r+0xa8>
 80041f8:	4623      	mov	r3, r4
 80041fa:	6864      	ldr	r4, [r4, #4]
 80041fc:	e7ae      	b.n	800415c <_malloc_r+0x34>
 80041fe:	463c      	mov	r4, r7
 8004200:	687f      	ldr	r7, [r7, #4]
 8004202:	e7b6      	b.n	8004172 <_malloc_r+0x4a>
 8004204:	461a      	mov	r2, r3
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	42a3      	cmp	r3, r4
 800420a:	d1fb      	bne.n	8004204 <_malloc_r+0xdc>
 800420c:	2300      	movs	r3, #0
 800420e:	6053      	str	r3, [r2, #4]
 8004210:	e7de      	b.n	80041d0 <_malloc_r+0xa8>
 8004212:	230c      	movs	r3, #12
 8004214:	6033      	str	r3, [r6, #0]
 8004216:	4630      	mov	r0, r6
 8004218:	f000 f80c 	bl	8004234 <__malloc_unlock>
 800421c:	e794      	b.n	8004148 <_malloc_r+0x20>
 800421e:	6005      	str	r5, [r0, #0]
 8004220:	e7d6      	b.n	80041d0 <_malloc_r+0xa8>
 8004222:	bf00      	nop
 8004224:	20000270 	.word	0x20000270

08004228 <__malloc_lock>:
 8004228:	4801      	ldr	r0, [pc, #4]	@ (8004230 <__malloc_lock+0x8>)
 800422a:	f7ff bf0e 	b.w	800404a <__retarget_lock_acquire_recursive>
 800422e:	bf00      	nop
 8004230:	20000268 	.word	0x20000268

08004234 <__malloc_unlock>:
 8004234:	4801      	ldr	r0, [pc, #4]	@ (800423c <__malloc_unlock+0x8>)
 8004236:	f7ff bf09 	b.w	800404c <__retarget_lock_release_recursive>
 800423a:	bf00      	nop
 800423c:	20000268 	.word	0x20000268

08004240 <__sfputc_r>:
 8004240:	6893      	ldr	r3, [r2, #8]
 8004242:	3b01      	subs	r3, #1
 8004244:	2b00      	cmp	r3, #0
 8004246:	b410      	push	{r4}
 8004248:	6093      	str	r3, [r2, #8]
 800424a:	da07      	bge.n	800425c <__sfputc_r+0x1c>
 800424c:	6994      	ldr	r4, [r2, #24]
 800424e:	42a3      	cmp	r3, r4
 8004250:	db01      	blt.n	8004256 <__sfputc_r+0x16>
 8004252:	290a      	cmp	r1, #10
 8004254:	d102      	bne.n	800425c <__sfputc_r+0x1c>
 8004256:	bc10      	pop	{r4}
 8004258:	f7ff bde9 	b.w	8003e2e <__swbuf_r>
 800425c:	6813      	ldr	r3, [r2, #0]
 800425e:	1c58      	adds	r0, r3, #1
 8004260:	6010      	str	r0, [r2, #0]
 8004262:	7019      	strb	r1, [r3, #0]
 8004264:	4608      	mov	r0, r1
 8004266:	bc10      	pop	{r4}
 8004268:	4770      	bx	lr

0800426a <__sfputs_r>:
 800426a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800426c:	4606      	mov	r6, r0
 800426e:	460f      	mov	r7, r1
 8004270:	4614      	mov	r4, r2
 8004272:	18d5      	adds	r5, r2, r3
 8004274:	42ac      	cmp	r4, r5
 8004276:	d101      	bne.n	800427c <__sfputs_r+0x12>
 8004278:	2000      	movs	r0, #0
 800427a:	e007      	b.n	800428c <__sfputs_r+0x22>
 800427c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004280:	463a      	mov	r2, r7
 8004282:	4630      	mov	r0, r6
 8004284:	f7ff ffdc 	bl	8004240 <__sfputc_r>
 8004288:	1c43      	adds	r3, r0, #1
 800428a:	d1f3      	bne.n	8004274 <__sfputs_r+0xa>
 800428c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004290 <_vfiprintf_r>:
 8004290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004294:	460d      	mov	r5, r1
 8004296:	b09d      	sub	sp, #116	@ 0x74
 8004298:	4614      	mov	r4, r2
 800429a:	4698      	mov	r8, r3
 800429c:	4606      	mov	r6, r0
 800429e:	b118      	cbz	r0, 80042a8 <_vfiprintf_r+0x18>
 80042a0:	6a03      	ldr	r3, [r0, #32]
 80042a2:	b90b      	cbnz	r3, 80042a8 <_vfiprintf_r+0x18>
 80042a4:	f7ff fcda 	bl	8003c5c <__sinit>
 80042a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80042aa:	07d9      	lsls	r1, r3, #31
 80042ac:	d405      	bmi.n	80042ba <_vfiprintf_r+0x2a>
 80042ae:	89ab      	ldrh	r3, [r5, #12]
 80042b0:	059a      	lsls	r2, r3, #22
 80042b2:	d402      	bmi.n	80042ba <_vfiprintf_r+0x2a>
 80042b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80042b6:	f7ff fec8 	bl	800404a <__retarget_lock_acquire_recursive>
 80042ba:	89ab      	ldrh	r3, [r5, #12]
 80042bc:	071b      	lsls	r3, r3, #28
 80042be:	d501      	bpl.n	80042c4 <_vfiprintf_r+0x34>
 80042c0:	692b      	ldr	r3, [r5, #16]
 80042c2:	b99b      	cbnz	r3, 80042ec <_vfiprintf_r+0x5c>
 80042c4:	4629      	mov	r1, r5
 80042c6:	4630      	mov	r0, r6
 80042c8:	f7ff fdf0 	bl	8003eac <__swsetup_r>
 80042cc:	b170      	cbz	r0, 80042ec <_vfiprintf_r+0x5c>
 80042ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80042d0:	07dc      	lsls	r4, r3, #31
 80042d2:	d504      	bpl.n	80042de <_vfiprintf_r+0x4e>
 80042d4:	f04f 30ff 	mov.w	r0, #4294967295
 80042d8:	b01d      	add	sp, #116	@ 0x74
 80042da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042de:	89ab      	ldrh	r3, [r5, #12]
 80042e0:	0598      	lsls	r0, r3, #22
 80042e2:	d4f7      	bmi.n	80042d4 <_vfiprintf_r+0x44>
 80042e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80042e6:	f7ff feb1 	bl	800404c <__retarget_lock_release_recursive>
 80042ea:	e7f3      	b.n	80042d4 <_vfiprintf_r+0x44>
 80042ec:	2300      	movs	r3, #0
 80042ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80042f0:	2320      	movs	r3, #32
 80042f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80042f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80042fa:	2330      	movs	r3, #48	@ 0x30
 80042fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80044ac <_vfiprintf_r+0x21c>
 8004300:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004304:	f04f 0901 	mov.w	r9, #1
 8004308:	4623      	mov	r3, r4
 800430a:	469a      	mov	sl, r3
 800430c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004310:	b10a      	cbz	r2, 8004316 <_vfiprintf_r+0x86>
 8004312:	2a25      	cmp	r2, #37	@ 0x25
 8004314:	d1f9      	bne.n	800430a <_vfiprintf_r+0x7a>
 8004316:	ebba 0b04 	subs.w	fp, sl, r4
 800431a:	d00b      	beq.n	8004334 <_vfiprintf_r+0xa4>
 800431c:	465b      	mov	r3, fp
 800431e:	4622      	mov	r2, r4
 8004320:	4629      	mov	r1, r5
 8004322:	4630      	mov	r0, r6
 8004324:	f7ff ffa1 	bl	800426a <__sfputs_r>
 8004328:	3001      	adds	r0, #1
 800432a:	f000 80a7 	beq.w	800447c <_vfiprintf_r+0x1ec>
 800432e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004330:	445a      	add	r2, fp
 8004332:	9209      	str	r2, [sp, #36]	@ 0x24
 8004334:	f89a 3000 	ldrb.w	r3, [sl]
 8004338:	2b00      	cmp	r3, #0
 800433a:	f000 809f 	beq.w	800447c <_vfiprintf_r+0x1ec>
 800433e:	2300      	movs	r3, #0
 8004340:	f04f 32ff 	mov.w	r2, #4294967295
 8004344:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004348:	f10a 0a01 	add.w	sl, sl, #1
 800434c:	9304      	str	r3, [sp, #16]
 800434e:	9307      	str	r3, [sp, #28]
 8004350:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004354:	931a      	str	r3, [sp, #104]	@ 0x68
 8004356:	4654      	mov	r4, sl
 8004358:	2205      	movs	r2, #5
 800435a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800435e:	4853      	ldr	r0, [pc, #332]	@ (80044ac <_vfiprintf_r+0x21c>)
 8004360:	f7fb ff0e 	bl	8000180 <memchr>
 8004364:	9a04      	ldr	r2, [sp, #16]
 8004366:	b9d8      	cbnz	r0, 80043a0 <_vfiprintf_r+0x110>
 8004368:	06d1      	lsls	r1, r2, #27
 800436a:	bf44      	itt	mi
 800436c:	2320      	movmi	r3, #32
 800436e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004372:	0713      	lsls	r3, r2, #28
 8004374:	bf44      	itt	mi
 8004376:	232b      	movmi	r3, #43	@ 0x2b
 8004378:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800437c:	f89a 3000 	ldrb.w	r3, [sl]
 8004380:	2b2a      	cmp	r3, #42	@ 0x2a
 8004382:	d015      	beq.n	80043b0 <_vfiprintf_r+0x120>
 8004384:	9a07      	ldr	r2, [sp, #28]
 8004386:	4654      	mov	r4, sl
 8004388:	2000      	movs	r0, #0
 800438a:	f04f 0c0a 	mov.w	ip, #10
 800438e:	4621      	mov	r1, r4
 8004390:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004394:	3b30      	subs	r3, #48	@ 0x30
 8004396:	2b09      	cmp	r3, #9
 8004398:	d94b      	bls.n	8004432 <_vfiprintf_r+0x1a2>
 800439a:	b1b0      	cbz	r0, 80043ca <_vfiprintf_r+0x13a>
 800439c:	9207      	str	r2, [sp, #28]
 800439e:	e014      	b.n	80043ca <_vfiprintf_r+0x13a>
 80043a0:	eba0 0308 	sub.w	r3, r0, r8
 80043a4:	fa09 f303 	lsl.w	r3, r9, r3
 80043a8:	4313      	orrs	r3, r2
 80043aa:	9304      	str	r3, [sp, #16]
 80043ac:	46a2      	mov	sl, r4
 80043ae:	e7d2      	b.n	8004356 <_vfiprintf_r+0xc6>
 80043b0:	9b03      	ldr	r3, [sp, #12]
 80043b2:	1d19      	adds	r1, r3, #4
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	9103      	str	r1, [sp, #12]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	bfbb      	ittet	lt
 80043bc:	425b      	neglt	r3, r3
 80043be:	f042 0202 	orrlt.w	r2, r2, #2
 80043c2:	9307      	strge	r3, [sp, #28]
 80043c4:	9307      	strlt	r3, [sp, #28]
 80043c6:	bfb8      	it	lt
 80043c8:	9204      	strlt	r2, [sp, #16]
 80043ca:	7823      	ldrb	r3, [r4, #0]
 80043cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80043ce:	d10a      	bne.n	80043e6 <_vfiprintf_r+0x156>
 80043d0:	7863      	ldrb	r3, [r4, #1]
 80043d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80043d4:	d132      	bne.n	800443c <_vfiprintf_r+0x1ac>
 80043d6:	9b03      	ldr	r3, [sp, #12]
 80043d8:	1d1a      	adds	r2, r3, #4
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	9203      	str	r2, [sp, #12]
 80043de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80043e2:	3402      	adds	r4, #2
 80043e4:	9305      	str	r3, [sp, #20]
 80043e6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80044b0 <_vfiprintf_r+0x220>
 80043ea:	7821      	ldrb	r1, [r4, #0]
 80043ec:	2203      	movs	r2, #3
 80043ee:	4650      	mov	r0, sl
 80043f0:	f7fb fec6 	bl	8000180 <memchr>
 80043f4:	b138      	cbz	r0, 8004406 <_vfiprintf_r+0x176>
 80043f6:	9b04      	ldr	r3, [sp, #16]
 80043f8:	eba0 000a 	sub.w	r0, r0, sl
 80043fc:	2240      	movs	r2, #64	@ 0x40
 80043fe:	4082      	lsls	r2, r0
 8004400:	4313      	orrs	r3, r2
 8004402:	3401      	adds	r4, #1
 8004404:	9304      	str	r3, [sp, #16]
 8004406:	f814 1b01 	ldrb.w	r1, [r4], #1
 800440a:	482a      	ldr	r0, [pc, #168]	@ (80044b4 <_vfiprintf_r+0x224>)
 800440c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004410:	2206      	movs	r2, #6
 8004412:	f7fb feb5 	bl	8000180 <memchr>
 8004416:	2800      	cmp	r0, #0
 8004418:	d03f      	beq.n	800449a <_vfiprintf_r+0x20a>
 800441a:	4b27      	ldr	r3, [pc, #156]	@ (80044b8 <_vfiprintf_r+0x228>)
 800441c:	bb1b      	cbnz	r3, 8004466 <_vfiprintf_r+0x1d6>
 800441e:	9b03      	ldr	r3, [sp, #12]
 8004420:	3307      	adds	r3, #7
 8004422:	f023 0307 	bic.w	r3, r3, #7
 8004426:	3308      	adds	r3, #8
 8004428:	9303      	str	r3, [sp, #12]
 800442a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800442c:	443b      	add	r3, r7
 800442e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004430:	e76a      	b.n	8004308 <_vfiprintf_r+0x78>
 8004432:	fb0c 3202 	mla	r2, ip, r2, r3
 8004436:	460c      	mov	r4, r1
 8004438:	2001      	movs	r0, #1
 800443a:	e7a8      	b.n	800438e <_vfiprintf_r+0xfe>
 800443c:	2300      	movs	r3, #0
 800443e:	3401      	adds	r4, #1
 8004440:	9305      	str	r3, [sp, #20]
 8004442:	4619      	mov	r1, r3
 8004444:	f04f 0c0a 	mov.w	ip, #10
 8004448:	4620      	mov	r0, r4
 800444a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800444e:	3a30      	subs	r2, #48	@ 0x30
 8004450:	2a09      	cmp	r2, #9
 8004452:	d903      	bls.n	800445c <_vfiprintf_r+0x1cc>
 8004454:	2b00      	cmp	r3, #0
 8004456:	d0c6      	beq.n	80043e6 <_vfiprintf_r+0x156>
 8004458:	9105      	str	r1, [sp, #20]
 800445a:	e7c4      	b.n	80043e6 <_vfiprintf_r+0x156>
 800445c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004460:	4604      	mov	r4, r0
 8004462:	2301      	movs	r3, #1
 8004464:	e7f0      	b.n	8004448 <_vfiprintf_r+0x1b8>
 8004466:	ab03      	add	r3, sp, #12
 8004468:	9300      	str	r3, [sp, #0]
 800446a:	462a      	mov	r2, r5
 800446c:	4b13      	ldr	r3, [pc, #76]	@ (80044bc <_vfiprintf_r+0x22c>)
 800446e:	a904      	add	r1, sp, #16
 8004470:	4630      	mov	r0, r6
 8004472:	f3af 8000 	nop.w
 8004476:	4607      	mov	r7, r0
 8004478:	1c78      	adds	r0, r7, #1
 800447a:	d1d6      	bne.n	800442a <_vfiprintf_r+0x19a>
 800447c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800447e:	07d9      	lsls	r1, r3, #31
 8004480:	d405      	bmi.n	800448e <_vfiprintf_r+0x1fe>
 8004482:	89ab      	ldrh	r3, [r5, #12]
 8004484:	059a      	lsls	r2, r3, #22
 8004486:	d402      	bmi.n	800448e <_vfiprintf_r+0x1fe>
 8004488:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800448a:	f7ff fddf 	bl	800404c <__retarget_lock_release_recursive>
 800448e:	89ab      	ldrh	r3, [r5, #12]
 8004490:	065b      	lsls	r3, r3, #25
 8004492:	f53f af1f 	bmi.w	80042d4 <_vfiprintf_r+0x44>
 8004496:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004498:	e71e      	b.n	80042d8 <_vfiprintf_r+0x48>
 800449a:	ab03      	add	r3, sp, #12
 800449c:	9300      	str	r3, [sp, #0]
 800449e:	462a      	mov	r2, r5
 80044a0:	4b06      	ldr	r3, [pc, #24]	@ (80044bc <_vfiprintf_r+0x22c>)
 80044a2:	a904      	add	r1, sp, #16
 80044a4:	4630      	mov	r0, r6
 80044a6:	f000 f879 	bl	800459c <_printf_i>
 80044aa:	e7e4      	b.n	8004476 <_vfiprintf_r+0x1e6>
 80044ac:	08004d08 	.word	0x08004d08
 80044b0:	08004d0e 	.word	0x08004d0e
 80044b4:	08004d12 	.word	0x08004d12
 80044b8:	00000000 	.word	0x00000000
 80044bc:	0800426b 	.word	0x0800426b

080044c0 <_printf_common>:
 80044c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044c4:	4616      	mov	r6, r2
 80044c6:	4698      	mov	r8, r3
 80044c8:	688a      	ldr	r2, [r1, #8]
 80044ca:	690b      	ldr	r3, [r1, #16]
 80044cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80044d0:	4293      	cmp	r3, r2
 80044d2:	bfb8      	it	lt
 80044d4:	4613      	movlt	r3, r2
 80044d6:	6033      	str	r3, [r6, #0]
 80044d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80044dc:	4607      	mov	r7, r0
 80044de:	460c      	mov	r4, r1
 80044e0:	b10a      	cbz	r2, 80044e6 <_printf_common+0x26>
 80044e2:	3301      	adds	r3, #1
 80044e4:	6033      	str	r3, [r6, #0]
 80044e6:	6823      	ldr	r3, [r4, #0]
 80044e8:	0699      	lsls	r1, r3, #26
 80044ea:	bf42      	ittt	mi
 80044ec:	6833      	ldrmi	r3, [r6, #0]
 80044ee:	3302      	addmi	r3, #2
 80044f0:	6033      	strmi	r3, [r6, #0]
 80044f2:	6825      	ldr	r5, [r4, #0]
 80044f4:	f015 0506 	ands.w	r5, r5, #6
 80044f8:	d106      	bne.n	8004508 <_printf_common+0x48>
 80044fa:	f104 0a19 	add.w	sl, r4, #25
 80044fe:	68e3      	ldr	r3, [r4, #12]
 8004500:	6832      	ldr	r2, [r6, #0]
 8004502:	1a9b      	subs	r3, r3, r2
 8004504:	42ab      	cmp	r3, r5
 8004506:	dc26      	bgt.n	8004556 <_printf_common+0x96>
 8004508:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800450c:	6822      	ldr	r2, [r4, #0]
 800450e:	3b00      	subs	r3, #0
 8004510:	bf18      	it	ne
 8004512:	2301      	movne	r3, #1
 8004514:	0692      	lsls	r2, r2, #26
 8004516:	d42b      	bmi.n	8004570 <_printf_common+0xb0>
 8004518:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800451c:	4641      	mov	r1, r8
 800451e:	4638      	mov	r0, r7
 8004520:	47c8      	blx	r9
 8004522:	3001      	adds	r0, #1
 8004524:	d01e      	beq.n	8004564 <_printf_common+0xa4>
 8004526:	6823      	ldr	r3, [r4, #0]
 8004528:	6922      	ldr	r2, [r4, #16]
 800452a:	f003 0306 	and.w	r3, r3, #6
 800452e:	2b04      	cmp	r3, #4
 8004530:	bf02      	ittt	eq
 8004532:	68e5      	ldreq	r5, [r4, #12]
 8004534:	6833      	ldreq	r3, [r6, #0]
 8004536:	1aed      	subeq	r5, r5, r3
 8004538:	68a3      	ldr	r3, [r4, #8]
 800453a:	bf0c      	ite	eq
 800453c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004540:	2500      	movne	r5, #0
 8004542:	4293      	cmp	r3, r2
 8004544:	bfc4      	itt	gt
 8004546:	1a9b      	subgt	r3, r3, r2
 8004548:	18ed      	addgt	r5, r5, r3
 800454a:	2600      	movs	r6, #0
 800454c:	341a      	adds	r4, #26
 800454e:	42b5      	cmp	r5, r6
 8004550:	d11a      	bne.n	8004588 <_printf_common+0xc8>
 8004552:	2000      	movs	r0, #0
 8004554:	e008      	b.n	8004568 <_printf_common+0xa8>
 8004556:	2301      	movs	r3, #1
 8004558:	4652      	mov	r2, sl
 800455a:	4641      	mov	r1, r8
 800455c:	4638      	mov	r0, r7
 800455e:	47c8      	blx	r9
 8004560:	3001      	adds	r0, #1
 8004562:	d103      	bne.n	800456c <_printf_common+0xac>
 8004564:	f04f 30ff 	mov.w	r0, #4294967295
 8004568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800456c:	3501      	adds	r5, #1
 800456e:	e7c6      	b.n	80044fe <_printf_common+0x3e>
 8004570:	18e1      	adds	r1, r4, r3
 8004572:	1c5a      	adds	r2, r3, #1
 8004574:	2030      	movs	r0, #48	@ 0x30
 8004576:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800457a:	4422      	add	r2, r4
 800457c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004580:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004584:	3302      	adds	r3, #2
 8004586:	e7c7      	b.n	8004518 <_printf_common+0x58>
 8004588:	2301      	movs	r3, #1
 800458a:	4622      	mov	r2, r4
 800458c:	4641      	mov	r1, r8
 800458e:	4638      	mov	r0, r7
 8004590:	47c8      	blx	r9
 8004592:	3001      	adds	r0, #1
 8004594:	d0e6      	beq.n	8004564 <_printf_common+0xa4>
 8004596:	3601      	adds	r6, #1
 8004598:	e7d9      	b.n	800454e <_printf_common+0x8e>
	...

0800459c <_printf_i>:
 800459c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045a0:	7e0f      	ldrb	r7, [r1, #24]
 80045a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80045a4:	2f78      	cmp	r7, #120	@ 0x78
 80045a6:	4691      	mov	r9, r2
 80045a8:	4680      	mov	r8, r0
 80045aa:	460c      	mov	r4, r1
 80045ac:	469a      	mov	sl, r3
 80045ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80045b2:	d807      	bhi.n	80045c4 <_printf_i+0x28>
 80045b4:	2f62      	cmp	r7, #98	@ 0x62
 80045b6:	d80a      	bhi.n	80045ce <_printf_i+0x32>
 80045b8:	2f00      	cmp	r7, #0
 80045ba:	f000 80d1 	beq.w	8004760 <_printf_i+0x1c4>
 80045be:	2f58      	cmp	r7, #88	@ 0x58
 80045c0:	f000 80b8 	beq.w	8004734 <_printf_i+0x198>
 80045c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80045c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80045cc:	e03a      	b.n	8004644 <_printf_i+0xa8>
 80045ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80045d2:	2b15      	cmp	r3, #21
 80045d4:	d8f6      	bhi.n	80045c4 <_printf_i+0x28>
 80045d6:	a101      	add	r1, pc, #4	@ (adr r1, 80045dc <_printf_i+0x40>)
 80045d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80045dc:	08004635 	.word	0x08004635
 80045e0:	08004649 	.word	0x08004649
 80045e4:	080045c5 	.word	0x080045c5
 80045e8:	080045c5 	.word	0x080045c5
 80045ec:	080045c5 	.word	0x080045c5
 80045f0:	080045c5 	.word	0x080045c5
 80045f4:	08004649 	.word	0x08004649
 80045f8:	080045c5 	.word	0x080045c5
 80045fc:	080045c5 	.word	0x080045c5
 8004600:	080045c5 	.word	0x080045c5
 8004604:	080045c5 	.word	0x080045c5
 8004608:	08004747 	.word	0x08004747
 800460c:	08004673 	.word	0x08004673
 8004610:	08004701 	.word	0x08004701
 8004614:	080045c5 	.word	0x080045c5
 8004618:	080045c5 	.word	0x080045c5
 800461c:	08004769 	.word	0x08004769
 8004620:	080045c5 	.word	0x080045c5
 8004624:	08004673 	.word	0x08004673
 8004628:	080045c5 	.word	0x080045c5
 800462c:	080045c5 	.word	0x080045c5
 8004630:	08004709 	.word	0x08004709
 8004634:	6833      	ldr	r3, [r6, #0]
 8004636:	1d1a      	adds	r2, r3, #4
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	6032      	str	r2, [r6, #0]
 800463c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004640:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004644:	2301      	movs	r3, #1
 8004646:	e09c      	b.n	8004782 <_printf_i+0x1e6>
 8004648:	6833      	ldr	r3, [r6, #0]
 800464a:	6820      	ldr	r0, [r4, #0]
 800464c:	1d19      	adds	r1, r3, #4
 800464e:	6031      	str	r1, [r6, #0]
 8004650:	0606      	lsls	r6, r0, #24
 8004652:	d501      	bpl.n	8004658 <_printf_i+0xbc>
 8004654:	681d      	ldr	r5, [r3, #0]
 8004656:	e003      	b.n	8004660 <_printf_i+0xc4>
 8004658:	0645      	lsls	r5, r0, #25
 800465a:	d5fb      	bpl.n	8004654 <_printf_i+0xb8>
 800465c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004660:	2d00      	cmp	r5, #0
 8004662:	da03      	bge.n	800466c <_printf_i+0xd0>
 8004664:	232d      	movs	r3, #45	@ 0x2d
 8004666:	426d      	negs	r5, r5
 8004668:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800466c:	4858      	ldr	r0, [pc, #352]	@ (80047d0 <_printf_i+0x234>)
 800466e:	230a      	movs	r3, #10
 8004670:	e011      	b.n	8004696 <_printf_i+0xfa>
 8004672:	6821      	ldr	r1, [r4, #0]
 8004674:	6833      	ldr	r3, [r6, #0]
 8004676:	0608      	lsls	r0, r1, #24
 8004678:	f853 5b04 	ldr.w	r5, [r3], #4
 800467c:	d402      	bmi.n	8004684 <_printf_i+0xe8>
 800467e:	0649      	lsls	r1, r1, #25
 8004680:	bf48      	it	mi
 8004682:	b2ad      	uxthmi	r5, r5
 8004684:	2f6f      	cmp	r7, #111	@ 0x6f
 8004686:	4852      	ldr	r0, [pc, #328]	@ (80047d0 <_printf_i+0x234>)
 8004688:	6033      	str	r3, [r6, #0]
 800468a:	bf14      	ite	ne
 800468c:	230a      	movne	r3, #10
 800468e:	2308      	moveq	r3, #8
 8004690:	2100      	movs	r1, #0
 8004692:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004696:	6866      	ldr	r6, [r4, #4]
 8004698:	60a6      	str	r6, [r4, #8]
 800469a:	2e00      	cmp	r6, #0
 800469c:	db05      	blt.n	80046aa <_printf_i+0x10e>
 800469e:	6821      	ldr	r1, [r4, #0]
 80046a0:	432e      	orrs	r6, r5
 80046a2:	f021 0104 	bic.w	r1, r1, #4
 80046a6:	6021      	str	r1, [r4, #0]
 80046a8:	d04b      	beq.n	8004742 <_printf_i+0x1a6>
 80046aa:	4616      	mov	r6, r2
 80046ac:	fbb5 f1f3 	udiv	r1, r5, r3
 80046b0:	fb03 5711 	mls	r7, r3, r1, r5
 80046b4:	5dc7      	ldrb	r7, [r0, r7]
 80046b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80046ba:	462f      	mov	r7, r5
 80046bc:	42bb      	cmp	r3, r7
 80046be:	460d      	mov	r5, r1
 80046c0:	d9f4      	bls.n	80046ac <_printf_i+0x110>
 80046c2:	2b08      	cmp	r3, #8
 80046c4:	d10b      	bne.n	80046de <_printf_i+0x142>
 80046c6:	6823      	ldr	r3, [r4, #0]
 80046c8:	07df      	lsls	r7, r3, #31
 80046ca:	d508      	bpl.n	80046de <_printf_i+0x142>
 80046cc:	6923      	ldr	r3, [r4, #16]
 80046ce:	6861      	ldr	r1, [r4, #4]
 80046d0:	4299      	cmp	r1, r3
 80046d2:	bfde      	ittt	le
 80046d4:	2330      	movle	r3, #48	@ 0x30
 80046d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80046da:	f106 36ff 	addle.w	r6, r6, #4294967295
 80046de:	1b92      	subs	r2, r2, r6
 80046e0:	6122      	str	r2, [r4, #16]
 80046e2:	f8cd a000 	str.w	sl, [sp]
 80046e6:	464b      	mov	r3, r9
 80046e8:	aa03      	add	r2, sp, #12
 80046ea:	4621      	mov	r1, r4
 80046ec:	4640      	mov	r0, r8
 80046ee:	f7ff fee7 	bl	80044c0 <_printf_common>
 80046f2:	3001      	adds	r0, #1
 80046f4:	d14a      	bne.n	800478c <_printf_i+0x1f0>
 80046f6:	f04f 30ff 	mov.w	r0, #4294967295
 80046fa:	b004      	add	sp, #16
 80046fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004700:	6823      	ldr	r3, [r4, #0]
 8004702:	f043 0320 	orr.w	r3, r3, #32
 8004706:	6023      	str	r3, [r4, #0]
 8004708:	4832      	ldr	r0, [pc, #200]	@ (80047d4 <_printf_i+0x238>)
 800470a:	2778      	movs	r7, #120	@ 0x78
 800470c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004710:	6823      	ldr	r3, [r4, #0]
 8004712:	6831      	ldr	r1, [r6, #0]
 8004714:	061f      	lsls	r7, r3, #24
 8004716:	f851 5b04 	ldr.w	r5, [r1], #4
 800471a:	d402      	bmi.n	8004722 <_printf_i+0x186>
 800471c:	065f      	lsls	r7, r3, #25
 800471e:	bf48      	it	mi
 8004720:	b2ad      	uxthmi	r5, r5
 8004722:	6031      	str	r1, [r6, #0]
 8004724:	07d9      	lsls	r1, r3, #31
 8004726:	bf44      	itt	mi
 8004728:	f043 0320 	orrmi.w	r3, r3, #32
 800472c:	6023      	strmi	r3, [r4, #0]
 800472e:	b11d      	cbz	r5, 8004738 <_printf_i+0x19c>
 8004730:	2310      	movs	r3, #16
 8004732:	e7ad      	b.n	8004690 <_printf_i+0xf4>
 8004734:	4826      	ldr	r0, [pc, #152]	@ (80047d0 <_printf_i+0x234>)
 8004736:	e7e9      	b.n	800470c <_printf_i+0x170>
 8004738:	6823      	ldr	r3, [r4, #0]
 800473a:	f023 0320 	bic.w	r3, r3, #32
 800473e:	6023      	str	r3, [r4, #0]
 8004740:	e7f6      	b.n	8004730 <_printf_i+0x194>
 8004742:	4616      	mov	r6, r2
 8004744:	e7bd      	b.n	80046c2 <_printf_i+0x126>
 8004746:	6833      	ldr	r3, [r6, #0]
 8004748:	6825      	ldr	r5, [r4, #0]
 800474a:	6961      	ldr	r1, [r4, #20]
 800474c:	1d18      	adds	r0, r3, #4
 800474e:	6030      	str	r0, [r6, #0]
 8004750:	062e      	lsls	r6, r5, #24
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	d501      	bpl.n	800475a <_printf_i+0x1be>
 8004756:	6019      	str	r1, [r3, #0]
 8004758:	e002      	b.n	8004760 <_printf_i+0x1c4>
 800475a:	0668      	lsls	r0, r5, #25
 800475c:	d5fb      	bpl.n	8004756 <_printf_i+0x1ba>
 800475e:	8019      	strh	r1, [r3, #0]
 8004760:	2300      	movs	r3, #0
 8004762:	6123      	str	r3, [r4, #16]
 8004764:	4616      	mov	r6, r2
 8004766:	e7bc      	b.n	80046e2 <_printf_i+0x146>
 8004768:	6833      	ldr	r3, [r6, #0]
 800476a:	1d1a      	adds	r2, r3, #4
 800476c:	6032      	str	r2, [r6, #0]
 800476e:	681e      	ldr	r6, [r3, #0]
 8004770:	6862      	ldr	r2, [r4, #4]
 8004772:	2100      	movs	r1, #0
 8004774:	4630      	mov	r0, r6
 8004776:	f7fb fd03 	bl	8000180 <memchr>
 800477a:	b108      	cbz	r0, 8004780 <_printf_i+0x1e4>
 800477c:	1b80      	subs	r0, r0, r6
 800477e:	6060      	str	r0, [r4, #4]
 8004780:	6863      	ldr	r3, [r4, #4]
 8004782:	6123      	str	r3, [r4, #16]
 8004784:	2300      	movs	r3, #0
 8004786:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800478a:	e7aa      	b.n	80046e2 <_printf_i+0x146>
 800478c:	6923      	ldr	r3, [r4, #16]
 800478e:	4632      	mov	r2, r6
 8004790:	4649      	mov	r1, r9
 8004792:	4640      	mov	r0, r8
 8004794:	47d0      	blx	sl
 8004796:	3001      	adds	r0, #1
 8004798:	d0ad      	beq.n	80046f6 <_printf_i+0x15a>
 800479a:	6823      	ldr	r3, [r4, #0]
 800479c:	079b      	lsls	r3, r3, #30
 800479e:	d413      	bmi.n	80047c8 <_printf_i+0x22c>
 80047a0:	68e0      	ldr	r0, [r4, #12]
 80047a2:	9b03      	ldr	r3, [sp, #12]
 80047a4:	4298      	cmp	r0, r3
 80047a6:	bfb8      	it	lt
 80047a8:	4618      	movlt	r0, r3
 80047aa:	e7a6      	b.n	80046fa <_printf_i+0x15e>
 80047ac:	2301      	movs	r3, #1
 80047ae:	4632      	mov	r2, r6
 80047b0:	4649      	mov	r1, r9
 80047b2:	4640      	mov	r0, r8
 80047b4:	47d0      	blx	sl
 80047b6:	3001      	adds	r0, #1
 80047b8:	d09d      	beq.n	80046f6 <_printf_i+0x15a>
 80047ba:	3501      	adds	r5, #1
 80047bc:	68e3      	ldr	r3, [r4, #12]
 80047be:	9903      	ldr	r1, [sp, #12]
 80047c0:	1a5b      	subs	r3, r3, r1
 80047c2:	42ab      	cmp	r3, r5
 80047c4:	dcf2      	bgt.n	80047ac <_printf_i+0x210>
 80047c6:	e7eb      	b.n	80047a0 <_printf_i+0x204>
 80047c8:	2500      	movs	r5, #0
 80047ca:	f104 0619 	add.w	r6, r4, #25
 80047ce:	e7f5      	b.n	80047bc <_printf_i+0x220>
 80047d0:	08004d19 	.word	0x08004d19
 80047d4:	08004d2a 	.word	0x08004d2a

080047d8 <__sflush_r>:
 80047d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80047dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047de:	0716      	lsls	r6, r2, #28
 80047e0:	4605      	mov	r5, r0
 80047e2:	460c      	mov	r4, r1
 80047e4:	d454      	bmi.n	8004890 <__sflush_r+0xb8>
 80047e6:	684b      	ldr	r3, [r1, #4]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	dc02      	bgt.n	80047f2 <__sflush_r+0x1a>
 80047ec:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	dd48      	ble.n	8004884 <__sflush_r+0xac>
 80047f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80047f4:	2e00      	cmp	r6, #0
 80047f6:	d045      	beq.n	8004884 <__sflush_r+0xac>
 80047f8:	2300      	movs	r3, #0
 80047fa:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80047fe:	682f      	ldr	r7, [r5, #0]
 8004800:	6a21      	ldr	r1, [r4, #32]
 8004802:	602b      	str	r3, [r5, #0]
 8004804:	d030      	beq.n	8004868 <__sflush_r+0x90>
 8004806:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004808:	89a3      	ldrh	r3, [r4, #12]
 800480a:	0759      	lsls	r1, r3, #29
 800480c:	d505      	bpl.n	800481a <__sflush_r+0x42>
 800480e:	6863      	ldr	r3, [r4, #4]
 8004810:	1ad2      	subs	r2, r2, r3
 8004812:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004814:	b10b      	cbz	r3, 800481a <__sflush_r+0x42>
 8004816:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004818:	1ad2      	subs	r2, r2, r3
 800481a:	2300      	movs	r3, #0
 800481c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800481e:	6a21      	ldr	r1, [r4, #32]
 8004820:	4628      	mov	r0, r5
 8004822:	47b0      	blx	r6
 8004824:	1c43      	adds	r3, r0, #1
 8004826:	89a3      	ldrh	r3, [r4, #12]
 8004828:	d106      	bne.n	8004838 <__sflush_r+0x60>
 800482a:	6829      	ldr	r1, [r5, #0]
 800482c:	291d      	cmp	r1, #29
 800482e:	d82b      	bhi.n	8004888 <__sflush_r+0xb0>
 8004830:	4a28      	ldr	r2, [pc, #160]	@ (80048d4 <__sflush_r+0xfc>)
 8004832:	40ca      	lsrs	r2, r1
 8004834:	07d6      	lsls	r6, r2, #31
 8004836:	d527      	bpl.n	8004888 <__sflush_r+0xb0>
 8004838:	2200      	movs	r2, #0
 800483a:	6062      	str	r2, [r4, #4]
 800483c:	04d9      	lsls	r1, r3, #19
 800483e:	6922      	ldr	r2, [r4, #16]
 8004840:	6022      	str	r2, [r4, #0]
 8004842:	d504      	bpl.n	800484e <__sflush_r+0x76>
 8004844:	1c42      	adds	r2, r0, #1
 8004846:	d101      	bne.n	800484c <__sflush_r+0x74>
 8004848:	682b      	ldr	r3, [r5, #0]
 800484a:	b903      	cbnz	r3, 800484e <__sflush_r+0x76>
 800484c:	6560      	str	r0, [r4, #84]	@ 0x54
 800484e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004850:	602f      	str	r7, [r5, #0]
 8004852:	b1b9      	cbz	r1, 8004884 <__sflush_r+0xac>
 8004854:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004858:	4299      	cmp	r1, r3
 800485a:	d002      	beq.n	8004862 <__sflush_r+0x8a>
 800485c:	4628      	mov	r0, r5
 800485e:	f7ff fbf7 	bl	8004050 <_free_r>
 8004862:	2300      	movs	r3, #0
 8004864:	6363      	str	r3, [r4, #52]	@ 0x34
 8004866:	e00d      	b.n	8004884 <__sflush_r+0xac>
 8004868:	2301      	movs	r3, #1
 800486a:	4628      	mov	r0, r5
 800486c:	47b0      	blx	r6
 800486e:	4602      	mov	r2, r0
 8004870:	1c50      	adds	r0, r2, #1
 8004872:	d1c9      	bne.n	8004808 <__sflush_r+0x30>
 8004874:	682b      	ldr	r3, [r5, #0]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d0c6      	beq.n	8004808 <__sflush_r+0x30>
 800487a:	2b1d      	cmp	r3, #29
 800487c:	d001      	beq.n	8004882 <__sflush_r+0xaa>
 800487e:	2b16      	cmp	r3, #22
 8004880:	d11d      	bne.n	80048be <__sflush_r+0xe6>
 8004882:	602f      	str	r7, [r5, #0]
 8004884:	2000      	movs	r0, #0
 8004886:	e021      	b.n	80048cc <__sflush_r+0xf4>
 8004888:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800488c:	b21b      	sxth	r3, r3
 800488e:	e01a      	b.n	80048c6 <__sflush_r+0xee>
 8004890:	690f      	ldr	r7, [r1, #16]
 8004892:	2f00      	cmp	r7, #0
 8004894:	d0f6      	beq.n	8004884 <__sflush_r+0xac>
 8004896:	0793      	lsls	r3, r2, #30
 8004898:	680e      	ldr	r6, [r1, #0]
 800489a:	bf08      	it	eq
 800489c:	694b      	ldreq	r3, [r1, #20]
 800489e:	600f      	str	r7, [r1, #0]
 80048a0:	bf18      	it	ne
 80048a2:	2300      	movne	r3, #0
 80048a4:	1bf6      	subs	r6, r6, r7
 80048a6:	608b      	str	r3, [r1, #8]
 80048a8:	2e00      	cmp	r6, #0
 80048aa:	ddeb      	ble.n	8004884 <__sflush_r+0xac>
 80048ac:	6a21      	ldr	r1, [r4, #32]
 80048ae:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80048b2:	4633      	mov	r3, r6
 80048b4:	463a      	mov	r2, r7
 80048b6:	4628      	mov	r0, r5
 80048b8:	47e0      	blx	ip
 80048ba:	2800      	cmp	r0, #0
 80048bc:	dc07      	bgt.n	80048ce <__sflush_r+0xf6>
 80048be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048c6:	81a3      	strh	r3, [r4, #12]
 80048c8:	f04f 30ff 	mov.w	r0, #4294967295
 80048cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048ce:	4407      	add	r7, r0
 80048d0:	1a36      	subs	r6, r6, r0
 80048d2:	e7e9      	b.n	80048a8 <__sflush_r+0xd0>
 80048d4:	20400001 	.word	0x20400001

080048d8 <_fflush_r>:
 80048d8:	b538      	push	{r3, r4, r5, lr}
 80048da:	690b      	ldr	r3, [r1, #16]
 80048dc:	4605      	mov	r5, r0
 80048de:	460c      	mov	r4, r1
 80048e0:	b913      	cbnz	r3, 80048e8 <_fflush_r+0x10>
 80048e2:	2500      	movs	r5, #0
 80048e4:	4628      	mov	r0, r5
 80048e6:	bd38      	pop	{r3, r4, r5, pc}
 80048e8:	b118      	cbz	r0, 80048f2 <_fflush_r+0x1a>
 80048ea:	6a03      	ldr	r3, [r0, #32]
 80048ec:	b90b      	cbnz	r3, 80048f2 <_fflush_r+0x1a>
 80048ee:	f7ff f9b5 	bl	8003c5c <__sinit>
 80048f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d0f3      	beq.n	80048e2 <_fflush_r+0xa>
 80048fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80048fc:	07d0      	lsls	r0, r2, #31
 80048fe:	d404      	bmi.n	800490a <_fflush_r+0x32>
 8004900:	0599      	lsls	r1, r3, #22
 8004902:	d402      	bmi.n	800490a <_fflush_r+0x32>
 8004904:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004906:	f7ff fba0 	bl	800404a <__retarget_lock_acquire_recursive>
 800490a:	4628      	mov	r0, r5
 800490c:	4621      	mov	r1, r4
 800490e:	f7ff ff63 	bl	80047d8 <__sflush_r>
 8004912:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004914:	07da      	lsls	r2, r3, #31
 8004916:	4605      	mov	r5, r0
 8004918:	d4e4      	bmi.n	80048e4 <_fflush_r+0xc>
 800491a:	89a3      	ldrh	r3, [r4, #12]
 800491c:	059b      	lsls	r3, r3, #22
 800491e:	d4e1      	bmi.n	80048e4 <_fflush_r+0xc>
 8004920:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004922:	f7ff fb93 	bl	800404c <__retarget_lock_release_recursive>
 8004926:	e7dd      	b.n	80048e4 <_fflush_r+0xc>

08004928 <__swhatbuf_r>:
 8004928:	b570      	push	{r4, r5, r6, lr}
 800492a:	460c      	mov	r4, r1
 800492c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004930:	2900      	cmp	r1, #0
 8004932:	b096      	sub	sp, #88	@ 0x58
 8004934:	4615      	mov	r5, r2
 8004936:	461e      	mov	r6, r3
 8004938:	da0d      	bge.n	8004956 <__swhatbuf_r+0x2e>
 800493a:	89a3      	ldrh	r3, [r4, #12]
 800493c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004940:	f04f 0100 	mov.w	r1, #0
 8004944:	bf14      	ite	ne
 8004946:	2340      	movne	r3, #64	@ 0x40
 8004948:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800494c:	2000      	movs	r0, #0
 800494e:	6031      	str	r1, [r6, #0]
 8004950:	602b      	str	r3, [r5, #0]
 8004952:	b016      	add	sp, #88	@ 0x58
 8004954:	bd70      	pop	{r4, r5, r6, pc}
 8004956:	466a      	mov	r2, sp
 8004958:	f000 f848 	bl	80049ec <_fstat_r>
 800495c:	2800      	cmp	r0, #0
 800495e:	dbec      	blt.n	800493a <__swhatbuf_r+0x12>
 8004960:	9901      	ldr	r1, [sp, #4]
 8004962:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004966:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800496a:	4259      	negs	r1, r3
 800496c:	4159      	adcs	r1, r3
 800496e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004972:	e7eb      	b.n	800494c <__swhatbuf_r+0x24>

08004974 <__smakebuf_r>:
 8004974:	898b      	ldrh	r3, [r1, #12]
 8004976:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004978:	079d      	lsls	r5, r3, #30
 800497a:	4606      	mov	r6, r0
 800497c:	460c      	mov	r4, r1
 800497e:	d507      	bpl.n	8004990 <__smakebuf_r+0x1c>
 8004980:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004984:	6023      	str	r3, [r4, #0]
 8004986:	6123      	str	r3, [r4, #16]
 8004988:	2301      	movs	r3, #1
 800498a:	6163      	str	r3, [r4, #20]
 800498c:	b003      	add	sp, #12
 800498e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004990:	ab01      	add	r3, sp, #4
 8004992:	466a      	mov	r2, sp
 8004994:	f7ff ffc8 	bl	8004928 <__swhatbuf_r>
 8004998:	9f00      	ldr	r7, [sp, #0]
 800499a:	4605      	mov	r5, r0
 800499c:	4639      	mov	r1, r7
 800499e:	4630      	mov	r0, r6
 80049a0:	f7ff fbc2 	bl	8004128 <_malloc_r>
 80049a4:	b948      	cbnz	r0, 80049ba <__smakebuf_r+0x46>
 80049a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049aa:	059a      	lsls	r2, r3, #22
 80049ac:	d4ee      	bmi.n	800498c <__smakebuf_r+0x18>
 80049ae:	f023 0303 	bic.w	r3, r3, #3
 80049b2:	f043 0302 	orr.w	r3, r3, #2
 80049b6:	81a3      	strh	r3, [r4, #12]
 80049b8:	e7e2      	b.n	8004980 <__smakebuf_r+0xc>
 80049ba:	89a3      	ldrh	r3, [r4, #12]
 80049bc:	6020      	str	r0, [r4, #0]
 80049be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049c2:	81a3      	strh	r3, [r4, #12]
 80049c4:	9b01      	ldr	r3, [sp, #4]
 80049c6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80049ca:	b15b      	cbz	r3, 80049e4 <__smakebuf_r+0x70>
 80049cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049d0:	4630      	mov	r0, r6
 80049d2:	f000 f81d 	bl	8004a10 <_isatty_r>
 80049d6:	b128      	cbz	r0, 80049e4 <__smakebuf_r+0x70>
 80049d8:	89a3      	ldrh	r3, [r4, #12]
 80049da:	f023 0303 	bic.w	r3, r3, #3
 80049de:	f043 0301 	orr.w	r3, r3, #1
 80049e2:	81a3      	strh	r3, [r4, #12]
 80049e4:	89a3      	ldrh	r3, [r4, #12]
 80049e6:	431d      	orrs	r5, r3
 80049e8:	81a5      	strh	r5, [r4, #12]
 80049ea:	e7cf      	b.n	800498c <__smakebuf_r+0x18>

080049ec <_fstat_r>:
 80049ec:	b538      	push	{r3, r4, r5, lr}
 80049ee:	4d07      	ldr	r5, [pc, #28]	@ (8004a0c <_fstat_r+0x20>)
 80049f0:	2300      	movs	r3, #0
 80049f2:	4604      	mov	r4, r0
 80049f4:	4608      	mov	r0, r1
 80049f6:	4611      	mov	r1, r2
 80049f8:	602b      	str	r3, [r5, #0]
 80049fa:	f7fc face 	bl	8000f9a <_fstat>
 80049fe:	1c43      	adds	r3, r0, #1
 8004a00:	d102      	bne.n	8004a08 <_fstat_r+0x1c>
 8004a02:	682b      	ldr	r3, [r5, #0]
 8004a04:	b103      	cbz	r3, 8004a08 <_fstat_r+0x1c>
 8004a06:	6023      	str	r3, [r4, #0]
 8004a08:	bd38      	pop	{r3, r4, r5, pc}
 8004a0a:	bf00      	nop
 8004a0c:	20000264 	.word	0x20000264

08004a10 <_isatty_r>:
 8004a10:	b538      	push	{r3, r4, r5, lr}
 8004a12:	4d06      	ldr	r5, [pc, #24]	@ (8004a2c <_isatty_r+0x1c>)
 8004a14:	2300      	movs	r3, #0
 8004a16:	4604      	mov	r4, r0
 8004a18:	4608      	mov	r0, r1
 8004a1a:	602b      	str	r3, [r5, #0]
 8004a1c:	f7fc facc 	bl	8000fb8 <_isatty>
 8004a20:	1c43      	adds	r3, r0, #1
 8004a22:	d102      	bne.n	8004a2a <_isatty_r+0x1a>
 8004a24:	682b      	ldr	r3, [r5, #0]
 8004a26:	b103      	cbz	r3, 8004a2a <_isatty_r+0x1a>
 8004a28:	6023      	str	r3, [r4, #0]
 8004a2a:	bd38      	pop	{r3, r4, r5, pc}
 8004a2c:	20000264 	.word	0x20000264

08004a30 <_sbrk_r>:
 8004a30:	b538      	push	{r3, r4, r5, lr}
 8004a32:	4d06      	ldr	r5, [pc, #24]	@ (8004a4c <_sbrk_r+0x1c>)
 8004a34:	2300      	movs	r3, #0
 8004a36:	4604      	mov	r4, r0
 8004a38:	4608      	mov	r0, r1
 8004a3a:	602b      	str	r3, [r5, #0]
 8004a3c:	f7fc fad2 	bl	8000fe4 <_sbrk>
 8004a40:	1c43      	adds	r3, r0, #1
 8004a42:	d102      	bne.n	8004a4a <_sbrk_r+0x1a>
 8004a44:	682b      	ldr	r3, [r5, #0]
 8004a46:	b103      	cbz	r3, 8004a4a <_sbrk_r+0x1a>
 8004a48:	6023      	str	r3, [r4, #0]
 8004a4a:	bd38      	pop	{r3, r4, r5, pc}
 8004a4c:	20000264 	.word	0x20000264

08004a50 <_init>:
 8004a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a52:	bf00      	nop
 8004a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a56:	bc08      	pop	{r3}
 8004a58:	469e      	mov	lr, r3
 8004a5a:	4770      	bx	lr

08004a5c <_fini>:
 8004a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a5e:	bf00      	nop
 8004a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a62:	bc08      	pop	{r3}
 8004a64:	469e      	mov	lr, r3
 8004a66:	4770      	bx	lr
