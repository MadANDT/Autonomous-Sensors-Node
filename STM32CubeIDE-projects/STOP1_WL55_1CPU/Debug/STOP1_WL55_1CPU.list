
STOP1_WL55_1CPU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004920  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  08004a60  08004a60  00005a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d58  08004d58  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004d58  08004d58  00005d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d60  08004d60  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d60  08004d60  00005d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004d64  08004d64  00005d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004d68  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  20000068  08004dd0  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  08004dd0  00006270  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fc97  00000000  00000000  00006092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000259e  00000000  00000000  00015d29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001038  00000000  00000000  000182c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c40  00000000  00000000  00019300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d136  00000000  00000000  00019f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f297  00000000  00000000  00037076  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b2306  00000000  00000000  0004630d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f8613  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a28  00000000  00000000  000f8658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000fd080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000068 	.word	0x20000068
 800015c:	00000000 	.word	0x00000000
 8000160:	08004a48 	.word	0x08004a48

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000006c 	.word	0x2000006c
 800017c:	08004a48 	.word	0x08004a48

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b988 	b.w	8000548 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	468e      	mov	lr, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d962      	bls.n	800032c <__udivmoddi4+0xdc>
 8000266:	fab2 f682 	clz	r6, r2
 800026a:	b14e      	cbz	r6, 8000280 <__udivmoddi4+0x30>
 800026c:	f1c6 0320 	rsb	r3, r6, #32
 8000270:	fa01 f806 	lsl.w	r8, r1, r6
 8000274:	fa20 f303 	lsr.w	r3, r0, r3
 8000278:	40b7      	lsls	r7, r6
 800027a:	ea43 0808 	orr.w	r8, r3, r8
 800027e:	40b4      	lsls	r4, r6
 8000280:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000284:	fa1f fc87 	uxth.w	ip, r7
 8000288:	fbb8 f1fe 	udiv	r1, r8, lr
 800028c:	0c23      	lsrs	r3, r4, #16
 800028e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000292:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000296:	fb01 f20c 	mul.w	r2, r1, ip
 800029a:	429a      	cmp	r2, r3
 800029c:	d909      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029e:	18fb      	adds	r3, r7, r3
 80002a0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002a4:	f080 80ea 	bcs.w	800047c <__udivmoddi4+0x22c>
 80002a8:	429a      	cmp	r2, r3
 80002aa:	f240 80e7 	bls.w	800047c <__udivmoddi4+0x22c>
 80002ae:	3902      	subs	r1, #2
 80002b0:	443b      	add	r3, r7
 80002b2:	1a9a      	subs	r2, r3, r2
 80002b4:	b2a3      	uxth	r3, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002c2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c6:	459c      	cmp	ip, r3
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0x8e>
 80002ca:	18fb      	adds	r3, r7, r3
 80002cc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d0:	f080 80d6 	bcs.w	8000480 <__udivmoddi4+0x230>
 80002d4:	459c      	cmp	ip, r3
 80002d6:	f240 80d3 	bls.w	8000480 <__udivmoddi4+0x230>
 80002da:	443b      	add	r3, r7
 80002dc:	3802      	subs	r0, #2
 80002de:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e2:	eba3 030c 	sub.w	r3, r3, ip
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11d      	cbz	r5, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40f3      	lsrs	r3, r6
 80002ec:	2200      	movs	r2, #0
 80002ee:	e9c5 3200 	strd	r3, r2, [r5]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d905      	bls.n	8000306 <__udivmoddi4+0xb6>
 80002fa:	b10d      	cbz	r5, 8000300 <__udivmoddi4+0xb0>
 80002fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000300:	2100      	movs	r1, #0
 8000302:	4608      	mov	r0, r1
 8000304:	e7f5      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000306:	fab3 f183 	clz	r1, r3
 800030a:	2900      	cmp	r1, #0
 800030c:	d146      	bne.n	800039c <__udivmoddi4+0x14c>
 800030e:	4573      	cmp	r3, lr
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xc8>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 8105 	bhi.w	8000522 <__udivmoddi4+0x2d2>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb6e 0203 	sbc.w	r2, lr, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4690      	mov	r8, r2
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e5      	beq.n	80002f2 <__udivmoddi4+0xa2>
 8000326:	e9c5 4800 	strd	r4, r8, [r5]
 800032a:	e7e2      	b.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	2a00      	cmp	r2, #0
 800032e:	f000 8090 	beq.w	8000452 <__udivmoddi4+0x202>
 8000332:	fab2 f682 	clz	r6, r2
 8000336:	2e00      	cmp	r6, #0
 8000338:	f040 80a4 	bne.w	8000484 <__udivmoddi4+0x234>
 800033c:	1a8a      	subs	r2, r1, r2
 800033e:	0c03      	lsrs	r3, r0, #16
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	b280      	uxth	r0, r0
 8000346:	b2bc      	uxth	r4, r7
 8000348:	2101      	movs	r1, #1
 800034a:	fbb2 fcfe 	udiv	ip, r2, lr
 800034e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000356:	fb04 f20c 	mul.w	r2, r4, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d907      	bls.n	800036e <__udivmoddi4+0x11e>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x11c>
 8000366:	429a      	cmp	r2, r3
 8000368:	f200 80e0 	bhi.w	800052c <__udivmoddi4+0x2dc>
 800036c:	46c4      	mov	ip, r8
 800036e:	1a9b      	subs	r3, r3, r2
 8000370:	fbb3 f2fe 	udiv	r2, r3, lr
 8000374:	fb0e 3312 	mls	r3, lr, r2, r3
 8000378:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800037c:	fb02 f404 	mul.w	r4, r2, r4
 8000380:	429c      	cmp	r4, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x144>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f102 30ff 	add.w	r0, r2, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x142>
 800038c:	429c      	cmp	r4, r3
 800038e:	f200 80ca 	bhi.w	8000526 <__udivmoddi4+0x2d6>
 8000392:	4602      	mov	r2, r0
 8000394:	1b1b      	subs	r3, r3, r4
 8000396:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0x98>
 800039c:	f1c1 0620 	rsb	r6, r1, #32
 80003a0:	408b      	lsls	r3, r1
 80003a2:	fa22 f706 	lsr.w	r7, r2, r6
 80003a6:	431f      	orrs	r7, r3
 80003a8:	fa0e f401 	lsl.w	r4, lr, r1
 80003ac:	fa20 f306 	lsr.w	r3, r0, r6
 80003b0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003b4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b8:	4323      	orrs	r3, r4
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	fa1f fc87 	uxth.w	ip, r7
 80003c2:	fbbe f0f9 	udiv	r0, lr, r9
 80003c6:	0c1c      	lsrs	r4, r3, #16
 80003c8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003cc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003d0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1a0>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 3aff 	add.w	sl, r0, #4294967295
 80003e2:	f080 809c 	bcs.w	800051e <__udivmoddi4+0x2ce>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f240 8099 	bls.w	800051e <__udivmoddi4+0x2ce>
 80003ec:	3802      	subs	r0, #2
 80003ee:	443c      	add	r4, r7
 80003f0:	eba4 040e 	sub.w	r4, r4, lr
 80003f4:	fa1f fe83 	uxth.w	lr, r3
 80003f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003fc:	fb09 4413 	mls	r4, r9, r3, r4
 8000400:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000404:	fb03 fc0c 	mul.w	ip, r3, ip
 8000408:	45a4      	cmp	ip, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1ce>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000412:	f080 8082 	bcs.w	800051a <__udivmoddi4+0x2ca>
 8000416:	45a4      	cmp	ip, r4
 8000418:	d97f      	bls.n	800051a <__udivmoddi4+0x2ca>
 800041a:	3b02      	subs	r3, #2
 800041c:	443c      	add	r4, r7
 800041e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	fba0 ec02 	umull	lr, ip, r0, r2
 800042a:	4564      	cmp	r4, ip
 800042c:	4673      	mov	r3, lr
 800042e:	46e1      	mov	r9, ip
 8000430:	d362      	bcc.n	80004f8 <__udivmoddi4+0x2a8>
 8000432:	d05f      	beq.n	80004f4 <__udivmoddi4+0x2a4>
 8000434:	b15d      	cbz	r5, 800044e <__udivmoddi4+0x1fe>
 8000436:	ebb8 0203 	subs.w	r2, r8, r3
 800043a:	eb64 0409 	sbc.w	r4, r4, r9
 800043e:	fa04 f606 	lsl.w	r6, r4, r6
 8000442:	fa22 f301 	lsr.w	r3, r2, r1
 8000446:	431e      	orrs	r6, r3
 8000448:	40cc      	lsrs	r4, r1
 800044a:	e9c5 6400 	strd	r6, r4, [r5]
 800044e:	2100      	movs	r1, #0
 8000450:	e74f      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000452:	fbb1 fcf2 	udiv	ip, r1, r2
 8000456:	0c01      	lsrs	r1, r0, #16
 8000458:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800045c:	b280      	uxth	r0, r0
 800045e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000462:	463b      	mov	r3, r7
 8000464:	4638      	mov	r0, r7
 8000466:	463c      	mov	r4, r7
 8000468:	46b8      	mov	r8, r7
 800046a:	46be      	mov	lr, r7
 800046c:	2620      	movs	r6, #32
 800046e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000472:	eba2 0208 	sub.w	r2, r2, r8
 8000476:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800047a:	e766      	b.n	800034a <__udivmoddi4+0xfa>
 800047c:	4601      	mov	r1, r0
 800047e:	e718      	b.n	80002b2 <__udivmoddi4+0x62>
 8000480:	4610      	mov	r0, r2
 8000482:	e72c      	b.n	80002de <__udivmoddi4+0x8e>
 8000484:	f1c6 0220 	rsb	r2, r6, #32
 8000488:	fa2e f302 	lsr.w	r3, lr, r2
 800048c:	40b7      	lsls	r7, r6
 800048e:	40b1      	lsls	r1, r6
 8000490:	fa20 f202 	lsr.w	r2, r0, r2
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	430a      	orrs	r2, r1
 800049a:	fbb3 f8fe 	udiv	r8, r3, lr
 800049e:	b2bc      	uxth	r4, r7
 80004a0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb08 f904 	mul.w	r9, r8, r4
 80004ae:	40b0      	lsls	r0, r6
 80004b0:	4589      	cmp	r9, r1
 80004b2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004b6:	b280      	uxth	r0, r0
 80004b8:	d93e      	bls.n	8000538 <__udivmoddi4+0x2e8>
 80004ba:	1879      	adds	r1, r7, r1
 80004bc:	f108 3cff 	add.w	ip, r8, #4294967295
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x276>
 80004c2:	4589      	cmp	r9, r1
 80004c4:	d81f      	bhi.n	8000506 <__udivmoddi4+0x2b6>
 80004c6:	eba1 0109 	sub.w	r1, r1, r9
 80004ca:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ce:	fb09 f804 	mul.w	r8, r9, r4
 80004d2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004d6:	b292      	uxth	r2, r2
 80004d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004dc:	4542      	cmp	r2, r8
 80004de:	d229      	bcs.n	8000534 <__udivmoddi4+0x2e4>
 80004e0:	18ba      	adds	r2, r7, r2
 80004e2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004e6:	d2c4      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004e8:	4542      	cmp	r2, r8
 80004ea:	d2c2      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004ec:	f1a9 0102 	sub.w	r1, r9, #2
 80004f0:	443a      	add	r2, r7
 80004f2:	e7be      	b.n	8000472 <__udivmoddi4+0x222>
 80004f4:	45f0      	cmp	r8, lr
 80004f6:	d29d      	bcs.n	8000434 <__udivmoddi4+0x1e4>
 80004f8:	ebbe 0302 	subs.w	r3, lr, r2
 80004fc:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000500:	3801      	subs	r0, #1
 8000502:	46e1      	mov	r9, ip
 8000504:	e796      	b.n	8000434 <__udivmoddi4+0x1e4>
 8000506:	eba7 0909 	sub.w	r9, r7, r9
 800050a:	4449      	add	r1, r9
 800050c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000510:	fbb1 f9fe 	udiv	r9, r1, lr
 8000514:	fb09 f804 	mul.w	r8, r9, r4
 8000518:	e7db      	b.n	80004d2 <__udivmoddi4+0x282>
 800051a:	4673      	mov	r3, lr
 800051c:	e77f      	b.n	800041e <__udivmoddi4+0x1ce>
 800051e:	4650      	mov	r0, sl
 8000520:	e766      	b.n	80003f0 <__udivmoddi4+0x1a0>
 8000522:	4608      	mov	r0, r1
 8000524:	e6fd      	b.n	8000322 <__udivmoddi4+0xd2>
 8000526:	443b      	add	r3, r7
 8000528:	3a02      	subs	r2, #2
 800052a:	e733      	b.n	8000394 <__udivmoddi4+0x144>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	443b      	add	r3, r7
 8000532:	e71c      	b.n	800036e <__udivmoddi4+0x11e>
 8000534:	4649      	mov	r1, r9
 8000536:	e79c      	b.n	8000472 <__udivmoddi4+0x222>
 8000538:	eba1 0109 	sub.w	r1, r1, r9
 800053c:	46c4      	mov	ip, r8
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fb09 f804 	mul.w	r8, r9, r4
 8000546:	e7c4      	b.n	80004d2 <__udivmoddi4+0x282>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <LL_PWR_IsActiveFlag_REGLPS>:
  * @note   Take care, return value "0" means the regulator is ready. Return value "1" means the output voltage range is still changing.
  * @rmtoll SR2          REGLPS        LL_PWR_IsActiveFlag_REGLPS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_REGLPS(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_REGLPS) == (PWR_SR2_REGLPS)) ? 1UL : 0UL);
 8000550:	4b06      	ldr	r3, [pc, #24]	@ (800056c <LL_PWR_IsActiveFlag_REGLPS+0x20>)
 8000552:	695b      	ldr	r3, [r3, #20]
 8000554:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000558:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800055c:	d101      	bne.n	8000562 <LL_PWR_IsActiveFlag_REGLPS+0x16>
 800055e:	2301      	movs	r3, #1
 8000560:	e000      	b.n	8000564 <LL_PWR_IsActiveFlag_REGLPS+0x18>
 8000562:	2300      	movs	r3, #0
}
 8000564:	4618      	mov	r0, r3
 8000566:	46bd      	mov	sp, r7
 8000568:	bc80      	pop	{r7}
 800056a:	4770      	bx	lr
 800056c:	58000400 	.word	0x58000400

08000570 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8000574:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000578:	689b      	ldr	r3, [r3, #8]
 800057a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800057e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000582:	d101      	bne.n	8000588 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8000584:	2301      	movs	r3, #1
 8000586:	e000      	b.n	800058a <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8000588:	2300      	movs	r3, #0
}
 800058a:	4618      	mov	r0, r3
 800058c:	46bd      	mov	sp, r7
 800058e:	bc80      	pop	{r7}
 8000590:	4770      	bx	lr
	...

08000594 <__io_putchar>:
#include "./../Inc/STOP1_example.h"

/** @brief  Redirect the output of printf to USART2
  * @retval int
  */
int __io_putchar(int ch){
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, &ch, 1, 1000);
 800059c:	1d39      	adds	r1, r7, #4
 800059e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005a2:	2201      	movs	r2, #1
 80005a4:	4803      	ldr	r0, [pc, #12]	@ (80005b4 <__io_putchar+0x20>)
 80005a6:	f002 fd10 	bl	8002fca <HAL_UART_Transmit>
}
 80005aa:	bf00      	nop
 80005ac:	4618      	mov	r0, r3
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	20000084 	.word	0x20000084

080005b8 <delay>:

/** @brief Simple software delay (blocking)
  * @param ms: approximate milliseconds to delay (not precise, depends on CPU speed)
  * @retval None
  */
void delay(uint32_t ms){
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
    uint32_t freq = HAL_RCC_GetHCLKFreq();
 80005c0:	f002 f99a 	bl	80028f8 <HAL_RCC_GetHCLKFreq>
 80005c4:	60b8      	str	r0, [r7, #8]
    uint32_t count = (freq / 4000) * ms; // 4 cycles per loop (approx.)
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	4a09      	ldr	r2, [pc, #36]	@ (80005f0 <delay+0x38>)
 80005ca:	fba2 2303 	umull	r2, r3, r2, r3
 80005ce:	0a1a      	lsrs	r2, r3, #8
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	fb02 f303 	mul.w	r3, r2, r3
 80005d6:	60fb      	str	r3, [r7, #12]
    while(count--) {
 80005d8:	e000      	b.n	80005dc <delay+0x24>
        __NOP();
 80005da:	bf00      	nop
    while(count--) {
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	1e5a      	subs	r2, r3, #1
 80005e0:	60fa      	str	r2, [r7, #12]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d1f9      	bne.n	80005da <delay+0x22>
    }
}
 80005e6:	bf00      	nop
 80005e8:	bf00      	nop
 80005ea:	3710      	adds	r7, #16
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	10624dd3 	.word	0x10624dd3

080005f4 <Divide_HCLK1_By>:
  * 2, 3, 4, 5, 6, 8, 10, 16, 32, 64, 128, 256, 512.
  * Any other value does not divide SYSCLK (1 does not divide, >512 divides too much,
  * and by default, any unusual value will not divide).
  * @retval None
  */
void Divide_HCLK1_By(uint16_t dividerX){
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	80fb      	strh	r3, [r7, #6]
    uint8_t HCLK1_prescaler;
    if (dividerX >= 2 && dividerX <= 512){
 80005fe:	88fb      	ldrh	r3, [r7, #6]
 8000600:	2b01      	cmp	r3, #1
 8000602:	f240 80cf 	bls.w	80007a4 <Divide_HCLK1_By+0x1b0>
 8000606:	88fb      	ldrh	r3, [r7, #6]
 8000608:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800060c:	f200 80ca 	bhi.w	80007a4 <Divide_HCLK1_By+0x1b0>
      switch(dividerX){
 8000610:	88fb      	ldrh	r3, [r7, #6]
 8000612:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000616:	f000 80be 	beq.w	8000796 <Divide_HCLK1_By+0x1a2>
 800061a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800061e:	f300 80bd 	bgt.w	800079c <Divide_HCLK1_By+0x1a8>
 8000622:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000626:	f000 80b3 	beq.w	8000790 <Divide_HCLK1_By+0x19c>
 800062a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800062e:	f300 80b5 	bgt.w	800079c <Divide_HCLK1_By+0x1a8>
 8000632:	2b40      	cmp	r3, #64	@ 0x40
 8000634:	f300 8088 	bgt.w	8000748 <Divide_HCLK1_By+0x154>
 8000638:	2b02      	cmp	r3, #2
 800063a:	f2c0 80af 	blt.w	800079c <Divide_HCLK1_By+0x1a8>
 800063e:	3b02      	subs	r3, #2
 8000640:	2b3e      	cmp	r3, #62	@ 0x3e
 8000642:	f200 80ab 	bhi.w	800079c <Divide_HCLK1_By+0x1a8>
 8000646:	a201      	add	r2, pc, #4	@ (adr r2, 800064c <Divide_HCLK1_By+0x58>)
 8000648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800064c:	0800074f 	.word	0x0800074f
 8000650:	08000755 	.word	0x08000755
 8000654:	0800075b 	.word	0x0800075b
 8000658:	08000761 	.word	0x08000761
 800065c:	08000767 	.word	0x08000767
 8000660:	0800079d 	.word	0x0800079d
 8000664:	0800076d 	.word	0x0800076d
 8000668:	0800079d 	.word	0x0800079d
 800066c:	08000773 	.word	0x08000773
 8000670:	0800079d 	.word	0x0800079d
 8000674:	0800079d 	.word	0x0800079d
 8000678:	0800079d 	.word	0x0800079d
 800067c:	0800079d 	.word	0x0800079d
 8000680:	0800079d 	.word	0x0800079d
 8000684:	08000779 	.word	0x08000779
 8000688:	0800079d 	.word	0x0800079d
 800068c:	0800079d 	.word	0x0800079d
 8000690:	0800079d 	.word	0x0800079d
 8000694:	0800079d 	.word	0x0800079d
 8000698:	0800079d 	.word	0x0800079d
 800069c:	0800079d 	.word	0x0800079d
 80006a0:	0800079d 	.word	0x0800079d
 80006a4:	0800079d 	.word	0x0800079d
 80006a8:	0800079d 	.word	0x0800079d
 80006ac:	0800079d 	.word	0x0800079d
 80006b0:	0800079d 	.word	0x0800079d
 80006b4:	0800079d 	.word	0x0800079d
 80006b8:	0800079d 	.word	0x0800079d
 80006bc:	0800079d 	.word	0x0800079d
 80006c0:	0800079d 	.word	0x0800079d
 80006c4:	0800077f 	.word	0x0800077f
 80006c8:	0800079d 	.word	0x0800079d
 80006cc:	0800079d 	.word	0x0800079d
 80006d0:	0800079d 	.word	0x0800079d
 80006d4:	0800079d 	.word	0x0800079d
 80006d8:	0800079d 	.word	0x0800079d
 80006dc:	0800079d 	.word	0x0800079d
 80006e0:	0800079d 	.word	0x0800079d
 80006e4:	0800079d 	.word	0x0800079d
 80006e8:	0800079d 	.word	0x0800079d
 80006ec:	0800079d 	.word	0x0800079d
 80006f0:	0800079d 	.word	0x0800079d
 80006f4:	0800079d 	.word	0x0800079d
 80006f8:	0800079d 	.word	0x0800079d
 80006fc:	0800079d 	.word	0x0800079d
 8000700:	0800079d 	.word	0x0800079d
 8000704:	0800079d 	.word	0x0800079d
 8000708:	0800079d 	.word	0x0800079d
 800070c:	0800079d 	.word	0x0800079d
 8000710:	0800079d 	.word	0x0800079d
 8000714:	0800079d 	.word	0x0800079d
 8000718:	0800079d 	.word	0x0800079d
 800071c:	0800079d 	.word	0x0800079d
 8000720:	0800079d 	.word	0x0800079d
 8000724:	0800079d 	.word	0x0800079d
 8000728:	0800079d 	.word	0x0800079d
 800072c:	0800079d 	.word	0x0800079d
 8000730:	0800079d 	.word	0x0800079d
 8000734:	0800079d 	.word	0x0800079d
 8000738:	0800079d 	.word	0x0800079d
 800073c:	0800079d 	.word	0x0800079d
 8000740:	0800079d 	.word	0x0800079d
 8000744:	08000785 	.word	0x08000785
 8000748:	2b80      	cmp	r3, #128	@ 0x80
 800074a:	d01e      	beq.n	800078a <Divide_HCLK1_By+0x196>
 800074c:	e026      	b.n	800079c <Divide_HCLK1_By+0x1a8>
        case 2:   HCLK1_prescaler = 8;    break; // "1000"
 800074e:	2308      	movs	r3, #8
 8000750:	73fb      	strb	r3, [r7, #15]
 8000752:	e026      	b.n	80007a2 <Divide_HCLK1_By+0x1ae>
        case 3:   HCLK1_prescaler = 1;    break; // "0001"
 8000754:	2301      	movs	r3, #1
 8000756:	73fb      	strb	r3, [r7, #15]
 8000758:	e023      	b.n	80007a2 <Divide_HCLK1_By+0x1ae>
        case 4:   HCLK1_prescaler = 9;    break; // "1001"
 800075a:	2309      	movs	r3, #9
 800075c:	73fb      	strb	r3, [r7, #15]
 800075e:	e020      	b.n	80007a2 <Divide_HCLK1_By+0x1ae>
        case 5:   HCLK1_prescaler = 2;    break; // "0010"
 8000760:	2302      	movs	r3, #2
 8000762:	73fb      	strb	r3, [r7, #15]
 8000764:	e01d      	b.n	80007a2 <Divide_HCLK1_By+0x1ae>
        case 6:   HCLK1_prescaler = 5;    break; // "0101"
 8000766:	2305      	movs	r3, #5
 8000768:	73fb      	strb	r3, [r7, #15]
 800076a:	e01a      	b.n	80007a2 <Divide_HCLK1_By+0x1ae>
        case 8:   HCLK1_prescaler = 10;   break; // "1010"
 800076c:	230a      	movs	r3, #10
 800076e:	73fb      	strb	r3, [r7, #15]
 8000770:	e017      	b.n	80007a2 <Divide_HCLK1_By+0x1ae>
        case 10:  HCLK1_prescaler = 6;    break; // "0110"
 8000772:	2306      	movs	r3, #6
 8000774:	73fb      	strb	r3, [r7, #15]
 8000776:	e014      	b.n	80007a2 <Divide_HCLK1_By+0x1ae>
        case 16:  HCLK1_prescaler = 11;   break; // "1011"
 8000778:	230b      	movs	r3, #11
 800077a:	73fb      	strb	r3, [r7, #15]
 800077c:	e011      	b.n	80007a2 <Divide_HCLK1_By+0x1ae>
        case 32:  HCLK1_prescaler = 7;    break; // "0111"
 800077e:	2307      	movs	r3, #7
 8000780:	73fb      	strb	r3, [r7, #15]
 8000782:	e00e      	b.n	80007a2 <Divide_HCLK1_By+0x1ae>
        case 64:  HCLK1_prescaler = 12;   break; // "1100"
 8000784:	230c      	movs	r3, #12
 8000786:	73fb      	strb	r3, [r7, #15]
 8000788:	e00b      	b.n	80007a2 <Divide_HCLK1_By+0x1ae>
        case 128: HCLK1_prescaler = 13;   break; // "1101"
 800078a:	230d      	movs	r3, #13
 800078c:	73fb      	strb	r3, [r7, #15]
 800078e:	e008      	b.n	80007a2 <Divide_HCLK1_By+0x1ae>
        case 256: HCLK1_prescaler = 14;   break; // "1110"
 8000790:	230e      	movs	r3, #14
 8000792:	73fb      	strb	r3, [r7, #15]
 8000794:	e005      	b.n	80007a2 <Divide_HCLK1_By+0x1ae>
        case 512: HCLK1_prescaler = 15;   break; // "1111"
 8000796:	230f      	movs	r3, #15
 8000798:	73fb      	strb	r3, [r7, #15]
 800079a:	e002      	b.n	80007a2 <Divide_HCLK1_By+0x1ae>
        default:  HCLK1_prescaler = 0; break; // "0000", no division
 800079c:	2300      	movs	r3, #0
 800079e:	73fb      	strb	r3, [r7, #15]
 80007a0:	bf00      	nop
      switch(dividerX){
 80007a2:	e001      	b.n	80007a8 <Divide_HCLK1_By+0x1b4>
      }
    } else HCLK1_prescaler = 0; // no division
 80007a4:	2300      	movs	r3, #0
 80007a6:	73fb      	strb	r3, [r7, #15]

    // Reset the current prescaler value into bits 7 to 4 (HPRE)
    RCC -> CFGR &= ~(0xF << 4);
 80007a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80007ac:	689b      	ldr	r3, [r3, #8]
 80007ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80007b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80007b6:	6093      	str	r3, [r2, #8]
    // Insert the new prescaler value
    RCC -> CFGR |= (HCLK1_prescaler << 4);
 80007b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80007bc:	689a      	ldr	r2, [r3, #8]
 80007be:	7bfb      	ldrb	r3, [r7, #15]
 80007c0:	011b      	lsls	r3, r3, #4
 80007c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80007c6:	4313      	orrs	r3, r2
 80007c8:	608b      	str	r3, [r1, #8]
    /* Wait for the hardware to aknowledge the new prescaler value
     * using HCLK1 prescaler flag (HPREF) on bit 16:
     * 0 → HCLK1 prescaler value not yet applied
     * 1 → HCLK1 prescaler value applied (RCC -> CFGR & (1 << 16))
     * OR using LL function `LL_RCC_IsActiveFlag_HPRE(void)`
     */ while(!(LL_RCC_IsActiveFlag_HPRE())){}
 80007ca:	bf00      	nop
 80007cc:	f7ff fed0 	bl	8000570 <LL_RCC_IsActiveFlag_HPRE>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d0fa      	beq.n	80007cc <Divide_HCLK1_By+0x1d8>
}
 80007d6:	bf00      	nop
 80007d8:	bf00      	nop
 80007da:	3710      	adds	r7, #16
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}

080007e0 <Enter_LowPowerRunMode>:
/** @brief Makes the CPU goes into low power run mode (LPRun),
  * according to the datasheet guidance. HSE32 is not used,
  * HSI16 is.
  * @retval None
  */
void Enter_LowPowerRunMode(void){
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
	// 1. set the FPDR bit in PWR_CR1.
	HAL_PWREx_EnableFlashPowerDown(PWR_FLASHPD_LPRUN);
 80007e4:	2010      	movs	r0, #16
 80007e6:	f000 ffe3 	bl	80017b0 <HAL_PWREx_EnableFlashPowerDown>
	/* 3. Decrease the HCLK clock frequencies below 2 MHz.
	 * 16 MHz / X ≤ 2 MHz → X ≥ 8; and 8 is a usual value of divider
	 * among 1, 2, 3, 4, 5, 6, 8, 10, 16, 32, 64, 128, 256 and 512.
	 * But we will take the next higher value, 10, to ensure we are below 2 MHz.
	 */
    Divide_HCLK1_By(10);
 80007ea:	200a      	movs	r0, #10
 80007ec:	f7ff ff02 	bl	80005f4 <Divide_HCLK1_By>

	// 4. Set the LPR bit in PWR_CR1.
	HAL_PWREx_EnableLowPowerRunMode();
 80007f0:	f000 fff8 	bl	80017e4 <HAL_PWREx_EnableLowPowerRunMode>

	// 5. Check if the low-power regulator is ready,
	// by checking the REGLPS bit (PWR_SR2, bit 8)
	while(!(LL_PWR_IsActiveFlag_REGLPS())){}
 80007f4:	bf00      	nop
 80007f6:	f7ff fea9 	bl	800054c <LL_PWR_IsActiveFlag_REGLPS>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d0fa      	beq.n	80007f6 <Enter_LowPowerRunMode+0x16>
}
 8000800:	bf00      	nop
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}

08000806 <Exit_LowPowerRunMode>:
  * HCLK1 frequency over 2 MHz, can take the following values:
  * 1, 2, 3, 4, 5, 6, 8, 10, 16, 32, 64, 128, 256, 512, but MUST BE lower than 10;
  * e.g. among the nine first values.
  * @retval None
  */
void Exit_LowPowerRunMode(uint8_t newHCLKFreq){
 8000806:	b580      	push	{r7, lr}
 8000808:	b082      	sub	sp, #8
 800080a:	af00      	add	r7, sp, #0
 800080c:	4603      	mov	r3, r0
 800080e:	71fb      	strb	r3, [r7, #7]
	// 1. Clear the LPR bit in PWR_CR1, and,
	// 2. wait until REGLPF bit is cleared in PWR_SR2.
	HAL_PWREx_DisableLowPowerRunMode();
 8000810:	f000 fff6 	bl	8001800 <HAL_PWREx_DisableLowPowerRunMode>

	// 3. Increase the HCLK clock frequencies over 2 MHz.
	// 48 MHz / X ≥ 2 MHz → X ≤ 24; but 24 is not
	// a usual value of divider (1, 2, 3, 4, 5, 6, 8, 10, 16, 32, 64, 128, 256, 512).
	// So we can take one of the nine lower values, 1 to 16.
	Divide_HCLK1_By(newHCLKFreq);
 8000814:	79fb      	ldrb	r3, [r7, #7]
 8000816:	b29b      	uxth	r3, r3
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff feeb 	bl	80005f4 <Divide_HCLK1_By>
	// (HSE32 is not used here, so we skip this optionnal step.)
}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
	...

08000828 <Enter_STOP1Mode_OnWFI>:
/** @brief Makes the CPU go into STOP1 mode,
  * according to the datasheet guidance.
  * We are waiting on an Interrupt (WFI).
  * @retval None
  */
void Enter_STOP1Mode_OnWFI(void){
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
	 * and the peripheral flags generating wake-up interrupts must be cleared.
	 * Otherwise, the Stop 1 mode entry procedure is ignored and program execution continues.
	 * These bits are cleared when writing '1' to them.
	 */
	// EXTI_PR1 - 19 bits: 22, 21, 16 to 0.
	EXTI -> PR1 |= (3 << 21); // bits 22 & 21
 800082c:	4b18      	ldr	r3, [pc, #96]	@ (8000890 <Enter_STOP1Mode_OnWFI+0x68>)
 800082e:	68db      	ldr	r3, [r3, #12]
 8000830:	4a17      	ldr	r2, [pc, #92]	@ (8000890 <Enter_STOP1Mode_OnWFI+0x68>)
 8000832:	f443 03c0 	orr.w	r3, r3, #6291456	@ 0x600000
 8000836:	60d3      	str	r3, [r2, #12]
	EXTI -> PR1 |= (1 << 16); // bit 16
 8000838:	4b15      	ldr	r3, [pc, #84]	@ (8000890 <Enter_STOP1Mode_OnWFI+0x68>)
 800083a:	68db      	ldr	r3, [r3, #12]
 800083c:	4a14      	ldr	r2, [pc, #80]	@ (8000890 <Enter_STOP1Mode_OnWFI+0x68>)
 800083e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000842:	60d3      	str	r3, [r2, #12]
	EXTI -> PR1 |= (0xFFFF << 0); // bits 15 to 0
 8000844:	4b12      	ldr	r3, [pc, #72]	@ (8000890 <Enter_STOP1Mode_OnWFI+0x68>)
 8000846:	68db      	ldr	r3, [r3, #12]
 8000848:	4a11      	ldr	r2, [pc, #68]	@ (8000890 <Enter_STOP1Mode_OnWFI+0x68>)
 800084a:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 800084e:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8000852:	60d3      	str	r3, [r2, #12]
	// EXTI_PR2 - 4 bits: 13, 9, 8, 2.
	EXTI -> PR1 |= (1 << 13); // bit 13
 8000854:	4b0e      	ldr	r3, [pc, #56]	@ (8000890 <Enter_STOP1Mode_OnWFI+0x68>)
 8000856:	68db      	ldr	r3, [r3, #12]
 8000858:	4a0d      	ldr	r2, [pc, #52]	@ (8000890 <Enter_STOP1Mode_OnWFI+0x68>)
 800085a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800085e:	60d3      	str	r3, [r2, #12]
	EXTI -> PR1 |= (3 << 8); // bits 9 & 8
 8000860:	4b0b      	ldr	r3, [pc, #44]	@ (8000890 <Enter_STOP1Mode_OnWFI+0x68>)
 8000862:	68db      	ldr	r3, [r3, #12]
 8000864:	4a0a      	ldr	r2, [pc, #40]	@ (8000890 <Enter_STOP1Mode_OnWFI+0x68>)
 8000866:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800086a:	60d3      	str	r3, [r2, #12]
	EXTI -> PR1 |= (1 << 2); // bit 2
 800086c:	4b08      	ldr	r3, [pc, #32]	@ (8000890 <Enter_STOP1Mode_OnWFI+0x68>)
 800086e:	68db      	ldr	r3, [r3, #12]
 8000870:	4a07      	ldr	r2, [pc, #28]	@ (8000890 <Enter_STOP1Mode_OnWFI+0x68>)
 8000872:	f043 0304 	orr.w	r3, r3, #4
 8000876:	60d3      	str	r3, [r2, #12]

	// Wait a bit before entering STOP1 mode
	HAL_Delay(500);
 8000878:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800087c:	f000 fc8a 	bl	8001194 <HAL_Delay>

	// Suspend the tick to prevent the SysTick interrupt every 1 ms
	HAL_SuspendTick();
 8000880:	f000 fcac 	bl	80011dc <HAL_SuspendTick>

	// Enter the STOP1 mode, waiting for an interrupt
	HAL_PWREx_EnterSTOP1Mode(PWR_SLEEPENTRY_WFI);
 8000884:	2001      	movs	r0, #1
 8000886:	f000 fff1 	bl	800186c <HAL_PWREx_EnterSTOP1Mode>
	/* ####----####----####----####
	 * MCU is asleep in STOP1 mode
	 * ####----####----####----####
	 */
}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	58000800 	.word	0x58000800

08000894 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000894:	b480      	push	{r7}
 8000896:	b085      	sub	sp, #20
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800089c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80008a0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80008a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	4313      	orrs	r3, r2
 80008aa:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80008ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80008b0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4013      	ands	r3, r2
 80008b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008b8:	68fb      	ldr	r3, [r7, #12]
}
 80008ba:	bf00      	nop
 80008bc:	3714      	adds	r7, #20
 80008be:	46bd      	mov	sp, r7
 80008c0:	bc80      	pop	{r7}
 80008c2:	4770      	bx	lr

080008c4 <LL_APB1_GRP1_DisableClockSleep>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1

  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClockSleep(uint32_t Periphs)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1SMENR1, Periphs);
 80008cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80008d0:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	43db      	mvns	r3, r3
 80008d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80008da:	4013      	ands	r3, r2
 80008dc:	678b      	str	r3, [r1, #120]	@ 0x78
}
 80008de:	bf00      	nop
 80008e0:	370c      	adds	r7, #12
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bc80      	pop	{r7}
 80008e6:	4770      	bx	lr

080008e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ec:	f000 fbdc 	bl	80010a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008f0:	f000 f840 	bl	8000974 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008f4:	f000 f8da 	bl	8000aac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008f8:	f000 f88c 	bl	8000a14 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    printf("\r\n\r\nTest d'une appli mode veille profonde sur STM32.\r\n");
 80008fc:	4814      	ldr	r0, [pc, #80]	@ (8000950 <main+0x68>)
 80008fe:	f003 fa47 	bl	8003d90 <puts>
    printf("Les différents modes testés sont:\r\n");
 8000902:	4814      	ldr	r0, [pc, #80]	@ (8000954 <main+0x6c>)
 8000904:	f003 fa44 	bl	8003d90 <puts>
    printf("\tRUN = 0, LPRUN = 1, STOP1 = 2\r\n");
 8000908:	4813      	ldr	r0, [pc, #76]	@ (8000958 <main+0x70>)
 800090a:	f003 fa41 	bl	8003d90 <puts>
  while (1)
  {
	  button_pressed = 0; // Reset flag before waiting
 800090e:	4b13      	ldr	r3, [pc, #76]	@ (800095c <main+0x74>)
 8000910:	2200      	movs	r2, #0
 8000912:	701a      	strb	r2, [r3, #0]
	  printf("Exécution de la boucle While.\r\n");
 8000914:	4812      	ldr	r0, [pc, #72]	@ (8000960 <main+0x78>)
 8000916:	f003 fa3b 	bl	8003d90 <puts>
	  printf("Modes disponibles:\r\n");
 800091a:	4812      	ldr	r0, [pc, #72]	@ (8000964 <main+0x7c>)
 800091c:	f003 fa38 	bl	8003d90 <puts>
	  printf("\tRUN = 0, LPRUN = 1, STOP1 = 2\r\n");
 8000920:	480d      	ldr	r0, [pc, #52]	@ (8000958 <main+0x70>)
 8000922:	f003 fa35 	bl	8003d90 <puts>
	  printf("\tMode actuel: %d\r\n\r\n", currentMode);
 8000926:	4b10      	ldr	r3, [pc, #64]	@ (8000968 <main+0x80>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	4619      	mov	r1, r3
 800092c:	480f      	ldr	r0, [pc, #60]	@ (800096c <main+0x84>)
 800092e:	f003 f9c7 	bl	8003cc0 <iprintf>

	  while (button_pressed == 0){}
 8000932:	bf00      	nop
 8000934:	4b09      	ldr	r3, [pc, #36]	@ (800095c <main+0x74>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	b2db      	uxtb	r3, r3
 800093a:	2b00      	cmp	r3, #0
 800093c:	d0fa      	beq.n	8000934 <main+0x4c>

	  Switch_Mode();
 800093e:	f000 f97b 	bl	8000c38 <Switch_Mode>
	  printf("\tAFTER update, currentMode = %d\r\n\r\n", currentMode);
 8000942:	4b09      	ldr	r3, [pc, #36]	@ (8000968 <main+0x80>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	4619      	mov	r1, r3
 8000948:	4809      	ldr	r0, [pc, #36]	@ (8000970 <main+0x88>)
 800094a:	f003 f9b9 	bl	8003cc0 <iprintf>
	  button_pressed = 0; // Reset flag before waiting
 800094e:	e7de      	b.n	800090e <main+0x26>
 8000950:	08004a60 	.word	0x08004a60
 8000954:	08004a98 	.word	0x08004a98
 8000958:	08004ac0 	.word	0x08004ac0
 800095c:	2000011a 	.word	0x2000011a
 8000960:	08004ae0 	.word	0x08004ae0
 8000964:	08004b00 	.word	0x08004b00
 8000968:	20000118 	.word	0x20000118
 800096c:	08004b14 	.word	0x08004b14
 8000970:	08004b2c 	.word	0x08004b2c

08000974 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b09a      	sub	sp, #104	@ 0x68
 8000978:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800097a:	f107 0320 	add.w	r3, r7, #32
 800097e:	2248      	movs	r2, #72	@ 0x48
 8000980:	2100      	movs	r1, #0
 8000982:	4618      	mov	r0, r3
 8000984:	f003 fae4 	bl	8003f50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	60da      	str	r2, [r3, #12]
 8000994:	611a      	str	r2, [r3, #16]
 8000996:	615a      	str	r2, [r3, #20]
 8000998:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800099a:	4b1d      	ldr	r3, [pc, #116]	@ (8000a10 <SystemClock_Config+0x9c>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80009a2:	4a1b      	ldr	r2, [pc, #108]	@ (8000a10 <SystemClock_Config+0x9c>)
 80009a4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009a8:	6013      	str	r3, [r2, #0]
 80009aa:	4b19      	ldr	r3, [pc, #100]	@ (8000a10 <SystemClock_Config+0x9c>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80009b2:	603b      	str	r3, [r7, #0]
 80009b4:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009b6:	2302      	movs	r3, #2
 80009b8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009be:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009c0:	2340      	movs	r3, #64	@ 0x40
 80009c2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009c4:	2300      	movs	r3, #0
 80009c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c8:	f107 0320 	add.w	r3, r7, #32
 80009cc:	4618      	mov	r0, r3
 80009ce:	f001 fa2f 	bl	8001e30 <HAL_RCC_OscConfig>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <SystemClock_Config+0x68>
  {
    Error_Handler();
 80009d8:	f000 f9d4 	bl	8000d84 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80009dc:	234f      	movs	r3, #79	@ 0x4f
 80009de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009e0:	2301      	movs	r3, #1
 80009e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009e4:	2300      	movs	r3, #0
 80009e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009e8:	2300      	movs	r3, #0
 80009ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009ec:	2300      	movs	r3, #0
 80009ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80009f0:	2300      	movs	r3, #0
 80009f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	2100      	movs	r1, #0
 80009f8:	4618      	mov	r0, r3
 80009fa:	f001 fd9b 	bl	8002534 <HAL_RCC_ClockConfig>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a04:	f000 f9be 	bl	8000d84 <Error_Handler>
  }
}
 8000a08:	bf00      	nop
 8000a0a:	3768      	adds	r7, #104	@ 0x68
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	58000400 	.word	0x58000400

08000a14 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a18:	4b22      	ldr	r3, [pc, #136]	@ (8000aa4 <MX_USART2_UART_Init+0x90>)
 8000a1a:	4a23      	ldr	r2, [pc, #140]	@ (8000aa8 <MX_USART2_UART_Init+0x94>)
 8000a1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000a1e:	4b21      	ldr	r3, [pc, #132]	@ (8000aa4 <MX_USART2_UART_Init+0x90>)
 8000a20:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000a24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a26:	4b1f      	ldr	r3, [pc, #124]	@ (8000aa4 <MX_USART2_UART_Init+0x90>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000aa4 <MX_USART2_UART_Init+0x90>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a32:	4b1c      	ldr	r3, [pc, #112]	@ (8000aa4 <MX_USART2_UART_Init+0x90>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a38:	4b1a      	ldr	r3, [pc, #104]	@ (8000aa4 <MX_USART2_UART_Init+0x90>)
 8000a3a:	220c      	movs	r2, #12
 8000a3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a3e:	4b19      	ldr	r3, [pc, #100]	@ (8000aa4 <MX_USART2_UART_Init+0x90>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a44:	4b17      	ldr	r3, [pc, #92]	@ (8000aa4 <MX_USART2_UART_Init+0x90>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a4a:	4b16      	ldr	r3, [pc, #88]	@ (8000aa4 <MX_USART2_UART_Init+0x90>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a50:	4b14      	ldr	r3, [pc, #80]	@ (8000aa4 <MX_USART2_UART_Init+0x90>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a56:	4b13      	ldr	r3, [pc, #76]	@ (8000aa4 <MX_USART2_UART_Init+0x90>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a5c:	4811      	ldr	r0, [pc, #68]	@ (8000aa4 <MX_USART2_UART_Init+0x90>)
 8000a5e:	f002 fa64 	bl	8002f2a <HAL_UART_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a68:	f000 f98c 	bl	8000d84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	480d      	ldr	r0, [pc, #52]	@ (8000aa4 <MX_USART2_UART_Init+0x90>)
 8000a70:	f002 ff9b 	bl	80039aa <HAL_UARTEx_SetTxFifoThreshold>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000a7a:	f000 f983 	bl	8000d84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a7e:	2100      	movs	r1, #0
 8000a80:	4808      	ldr	r0, [pc, #32]	@ (8000aa4 <MX_USART2_UART_Init+0x90>)
 8000a82:	f002 ffd0 	bl	8003a26 <HAL_UARTEx_SetRxFifoThreshold>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000a8c:	f000 f97a 	bl	8000d84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a90:	4804      	ldr	r0, [pc, #16]	@ (8000aa4 <MX_USART2_UART_Init+0x90>)
 8000a92:	f002 ff52 	bl	800393a <HAL_UARTEx_DisableFifoMode>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a9c:	f000 f972 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000aa0:	bf00      	nop
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	20000084 	.word	0x20000084
 8000aa8:	40004400 	.word	0x40004400

08000aac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b086      	sub	sp, #24
 8000ab0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab2:	1d3b      	adds	r3, r7, #4
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac0:	2002      	movs	r0, #2
 8000ac2:	f7ff fee7 	bl	8000894 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac6:	2004      	movs	r0, #4
 8000ac8:	f7ff fee4 	bl	8000894 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000acc:	2001      	movs	r0, #1
 8000ace:	f7ff fee1 	bl	8000894 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BLED_Pin|GLED_Pin|RLED_Pin, GPIO_PIN_RESET);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	f44f 410a 	mov.w	r1, #35328	@ 0x8a00
 8000ad8:	482b      	ldr	r0, [pc, #172]	@ (8000b88 <MX_GPIO_Init+0xdc>)
 8000ada:	f000 fe07 	bl	80016ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2138      	movs	r1, #56	@ 0x38
 8000ae2:	482a      	ldr	r0, [pc, #168]	@ (8000b8c <MX_GPIO_Init+0xe0>)
 8000ae4:	f000 fe02 	bl	80016ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BLED_Pin GLED_Pin RLED_Pin */
  GPIO_InitStruct.Pin = BLED_Pin|GLED_Pin|RLED_Pin;
 8000ae8:	f44f 430a 	mov.w	r3, #35328	@ 0x8a00
 8000aec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aee:	2301      	movs	r3, #1
 8000af0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af6:	2300      	movs	r3, #0
 8000af8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afa:	1d3b      	adds	r3, r7, #4
 8000afc:	4619      	mov	r1, r3
 8000afe:	4822      	ldr	r0, [pc, #136]	@ (8000b88 <MX_GPIO_Init+0xdc>)
 8000b00:	f000 fc94 	bl	800142c <HAL_GPIO_Init>

  /*Configure GPIO pins : FE_CTRL3_Pin FE_CTRL2_Pin FE_CTRL1_Pin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 8000b04:	2338      	movs	r3, #56	@ 0x38
 8000b06:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b10:	2303      	movs	r3, #3
 8000b12:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b14:	1d3b      	adds	r3, r7, #4
 8000b16:	4619      	mov	r1, r3
 8000b18:	481c      	ldr	r0, [pc, #112]	@ (8000b8c <MX_GPIO_Init+0xe0>)
 8000b1a:	f000 fc87 	bl	800142c <HAL_GPIO_Init>

  /*Configure GPIO pins : UB1_Pin UB2_Pin */
  GPIO_InitStruct.Pin = UB1_Pin|UB2_Pin;
 8000b1e:	2303      	movs	r3, #3
 8000b20:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b22:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b26:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2c:	1d3b      	adds	r3, r7, #4
 8000b2e:	4619      	mov	r1, r3
 8000b30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b34:	f000 fc7a 	bl	800142c <HAL_GPIO_Init>

  /*Configure GPIO pin : UB3_Pin */
  GPIO_InitStruct.Pin = UB3_Pin;
 8000b38:	2340      	movs	r3, #64	@ 0x40
 8000b3a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b3c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b40:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b42:	2301      	movs	r3, #1
 8000b44:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(UB3_GPIO_Port, &GPIO_InitStruct);
 8000b46:	1d3b      	adds	r3, r7, #4
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4810      	ldr	r0, [pc, #64]	@ (8000b8c <MX_GPIO_Init+0xe0>)
 8000b4c:	f000 fc6e 	bl	800142c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000b50:	2200      	movs	r2, #0
 8000b52:	2100      	movs	r1, #0
 8000b54:	2006      	movs	r0, #6
 8000b56:	f000 fc34 	bl	80013c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b5a:	2006      	movs	r0, #6
 8000b5c:	f000 fc4b 	bl	80013f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000b60:	2200      	movs	r2, #0
 8000b62:	2100      	movs	r1, #0
 8000b64:	2007      	movs	r0, #7
 8000b66:	f000 fc2c 	bl	80013c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000b6a:	2007      	movs	r0, #7
 8000b6c:	f000 fc43 	bl	80013f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000b70:	2200      	movs	r2, #0
 8000b72:	2100      	movs	r1, #0
 8000b74:	2016      	movs	r0, #22
 8000b76:	f000 fc24 	bl	80013c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000b7a:	2016      	movs	r0, #22
 8000b7c:	f000 fc3b 	bl	80013f6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b80:	bf00      	nop
 8000b82:	3718      	adds	r7, #24
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	48000400 	.word	0x48000400
 8000b8c:	48000800 	.word	0x48000800

08000b90 <HAL_GPIO_EXTI_Callback>:
  * `currentMode` is updated.
  * @param GPIO_Pin: Pin number that triggered the interrupt
  * @note  This function is called by the HAL when an external interrupt occurs.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	80fb      	strh	r3, [r7, #6]
	// Update our user defined flags
	button_pressed = 1;
 8000b9a:	4b20      	ldr	r3, [pc, #128]	@ (8000c1c <HAL_GPIO_EXTI_Callback+0x8c>)
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	701a      	strb	r2, [r3, #0]
	// Cases differ depending on the button pressed
	// Actions to do if we are currently in STOP1 mode
	if (currentMode == MODE_STOP1 || currentMode == MODE_LPRUN){
 8000ba0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c20 <HAL_GPIO_EXTI_Callback+0x90>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	2b02      	cmp	r3, #2
 8000ba6:	d003      	beq.n	8000bb0 <HAL_GPIO_EXTI_Callback+0x20>
 8000ba8:	4b1d      	ldr	r3, [pc, #116]	@ (8000c20 <HAL_GPIO_EXTI_Callback+0x90>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d113      	bne.n	8000bd8 <HAL_GPIO_EXTI_Callback+0x48>
		if (currentMode == MODE_STOP1){
 8000bb0:	4b1b      	ldr	r3, [pc, #108]	@ (8000c20 <HAL_GPIO_EXTI_Callback+0x90>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	2b02      	cmp	r3, #2
 8000bb6:	d102      	bne.n	8000bbe <HAL_GPIO_EXTI_Callback+0x2e>
			// Resume the SysTick increment
			HAL_ResumeTick();
 8000bb8:	f000 fb1e 	bl	80011f8 <HAL_ResumeTick>
 8000bbc:	e006      	b.n	8000bcc <HAL_GPIO_EXTI_Callback+0x3c>
		}
		else if (currentMode == MODE_LPRUN){
 8000bbe:	4b18      	ldr	r3, [pc, #96]	@ (8000c20 <HAL_GPIO_EXTI_Callback+0x90>)
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d102      	bne.n	8000bcc <HAL_GPIO_EXTI_Callback+0x3c>
			Exit_LowPowerRunMode(1);
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	f7ff fe1d 	bl	8000806 <Exit_LowPowerRunMode>
		}
		// (Re)Initialize the peripherals
		HAL_Init(); 			// all peripherals, Flash interface and SysTick
 8000bcc:	f000 fa6c 	bl	80010a8 <HAL_Init>
		MX_GPIO_Init();			// GPIO
 8000bd0:	f7ff ff6c 	bl	8000aac <MX_GPIO_Init>
		MX_USART2_UART_Init(); 	// USART2
 8000bd4:	f7ff ff1e 	bl	8000a14 <MX_USART2_UART_Init>
	}
	/* If user button 1 (UB1, on PA0) is pressed,
     * we are currently in STOP1 mode, so no change.
     */
	if (GPIO_Pin == UB1_Pin){
 8000bd8:	88fb      	ldrh	r3, [r7, #6]
 8000bda:	2b01      	cmp	r3, #1
 8000bdc:	d102      	bne.n	8000be4 <HAL_GPIO_EXTI_Callback+0x54>
		nextMode = MODE_STOP1;
 8000bde:	4b11      	ldr	r3, [pc, #68]	@ (8000c24 <HAL_GPIO_EXTI_Callback+0x94>)
 8000be0:	2202      	movs	r2, #2
 8000be2:	701a      	strb	r2, [r3, #0]
        // Nothing else to do here.
	}
	/* If user button 2 (UB2, on PA1) is pressed,
	 * switch mode to LPRun mode.
	 */
	if (GPIO_Pin == UB2_Pin){
 8000be4:	88fb      	ldrh	r3, [r7, #6]
 8000be6:	2b02      	cmp	r3, #2
 8000be8:	d108      	bne.n	8000bfc <HAL_GPIO_EXTI_Callback+0x6c>
		printf("Pression du Bouton 2 détectée.\r\n");
 8000bea:	480f      	ldr	r0, [pc, #60]	@ (8000c28 <HAL_GPIO_EXTI_Callback+0x98>)
 8000bec:	f003 f8d0 	bl	8003d90 <puts>
		printf("Le µCU entrera en mode LPRun.\r\n");
 8000bf0:	480e      	ldr	r0, [pc, #56]	@ (8000c2c <HAL_GPIO_EXTI_Callback+0x9c>)
 8000bf2:	f003 f8cd 	bl	8003d90 <puts>
		nextMode = MODE_LPRUN;
 8000bf6:	4b0b      	ldr	r3, [pc, #44]	@ (8000c24 <HAL_GPIO_EXTI_Callback+0x94>)
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	701a      	strb	r2, [r3, #0]
	}
	/* If user button 3 (UB3, on PC6) is pressed,
	 * switch mode to Run mode.
	 */
	if (GPIO_Pin == UB3_Pin){
 8000bfc:	88fb      	ldrh	r3, [r7, #6]
 8000bfe:	2b40      	cmp	r3, #64	@ 0x40
 8000c00:	d108      	bne.n	8000c14 <HAL_GPIO_EXTI_Callback+0x84>
		printf("Pression du Bouton 3 détectée.\r\n");
 8000c02:	480b      	ldr	r0, [pc, #44]	@ (8000c30 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000c04:	f003 f8c4 	bl	8003d90 <puts>
		printf("Le µCU entrera en mode Run.\r\n");
 8000c08:	480a      	ldr	r0, [pc, #40]	@ (8000c34 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000c0a:	f003 f8c1 	bl	8003d90 <puts>
		nextMode = MODE_RUN;
 8000c0e:	4b05      	ldr	r3, [pc, #20]	@ (8000c24 <HAL_GPIO_EXTI_Callback+0x94>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	701a      	strb	r2, [r3, #0]
	}
}
 8000c14:	bf00      	nop
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	2000011a 	.word	0x2000011a
 8000c20:	20000118 	.word	0x20000118
 8000c24:	20000119 	.word	0x20000119
 8000c28:	08004b50 	.word	0x08004b50
 8000c2c:	08004b74 	.word	0x08004b74
 8000c30:	08004b94 	.word	0x08004b94
 8000c34:	08004bb8 	.word	0x08004bb8

08000c38 <Switch_Mode>:
  * 	GPIO_Pin_0 || UB1_Pin sets the CPU to STOP1 mode
  * 	GPIO_Pin_1 || UB2_Pin sets the CPU to LPRun mode
  * 	GPIO_Pin_6 || UB3_Pin sets the CPU to Run mode
  * @retval None
  */
void Switch_Mode(void){
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
	// Cases differ depending on the button pressed

	/* If user button 1 (UB1, on PA0) was pressed,
	 * switch mode to STOP1 mode.
	 */
	if (nextMode == MODE_STOP1){
 8000c3e:	4b4b      	ldr	r3, [pc, #300]	@ (8000d6c <Switch_Mode+0x134>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	2b02      	cmp	r3, #2
 8000c44:	d12c      	bne.n	8000ca0 <Switch_Mode+0x68>
		// Launch blue LED sequence (3 quick blinks)
		for (int _ = 0; _ < 6; _++){
 8000c46:	2300      	movs	r3, #0
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	e00a      	b.n	8000c62 <Switch_Mode+0x2a>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);
 8000c4c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c50:	4847      	ldr	r0, [pc, #284]	@ (8000d70 <Switch_Mode+0x138>)
 8000c52:	f000 fd62 	bl	800171a <HAL_GPIO_TogglePin>
			delay(50);
 8000c56:	2032      	movs	r0, #50	@ 0x32
 8000c58:	f7ff fcae 	bl	80005b8 <delay>
		for (int _ = 0; _ < 6; _++){
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	2b05      	cmp	r3, #5
 8000c66:	ddf1      	ble.n	8000c4c <Switch_Mode+0x14>
		}

		// If we are in LPRun or Run mode, switch to STOP1 mode
		if (currentMode != MODE_STOP1){
 8000c68:	4b42      	ldr	r3, [pc, #264]	@ (8000d74 <Switch_Mode+0x13c>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2b02      	cmp	r3, #2
 8000c6e:	d079      	beq.n	8000d64 <Switch_Mode+0x12c>
			// Procedure to enter STOP1 mode is the same, but exiting LPRun is an extra step
			if (currentMode == MODE_LPRUN){
 8000c70:	4b40      	ldr	r3, [pc, #256]	@ (8000d74 <Switch_Mode+0x13c>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d104      	bne.n	8000c82 <Switch_Mode+0x4a>
				// Exit first from LPRun, working back at 16 MHz
				Exit_LowPowerRunMode(1);
 8000c78:	2001      	movs	r0, #1
 8000c7a:	f7ff fdc4 	bl	8000806 <Exit_LowPowerRunMode>
				// Reset the USART2 peripheral, as HCLK1 frequency is now different
				MX_USART2_UART_Init();
 8000c7e:	f7ff fec9 	bl	8000a14 <MX_USART2_UART_Init>
			}
			printf("Le µCU entre en mode STOP1 via WFI.\r\n");
 8000c82:	483d      	ldr	r0, [pc, #244]	@ (8000d78 <Switch_Mode+0x140>)
 8000c84:	f003 f884 	bl	8003d90 <puts>
			// Suspend the SysTick increment
			HAL_SuspendTick();
 8000c88:	f000 faa8 	bl	80011dc <HAL_SuspendTick>
			// Clock-gating the USART2 peripheral
			__HAL_RCC_USART2_CLK_SLEEP_DISABLE();
 8000c8c:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000c90:	f7ff fe18 	bl	80008c4 <LL_APB1_GRP1_DisableClockSleep>
			// Set the current mode to STOP1
			currentMode = MODE_STOP1;
 8000c94:	4b37      	ldr	r3, [pc, #220]	@ (8000d74 <Switch_Mode+0x13c>)
 8000c96:	2202      	movs	r2, #2
 8000c98:	701a      	strb	r2, [r3, #0]
			Enter_STOP1Mode_OnWFI();
 8000c9a:	f7ff fdc5 	bl	8000828 <Enter_STOP1Mode_OnWFI>
			printf("Le µCU entre en mode Run.\r\n\r\n");
			// Set the current mode to STOP1
			currentMode = MODE_RUN;
		}
	}
}
 8000c9e:	e061      	b.n	8000d64 <Switch_Mode+0x12c>
	else if (nextMode == MODE_LPRUN){
 8000ca0:	4b32      	ldr	r3, [pc, #200]	@ (8000d6c <Switch_Mode+0x134>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d12b      	bne.n	8000d00 <Switch_Mode+0xc8>
		for (int _ = 0; _ < 6; _++){
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60bb      	str	r3, [r7, #8]
 8000cac:	e00a      	b.n	8000cc4 <Switch_Mode+0x8c>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 8000cae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000cb2:	482f      	ldr	r0, [pc, #188]	@ (8000d70 <Switch_Mode+0x138>)
 8000cb4:	f000 fd31 	bl	800171a <HAL_GPIO_TogglePin>
			delay(50);
 8000cb8:	2032      	movs	r0, #50	@ 0x32
 8000cba:	f7ff fc7d 	bl	80005b8 <delay>
		for (int _ = 0; _ < 6; _++){
 8000cbe:	68bb      	ldr	r3, [r7, #8]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	60bb      	str	r3, [r7, #8]
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	2b05      	cmp	r3, #5
 8000cc8:	ddf1      	ble.n	8000cae <Switch_Mode+0x76>
		if (currentMode != MODE_LPRUN){
 8000cca:	4b2a      	ldr	r3, [pc, #168]	@ (8000d74 <Switch_Mode+0x13c>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d048      	beq.n	8000d64 <Switch_Mode+0x12c>
			if (currentMode == MODE_STOP1){
 8000cd2:	4b28      	ldr	r3, [pc, #160]	@ (8000d74 <Switch_Mode+0x13c>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	2b02      	cmp	r3, #2
 8000cd8:	d105      	bne.n	8000ce6 <Switch_Mode+0xae>
				HAL_ResumeTick();
 8000cda:	f000 fa8d 	bl	80011f8 <HAL_ResumeTick>
				HAL_Init(); 			// all peripherals, Flash interface and SysTick
 8000cde:	f000 f9e3 	bl	80010a8 <HAL_Init>
				MX_GPIO_Init();			// GPIO
 8000ce2:	f7ff fee3 	bl	8000aac <MX_GPIO_Init>
			MX_USART2_UART_Init();
 8000ce6:	f7ff fe95 	bl	8000a14 <MX_USART2_UART_Init>
			printf("Le µCU entre en mode LPRun.\r\n\r\n");
 8000cea:	4824      	ldr	r0, [pc, #144]	@ (8000d7c <Switch_Mode+0x144>)
 8000cec:	f003 f850 	bl	8003d90 <puts>
			currentMode = MODE_LPRUN;
 8000cf0:	4b20      	ldr	r3, [pc, #128]	@ (8000d74 <Switch_Mode+0x13c>)
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	701a      	strb	r2, [r3, #0]
			Enter_LowPowerRunMode();
 8000cf6:	f7ff fd73 	bl	80007e0 <Enter_LowPowerRunMode>
			MX_USART2_UART_Init();
 8000cfa:	f7ff fe8b 	bl	8000a14 <MX_USART2_UART_Init>
}
 8000cfe:	e031      	b.n	8000d64 <Switch_Mode+0x12c>
	else if (nextMode == MODE_RUN){
 8000d00:	4b1a      	ldr	r3, [pc, #104]	@ (8000d6c <Switch_Mode+0x134>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d12d      	bne.n	8000d64 <Switch_Mode+0x12c>
		for (int _ = 0; _ < 4; _++){
 8000d08:	2300      	movs	r3, #0
 8000d0a:	607b      	str	r3, [r7, #4]
 8000d0c:	e00a      	b.n	8000d24 <Switch_Mode+0xec>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_11);
 8000d0e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d12:	4817      	ldr	r0, [pc, #92]	@ (8000d70 <Switch_Mode+0x138>)
 8000d14:	f000 fd01 	bl	800171a <HAL_GPIO_TogglePin>
			delay(200);
 8000d18:	20c8      	movs	r0, #200	@ 0xc8
 8000d1a:	f7ff fc4d 	bl	80005b8 <delay>
		for (int _ = 0; _ < 4; _++){
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	3301      	adds	r3, #1
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2b03      	cmp	r3, #3
 8000d28:	ddf1      	ble.n	8000d0e <Switch_Mode+0xd6>
		if (currentMode != MODE_RUN){
 8000d2a:	4b12      	ldr	r3, [pc, #72]	@ (8000d74 <Switch_Mode+0x13c>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d018      	beq.n	8000d64 <Switch_Mode+0x12c>
			if (currentMode == MODE_LPRUN){
 8000d32:	4b10      	ldr	r3, [pc, #64]	@ (8000d74 <Switch_Mode+0x13c>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d102      	bne.n	8000d40 <Switch_Mode+0x108>
				Exit_LowPowerRunMode(1);
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	f7ff fd63 	bl	8000806 <Exit_LowPowerRunMode>
			} if (currentMode == MODE_STOP1){
 8000d40:	4b0c      	ldr	r3, [pc, #48]	@ (8000d74 <Switch_Mode+0x13c>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	2b02      	cmp	r3, #2
 8000d46:	d101      	bne.n	8000d4c <Switch_Mode+0x114>
				HAL_ResumeTick();
 8000d48:	f000 fa56 	bl	80011f8 <HAL_ResumeTick>
			HAL_Init(); 			// all peripherals, Flash interface and SysTick
 8000d4c:	f000 f9ac 	bl	80010a8 <HAL_Init>
			MX_GPIO_Init();			// GPIO
 8000d50:	f7ff feac 	bl	8000aac <MX_GPIO_Init>
			MX_USART2_UART_Init(); 	// USART2
 8000d54:	f7ff fe5e 	bl	8000a14 <MX_USART2_UART_Init>
			printf("Le µCU entre en mode Run.\r\n\r\n");
 8000d58:	4809      	ldr	r0, [pc, #36]	@ (8000d80 <Switch_Mode+0x148>)
 8000d5a:	f003 f819 	bl	8003d90 <puts>
			currentMode = MODE_RUN;
 8000d5e:	4b05      	ldr	r3, [pc, #20]	@ (8000d74 <Switch_Mode+0x13c>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	701a      	strb	r2, [r3, #0]
}
 8000d64:	bf00      	nop
 8000d66:	3710      	adds	r7, #16
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20000119 	.word	0x20000119
 8000d70:	48000400 	.word	0x48000400
 8000d74:	20000118 	.word	0x20000118
 8000d78:	08004bd8 	.word	0x08004bd8
 8000d7c:	08004c00 	.word	0x08004c00
 8000d80:	08004c20 	.word	0x08004c20

08000d84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d88:	b672      	cpsid	i
}
 8000d8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d8c:	bf00      	nop
 8000d8e:	e7fd      	b.n	8000d8c <Error_Handler+0x8>

08000d90 <LL_AHB2_GRP1_EnableClock>:
{
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000d98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d9c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d9e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000da8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000dac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4013      	ands	r3, r2
 8000db2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000db4:	68fb      	ldr	r3, [r7, #12]
}
 8000db6:	bf00      	nop
 8000db8:	3714      	adds	r7, #20
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr

08000dc0 <LL_APB1_GRP1_EnableClock>:
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000dc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000dcc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000dce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000dd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ddc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4013      	ands	r3, r2
 8000de2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000de4:	68fb      	ldr	r3, [r7, #12]
}
 8000de6:	bf00      	nop
 8000de8:	3714      	adds	r7, #20
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bc80      	pop	{r7}
 8000dee:	4770      	bx	lr

08000df0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bc80      	pop	{r7}
 8000dfa:	4770      	bx	lr

08000dfc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b096      	sub	sp, #88	@ 0x58
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e14:	f107 030c 	add.w	r3, r7, #12
 8000e18:	2238      	movs	r2, #56	@ 0x38
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f003 f897 	bl	8003f50 <memset>
  if(huart->Instance==USART2)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a17      	ldr	r2, [pc, #92]	@ (8000e84 <HAL_UART_MspInit+0x88>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d126      	bne.n	8000e7a <HAL_UART_MspInit+0x7e>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e30:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 8000e34:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e36:	f107 030c 	add.w	r3, r7, #12
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f001 ff3a 	bl	8002cb4 <HAL_RCCEx_PeriphCLKConfig>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e46:	f7ff ff9d 	bl	8000d84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e4a:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000e4e:	f7ff ffb7 	bl	8000dc0 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e52:	2001      	movs	r0, #1
 8000e54:	f7ff ff9c 	bl	8000d90 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8000e58:	230c      	movs	r3, #12
 8000e5a:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e64:	2300      	movs	r3, #0
 8000e66:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e68:	2307      	movs	r3, #7
 8000e6a:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000e70:	4619      	mov	r1, r3
 8000e72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e76:	f000 fad9 	bl	800142c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000e7a:	bf00      	nop
 8000e7c:	3758      	adds	r7, #88	@ 0x58
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40004400 	.word	0x40004400

08000e88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e8c:	bf00      	nop
 8000e8e:	e7fd      	b.n	8000e8c <NMI_Handler+0x4>

08000e90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e94:	bf00      	nop
 8000e96:	e7fd      	b.n	8000e94 <HardFault_Handler+0x4>

08000e98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e9c:	bf00      	nop
 8000e9e:	e7fd      	b.n	8000e9c <MemManage_Handler+0x4>

08000ea0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ea4:	bf00      	nop
 8000ea6:	e7fd      	b.n	8000ea4 <BusFault_Handler+0x4>

08000ea8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eac:	bf00      	nop
 8000eae:	e7fd      	b.n	8000eac <UsageFault_Handler+0x4>

08000eb0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bc80      	pop	{r7}
 8000eba:	4770      	bx	lr

08000ebc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bc80      	pop	{r7}
 8000ec6:	4770      	bx	lr

08000ec8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc80      	pop	{r7}
 8000ed2:	4770      	bx	lr

08000ed4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed8:	f000 f940 	bl	800115c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000edc:	bf00      	nop
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line 0 Interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UB1_Pin);
 8000ee4:	2001      	movs	r0, #1
 8000ee6:	f000 fc31 	bl	800174c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}

08000eee <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UB2_Pin);
 8000ef2:	2002      	movs	r0, #2
 8000ef4:	f000 fc2a 	bl	800174c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}

08000efc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [9:5] Interrupt.
  */
void EXTI9_5_IRQHandler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UB3_Pin);
 8000f00:	2040      	movs	r0, #64	@ 0x40
 8000f02:	f000 fc23 	bl	800174c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b086      	sub	sp, #24
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	60f8      	str	r0, [r7, #12]
 8000f12:	60b9      	str	r1, [r7, #8]
 8000f14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f16:	2300      	movs	r3, #0
 8000f18:	617b      	str	r3, [r7, #20]
 8000f1a:	e00a      	b.n	8000f32 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f1c:	f3af 8000 	nop.w
 8000f20:	4601      	mov	r1, r0
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	1c5a      	adds	r2, r3, #1
 8000f26:	60ba      	str	r2, [r7, #8]
 8000f28:	b2ca      	uxtb	r2, r1
 8000f2a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	3301      	adds	r3, #1
 8000f30:	617b      	str	r3, [r7, #20]
 8000f32:	697a      	ldr	r2, [r7, #20]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	dbf0      	blt.n	8000f1c <_read+0x12>
  }

  return len;
 8000f3a:	687b      	ldr	r3, [r7, #4]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3718      	adds	r7, #24
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]
 8000f54:	e009      	b.n	8000f6a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	1c5a      	adds	r2, r3, #1
 8000f5a:	60ba      	str	r2, [r7, #8]
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff fb18 	bl	8000594 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	3301      	adds	r3, #1
 8000f68:	617b      	str	r3, [r7, #20]
 8000f6a:	697a      	ldr	r2, [r7, #20]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	dbf1      	blt.n	8000f56 <_write+0x12>
  }
  return len;
 8000f72:	687b      	ldr	r3, [r7, #4]
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3718      	adds	r7, #24
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <_close>:

int _close(int file)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bc80      	pop	{r7}
 8000f90:	4770      	bx	lr

08000f92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f92:	b480      	push	{r7}
 8000f94:	b083      	sub	sp, #12
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
 8000f9a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fa2:	605a      	str	r2, [r3, #4]
  return 0;
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bc80      	pop	{r7}
 8000fae:	4770      	bx	lr

08000fb0 <_isatty>:

int _isatty(int file)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fb8:	2301      	movs	r3, #1
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bc80      	pop	{r7}
 8000fc2:	4770      	bx	lr

08000fc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3714      	adds	r7, #20
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr

08000fdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fe4:	4a14      	ldr	r2, [pc, #80]	@ (8001038 <_sbrk+0x5c>)
 8000fe6:	4b15      	ldr	r3, [pc, #84]	@ (800103c <_sbrk+0x60>)
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ff0:	4b13      	ldr	r3, [pc, #76]	@ (8001040 <_sbrk+0x64>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d102      	bne.n	8000ffe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ff8:	4b11      	ldr	r3, [pc, #68]	@ (8001040 <_sbrk+0x64>)
 8000ffa:	4a12      	ldr	r2, [pc, #72]	@ (8001044 <_sbrk+0x68>)
 8000ffc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ffe:	4b10      	ldr	r3, [pc, #64]	@ (8001040 <_sbrk+0x64>)
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4413      	add	r3, r2
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	429a      	cmp	r2, r3
 800100a:	d207      	bcs.n	800101c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800100c:	f002 ffee 	bl	8003fec <__errno>
 8001010:	4603      	mov	r3, r0
 8001012:	220c      	movs	r2, #12
 8001014:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001016:	f04f 33ff 	mov.w	r3, #4294967295
 800101a:	e009      	b.n	8001030 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800101c:	4b08      	ldr	r3, [pc, #32]	@ (8001040 <_sbrk+0x64>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001022:	4b07      	ldr	r3, [pc, #28]	@ (8001040 <_sbrk+0x64>)
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4413      	add	r3, r2
 800102a:	4a05      	ldr	r2, [pc, #20]	@ (8001040 <_sbrk+0x64>)
 800102c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800102e:	68fb      	ldr	r3, [r7, #12]
}
 8001030:	4618      	mov	r0, r3
 8001032:	3718      	adds	r7, #24
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20010000 	.word	0x20010000
 800103c:	00000400 	.word	0x00000400
 8001040:	2000011c 	.word	0x2000011c
 8001044:	20000270 	.word	0x20000270

08001048 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr

08001054 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001054:	480d      	ldr	r0, [pc, #52]	@ (800108c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001056:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001058:	f7ff fff6 	bl	8001048 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800105c:	480c      	ldr	r0, [pc, #48]	@ (8001090 <LoopForever+0x6>)
  ldr r1, =_edata
 800105e:	490d      	ldr	r1, [pc, #52]	@ (8001094 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001060:	4a0d      	ldr	r2, [pc, #52]	@ (8001098 <LoopForever+0xe>)
  movs r3, #0
 8001062:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001064:	e002      	b.n	800106c <LoopCopyDataInit>

08001066 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001066:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001068:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800106a:	3304      	adds	r3, #4

0800106c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800106c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800106e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001070:	d3f9      	bcc.n	8001066 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001072:	4a0a      	ldr	r2, [pc, #40]	@ (800109c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001074:	4c0a      	ldr	r4, [pc, #40]	@ (80010a0 <LoopForever+0x16>)
  movs r3, #0
 8001076:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001078:	e001      	b.n	800107e <LoopFillZerobss>

0800107a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800107a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800107c:	3204      	adds	r2, #4

0800107e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800107e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001080:	d3fb      	bcc.n	800107a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001082:	f002 ffb9 	bl	8003ff8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001086:	f7ff fc2f 	bl	80008e8 <main>

0800108a <LoopForever>:

LoopForever:
    b LoopForever
 800108a:	e7fe      	b.n	800108a <LoopForever>
  ldr   r0, =_estack
 800108c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001090:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001094:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001098:	08004d68 	.word	0x08004d68
  ldr r2, =_sbss
 800109c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80010a0:	20000270 	.word	0x20000270

080010a4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010a4:	e7fe      	b.n	80010a4 <ADC_IRQHandler>
	...

080010a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010ae:	2300      	movs	r3, #0
 80010b0:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010b2:	2003      	movs	r0, #3
 80010b4:	f000 f97a 	bl	80013ac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80010b8:	f001 fc1e 	bl	80028f8 <HAL_RCC_GetHCLKFreq>
 80010bc:	4603      	mov	r3, r0
 80010be:	4a09      	ldr	r2, [pc, #36]	@ (80010e4 <HAL_Init+0x3c>)
 80010c0:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010c2:	2000      	movs	r0, #0
 80010c4:	f000 f810 	bl	80010e8 <HAL_InitTick>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d002      	beq.n	80010d4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	71fb      	strb	r3, [r7, #7]
 80010d2:	e001      	b.n	80010d8 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010d4:	f7ff fe8c 	bl	8000df0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010d8:	79fb      	ldrb	r3, [r7, #7]
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000000 	.word	0x20000000

080010e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010f0:	2300      	movs	r3, #0
 80010f2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80010f4:	4b17      	ldr	r3, [pc, #92]	@ (8001154 <HAL_InitTick+0x6c>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d024      	beq.n	8001146 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80010fc:	f001 fbfc 	bl	80028f8 <HAL_RCC_GetHCLKFreq>
 8001100:	4602      	mov	r2, r0
 8001102:	4b14      	ldr	r3, [pc, #80]	@ (8001154 <HAL_InitTick+0x6c>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	4619      	mov	r1, r3
 8001108:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800110c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001110:	fbb2 f3f3 	udiv	r3, r2, r3
 8001114:	4618      	mov	r0, r3
 8001116:	f000 f97c 	bl	8001412 <HAL_SYSTICK_Config>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d10f      	bne.n	8001140 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2b0f      	cmp	r3, #15
 8001124:	d809      	bhi.n	800113a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001126:	2200      	movs	r2, #0
 8001128:	6879      	ldr	r1, [r7, #4]
 800112a:	f04f 30ff 	mov.w	r0, #4294967295
 800112e:	f000 f948 	bl	80013c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001132:	4a09      	ldr	r2, [pc, #36]	@ (8001158 <HAL_InitTick+0x70>)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6013      	str	r3, [r2, #0]
 8001138:	e007      	b.n	800114a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	73fb      	strb	r3, [r7, #15]
 800113e:	e004      	b.n	800114a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	73fb      	strb	r3, [r7, #15]
 8001144:	e001      	b.n	800114a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800114a:	7bfb      	ldrb	r3, [r7, #15]
}
 800114c:	4618      	mov	r0, r3
 800114e:	3710      	adds	r7, #16
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000008 	.word	0x20000008
 8001158:	20000004 	.word	0x20000004

0800115c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001160:	4b05      	ldr	r3, [pc, #20]	@ (8001178 <HAL_IncTick+0x1c>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	461a      	mov	r2, r3
 8001166:	4b05      	ldr	r3, [pc, #20]	@ (800117c <HAL_IncTick+0x20>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4413      	add	r3, r2
 800116c:	4a03      	ldr	r2, [pc, #12]	@ (800117c <HAL_IncTick+0x20>)
 800116e:	6013      	str	r3, [r2, #0]
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	bc80      	pop	{r7}
 8001176:	4770      	bx	lr
 8001178:	20000008 	.word	0x20000008
 800117c:	20000120 	.word	0x20000120

08001180 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  return uwTick;
 8001184:	4b02      	ldr	r3, [pc, #8]	@ (8001190 <HAL_GetTick+0x10>)
 8001186:	681b      	ldr	r3, [r3, #0]
}
 8001188:	4618      	mov	r0, r3
 800118a:	46bd      	mov	sp, r7
 800118c:	bc80      	pop	{r7}
 800118e:	4770      	bx	lr
 8001190:	20000120 	.word	0x20000120

08001194 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800119c:	f7ff fff0 	bl	8001180 <HAL_GetTick>
 80011a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011ac:	d005      	beq.n	80011ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ae:	4b0a      	ldr	r3, [pc, #40]	@ (80011d8 <HAL_Delay+0x44>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	461a      	mov	r2, r3
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	4413      	add	r3, r2
 80011b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011ba:	bf00      	nop
 80011bc:	f7ff ffe0 	bl	8001180 <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	68fa      	ldr	r2, [r7, #12]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d8f7      	bhi.n	80011bc <HAL_Delay+0x28>
  {
  }
}
 80011cc:	bf00      	nop
 80011ce:	bf00      	nop
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20000008 	.word	0x20000008

080011dc <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80011e0:	4b04      	ldr	r3, [pc, #16]	@ (80011f4 <HAL_SuspendTick+0x18>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a03      	ldr	r2, [pc, #12]	@ (80011f4 <HAL_SuspendTick+0x18>)
 80011e6:	f023 0302 	bic.w	r3, r3, #2
 80011ea:	6013      	str	r3, [r2, #0]
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr
 80011f4:	e000e010 	.word	0xe000e010

080011f8 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80011fc:	4b04      	ldr	r3, [pc, #16]	@ (8001210 <HAL_ResumeTick+0x18>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a03      	ldr	r2, [pc, #12]	@ (8001210 <HAL_ResumeTick+0x18>)
 8001202:	f043 0302 	orr.w	r3, r3, #2
 8001206:	6013      	str	r3, [r2, #0]
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr
 8001210:	e000e010 	.word	0xe000e010

08001214 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f003 0307 	and.w	r3, r3, #7
 8001222:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001224:	4b0c      	ldr	r3, [pc, #48]	@ (8001258 <__NVIC_SetPriorityGrouping+0x44>)
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800122a:	68ba      	ldr	r2, [r7, #8]
 800122c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001230:	4013      	ands	r3, r2
 8001232:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800123c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001240:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001244:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001246:	4a04      	ldr	r2, [pc, #16]	@ (8001258 <__NVIC_SetPriorityGrouping+0x44>)
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	60d3      	str	r3, [r2, #12]
}
 800124c:	bf00      	nop
 800124e:	3714      	adds	r7, #20
 8001250:	46bd      	mov	sp, r7
 8001252:	bc80      	pop	{r7}
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001260:	4b04      	ldr	r3, [pc, #16]	@ (8001274 <__NVIC_GetPriorityGrouping+0x18>)
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	0a1b      	lsrs	r3, r3, #8
 8001266:	f003 0307 	and.w	r3, r3, #7
}
 800126a:	4618      	mov	r0, r3
 800126c:	46bd      	mov	sp, r7
 800126e:	bc80      	pop	{r7}
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001286:	2b00      	cmp	r3, #0
 8001288:	db0b      	blt.n	80012a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	f003 021f 	and.w	r2, r3, #31
 8001290:	4906      	ldr	r1, [pc, #24]	@ (80012ac <__NVIC_EnableIRQ+0x34>)
 8001292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001296:	095b      	lsrs	r3, r3, #5
 8001298:	2001      	movs	r0, #1
 800129a:	fa00 f202 	lsl.w	r2, r0, r2
 800129e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012a2:	bf00      	nop
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bc80      	pop	{r7}
 80012aa:	4770      	bx	lr
 80012ac:	e000e100 	.word	0xe000e100

080012b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	6039      	str	r1, [r7, #0]
 80012ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	db0a      	blt.n	80012da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	b2da      	uxtb	r2, r3
 80012c8:	490c      	ldr	r1, [pc, #48]	@ (80012fc <__NVIC_SetPriority+0x4c>)
 80012ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ce:	0112      	lsls	r2, r2, #4
 80012d0:	b2d2      	uxtb	r2, r2
 80012d2:	440b      	add	r3, r1
 80012d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012d8:	e00a      	b.n	80012f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	4908      	ldr	r1, [pc, #32]	@ (8001300 <__NVIC_SetPriority+0x50>)
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	f003 030f 	and.w	r3, r3, #15
 80012e6:	3b04      	subs	r3, #4
 80012e8:	0112      	lsls	r2, r2, #4
 80012ea:	b2d2      	uxtb	r2, r2
 80012ec:	440b      	add	r3, r1
 80012ee:	761a      	strb	r2, [r3, #24]
}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bc80      	pop	{r7}
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	e000e100 	.word	0xe000e100
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001304:	b480      	push	{r7}
 8001306:	b089      	sub	sp, #36	@ 0x24
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	f003 0307 	and.w	r3, r3, #7
 8001316:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	f1c3 0307 	rsb	r3, r3, #7
 800131e:	2b04      	cmp	r3, #4
 8001320:	bf28      	it	cs
 8001322:	2304      	movcs	r3, #4
 8001324:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	3304      	adds	r3, #4
 800132a:	2b06      	cmp	r3, #6
 800132c:	d902      	bls.n	8001334 <NVIC_EncodePriority+0x30>
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	3b03      	subs	r3, #3
 8001332:	e000      	b.n	8001336 <NVIC_EncodePriority+0x32>
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001338:	f04f 32ff 	mov.w	r2, #4294967295
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	43da      	mvns	r2, r3
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	401a      	ands	r2, r3
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800134c:	f04f 31ff 	mov.w	r1, #4294967295
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	fa01 f303 	lsl.w	r3, r1, r3
 8001356:	43d9      	mvns	r1, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800135c:	4313      	orrs	r3, r2
         );
}
 800135e:	4618      	mov	r0, r3
 8001360:	3724      	adds	r7, #36	@ 0x24
 8001362:	46bd      	mov	sp, r7
 8001364:	bc80      	pop	{r7}
 8001366:	4770      	bx	lr

08001368 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3b01      	subs	r3, #1
 8001374:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001378:	d301      	bcc.n	800137e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800137a:	2301      	movs	r3, #1
 800137c:	e00f      	b.n	800139e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800137e:	4a0a      	ldr	r2, [pc, #40]	@ (80013a8 <SysTick_Config+0x40>)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3b01      	subs	r3, #1
 8001384:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001386:	210f      	movs	r1, #15
 8001388:	f04f 30ff 	mov.w	r0, #4294967295
 800138c:	f7ff ff90 	bl	80012b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001390:	4b05      	ldr	r3, [pc, #20]	@ (80013a8 <SysTick_Config+0x40>)
 8001392:	2200      	movs	r2, #0
 8001394:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001396:	4b04      	ldr	r3, [pc, #16]	@ (80013a8 <SysTick_Config+0x40>)
 8001398:	2207      	movs	r2, #7
 800139a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	e000e010 	.word	0xe000e010

080013ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f7ff ff2d 	bl	8001214 <__NVIC_SetPriorityGrouping>
}
 80013ba:	bf00      	nop
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b086      	sub	sp, #24
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	4603      	mov	r3, r0
 80013ca:	60b9      	str	r1, [r7, #8]
 80013cc:	607a      	str	r2, [r7, #4]
 80013ce:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013d0:	f7ff ff44 	bl	800125c <__NVIC_GetPriorityGrouping>
 80013d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	68b9      	ldr	r1, [r7, #8]
 80013da:	6978      	ldr	r0, [r7, #20]
 80013dc:	f7ff ff92 	bl	8001304 <NVIC_EncodePriority>
 80013e0:	4602      	mov	r2, r0
 80013e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013e6:	4611      	mov	r1, r2
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff ff61 	bl	80012b0 <__NVIC_SetPriority>
}
 80013ee:	bf00      	nop
 80013f0:	3718      	adds	r7, #24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b082      	sub	sp, #8
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	4603      	mov	r3, r0
 80013fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff ff37 	bl	8001278 <__NVIC_EnableIRQ>
}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b082      	sub	sp, #8
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f7ff ffa4 	bl	8001368 <SysTick_Config>
 8001420:	4603      	mov	r3, r0
}
 8001422:	4618      	mov	r0, r3
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
	...

0800142c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800142c:	b480      	push	{r7}
 800142e:	b087      	sub	sp, #28
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001436:	2300      	movs	r3, #0
 8001438:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800143a:	e140      	b.n	80016be <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	2101      	movs	r1, #1
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	fa01 f303 	lsl.w	r3, r1, r3
 8001448:	4013      	ands	r3, r2
 800144a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2b00      	cmp	r3, #0
 8001450:	f000 8132 	beq.w	80016b8 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f003 0303 	and.w	r3, r3, #3
 800145c:	2b01      	cmp	r3, #1
 800145e:	d005      	beq.n	800146c <HAL_GPIO_Init+0x40>
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f003 0303 	and.w	r3, r3, #3
 8001468:	2b02      	cmp	r3, #2
 800146a:	d130      	bne.n	80014ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	2203      	movs	r2, #3
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	43db      	mvns	r3, r3
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	4013      	ands	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	68da      	ldr	r2, [r3, #12]
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	4313      	orrs	r3, r2
 8001494:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014a2:	2201      	movs	r2, #1
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	43db      	mvns	r3, r3
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	4013      	ands	r3, r2
 80014b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	091b      	lsrs	r3, r3, #4
 80014b8:	f003 0201 	and.w	r2, r3, #1
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f003 0303 	and.w	r3, r3, #3
 80014d6:	2b03      	cmp	r3, #3
 80014d8:	d017      	beq.n	800150a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	2203      	movs	r2, #3
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	43db      	mvns	r3, r3
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	4013      	ands	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	689a      	ldr	r2, [r3, #8]
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	4313      	orrs	r3, r2
 8001502:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f003 0303 	and.w	r3, r3, #3
 8001512:	2b02      	cmp	r3, #2
 8001514:	d123      	bne.n	800155e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	08da      	lsrs	r2, r3, #3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	3208      	adds	r2, #8
 800151e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001522:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	f003 0307 	and.w	r3, r3, #7
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	220f      	movs	r2, #15
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	43db      	mvns	r3, r3
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	4013      	ands	r3, r2
 8001538:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	691a      	ldr	r2, [r3, #16]
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	f003 0307 	and.w	r3, r3, #7
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	4313      	orrs	r3, r2
 800154e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	08da      	lsrs	r2, r3, #3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	3208      	adds	r2, #8
 8001558:	6939      	ldr	r1, [r7, #16]
 800155a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	2203      	movs	r2, #3
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	43db      	mvns	r3, r3
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	4013      	ands	r3, r2
 8001574:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f003 0203 	and.w	r2, r3, #3
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	4313      	orrs	r3, r2
 800158a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800159a:	2b00      	cmp	r3, #0
 800159c:	f000 808c 	beq.w	80016b8 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80015a0:	4a4e      	ldr	r2, [pc, #312]	@ (80016dc <HAL_GPIO_Init+0x2b0>)
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	089b      	lsrs	r3, r3, #2
 80015a6:	3302      	adds	r3, #2
 80015a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	f003 0303 	and.w	r3, r3, #3
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	2207      	movs	r2, #7
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	43db      	mvns	r3, r3
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	4013      	ands	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80015ca:	d00d      	beq.n	80015e8 <HAL_GPIO_Init+0x1bc>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	4a44      	ldr	r2, [pc, #272]	@ (80016e0 <HAL_GPIO_Init+0x2b4>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d007      	beq.n	80015e4 <HAL_GPIO_Init+0x1b8>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4a43      	ldr	r2, [pc, #268]	@ (80016e4 <HAL_GPIO_Init+0x2b8>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d101      	bne.n	80015e0 <HAL_GPIO_Init+0x1b4>
 80015dc:	2302      	movs	r3, #2
 80015de:	e004      	b.n	80015ea <HAL_GPIO_Init+0x1be>
 80015e0:	2307      	movs	r3, #7
 80015e2:	e002      	b.n	80015ea <HAL_GPIO_Init+0x1be>
 80015e4:	2301      	movs	r3, #1
 80015e6:	e000      	b.n	80015ea <HAL_GPIO_Init+0x1be>
 80015e8:	2300      	movs	r3, #0
 80015ea:	697a      	ldr	r2, [r7, #20]
 80015ec:	f002 0203 	and.w	r2, r2, #3
 80015f0:	0092      	lsls	r2, r2, #2
 80015f2:	4093      	lsls	r3, r2
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015fa:	4938      	ldr	r1, [pc, #224]	@ (80016dc <HAL_GPIO_Init+0x2b0>)
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	089b      	lsrs	r3, r3, #2
 8001600:	3302      	adds	r3, #2
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001608:	4b37      	ldr	r3, [pc, #220]	@ (80016e8 <HAL_GPIO_Init+0x2bc>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	43db      	mvns	r3, r3
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	4013      	ands	r3, r2
 8001616:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d003      	beq.n	800162c <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8001624:	693a      	ldr	r2, [r7, #16]
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	4313      	orrs	r3, r2
 800162a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800162c:	4a2e      	ldr	r2, [pc, #184]	@ (80016e8 <HAL_GPIO_Init+0x2bc>)
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001632:	4b2d      	ldr	r3, [pc, #180]	@ (80016e8 <HAL_GPIO_Init+0x2bc>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	43db      	mvns	r3, r3
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	4013      	ands	r3, r2
 8001640:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d003      	beq.n	8001656 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	4313      	orrs	r3, r2
 8001654:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001656:	4a24      	ldr	r2, [pc, #144]	@ (80016e8 <HAL_GPIO_Init+0x2bc>)
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 800165c:	4b22      	ldr	r3, [pc, #136]	@ (80016e8 <HAL_GPIO_Init+0x2bc>)
 800165e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001662:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	43db      	mvns	r3, r3
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	4013      	ands	r3, r2
 800166c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d003      	beq.n	8001682 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	4313      	orrs	r3, r2
 8001680:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8001682:	4a19      	ldr	r2, [pc, #100]	@ (80016e8 <HAL_GPIO_Init+0x2bc>)
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800168a:	4b17      	ldr	r3, [pc, #92]	@ (80016e8 <HAL_GPIO_Init+0x2bc>)
 800168c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001690:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	43db      	mvns	r3, r3
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	4013      	ands	r3, r2
 800169a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d003      	beq.n	80016b0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80016a8:	693a      	ldr	r2, [r7, #16]
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80016b0:	4a0d      	ldr	r2, [pc, #52]	@ (80016e8 <HAL_GPIO_Init+0x2bc>)
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	3301      	adds	r3, #1
 80016bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	fa22 f303 	lsr.w	r3, r2, r3
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	f47f aeb7 	bne.w	800143c <HAL_GPIO_Init+0x10>
  }
}
 80016ce:	bf00      	nop
 80016d0:	bf00      	nop
 80016d2:	371c      	adds	r7, #28
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc80      	pop	{r7}
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	40010000 	.word	0x40010000
 80016e0:	48000400 	.word	0x48000400
 80016e4:	48000800 	.word	0x48000800
 80016e8:	58000800 	.word	0x58000800

080016ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	460b      	mov	r3, r1
 80016f6:	807b      	strh	r3, [r7, #2]
 80016f8:	4613      	mov	r3, r2
 80016fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016fc:	787b      	ldrb	r3, [r7, #1]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d003      	beq.n	800170a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001702:	887a      	ldrh	r2, [r7, #2]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001708:	e002      	b.n	8001710 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800170a:	887a      	ldrh	r2, [r7, #2]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	bc80      	pop	{r7}
 8001718:	4770      	bx	lr

0800171a <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800171a:	b480      	push	{r7}
 800171c:	b085      	sub	sp, #20
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
 8001722:	460b      	mov	r3, r1
 8001724:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	695b      	ldr	r3, [r3, #20]
 800172a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800172c:	887a      	ldrh	r2, [r7, #2]
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	4013      	ands	r3, r2
 8001732:	041a      	lsls	r2, r3, #16
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	43d9      	mvns	r1, r3
 8001738:	887b      	ldrh	r3, [r7, #2]
 800173a:	400b      	ands	r3, r1
 800173c:	431a      	orrs	r2, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	619a      	str	r2, [r3, #24]
}
 8001742:	bf00      	nop
 8001744:	3714      	adds	r7, #20
 8001746:	46bd      	mov	sp, r7
 8001748:	bc80      	pop	{r7}
 800174a:	4770      	bx	lr

0800174c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001756:	4b08      	ldr	r3, [pc, #32]	@ (8001778 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001758:	68da      	ldr	r2, [r3, #12]
 800175a:	88fb      	ldrh	r3, [r7, #6]
 800175c:	4013      	ands	r3, r2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d006      	beq.n	8001770 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001762:	4a05      	ldr	r2, [pc, #20]	@ (8001778 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001764:	88fb      	ldrh	r3, [r7, #6]
 8001766:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001768:	88fb      	ldrh	r3, [r7, #6]
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff fa10 	bl	8000b90 <HAL_GPIO_EXTI_Callback>
  }
}
 8001770:	bf00      	nop
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	58000800 	.word	0x58000800

0800177c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001780:	4b04      	ldr	r3, [pc, #16]	@ (8001794 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a03      	ldr	r2, [pc, #12]	@ (8001794 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001786:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800178a:	6013      	str	r3, [r2, #0]
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	bc80      	pop	{r7}
 8001792:	4770      	bx	lr
 8001794:	58000400 	.word	0x58000400

08001798 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800179c:	4b03      	ldr	r3, [pc, #12]	@ (80017ac <HAL_PWREx_GetVoltageRange+0x14>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc80      	pop	{r7}
 80017aa:	4770      	bx	lr
 80017ac:	58000400 	.word	0x58000400

080017b0 <HAL_PWREx_EnableFlashPowerDown>:
  *           @arg @ref PWR_FLASHPD_LPRUN
  *           @arg @ref PWR_FLASHPD_LPSLEEP
  * @retval None
  */
void HAL_PWREx_EnableFlashPowerDown(uint32_t PowerMode)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  }

  /* Set flash power down mode */
  SET_BIT(PWR->C2CR1, PowerMode);
#else
  if ((PowerMode & PWR_FLASHPD_LPRUN) != 0U)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f003 0310 	and.w	r3, r3, #16
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d003      	beq.n	80017ca <HAL_PWREx_EnableFlashPowerDown+0x1a>
  {
    /* Unlock bit FPDR */
    WRITE_REG(PWR->CR1, PWR_FLASH_POWER_MODE_UNLOCK_CODE);
 80017c2:	4b07      	ldr	r3, [pc, #28]	@ (80017e0 <HAL_PWREx_EnableFlashPowerDown+0x30>)
 80017c4:	f24c 12b0 	movw	r2, #49584	@ 0xc1b0
 80017c8:	601a      	str	r2, [r3, #0]
  }

  /* Set flash power down mode */
  SET_BIT(PWR->CR1, PowerMode);
 80017ca:	4b05      	ldr	r3, [pc, #20]	@ (80017e0 <HAL_PWREx_EnableFlashPowerDown+0x30>)
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	4904      	ldr	r1, [pc, #16]	@ (80017e0 <HAL_PWREx_EnableFlashPowerDown+0x30>)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	600b      	str	r3, [r1, #0]
#endif
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	bc80      	pop	{r7}
 80017de:	4770      	bx	lr
 80017e0:	58000400 	.word	0x58000400

080017e4 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 80017e8:	4b04      	ldr	r3, [pc, #16]	@ (80017fc <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a03      	ldr	r2, [pc, #12]	@ (80017fc <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80017ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017f2:	6013      	str	r3, [r2, #0]
}
 80017f4:	bf00      	nop
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr
 80017fc:	58000400 	.word	0x58000400

08001800 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8001806:	4b16      	ldr	r3, [pc, #88]	@ (8001860 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a15      	ldr	r2, [pc, #84]	@ (8001860 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 800180c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001810:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8001812:	4b14      	ldr	r3, [pc, #80]	@ (8001864 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2232      	movs	r2, #50	@ 0x32
 8001818:	fb02 f303 	mul.w	r3, r2, r3
 800181c:	4a12      	ldr	r2, [pc, #72]	@ (8001868 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 800181e:	fba2 2303 	umull	r2, r3, r2, r3
 8001822:	0c9b      	lsrs	r3, r3, #18
 8001824:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8001826:	e002      	b.n	800182e <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3b01      	subs	r3, #1
 800182c:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800182e:	4b0c      	ldr	r3, [pc, #48]	@ (8001860 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8001830:	695b      	ldr	r3, [r3, #20]
 8001832:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001836:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800183a:	d102      	bne.n	8001842 <HAL_PWREx_DisableLowPowerRunMode+0x42>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1f2      	bne.n	8001828 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8001842:	4b07      	ldr	r3, [pc, #28]	@ (8001860 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8001844:	695b      	ldr	r3, [r3, #20]
 8001846:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800184a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800184e:	d101      	bne.n	8001854 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e000      	b.n	8001856 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	bc80      	pop	{r7}
 800185e:	4770      	bx	lr
 8001860:	58000400 	.word	0x58000400
 8001864:	20000000 	.word	0x20000000
 8001868:	431bde83 	.word	0x431bde83

0800186c <HAL_PWREx_EnterSTOP1Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP1Mode(uint8_t STOPEntry)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
#else
  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 8001876:	4b10      	ldr	r3, [pc, #64]	@ (80018b8 <HAL_PWREx_EnterSTOP1Mode+0x4c>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f023 0307 	bic.w	r3, r3, #7
 800187e:	4a0e      	ldr	r2, [pc, #56]	@ (80018b8 <HAL_PWREx_EnterSTOP1Mode+0x4c>)
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001886:	4b0d      	ldr	r3, [pc, #52]	@ (80018bc <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8001888:	691b      	ldr	r3, [r3, #16]
 800188a:	4a0c      	ldr	r2, [pc, #48]	@ (80018bc <HAL_PWREx_EnterSTOP1Mode+0x50>)
 800188c:	f043 0304 	orr.w	r3, r3, #4
 8001890:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d101      	bne.n	800189c <HAL_PWREx_EnterSTOP1Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001898:	bf30      	wfi
 800189a:	e002      	b.n	80018a2 <HAL_PWREx_EnterSTOP1Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800189c:	bf40      	sev
    __WFE();
 800189e:	bf20      	wfe
    __WFE();
 80018a0:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80018a2:	4b06      	ldr	r3, [pc, #24]	@ (80018bc <HAL_PWREx_EnterSTOP1Mode+0x50>)
 80018a4:	691b      	ldr	r3, [r3, #16]
 80018a6:	4a05      	ldr	r2, [pc, #20]	@ (80018bc <HAL_PWREx_EnterSTOP1Mode+0x50>)
 80018a8:	f023 0304 	bic.w	r3, r3, #4
 80018ac:	6113      	str	r3, [r2, #16]
}
 80018ae:	bf00      	nop
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc80      	pop	{r7}
 80018b6:	4770      	bx	lr
 80018b8:	58000400 	.word	0x58000400
 80018bc:	e000ed00 	.word	0xe000ed00

080018c0 <LL_PWR_IsEnabledBkUpAccess>:
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80018c4:	4b06      	ldr	r3, [pc, #24]	@ (80018e0 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80018d0:	d101      	bne.n	80018d6 <LL_PWR_IsEnabledBkUpAccess+0x16>
 80018d2:	2301      	movs	r3, #1
 80018d4:	e000      	b.n	80018d8 <LL_PWR_IsEnabledBkUpAccess+0x18>
 80018d6:	2300      	movs	r3, #0
}
 80018d8:	4618      	mov	r0, r3
 80018da:	46bd      	mov	sp, r7
 80018dc:	bc80      	pop	{r7}
 80018de:	4770      	bx	lr
 80018e0:	58000400 	.word	0x58000400

080018e4 <LL_RCC_HSE_EnableTcxo>:
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80018e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80018f2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80018f6:	6013      	str	r3, [r2, #0]
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bc80      	pop	{r7}
 80018fe:	4770      	bx	lr

08001900 <LL_RCC_HSE_DisableTcxo>:
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001904:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800190e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001912:	6013      	str	r3, [r2, #0]
}
 8001914:	bf00      	nop
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr

0800191c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001920:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800192a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800192e:	d101      	bne.n	8001934 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001930:	2301      	movs	r3, #1
 8001932:	e000      	b.n	8001936 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	46bd      	mov	sp, r7
 800193a:	bc80      	pop	{r7}
 800193c:	4770      	bx	lr

0800193e <LL_RCC_HSE_Enable>:
{
 800193e:	b480      	push	{r7}
 8001940:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001942:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800194c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001950:	6013      	str	r3, [r2, #0]
}
 8001952:	bf00      	nop
 8001954:	46bd      	mov	sp, r7
 8001956:	bc80      	pop	{r7}
 8001958:	4770      	bx	lr

0800195a <LL_RCC_HSE_Disable>:
{
 800195a:	b480      	push	{r7}
 800195c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800195e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001968:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800196c:	6013      	str	r3, [r2, #0]
}
 800196e:	bf00      	nop
 8001970:	46bd      	mov	sp, r7
 8001972:	bc80      	pop	{r7}
 8001974:	4770      	bx	lr

08001976 <LL_RCC_HSE_IsReady>:
{
 8001976:	b480      	push	{r7}
 8001978:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800197a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001984:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001988:	d101      	bne.n	800198e <LL_RCC_HSE_IsReady+0x18>
 800198a:	2301      	movs	r3, #1
 800198c:	e000      	b.n	8001990 <LL_RCC_HSE_IsReady+0x1a>
 800198e:	2300      	movs	r3, #0
}
 8001990:	4618      	mov	r0, r3
 8001992:	46bd      	mov	sp, r7
 8001994:	bc80      	pop	{r7}
 8001996:	4770      	bx	lr

08001998 <LL_RCC_HSI_Enable>:
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800199c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80019a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019aa:	6013      	str	r3, [r2, #0]
}
 80019ac:	bf00      	nop
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bc80      	pop	{r7}
 80019b2:	4770      	bx	lr

080019b4 <LL_RCC_HSI_Disable>:
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80019b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80019c2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80019c6:	6013      	str	r3, [r2, #0]
}
 80019c8:	bf00      	nop
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc80      	pop	{r7}
 80019ce:	4770      	bx	lr

080019d0 <LL_RCC_HSI_IsReady>:
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80019d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019e2:	d101      	bne.n	80019e8 <LL_RCC_HSI_IsReady+0x18>
 80019e4:	2301      	movs	r3, #1
 80019e6:	e000      	b.n	80019ea <LL_RCC_HSI_IsReady+0x1a>
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bc80      	pop	{r7}
 80019f0:	4770      	bx	lr

080019f2 <LL_RCC_HSI_SetCalibTrimming>:
{
 80019f2:	b480      	push	{r7}
 80019f4:	b083      	sub	sp, #12
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80019fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	061b      	lsls	r3, r3, #24
 8001a08:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	604b      	str	r3, [r1, #4]
}
 8001a10:	bf00      	nop
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bc80      	pop	{r7}
 8001a18:	4770      	bx	lr

08001a1a <LL_RCC_LSE_IsReady>:
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001a1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d101      	bne.n	8001a32 <LL_RCC_LSE_IsReady+0x18>
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e000      	b.n	8001a34 <LL_RCC_LSE_IsReady+0x1a>
 8001a32:	2300      	movs	r3, #0
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr

08001a3c <LL_RCC_LSI_Enable>:
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001a40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a44:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a48:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001a54:	bf00      	nop
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bc80      	pop	{r7}
 8001a5a:	4770      	bx	lr

08001a5c <LL_RCC_LSI_Disable>:
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001a60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a68:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a6c:	f023 0301 	bic.w	r3, r3, #1
 8001a70:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bc80      	pop	{r7}
 8001a7a:	4770      	bx	lr

08001a7c <LL_RCC_LSI_IsReady>:
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8001a80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d101      	bne.n	8001a94 <LL_RCC_LSI_IsReady+0x18>
 8001a90:	2301      	movs	r3, #1
 8001a92:	e000      	b.n	8001a96 <LL_RCC_LSI_IsReady+0x1a>
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bc80      	pop	{r7}
 8001a9c:	4770      	bx	lr

08001a9e <LL_RCC_MSI_Enable>:
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001aa2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	6013      	str	r3, [r2, #0]
}
 8001ab2:	bf00      	nop
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bc80      	pop	{r7}
 8001ab8:	4770      	bx	lr

08001aba <LL_RCC_MSI_Disable>:
{
 8001aba:	b480      	push	{r7}
 8001abc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001abe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ac8:	f023 0301 	bic.w	r3, r3, #1
 8001acc:	6013      	str	r3, [r2, #0]
}
 8001ace:	bf00      	nop
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bc80      	pop	{r7}
 8001ad4:	4770      	bx	lr

08001ad6 <LL_RCC_MSI_IsReady>:
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001ada:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0302 	and.w	r3, r3, #2
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d101      	bne.n	8001aec <LL_RCC_MSI_IsReady+0x16>
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e000      	b.n	8001aee <LL_RCC_MSI_IsReady+0x18>
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bc80      	pop	{r7}
 8001af4:	4770      	bx	lr

08001af6 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8001af6:	b480      	push	{r7}
 8001af8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8001afa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0308 	and.w	r3, r3, #8
 8001b04:	2b08      	cmp	r3, #8
 8001b06:	d101      	bne.n	8001b0c <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e000      	b.n	8001b0e <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bc80      	pop	{r7}
 8001b14:	4770      	bx	lr

08001b16 <LL_RCC_MSI_GetRange>:
{
 8001b16:	b480      	push	{r7}
 8001b18:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8001b1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bc80      	pop	{r7}
 8001b2a:	4770      	bx	lr

08001b2c <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001b30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b38:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc80      	pop	{r7}
 8001b42:	4770      	bx	lr

08001b44 <LL_RCC_MSI_SetCalibTrimming>:
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001b4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	021b      	lsls	r3, r3, #8
 8001b5a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	604b      	str	r3, [r1, #4]
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr

08001b6c <LL_RCC_SetSysClkSource>:
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001b74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f023 0203 	bic.w	r2, r3, #3
 8001b7e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	608b      	str	r3, [r1, #8]
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bc80      	pop	{r7}
 8001b90:	4770      	bx	lr

08001b92 <LL_RCC_GetSysClkSource>:
{
 8001b92:	b480      	push	{r7}
 8001b94:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001b96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 030c 	and.w	r3, r3, #12
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc80      	pop	{r7}
 8001ba6:	4770      	bx	lr

08001ba8 <LL_RCC_SetAHBPrescaler>:
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001bb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	608b      	str	r3, [r1, #8]
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bc80      	pop	{r7}
 8001bcc:	4770      	bx	lr

08001bce <LL_C2_RCC_SetAHBPrescaler>:
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b083      	sub	sp, #12
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001bd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bda:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001bde:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001be2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8001bee:	bf00      	nop
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bc80      	pop	{r7}
 8001bf6:	4770      	bx	lr

08001bf8 <LL_RCC_SetAHB3Prescaler>:
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001c00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c04:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001c08:	f023 020f 	bic.w	r2, r3, #15
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	091b      	lsrs	r3, r3, #4
 8001c10:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c14:	4313      	orrs	r3, r2
 8001c16:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8001c1a:	bf00      	nop
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bc80      	pop	{r7}
 8001c22:	4770      	bx	lr

08001c24 <LL_RCC_SetAPB1Prescaler>:
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001c2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c36:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	608b      	str	r3, [r1, #8]
}
 8001c40:	bf00      	nop
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bc80      	pop	{r7}
 8001c48:	4770      	bx	lr

08001c4a <LL_RCC_SetAPB2Prescaler>:
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	b083      	sub	sp, #12
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001c52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c5c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	608b      	str	r3, [r1, #8]
}
 8001c66:	bf00      	nop
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bc80      	pop	{r7}
 8001c6e:	4770      	bx	lr

08001c70 <LL_RCC_GetAHBPrescaler>:
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001c74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bc80      	pop	{r7}
 8001c84:	4770      	bx	lr

08001c86 <LL_RCC_GetAHB3Prescaler>:
{
 8001c86:	b480      	push	{r7}
 8001c88:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001c8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c8e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001c92:	011b      	lsls	r3, r3, #4
 8001c94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bc80      	pop	{r7}
 8001c9e:	4770      	bx	lr

08001ca0 <LL_RCC_GetAPB1Prescaler>:
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001ca4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bc80      	pop	{r7}
 8001cb4:	4770      	bx	lr

08001cb6 <LL_RCC_GetAPB2Prescaler>:
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001cba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr

08001ccc <LL_RCC_PLL_Enable>:
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001cd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001cda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001cde:	6013      	str	r3, [r2, #0]
}
 8001ce0:	bf00      	nop
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr

08001ce8 <LL_RCC_PLL_Disable>:
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001cec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001cf6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001cfa:	6013      	str	r3, [r2, #0]
}
 8001cfc:	bf00      	nop
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bc80      	pop	{r7}
 8001d02:	4770      	bx	lr

08001d04 <LL_RCC_PLL_IsReady>:
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001d08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d12:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001d16:	d101      	bne.n	8001d1c <LL_RCC_PLL_IsReady+0x18>
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e000      	b.n	8001d1e <LL_RCC_PLL_IsReady+0x1a>
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bc80      	pop	{r7}
 8001d24:	4770      	bx	lr

08001d26 <LL_RCC_PLL_GetN>:
{
 8001d26:	b480      	push	{r7}
 8001d28:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001d2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	0a1b      	lsrs	r3, r3, #8
 8001d32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bc80      	pop	{r7}
 8001d3c:	4770      	bx	lr

08001d3e <LL_RCC_PLL_GetR>:
{
 8001d3e:	b480      	push	{r7}
 8001d40:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001d42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bc80      	pop	{r7}
 8001d52:	4770      	bx	lr

08001d54 <LL_RCC_PLL_GetDivider>:
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001d58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bc80      	pop	{r7}
 8001d68:	4770      	bx	lr

08001d6a <LL_RCC_PLL_GetMainSource>:
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001d6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	f003 0303 	and.w	r3, r3, #3
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bc80      	pop	{r7}
 8001d7e:	4770      	bx	lr

08001d80 <LL_RCC_IsActiveFlag_HPRE>:
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001d84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d92:	d101      	bne.n	8001d98 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001d94:	2301      	movs	r3, #1
 8001d96:	e000      	b.n	8001d9a <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bc80      	pop	{r7}
 8001da0:	4770      	bx	lr

08001da2 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001da2:	b480      	push	{r7}
 8001da4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001da6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001daa:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001dae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001db2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001db6:	d101      	bne.n	8001dbc <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001db8:	2301      	movs	r3, #1
 8001dba:	e000      	b.n	8001dbe <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bc80      	pop	{r7}
 8001dc4:	4770      	bx	lr

08001dc6 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001dca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dce:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001dd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dd6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dda:	d101      	bne.n	8001de0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e000      	b.n	8001de2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bc80      	pop	{r7}
 8001de8:	4770      	bx	lr

08001dea <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001dea:	b480      	push	{r7}
 8001dec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001dee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001df8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001dfc:	d101      	bne.n	8001e02 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e000      	b.n	8001e04 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bc80      	pop	{r7}
 8001e0a:	4770      	bx	lr

08001e0c <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001e10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e1a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001e1e:	d101      	bne.n	8001e24 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001e20:	2301      	movs	r3, #1
 8001e22:	e000      	b.n	8001e26 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bc80      	pop	{r7}
 8001e2c:	4770      	bx	lr
	...

08001e30 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b088      	sub	sp, #32
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d101      	bne.n	8001e42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e36f      	b.n	8002522 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e42:	f7ff fea6 	bl	8001b92 <LL_RCC_GetSysClkSource>
 8001e46:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e48:	f7ff ff8f 	bl	8001d6a <LL_RCC_PLL_GetMainSource>
 8001e4c:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0320 	and.w	r3, r3, #32
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	f000 80c4 	beq.w	8001fe4 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d005      	beq.n	8001e6e <HAL_RCC_OscConfig+0x3e>
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	2b0c      	cmp	r3, #12
 8001e66:	d176      	bne.n	8001f56 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d173      	bne.n	8001f56 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a1b      	ldr	r3, [r3, #32]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e353      	b.n	8002522 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0308 	and.w	r3, r3, #8
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d005      	beq.n	8001e98 <HAL_RCC_OscConfig+0x68>
 8001e8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e96:	e006      	b.n	8001ea6 <HAL_RCC_OscConfig+0x76>
 8001e98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ea0:	091b      	lsrs	r3, r3, #4
 8001ea2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d222      	bcs.n	8001ef0 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f000 fd5a 	bl	8002968 <RCC_SetFlashLatencyFromMSIRange>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e331      	b.n	8002522 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ebe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ec8:	f043 0308 	orr.w	r3, r3, #8
 8001ecc:	6013      	str	r3, [r2, #0]
 8001ece:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001edc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff fe2b 	bl	8001b44 <LL_RCC_MSI_SetCalibTrimming>
 8001eee:	e021      	b.n	8001f34 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ef0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001efa:	f043 0308 	orr.w	r3, r3, #8
 8001efe:	6013      	str	r3, [r2, #0]
 8001f00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f0e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001f12:	4313      	orrs	r3, r2
 8001f14:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7ff fe12 	bl	8001b44 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f24:	4618      	mov	r0, r3
 8001f26:	f000 fd1f 	bl	8002968 <RCC_SetFlashLatencyFromMSIRange>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e2f6      	b.n	8002522 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001f34:	f000 fce0 	bl	80028f8 <HAL_RCC_GetHCLKFreq>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	4aa7      	ldr	r2, [pc, #668]	@ (80021d8 <HAL_RCC_OscConfig+0x3a8>)
 8001f3c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8001f3e:	4ba7      	ldr	r3, [pc, #668]	@ (80021dc <HAL_RCC_OscConfig+0x3ac>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff f8d0 	bl	80010e8 <HAL_InitTick>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8001f4c:	7cfb      	ldrb	r3, [r7, #19]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d047      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8001f52:	7cfb      	ldrb	r3, [r7, #19]
 8001f54:	e2e5      	b.n	8002522 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a1b      	ldr	r3, [r3, #32]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d02c      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f5e:	f7ff fd9e 	bl	8001a9e <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f62:	f7ff f90d 	bl	8001180 <HAL_GetTick>
 8001f66:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001f68:	e008      	b.n	8001f7c <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f6a:	f7ff f909 	bl	8001180 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e2d2      	b.n	8002522 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001f7c:	f7ff fdab 	bl	8001ad6 <LL_RCC_MSI_IsReady>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d0f1      	beq.n	8001f6a <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f90:	f043 0308 	orr.w	r3, r3, #8
 8001f94:	6013      	str	r3, [r2, #0]
 8001f96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fa4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff fdc7 	bl	8001b44 <LL_RCC_MSI_SetCalibTrimming>
 8001fb6:	e015      	b.n	8001fe4 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001fb8:	f7ff fd7f 	bl	8001aba <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001fbc:	f7ff f8e0 	bl	8001180 <HAL_GetTick>
 8001fc0:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fc4:	f7ff f8dc 	bl	8001180 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e2a5      	b.n	8002522 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001fd6:	f7ff fd7e 	bl	8001ad6 <LL_RCC_MSI_IsReady>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d1f1      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x194>
 8001fe0:	e000      	b.n	8001fe4 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001fe2:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d058      	beq.n	80020a2 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	2b08      	cmp	r3, #8
 8001ff4:	d005      	beq.n	8002002 <HAL_RCC_OscConfig+0x1d2>
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	2b0c      	cmp	r3, #12
 8001ffa:	d108      	bne.n	800200e <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	2b03      	cmp	r3, #3
 8002000:	d105      	bne.n	800200e <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d14b      	bne.n	80020a2 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e289      	b.n	8002522 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800200e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002020:	4313      	orrs	r3, r2
 8002022:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800202c:	d102      	bne.n	8002034 <HAL_RCC_OscConfig+0x204>
 800202e:	f7ff fc86 	bl	800193e <LL_RCC_HSE_Enable>
 8002032:	e00d      	b.n	8002050 <HAL_RCC_OscConfig+0x220>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 800203c:	d104      	bne.n	8002048 <HAL_RCC_OscConfig+0x218>
 800203e:	f7ff fc51 	bl	80018e4 <LL_RCC_HSE_EnableTcxo>
 8002042:	f7ff fc7c 	bl	800193e <LL_RCC_HSE_Enable>
 8002046:	e003      	b.n	8002050 <HAL_RCC_OscConfig+0x220>
 8002048:	f7ff fc87 	bl	800195a <LL_RCC_HSE_Disable>
 800204c:	f7ff fc58 	bl	8001900 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d012      	beq.n	800207e <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002058:	f7ff f892 	bl	8001180 <HAL_GetTick>
 800205c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800205e:	e008      	b.n	8002072 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002060:	f7ff f88e 	bl	8001180 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b64      	cmp	r3, #100	@ 0x64
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e257      	b.n	8002522 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002072:	f7ff fc80 	bl	8001976 <LL_RCC_HSE_IsReady>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d0f1      	beq.n	8002060 <HAL_RCC_OscConfig+0x230>
 800207c:	e011      	b.n	80020a2 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207e:	f7ff f87f 	bl	8001180 <HAL_GetTick>
 8002082:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002084:	e008      	b.n	8002098 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002086:	f7ff f87b 	bl	8001180 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b64      	cmp	r3, #100	@ 0x64
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e244      	b.n	8002522 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002098:	f7ff fc6d 	bl	8001976 <LL_RCC_HSE_IsReady>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1f1      	bne.n	8002086 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d046      	beq.n	800213c <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	2b04      	cmp	r3, #4
 80020b2:	d005      	beq.n	80020c0 <HAL_RCC_OscConfig+0x290>
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	2b0c      	cmp	r3, #12
 80020b8:	d10e      	bne.n	80020d8 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d10b      	bne.n	80020d8 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d101      	bne.n	80020cc <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e22a      	b.n	8002522 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	695b      	ldr	r3, [r3, #20]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff fc8e 	bl	80019f2 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80020d6:	e031      	b.n	800213c <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	691b      	ldr	r3, [r3, #16]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d019      	beq.n	8002114 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020e0:	f7ff fc5a 	bl	8001998 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e4:	f7ff f84c 	bl	8001180 <HAL_GetTick>
 80020e8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80020ea:	e008      	b.n	80020fe <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020ec:	f7ff f848 	bl	8001180 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e211      	b.n	8002522 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 80020fe:	f7ff fc67 	bl	80019d0 <LL_RCC_HSI_IsReady>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d0f1      	beq.n	80020ec <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	695b      	ldr	r3, [r3, #20]
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff fc70 	bl	80019f2 <LL_RCC_HSI_SetCalibTrimming>
 8002112:	e013      	b.n	800213c <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002114:	f7ff fc4e 	bl	80019b4 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002118:	f7ff f832 	bl	8001180 <HAL_GetTick>
 800211c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800211e:	e008      	b.n	8002132 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002120:	f7ff f82e 	bl	8001180 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b02      	cmp	r3, #2
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e1f7      	b.n	8002522 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002132:	f7ff fc4d 	bl	80019d0 <LL_RCC_HSI_IsReady>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d1f1      	bne.n	8002120 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0308 	and.w	r3, r3, #8
 8002144:	2b00      	cmp	r3, #0
 8002146:	d06e      	beq.n	8002226 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d056      	beq.n	80021fe <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8002150:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002154:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002158:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	69da      	ldr	r2, [r3, #28]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	f003 0310 	and.w	r3, r3, #16
 8002164:	429a      	cmp	r2, r3
 8002166:	d031      	beq.n	80021cc <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d006      	beq.n	8002180 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002178:	2b00      	cmp	r3, #0
 800217a:	d101      	bne.n	8002180 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e1d0      	b.n	8002522 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b00      	cmp	r3, #0
 8002188:	d013      	beq.n	80021b2 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 800218a:	f7ff fc67 	bl	8001a5c <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800218e:	f7fe fff7 	bl	8001180 <HAL_GetTick>
 8002192:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8002194:	e008      	b.n	80021a8 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002196:	f7fe fff3 	bl	8001180 <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b11      	cmp	r3, #17
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e1bc      	b.n	8002522 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 80021a8:	f7ff fc68 	bl	8001a7c <LL_RCC_LSI_IsReady>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1f1      	bne.n	8002196 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80021b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021ba:	f023 0210 	bic.w	r2, r3, #16
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80021c6:	4313      	orrs	r3, r2
 80021c8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021cc:	f7ff fc36 	bl	8001a3c <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d0:	f7fe ffd6 	bl	8001180 <HAL_GetTick>
 80021d4:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80021d6:	e00c      	b.n	80021f2 <HAL_RCC_OscConfig+0x3c2>
 80021d8:	20000000 	.word	0x20000000
 80021dc:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021e0:	f7fe ffce 	bl	8001180 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b11      	cmp	r3, #17
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e197      	b.n	8002522 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 80021f2:	f7ff fc43 	bl	8001a7c <LL_RCC_LSI_IsReady>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d0f1      	beq.n	80021e0 <HAL_RCC_OscConfig+0x3b0>
 80021fc:	e013      	b.n	8002226 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021fe:	f7ff fc2d 	bl	8001a5c <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002202:	f7fe ffbd 	bl	8001180 <HAL_GetTick>
 8002206:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8002208:	e008      	b.n	800221c <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800220a:	f7fe ffb9 	bl	8001180 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b11      	cmp	r3, #17
 8002216:	d901      	bls.n	800221c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e182      	b.n	8002522 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 800221c:	f7ff fc2e 	bl	8001a7c <LL_RCC_LSI_IsReady>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1f1      	bne.n	800220a <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0304 	and.w	r3, r3, #4
 800222e:	2b00      	cmp	r3, #0
 8002230:	f000 80d8 	beq.w	80023e4 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002234:	f7ff fb44 	bl	80018c0 <LL_PWR_IsEnabledBkUpAccess>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d113      	bne.n	8002266 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800223e:	f7ff fa9d 	bl	800177c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002242:	f7fe ff9d 	bl	8001180 <HAL_GetTick>
 8002246:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002248:	e008      	b.n	800225c <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800224a:	f7fe ff99 	bl	8001180 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d901      	bls.n	800225c <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e162      	b.n	8002522 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800225c:	f7ff fb30 	bl	80018c0 <LL_PWR_IsEnabledBkUpAccess>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d0f1      	beq.n	800224a <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d07b      	beq.n	8002366 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	2b85      	cmp	r3, #133	@ 0x85
 8002274:	d003      	beq.n	800227e <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	2b05      	cmp	r3, #5
 800227c:	d109      	bne.n	8002292 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800227e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002282:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002286:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800228a:	f043 0304 	orr.w	r3, r3, #4
 800228e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002292:	f7fe ff75 	bl	8001180 <HAL_GetTick>
 8002296:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002298:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800229c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80022a4:	f043 0301 	orr.w	r3, r3, #1
 80022a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80022ac:	e00a      	b.n	80022c4 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ae:	f7fe ff67 	bl	8001180 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022bc:	4293      	cmp	r3, r2
 80022be:	d901      	bls.n	80022c4 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e12e      	b.n	8002522 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 80022c4:	f7ff fba9 	bl	8001a1a <LL_RCC_LSE_IsReady>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d0ef      	beq.n	80022ae <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	2b81      	cmp	r3, #129	@ 0x81
 80022d4:	d003      	beq.n	80022de <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	2b85      	cmp	r3, #133	@ 0x85
 80022dc:	d121      	bne.n	8002322 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022de:	f7fe ff4f 	bl	8001180 <HAL_GetTick>
 80022e2:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80022e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80022f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80022f8:	e00a      	b.n	8002310 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022fa:	f7fe ff41 	bl	8001180 <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002308:	4293      	cmp	r3, r2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e108      	b.n	8002522 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002310:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002314:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002318:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800231c:	2b00      	cmp	r3, #0
 800231e:	d0ec      	beq.n	80022fa <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002320:	e060      	b.n	80023e4 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002322:	f7fe ff2d 	bl	8001180 <HAL_GetTick>
 8002326:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002328:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800232c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002330:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002334:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002338:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800233c:	e00a      	b.n	8002354 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800233e:	f7fe ff1f 	bl	8001180 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	f241 3288 	movw	r2, #5000	@ 0x1388
 800234c:	4293      	cmp	r3, r2
 800234e:	d901      	bls.n	8002354 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e0e6      	b.n	8002522 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002354:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002358:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800235c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002360:	2b00      	cmp	r3, #0
 8002362:	d1ec      	bne.n	800233e <HAL_RCC_OscConfig+0x50e>
 8002364:	e03e      	b.n	80023e4 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002366:	f7fe ff0b 	bl	8001180 <HAL_GetTick>
 800236a:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800236c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002370:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002374:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002378:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800237c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002380:	e00a      	b.n	8002398 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002382:	f7fe fefd 	bl	8001180 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002390:	4293      	cmp	r3, r2
 8002392:	d901      	bls.n	8002398 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e0c4      	b.n	8002522 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002398:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800239c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d1ec      	bne.n	8002382 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023a8:	f7fe feea 	bl	8001180 <HAL_GetTick>
 80023ac:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80023ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80023ba:	f023 0301 	bic.w	r3, r3, #1
 80023be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80023c2:	e00a      	b.n	80023da <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023c4:	f7fe fedc 	bl	8001180 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e0a3      	b.n	8002522 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 80023da:	f7ff fb1e 	bl	8001a1a <LL_RCC_LSE_IsReady>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d1ef      	bne.n	80023c4 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f000 8099 	beq.w	8002520 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	2b0c      	cmp	r3, #12
 80023f2:	d06c      	beq.n	80024ce <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d14b      	bne.n	8002494 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023fc:	f7ff fc74 	bl	8001ce8 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002400:	f7fe febe 	bl	8001180 <HAL_GetTick>
 8002404:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002406:	e008      	b.n	800241a <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002408:	f7fe feba 	bl	8001180 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b0a      	cmp	r3, #10
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e083      	b.n	8002522 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800241a:	f7ff fc73 	bl	8001d04 <LL_RCC_PLL_IsReady>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1f1      	bne.n	8002408 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002424:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002428:	68da      	ldr	r2, [r3, #12]
 800242a:	4b40      	ldr	r3, [pc, #256]	@ (800252c <HAL_RCC_OscConfig+0x6fc>)
 800242c:	4013      	ands	r3, r2
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002436:	4311      	orrs	r1, r2
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800243c:	0212      	lsls	r2, r2, #8
 800243e:	4311      	orrs	r1, r2
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002444:	4311      	orrs	r1, r2
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800244a:	4311      	orrs	r1, r2
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002450:	430a      	orrs	r2, r1
 8002452:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002456:	4313      	orrs	r3, r2
 8002458:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800245a:	f7ff fc37 	bl	8001ccc <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800245e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002468:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800246c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246e:	f7fe fe87 	bl	8001180 <HAL_GetTick>
 8002472:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8002474:	e008      	b.n	8002488 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002476:	f7fe fe83 	bl	8001180 <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	2b0a      	cmp	r3, #10
 8002482:	d901      	bls.n	8002488 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e04c      	b.n	8002522 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8002488:	f7ff fc3c 	bl	8001d04 <LL_RCC_PLL_IsReady>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d0f1      	beq.n	8002476 <HAL_RCC_OscConfig+0x646>
 8002492:	e045      	b.n	8002520 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002494:	f7ff fc28 	bl	8001ce8 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002498:	f7fe fe72 	bl	8001180 <HAL_GetTick>
 800249c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024a0:	f7fe fe6e 	bl	8001180 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b0a      	cmp	r3, #10
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e037      	b.n	8002522 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80024b2:	f7ff fc27 	bl	8001d04 <LL_RCC_PLL_IsReady>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d1f1      	bne.n	80024a0 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80024bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024c0:	68da      	ldr	r2, [r3, #12]
 80024c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80024c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002530 <HAL_RCC_OscConfig+0x700>)
 80024c8:	4013      	ands	r3, r2
 80024ca:	60cb      	str	r3, [r1, #12]
 80024cc:	e028      	b.n	8002520 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d101      	bne.n	80024da <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e023      	b.n	8002522 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	f003 0203 	and.w	r2, r3, #3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d115      	bne.n	800251c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d10e      	bne.n	800251c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002508:	021b      	lsls	r3, r3, #8
 800250a:	429a      	cmp	r2, r3
 800250c:	d106      	bne.n	800251c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002518:	429a      	cmp	r2, r3
 800251a:	d001      	beq.n	8002520 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e000      	b.n	8002522 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3720      	adds	r7, #32
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	11c1808c 	.word	0x11c1808c
 8002530:	eefefffc 	.word	0xeefefffc

08002534 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d101      	bne.n	8002548 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e12c      	b.n	80027a2 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002548:	4b98      	ldr	r3, [pc, #608]	@ (80027ac <HAL_RCC_ClockConfig+0x278>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0307 	and.w	r3, r3, #7
 8002550:	683a      	ldr	r2, [r7, #0]
 8002552:	429a      	cmp	r2, r3
 8002554:	d91b      	bls.n	800258e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002556:	4b95      	ldr	r3, [pc, #596]	@ (80027ac <HAL_RCC_ClockConfig+0x278>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f023 0207 	bic.w	r2, r3, #7
 800255e:	4993      	ldr	r1, [pc, #588]	@ (80027ac <HAL_RCC_ClockConfig+0x278>)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	4313      	orrs	r3, r2
 8002564:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002566:	f7fe fe0b 	bl	8001180 <HAL_GetTick>
 800256a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800256c:	e008      	b.n	8002580 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800256e:	f7fe fe07 	bl	8001180 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d901      	bls.n	8002580 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e110      	b.n	80027a2 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002580:	4b8a      	ldr	r3, [pc, #552]	@ (80027ac <HAL_RCC_ClockConfig+0x278>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0307 	and.w	r3, r3, #7
 8002588:	683a      	ldr	r2, [r7, #0]
 800258a:	429a      	cmp	r2, r3
 800258c:	d1ef      	bne.n	800256e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d016      	beq.n	80025c8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	4618      	mov	r0, r3
 80025a0:	f7ff fb02 	bl	8001ba8 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80025a4:	f7fe fdec 	bl	8001180 <HAL_GetTick>
 80025a8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80025aa:	e008      	b.n	80025be <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80025ac:	f7fe fde8 	bl	8001180 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d901      	bls.n	80025be <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e0f1      	b.n	80027a2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80025be:	f7ff fbdf 	bl	8001d80 <LL_RCC_IsActiveFlag_HPRE>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d0f1      	beq.n	80025ac <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0320 	and.w	r3, r3, #32
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d016      	beq.n	8002602 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	695b      	ldr	r3, [r3, #20]
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff faf8 	bl	8001bce <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80025de:	f7fe fdcf 	bl	8001180 <HAL_GetTick>
 80025e2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80025e4:	e008      	b.n	80025f8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80025e6:	f7fe fdcb 	bl	8001180 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e0d4      	b.n	80027a2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80025f8:	f7ff fbd3 	bl	8001da2 <LL_RCC_IsActiveFlag_C2HPRE>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d0f1      	beq.n	80025e6 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800260a:	2b00      	cmp	r3, #0
 800260c:	d016      	beq.n	800263c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	4618      	mov	r0, r3
 8002614:	f7ff faf0 	bl	8001bf8 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002618:	f7fe fdb2 	bl	8001180 <HAL_GetTick>
 800261c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800261e:	e008      	b.n	8002632 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002620:	f7fe fdae 	bl	8001180 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e0b7      	b.n	80027a2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002632:	f7ff fbc8 	bl	8001dc6 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d0f1      	beq.n	8002620 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0304 	and.w	r3, r3, #4
 8002644:	2b00      	cmp	r3, #0
 8002646:	d016      	beq.n	8002676 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff fae9 	bl	8001c24 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002652:	f7fe fd95 	bl	8001180 <HAL_GetTick>
 8002656:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002658:	e008      	b.n	800266c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800265a:	f7fe fd91 	bl	8001180 <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d901      	bls.n	800266c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e09a      	b.n	80027a2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800266c:	f7ff fbbd 	bl	8001dea <LL_RCC_IsActiveFlag_PPRE1>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d0f1      	beq.n	800265a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0308 	and.w	r3, r3, #8
 800267e:	2b00      	cmp	r3, #0
 8002680:	d017      	beq.n	80026b2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	4618      	mov	r0, r3
 800268a:	f7ff fade 	bl	8001c4a <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800268e:	f7fe fd77 	bl	8001180 <HAL_GetTick>
 8002692:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002694:	e008      	b.n	80026a8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002696:	f7fe fd73 	bl	8001180 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e07c      	b.n	80027a2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80026a8:	f7ff fbb0 	bl	8001e0c <LL_RCC_IsActiveFlag_PPRE2>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d0f1      	beq.n	8002696 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d043      	beq.n	8002746 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d106      	bne.n	80026d4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80026c6:	f7ff f956 	bl	8001976 <LL_RCC_HSE_IsReady>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d11e      	bne.n	800270e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e066      	b.n	80027a2 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	2b03      	cmp	r3, #3
 80026da:	d106      	bne.n	80026ea <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80026dc:	f7ff fb12 	bl	8001d04 <LL_RCC_PLL_IsReady>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d113      	bne.n	800270e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e05b      	b.n	80027a2 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d106      	bne.n	8002700 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80026f2:	f7ff f9f0 	bl	8001ad6 <LL_RCC_MSI_IsReady>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d108      	bne.n	800270e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e050      	b.n	80027a2 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002700:	f7ff f966 	bl	80019d0 <LL_RCC_HSI_IsReady>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e049      	b.n	80027a2 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff fa2a 	bl	8001b6c <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002718:	f7fe fd32 	bl	8001180 <HAL_GetTick>
 800271c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800271e:	e00a      	b.n	8002736 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002720:	f7fe fd2e 	bl	8001180 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800272e:	4293      	cmp	r3, r2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e035      	b.n	80027a2 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002736:	f7ff fa2c 	bl	8001b92 <LL_RCC_GetSysClkSource>
 800273a:	4602      	mov	r2, r0
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	429a      	cmp	r2, r3
 8002744:	d1ec      	bne.n	8002720 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002746:	4b19      	ldr	r3, [pc, #100]	@ (80027ac <HAL_RCC_ClockConfig+0x278>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0307 	and.w	r3, r3, #7
 800274e:	683a      	ldr	r2, [r7, #0]
 8002750:	429a      	cmp	r2, r3
 8002752:	d21b      	bcs.n	800278c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002754:	4b15      	ldr	r3, [pc, #84]	@ (80027ac <HAL_RCC_ClockConfig+0x278>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f023 0207 	bic.w	r2, r3, #7
 800275c:	4913      	ldr	r1, [pc, #76]	@ (80027ac <HAL_RCC_ClockConfig+0x278>)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	4313      	orrs	r3, r2
 8002762:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002764:	f7fe fd0c 	bl	8001180 <HAL_GetTick>
 8002768:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800276a:	e008      	b.n	800277e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800276c:	f7fe fd08 	bl	8001180 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b02      	cmp	r3, #2
 8002778:	d901      	bls.n	800277e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e011      	b.n	80027a2 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800277e:	4b0b      	ldr	r3, [pc, #44]	@ (80027ac <HAL_RCC_ClockConfig+0x278>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0307 	and.w	r3, r3, #7
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	429a      	cmp	r2, r3
 800278a:	d1ef      	bne.n	800276c <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800278c:	f000 f8b4 	bl	80028f8 <HAL_RCC_GetHCLKFreq>
 8002790:	4603      	mov	r3, r0
 8002792:	4a07      	ldr	r2, [pc, #28]	@ (80027b0 <HAL_RCC_ClockConfig+0x27c>)
 8002794:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8002796:	4b07      	ldr	r3, [pc, #28]	@ (80027b4 <HAL_RCC_ClockConfig+0x280>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f7fe fca4 	bl	80010e8 <HAL_InitTick>
 80027a0:	4603      	mov	r3, r0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	58004000 	.word	0x58004000
 80027b0:	20000000 	.word	0x20000000
 80027b4:	20000004 	.word	0x20000004

080027b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027b8:	b590      	push	{r4, r7, lr}
 80027ba:	b087      	sub	sp, #28
 80027bc:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80027be:	2300      	movs	r3, #0
 80027c0:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80027c2:	2300      	movs	r3, #0
 80027c4:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027c6:	f7ff f9e4 	bl	8001b92 <LL_RCC_GetSysClkSource>
 80027ca:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027cc:	f7ff facd 	bl	8001d6a <LL_RCC_PLL_GetMainSource>
 80027d0:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d005      	beq.n	80027e4 <HAL_RCC_GetSysClockFreq+0x2c>
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	2b0c      	cmp	r3, #12
 80027dc:	d139      	bne.n	8002852 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d136      	bne.n	8002852 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80027e4:	f7ff f987 	bl	8001af6 <LL_RCC_MSI_IsEnabledRangeSelect>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d115      	bne.n	800281a <HAL_RCC_GetSysClockFreq+0x62>
 80027ee:	f7ff f982 	bl	8001af6 <LL_RCC_MSI_IsEnabledRangeSelect>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d106      	bne.n	8002806 <HAL_RCC_GetSysClockFreq+0x4e>
 80027f8:	f7ff f98d 	bl	8001b16 <LL_RCC_MSI_GetRange>
 80027fc:	4603      	mov	r3, r0
 80027fe:	0a1b      	lsrs	r3, r3, #8
 8002800:	f003 030f 	and.w	r3, r3, #15
 8002804:	e005      	b.n	8002812 <HAL_RCC_GetSysClockFreq+0x5a>
 8002806:	f7ff f991 	bl	8001b2c <LL_RCC_MSI_GetRangeAfterStandby>
 800280a:	4603      	mov	r3, r0
 800280c:	0a1b      	lsrs	r3, r3, #8
 800280e:	f003 030f 	and.w	r3, r3, #15
 8002812:	4a36      	ldr	r2, [pc, #216]	@ (80028ec <HAL_RCC_GetSysClockFreq+0x134>)
 8002814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002818:	e014      	b.n	8002844 <HAL_RCC_GetSysClockFreq+0x8c>
 800281a:	f7ff f96c 	bl	8001af6 <LL_RCC_MSI_IsEnabledRangeSelect>
 800281e:	4603      	mov	r3, r0
 8002820:	2b01      	cmp	r3, #1
 8002822:	d106      	bne.n	8002832 <HAL_RCC_GetSysClockFreq+0x7a>
 8002824:	f7ff f977 	bl	8001b16 <LL_RCC_MSI_GetRange>
 8002828:	4603      	mov	r3, r0
 800282a:	091b      	lsrs	r3, r3, #4
 800282c:	f003 030f 	and.w	r3, r3, #15
 8002830:	e005      	b.n	800283e <HAL_RCC_GetSysClockFreq+0x86>
 8002832:	f7ff f97b 	bl	8001b2c <LL_RCC_MSI_GetRangeAfterStandby>
 8002836:	4603      	mov	r3, r0
 8002838:	091b      	lsrs	r3, r3, #4
 800283a:	f003 030f 	and.w	r3, r3, #15
 800283e:	4a2b      	ldr	r2, [pc, #172]	@ (80028ec <HAL_RCC_GetSysClockFreq+0x134>)
 8002840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002844:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d115      	bne.n	8002878 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002850:	e012      	b.n	8002878 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	2b04      	cmp	r3, #4
 8002856:	d102      	bne.n	800285e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002858:	4b25      	ldr	r3, [pc, #148]	@ (80028f0 <HAL_RCC_GetSysClockFreq+0x138>)
 800285a:	617b      	str	r3, [r7, #20]
 800285c:	e00c      	b.n	8002878 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	2b08      	cmp	r3, #8
 8002862:	d109      	bne.n	8002878 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002864:	f7ff f85a 	bl	800191c <LL_RCC_HSE_IsEnabledDiv2>
 8002868:	4603      	mov	r3, r0
 800286a:	2b01      	cmp	r3, #1
 800286c:	d102      	bne.n	8002874 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800286e:	4b20      	ldr	r3, [pc, #128]	@ (80028f0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002870:	617b      	str	r3, [r7, #20]
 8002872:	e001      	b.n	8002878 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002874:	4b1f      	ldr	r3, [pc, #124]	@ (80028f4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002876:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002878:	f7ff f98b 	bl	8001b92 <LL_RCC_GetSysClkSource>
 800287c:	4603      	mov	r3, r0
 800287e:	2b0c      	cmp	r3, #12
 8002880:	d12f      	bne.n	80028e2 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002882:	f7ff fa72 	bl	8001d6a <LL_RCC_PLL_GetMainSource>
 8002886:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2b02      	cmp	r3, #2
 800288c:	d003      	beq.n	8002896 <HAL_RCC_GetSysClockFreq+0xde>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2b03      	cmp	r3, #3
 8002892:	d003      	beq.n	800289c <HAL_RCC_GetSysClockFreq+0xe4>
 8002894:	e00d      	b.n	80028b2 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002896:	4b16      	ldr	r3, [pc, #88]	@ (80028f0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002898:	60fb      	str	r3, [r7, #12]
        break;
 800289a:	e00d      	b.n	80028b8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800289c:	f7ff f83e 	bl	800191c <LL_RCC_HSE_IsEnabledDiv2>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d102      	bne.n	80028ac <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80028a6:	4b12      	ldr	r3, [pc, #72]	@ (80028f0 <HAL_RCC_GetSysClockFreq+0x138>)
 80028a8:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80028aa:	e005      	b.n	80028b8 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80028ac:	4b11      	ldr	r3, [pc, #68]	@ (80028f4 <HAL_RCC_GetSysClockFreq+0x13c>)
 80028ae:	60fb      	str	r3, [r7, #12]
        break;
 80028b0:	e002      	b.n	80028b8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	60fb      	str	r3, [r7, #12]
        break;
 80028b6:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80028b8:	f7ff fa35 	bl	8001d26 <LL_RCC_PLL_GetN>
 80028bc:	4602      	mov	r2, r0
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	fb03 f402 	mul.w	r4, r3, r2
 80028c4:	f7ff fa46 	bl	8001d54 <LL_RCC_PLL_GetDivider>
 80028c8:	4603      	mov	r3, r0
 80028ca:	091b      	lsrs	r3, r3, #4
 80028cc:	3301      	adds	r3, #1
 80028ce:	fbb4 f4f3 	udiv	r4, r4, r3
 80028d2:	f7ff fa34 	bl	8001d3e <LL_RCC_PLL_GetR>
 80028d6:	4603      	mov	r3, r0
 80028d8:	0f5b      	lsrs	r3, r3, #29
 80028da:	3301      	adds	r3, #1
 80028dc:	fbb4 f3f3 	udiv	r3, r4, r3
 80028e0:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80028e2:	697b      	ldr	r3, [r7, #20]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	371c      	adds	r7, #28
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd90      	pop	{r4, r7, pc}
 80028ec:	08004cbc 	.word	0x08004cbc
 80028f0:	00f42400 	.word	0x00f42400
 80028f4:	01e84800 	.word	0x01e84800

080028f8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028f8:	b598      	push	{r3, r4, r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80028fc:	f7ff ff5c 	bl	80027b8 <HAL_RCC_GetSysClockFreq>
 8002900:	4604      	mov	r4, r0
 8002902:	f7ff f9b5 	bl	8001c70 <LL_RCC_GetAHBPrescaler>
 8002906:	4603      	mov	r3, r0
 8002908:	091b      	lsrs	r3, r3, #4
 800290a:	f003 030f 	and.w	r3, r3, #15
 800290e:	4a03      	ldr	r2, [pc, #12]	@ (800291c <HAL_RCC_GetHCLKFreq+0x24>)
 8002910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002914:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002918:	4618      	mov	r0, r3
 800291a:	bd98      	pop	{r3, r4, r7, pc}
 800291c:	08004c5c 	.word	0x08004c5c

08002920 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002920:	b598      	push	{r3, r4, r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002924:	f7ff ffe8 	bl	80028f8 <HAL_RCC_GetHCLKFreq>
 8002928:	4604      	mov	r4, r0
 800292a:	f7ff f9b9 	bl	8001ca0 <LL_RCC_GetAPB1Prescaler>
 800292e:	4603      	mov	r3, r0
 8002930:	0a1b      	lsrs	r3, r3, #8
 8002932:	4a03      	ldr	r2, [pc, #12]	@ (8002940 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002938:	fa24 f303 	lsr.w	r3, r4, r3
}
 800293c:	4618      	mov	r0, r3
 800293e:	bd98      	pop	{r3, r4, r7, pc}
 8002940:	08004c9c 	.word	0x08004c9c

08002944 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002944:	b598      	push	{r3, r4, r7, lr}
 8002946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002948:	f7ff ffd6 	bl	80028f8 <HAL_RCC_GetHCLKFreq>
 800294c:	4604      	mov	r4, r0
 800294e:	f7ff f9b2 	bl	8001cb6 <LL_RCC_GetAPB2Prescaler>
 8002952:	4603      	mov	r3, r0
 8002954:	0adb      	lsrs	r3, r3, #11
 8002956:	4a03      	ldr	r2, [pc, #12]	@ (8002964 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800295c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002960:	4618      	mov	r0, r3
 8002962:	bd98      	pop	{r3, r4, r7, pc}
 8002964:	08004c9c 	.word	0x08004c9c

08002968 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002968:	b590      	push	{r4, r7, lr}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	091b      	lsrs	r3, r3, #4
 8002974:	f003 030f 	and.w	r3, r3, #15
 8002978:	4a10      	ldr	r2, [pc, #64]	@ (80029bc <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800297a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800297e:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8002980:	f7ff f981 	bl	8001c86 <LL_RCC_GetAHB3Prescaler>
 8002984:	4603      	mov	r3, r0
 8002986:	091b      	lsrs	r3, r3, #4
 8002988:	f003 030f 	and.w	r3, r3, #15
 800298c:	4a0c      	ldr	r2, [pc, #48]	@ (80029c0 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800298e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002992:	68fa      	ldr	r2, [r7, #12]
 8002994:	fbb2 f3f3 	udiv	r3, r2, r3
 8002998:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	4a09      	ldr	r2, [pc, #36]	@ (80029c4 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800299e:	fba2 2303 	umull	r2, r3, r2, r3
 80029a2:	0c9c      	lsrs	r4, r3, #18
 80029a4:	f7fe fef8 	bl	8001798 <HAL_PWREx_GetVoltageRange>
 80029a8:	4603      	mov	r3, r0
 80029aa:	4619      	mov	r1, r3
 80029ac:	4620      	mov	r0, r4
 80029ae:	f000 f80b 	bl	80029c8 <RCC_SetFlashLatency>
 80029b2:	4603      	mov	r3, r0
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3714      	adds	r7, #20
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd90      	pop	{r4, r7, pc}
 80029bc:	08004cbc 	.word	0x08004cbc
 80029c0:	08004c5c 	.word	0x08004c5c
 80029c4:	431bde83 	.word	0x431bde83

080029c8 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b08e      	sub	sp, #56	@ 0x38
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80029d2:	4a3a      	ldr	r2, [pc, #232]	@ (8002abc <RCC_SetFlashLatency+0xf4>)
 80029d4:	f107 0320 	add.w	r3, r7, #32
 80029d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80029dc:	6018      	str	r0, [r3, #0]
 80029de:	3304      	adds	r3, #4
 80029e0:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80029e2:	4a37      	ldr	r2, [pc, #220]	@ (8002ac0 <RCC_SetFlashLatency+0xf8>)
 80029e4:	f107 0318 	add.w	r3, r7, #24
 80029e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80029ec:	6018      	str	r0, [r3, #0]
 80029ee:	3304      	adds	r3, #4
 80029f0:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80029f2:	4a34      	ldr	r2, [pc, #208]	@ (8002ac4 <RCC_SetFlashLatency+0xfc>)
 80029f4:	f107 030c 	add.w	r3, r7, #12
 80029f8:	ca07      	ldmia	r2, {r0, r1, r2}
 80029fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80029fe:	2300      	movs	r3, #0
 8002a00:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a08:	d11b      	bne.n	8002a42 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a0e:	e014      	b.n	8002a3a <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	3338      	adds	r3, #56	@ 0x38
 8002a16:	443b      	add	r3, r7
 8002a18:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d807      	bhi.n	8002a34 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	3338      	adds	r3, #56	@ 0x38
 8002a2a:	443b      	add	r3, r7
 8002a2c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002a30:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002a32:	e021      	b.n	8002a78 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a36:	3301      	adds	r3, #1
 8002a38:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d9e7      	bls.n	8002a10 <RCC_SetFlashLatency+0x48>
 8002a40:	e01a      	b.n	8002a78 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002a42:	2300      	movs	r3, #0
 8002a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a46:	e014      	b.n	8002a72 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	3338      	adds	r3, #56	@ 0x38
 8002a4e:	443b      	add	r3, r7
 8002a50:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8002a54:	461a      	mov	r2, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d807      	bhi.n	8002a6c <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002a5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	3338      	adds	r3, #56	@ 0x38
 8002a62:	443b      	add	r3, r7
 8002a64:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002a68:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002a6a:	e005      	b.n	8002a78 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002a6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a6e:	3301      	adds	r3, #1
 8002a70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d9e7      	bls.n	8002a48 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a78:	4b13      	ldr	r3, [pc, #76]	@ (8002ac8 <RCC_SetFlashLatency+0x100>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f023 0207 	bic.w	r2, r3, #7
 8002a80:	4911      	ldr	r1, [pc, #68]	@ (8002ac8 <RCC_SetFlashLatency+0x100>)
 8002a82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a84:	4313      	orrs	r3, r2
 8002a86:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002a88:	f7fe fb7a 	bl	8001180 <HAL_GetTick>
 8002a8c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002a8e:	e008      	b.n	8002aa2 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002a90:	f7fe fb76 	bl	8001180 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d901      	bls.n	8002aa2 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e007      	b.n	8002ab2 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002aa2:	4b09      	ldr	r3, [pc, #36]	@ (8002ac8 <RCC_SetFlashLatency+0x100>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0307 	and.w	r3, r3, #7
 8002aaa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d1ef      	bne.n	8002a90 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3738      	adds	r7, #56	@ 0x38
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	08004c40 	.word	0x08004c40
 8002ac0:	08004c48 	.word	0x08004c48
 8002ac4:	08004c50 	.word	0x08004c50
 8002ac8:	58004000 	.word	0x58004000

08002acc <LL_RCC_LSE_IsReady>:
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002ad0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ad8:	f003 0302 	and.w	r3, r3, #2
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d101      	bne.n	8002ae4 <LL_RCC_LSE_IsReady+0x18>
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e000      	b.n	8002ae6 <LL_RCC_LSE_IsReady+0x1a>
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bc80      	pop	{r7}
 8002aec:	4770      	bx	lr

08002aee <LL_RCC_SetUSARTClockSource>:
{
 8002aee:	b480      	push	{r7}
 8002af0:	b083      	sub	sp, #12
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8002af6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002afa:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	0c1b      	lsrs	r3, r3, #16
 8002b02:	43db      	mvns	r3, r3
 8002b04:	401a      	ands	r2, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bc80      	pop	{r7}
 8002b1c:	4770      	bx	lr

08002b1e <LL_RCC_SetI2SClockSource>:
{
 8002b1e:	b480      	push	{r7}
 8002b20:	b083      	sub	sp, #12
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8002b26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b2e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b32:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002b3e:	bf00      	nop
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bc80      	pop	{r7}
 8002b46:	4770      	bx	lr

08002b48 <LL_RCC_SetLPUARTClockSource>:
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002b50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b58:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002b5c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002b68:	bf00      	nop
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bc80      	pop	{r7}
 8002b70:	4770      	bx	lr

08002b72 <LL_RCC_SetI2CClockSource>:
{
 8002b72:	b480      	push	{r7}
 8002b74:	b083      	sub	sp, #12
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002b7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b7e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	091b      	lsrs	r3, r3, #4
 8002b86:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8002b8a:	43db      	mvns	r3, r3
 8002b8c:	401a      	ands	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	011b      	lsls	r3, r3, #4
 8002b92:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8002b96:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bc80      	pop	{r7}
 8002ba8:	4770      	bx	lr

08002baa <LL_RCC_SetLPTIMClockSource>:
{
 8002baa:	b480      	push	{r7}
 8002bac:	b083      	sub	sp, #12
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002bb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bb6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	0c1b      	lsrs	r3, r3, #16
 8002bbe:	041b      	lsls	r3, r3, #16
 8002bc0:	43db      	mvns	r3, r3
 8002bc2:	401a      	ands	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	041b      	lsls	r3, r3, #16
 8002bc8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002bd2:	bf00      	nop
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bc80      	pop	{r7}
 8002bda:	4770      	bx	lr

08002bdc <LL_RCC_SetRNGClockSource>:
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002be4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bec:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002bf0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bc80      	pop	{r7}
 8002c04:	4770      	bx	lr

08002c06 <LL_RCC_SetADCClockSource>:
{
 8002c06:	b480      	push	{r7}
 8002c08:	b083      	sub	sp, #12
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002c0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c16:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002c1a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002c26:	bf00      	nop
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bc80      	pop	{r7}
 8002c2e:	4770      	bx	lr

08002c30 <LL_RCC_SetRTCClockSource>:
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002c38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c40:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c44:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bc80      	pop	{r7}
 8002c58:	4770      	bx	lr

08002c5a <LL_RCC_GetRTCClockSource>:
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002c5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bc80      	pop	{r7}
 8002c70:	4770      	bx	lr

08002c72 <LL_RCC_ForceBackupDomainReset>:
{
 8002c72:	b480      	push	{r7}
 8002c74:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002c76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c7e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c86:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002c8a:	bf00      	nop
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bc80      	pop	{r7}
 8002c90:	4770      	bx	lr

08002c92 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002c92:	b480      	push	{r7}
 8002c94:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002c96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c9e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ca2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ca6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002caa:	bf00      	nop
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bc80      	pop	{r7}
 8002cb0:	4770      	bx	lr
	...

08002cb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d058      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8002cd4:	f7fe fd52 	bl	800177c <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002cd8:	f7fe fa52 	bl	8001180 <HAL_GetTick>
 8002cdc:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002cde:	e009      	b.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ce0:	f7fe fa4e 	bl	8001180 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d902      	bls.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	74fb      	strb	r3, [r7, #19]
        break;
 8002cf2:	e006      	b.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002cf4:	4b7b      	ldr	r3, [pc, #492]	@ (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cfc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d00:	d1ee      	bne.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8002d02:	7cfb      	ldrb	r3, [r7, #19]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d13c      	bne.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002d08:	f7ff ffa7 	bl	8002c5a <LL_RCC_GetRTCClockSource>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d00f      	beq.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d22:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d24:	f7ff ffa5 	bl	8002c72 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d28:	f7ff ffb3 	bl	8002c92 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d2c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d014      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d40:	f7fe fa1e 	bl	8001180 <HAL_GetTick>
 8002d44:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8002d46:	e00b      	b.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d48:	f7fe fa1a 	bl	8001180 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d902      	bls.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	74fb      	strb	r3, [r7, #19]
            break;
 8002d5e:	e004      	b.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8002d60:	f7ff feb4 	bl	8002acc <LL_RCC_LSE_IsReady>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d1ee      	bne.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8002d6a:	7cfb      	ldrb	r3, [r7, #19]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d105      	bne.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff ff5b 	bl	8002c30 <LL_RCC_SetRTCClockSource>
 8002d7a:	e004      	b.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d7c:	7cfb      	ldrb	r3, [r7, #19]
 8002d7e:	74bb      	strb	r3, [r7, #18]
 8002d80:	e001      	b.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d82:	7cfb      	ldrb	r3, [r7, #19]
 8002d84:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d004      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7ff fea9 	bl	8002aee <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d004      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7ff fe9e 	bl	8002aee <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0320 	and.w	r3, r3, #32
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d004      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7ff fec0 	bl	8002b48 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d004      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a1b      	ldr	r3, [r3, #32]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7ff fee6 	bl	8002baa <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d004      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7ff fedb 	bl	8002baa <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d004      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7ff fed0 	bl	8002baa <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d004      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7ff fea9 	bl	8002b72 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d004      	beq.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7ff fe9e 	bl	8002b72 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d004      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7ff fe93 	bl	8002b72 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0310 	and.w	r3, r3, #16
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d011      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7ff fe5e 	bl	8002b1e <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e6a:	d107      	bne.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8002e6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e7a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d010      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7ff fea5 	bl	8002bdc <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d107      	bne.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002e9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ea4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ea8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d011      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7ff fea3 	bl	8002c06 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ec4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ec8:	d107      	bne.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002eca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ed4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ed8:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8002eda:	7cbb      	ldrb	r3, [r7, #18]
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3718      	adds	r7, #24
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	58000400 	.word	0x58000400

08002ee8 <LL_RCC_GetUSARTClockSource>:
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8002ef0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ef4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	401a      	ands	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	041b      	lsls	r3, r3, #16
 8002f00:	4313      	orrs	r3, r2
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	370c      	adds	r7, #12
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bc80      	pop	{r7}
 8002f0a:	4770      	bx	lr

08002f0c <LL_RCC_GetLPUARTClockSource>:
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8002f14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f18:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4013      	ands	r3, r2
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bc80      	pop	{r7}
 8002f28:	4770      	bx	lr

08002f2a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b082      	sub	sp, #8
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d101      	bne.n	8002f3c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e042      	b.n	8002fc2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d106      	bne.n	8002f54 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f7fd ff54 	bl	8000dfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2224      	movs	r2, #36	@ 0x24
 8002f58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f022 0201 	bic.w	r2, r2, #1
 8002f6a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d002      	beq.n	8002f7a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f000 fb23 	bl	80035c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 f8ac 	bl	80030d8 <UART_SetConfig>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d101      	bne.n	8002f8a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e01b      	b.n	8002fc2 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	685a      	ldr	r2, [r3, #4]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f98:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	689a      	ldr	r2, [r3, #8]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002fa8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f042 0201 	orr.w	r2, r2, #1
 8002fb8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 fba1 	bl	8003702 <UART_CheckIdleState>
 8002fc0:	4603      	mov	r3, r0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b08a      	sub	sp, #40	@ 0x28
 8002fce:	af02      	add	r7, sp, #8
 8002fd0:	60f8      	str	r0, [r7, #12]
 8002fd2:	60b9      	str	r1, [r7, #8]
 8002fd4:	603b      	str	r3, [r7, #0]
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fe0:	2b20      	cmp	r3, #32
 8002fe2:	d173      	bne.n	80030cc <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d002      	beq.n	8002ff0 <HAL_UART_Transmit+0x26>
 8002fea:	88fb      	ldrh	r3, [r7, #6]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d101      	bne.n	8002ff4 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e06c      	b.n	80030ce <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2221      	movs	r2, #33	@ 0x21
 8003000:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003004:	f7fe f8bc 	bl	8001180 <HAL_GetTick>
 8003008:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	88fa      	ldrh	r2, [r7, #6]
 800300e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	88fa      	ldrh	r2, [r7, #6]
 8003016:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003022:	d108      	bne.n	8003036 <HAL_UART_Transmit+0x6c>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d104      	bne.n	8003036 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800302c:	2300      	movs	r3, #0
 800302e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	61bb      	str	r3, [r7, #24]
 8003034:	e003      	b.n	800303e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800303a:	2300      	movs	r3, #0
 800303c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800303e:	e02c      	b.n	800309a <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	9300      	str	r3, [sp, #0]
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	2200      	movs	r2, #0
 8003048:	2180      	movs	r1, #128	@ 0x80
 800304a:	68f8      	ldr	r0, [r7, #12]
 800304c:	f000 fba7 	bl	800379e <UART_WaitOnFlagUntilTimeout>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e039      	b.n	80030ce <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d10b      	bne.n	8003078 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	881b      	ldrh	r3, [r3, #0]
 8003064:	461a      	mov	r2, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800306e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	3302      	adds	r3, #2
 8003074:	61bb      	str	r3, [r7, #24]
 8003076:	e007      	b.n	8003088 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	781a      	ldrb	r2, [r3, #0]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	3301      	adds	r3, #1
 8003086:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800308e:	b29b      	uxth	r3, r3
 8003090:	3b01      	subs	r3, #1
 8003092:	b29a      	uxth	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d1cc      	bne.n	8003040 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	9300      	str	r3, [sp, #0]
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	2200      	movs	r2, #0
 80030ae:	2140      	movs	r1, #64	@ 0x40
 80030b0:	68f8      	ldr	r0, [r7, #12]
 80030b2:	f000 fb74 	bl	800379e <UART_WaitOnFlagUntilTimeout>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d001      	beq.n	80030c0 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e006      	b.n	80030ce <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2220      	movs	r2, #32
 80030c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80030c8:	2300      	movs	r3, #0
 80030ca:	e000      	b.n	80030ce <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 80030cc:	2302      	movs	r3, #2
  }
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3720      	adds	r7, #32
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
	...

080030d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030dc:	b08c      	sub	sp, #48	@ 0x30
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80030e2:	2300      	movs	r3, #0
 80030e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	431a      	orrs	r2, r3
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	431a      	orrs	r2, r3
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	69db      	ldr	r3, [r3, #28]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	4b94      	ldr	r3, [pc, #592]	@ (8003358 <UART_SetConfig+0x280>)
 8003108:	4013      	ands	r3, r2
 800310a:	697a      	ldr	r2, [r7, #20]
 800310c:	6812      	ldr	r2, [r2, #0]
 800310e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003110:	430b      	orrs	r3, r1
 8003112:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	68da      	ldr	r2, [r3, #12]
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	430a      	orrs	r2, r1
 8003128:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a89      	ldr	r2, [pc, #548]	@ (800335c <UART_SetConfig+0x284>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d004      	beq.n	8003144 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	6a1b      	ldr	r3, [r3, #32]
 800313e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003140:	4313      	orrs	r3, r2
 8003142:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800314e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	6812      	ldr	r2, [r2, #0]
 8003156:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003158:	430b      	orrs	r3, r1
 800315a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003162:	f023 010f 	bic.w	r1, r3, #15
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	430a      	orrs	r2, r1
 8003170:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a7a      	ldr	r2, [pc, #488]	@ (8003360 <UART_SetConfig+0x288>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d127      	bne.n	80031cc <UART_SetConfig+0xf4>
 800317c:	2003      	movs	r0, #3
 800317e:	f7ff feb3 	bl	8002ee8 <LL_RCC_GetUSARTClockSource>
 8003182:	4603      	mov	r3, r0
 8003184:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8003188:	2b03      	cmp	r3, #3
 800318a:	d81b      	bhi.n	80031c4 <UART_SetConfig+0xec>
 800318c:	a201      	add	r2, pc, #4	@ (adr r2, 8003194 <UART_SetConfig+0xbc>)
 800318e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003192:	bf00      	nop
 8003194:	080031a5 	.word	0x080031a5
 8003198:	080031b5 	.word	0x080031b5
 800319c:	080031ad 	.word	0x080031ad
 80031a0:	080031bd 	.word	0x080031bd
 80031a4:	2301      	movs	r3, #1
 80031a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031aa:	e080      	b.n	80032ae <UART_SetConfig+0x1d6>
 80031ac:	2302      	movs	r3, #2
 80031ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031b2:	e07c      	b.n	80032ae <UART_SetConfig+0x1d6>
 80031b4:	2304      	movs	r3, #4
 80031b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031ba:	e078      	b.n	80032ae <UART_SetConfig+0x1d6>
 80031bc:	2308      	movs	r3, #8
 80031be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031c2:	e074      	b.n	80032ae <UART_SetConfig+0x1d6>
 80031c4:	2310      	movs	r3, #16
 80031c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031ca:	e070      	b.n	80032ae <UART_SetConfig+0x1d6>
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a64      	ldr	r2, [pc, #400]	@ (8003364 <UART_SetConfig+0x28c>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d138      	bne.n	8003248 <UART_SetConfig+0x170>
 80031d6:	200c      	movs	r0, #12
 80031d8:	f7ff fe86 	bl	8002ee8 <LL_RCC_GetUSARTClockSource>
 80031dc:	4603      	mov	r3, r0
 80031de:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 80031e2:	2b0c      	cmp	r3, #12
 80031e4:	d82c      	bhi.n	8003240 <UART_SetConfig+0x168>
 80031e6:	a201      	add	r2, pc, #4	@ (adr r2, 80031ec <UART_SetConfig+0x114>)
 80031e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ec:	08003221 	.word	0x08003221
 80031f0:	08003241 	.word	0x08003241
 80031f4:	08003241 	.word	0x08003241
 80031f8:	08003241 	.word	0x08003241
 80031fc:	08003231 	.word	0x08003231
 8003200:	08003241 	.word	0x08003241
 8003204:	08003241 	.word	0x08003241
 8003208:	08003241 	.word	0x08003241
 800320c:	08003229 	.word	0x08003229
 8003210:	08003241 	.word	0x08003241
 8003214:	08003241 	.word	0x08003241
 8003218:	08003241 	.word	0x08003241
 800321c:	08003239 	.word	0x08003239
 8003220:	2300      	movs	r3, #0
 8003222:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003226:	e042      	b.n	80032ae <UART_SetConfig+0x1d6>
 8003228:	2302      	movs	r3, #2
 800322a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800322e:	e03e      	b.n	80032ae <UART_SetConfig+0x1d6>
 8003230:	2304      	movs	r3, #4
 8003232:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003236:	e03a      	b.n	80032ae <UART_SetConfig+0x1d6>
 8003238:	2308      	movs	r3, #8
 800323a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800323e:	e036      	b.n	80032ae <UART_SetConfig+0x1d6>
 8003240:	2310      	movs	r3, #16
 8003242:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003246:	e032      	b.n	80032ae <UART_SetConfig+0x1d6>
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a43      	ldr	r2, [pc, #268]	@ (800335c <UART_SetConfig+0x284>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d12a      	bne.n	80032a8 <UART_SetConfig+0x1d0>
 8003252:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8003256:	f7ff fe59 	bl	8002f0c <LL_RCC_GetLPUARTClockSource>
 800325a:	4603      	mov	r3, r0
 800325c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003260:	d01a      	beq.n	8003298 <UART_SetConfig+0x1c0>
 8003262:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003266:	d81b      	bhi.n	80032a0 <UART_SetConfig+0x1c8>
 8003268:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800326c:	d00c      	beq.n	8003288 <UART_SetConfig+0x1b0>
 800326e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003272:	d815      	bhi.n	80032a0 <UART_SetConfig+0x1c8>
 8003274:	2b00      	cmp	r3, #0
 8003276:	d003      	beq.n	8003280 <UART_SetConfig+0x1a8>
 8003278:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800327c:	d008      	beq.n	8003290 <UART_SetConfig+0x1b8>
 800327e:	e00f      	b.n	80032a0 <UART_SetConfig+0x1c8>
 8003280:	2300      	movs	r3, #0
 8003282:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003286:	e012      	b.n	80032ae <UART_SetConfig+0x1d6>
 8003288:	2302      	movs	r3, #2
 800328a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800328e:	e00e      	b.n	80032ae <UART_SetConfig+0x1d6>
 8003290:	2304      	movs	r3, #4
 8003292:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003296:	e00a      	b.n	80032ae <UART_SetConfig+0x1d6>
 8003298:	2308      	movs	r3, #8
 800329a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800329e:	e006      	b.n	80032ae <UART_SetConfig+0x1d6>
 80032a0:	2310      	movs	r3, #16
 80032a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032a6:	e002      	b.n	80032ae <UART_SetConfig+0x1d6>
 80032a8:	2310      	movs	r3, #16
 80032aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a2a      	ldr	r2, [pc, #168]	@ (800335c <UART_SetConfig+0x284>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	f040 80a4 	bne.w	8003402 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80032ba:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80032be:	2b08      	cmp	r3, #8
 80032c0:	d823      	bhi.n	800330a <UART_SetConfig+0x232>
 80032c2:	a201      	add	r2, pc, #4	@ (adr r2, 80032c8 <UART_SetConfig+0x1f0>)
 80032c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c8:	080032ed 	.word	0x080032ed
 80032cc:	0800330b 	.word	0x0800330b
 80032d0:	080032f5 	.word	0x080032f5
 80032d4:	0800330b 	.word	0x0800330b
 80032d8:	080032fb 	.word	0x080032fb
 80032dc:	0800330b 	.word	0x0800330b
 80032e0:	0800330b 	.word	0x0800330b
 80032e4:	0800330b 	.word	0x0800330b
 80032e8:	08003303 	.word	0x08003303
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032ec:	f7ff fb18 	bl	8002920 <HAL_RCC_GetPCLK1Freq>
 80032f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80032f2:	e010      	b.n	8003316 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032f4:	4b1c      	ldr	r3, [pc, #112]	@ (8003368 <UART_SetConfig+0x290>)
 80032f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80032f8:	e00d      	b.n	8003316 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032fa:	f7ff fa5d 	bl	80027b8 <HAL_RCC_GetSysClockFreq>
 80032fe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003300:	e009      	b.n	8003316 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003302:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003306:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003308:	e005      	b.n	8003316 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800330a:	2300      	movs	r3, #0
 800330c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003314:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003318:	2b00      	cmp	r3, #0
 800331a:	f000 8137 	beq.w	800358c <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003322:	4a12      	ldr	r2, [pc, #72]	@ (800336c <UART_SetConfig+0x294>)
 8003324:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003328:	461a      	mov	r2, r3
 800332a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800332c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003330:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	685a      	ldr	r2, [r3, #4]
 8003336:	4613      	mov	r3, r2
 8003338:	005b      	lsls	r3, r3, #1
 800333a:	4413      	add	r3, r2
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	429a      	cmp	r2, r3
 8003340:	d305      	bcc.n	800334e <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	429a      	cmp	r2, r3
 800334c:	d910      	bls.n	8003370 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003354:	e11a      	b.n	800358c <UART_SetConfig+0x4b4>
 8003356:	bf00      	nop
 8003358:	cfff69f3 	.word	0xcfff69f3
 800335c:	40008000 	.word	0x40008000
 8003360:	40013800 	.word	0x40013800
 8003364:	40004400 	.word	0x40004400
 8003368:	00f42400 	.word	0x00f42400
 800336c:	08004cfc 	.word	0x08004cfc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003372:	2200      	movs	r2, #0
 8003374:	60bb      	str	r3, [r7, #8]
 8003376:	60fa      	str	r2, [r7, #12]
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800337c:	4a8e      	ldr	r2, [pc, #568]	@ (80035b8 <UART_SetConfig+0x4e0>)
 800337e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003382:	b29b      	uxth	r3, r3
 8003384:	2200      	movs	r2, #0
 8003386:	603b      	str	r3, [r7, #0]
 8003388:	607a      	str	r2, [r7, #4]
 800338a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800338e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003392:	f7fc ff45 	bl	8000220 <__aeabi_uldivmod>
 8003396:	4602      	mov	r2, r0
 8003398:	460b      	mov	r3, r1
 800339a:	4610      	mov	r0, r2
 800339c:	4619      	mov	r1, r3
 800339e:	f04f 0200 	mov.w	r2, #0
 80033a2:	f04f 0300 	mov.w	r3, #0
 80033a6:	020b      	lsls	r3, r1, #8
 80033a8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80033ac:	0202      	lsls	r2, r0, #8
 80033ae:	6979      	ldr	r1, [r7, #20]
 80033b0:	6849      	ldr	r1, [r1, #4]
 80033b2:	0849      	lsrs	r1, r1, #1
 80033b4:	2000      	movs	r0, #0
 80033b6:	460c      	mov	r4, r1
 80033b8:	4605      	mov	r5, r0
 80033ba:	eb12 0804 	adds.w	r8, r2, r4
 80033be:	eb43 0905 	adc.w	r9, r3, r5
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	469a      	mov	sl, r3
 80033ca:	4693      	mov	fp, r2
 80033cc:	4652      	mov	r2, sl
 80033ce:	465b      	mov	r3, fp
 80033d0:	4640      	mov	r0, r8
 80033d2:	4649      	mov	r1, r9
 80033d4:	f7fc ff24 	bl	8000220 <__aeabi_uldivmod>
 80033d8:	4602      	mov	r2, r0
 80033da:	460b      	mov	r3, r1
 80033dc:	4613      	mov	r3, r2
 80033de:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80033e0:	6a3b      	ldr	r3, [r7, #32]
 80033e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80033e6:	d308      	bcc.n	80033fa <UART_SetConfig+0x322>
 80033e8:	6a3b      	ldr	r3, [r7, #32]
 80033ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033ee:	d204      	bcs.n	80033fa <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	6a3a      	ldr	r2, [r7, #32]
 80033f6:	60da      	str	r2, [r3, #12]
 80033f8:	e0c8      	b.n	800358c <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003400:	e0c4      	b.n	800358c <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	69db      	ldr	r3, [r3, #28]
 8003406:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800340a:	d167      	bne.n	80034dc <UART_SetConfig+0x404>
  {
    switch (clocksource)
 800340c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003410:	2b08      	cmp	r3, #8
 8003412:	d828      	bhi.n	8003466 <UART_SetConfig+0x38e>
 8003414:	a201      	add	r2, pc, #4	@ (adr r2, 800341c <UART_SetConfig+0x344>)
 8003416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800341a:	bf00      	nop
 800341c:	08003441 	.word	0x08003441
 8003420:	08003449 	.word	0x08003449
 8003424:	08003451 	.word	0x08003451
 8003428:	08003467 	.word	0x08003467
 800342c:	08003457 	.word	0x08003457
 8003430:	08003467 	.word	0x08003467
 8003434:	08003467 	.word	0x08003467
 8003438:	08003467 	.word	0x08003467
 800343c:	0800345f 	.word	0x0800345f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003440:	f7ff fa6e 	bl	8002920 <HAL_RCC_GetPCLK1Freq>
 8003444:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003446:	e014      	b.n	8003472 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003448:	f7ff fa7c 	bl	8002944 <HAL_RCC_GetPCLK2Freq>
 800344c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800344e:	e010      	b.n	8003472 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003450:	4b5a      	ldr	r3, [pc, #360]	@ (80035bc <UART_SetConfig+0x4e4>)
 8003452:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003454:	e00d      	b.n	8003472 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003456:	f7ff f9af 	bl	80027b8 <HAL_RCC_GetSysClockFreq>
 800345a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800345c:	e009      	b.n	8003472 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800345e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003462:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003464:	e005      	b.n	8003472 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8003466:	2300      	movs	r3, #0
 8003468:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003470:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003474:	2b00      	cmp	r3, #0
 8003476:	f000 8089 	beq.w	800358c <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800347e:	4a4e      	ldr	r2, [pc, #312]	@ (80035b8 <UART_SetConfig+0x4e0>)
 8003480:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003484:	461a      	mov	r2, r3
 8003486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003488:	fbb3 f3f2 	udiv	r3, r3, r2
 800348c:	005a      	lsls	r2, r3, #1
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	085b      	lsrs	r3, r3, #1
 8003494:	441a      	add	r2, r3
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	fbb2 f3f3 	udiv	r3, r2, r3
 800349e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034a0:	6a3b      	ldr	r3, [r7, #32]
 80034a2:	2b0f      	cmp	r3, #15
 80034a4:	d916      	bls.n	80034d4 <UART_SetConfig+0x3fc>
 80034a6:	6a3b      	ldr	r3, [r7, #32]
 80034a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034ac:	d212      	bcs.n	80034d4 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034ae:	6a3b      	ldr	r3, [r7, #32]
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	f023 030f 	bic.w	r3, r3, #15
 80034b6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034b8:	6a3b      	ldr	r3, [r7, #32]
 80034ba:	085b      	lsrs	r3, r3, #1
 80034bc:	b29b      	uxth	r3, r3
 80034be:	f003 0307 	and.w	r3, r3, #7
 80034c2:	b29a      	uxth	r2, r3
 80034c4:	8bfb      	ldrh	r3, [r7, #30]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	8bfa      	ldrh	r2, [r7, #30]
 80034d0:	60da      	str	r2, [r3, #12]
 80034d2:	e05b      	b.n	800358c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80034da:	e057      	b.n	800358c <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80034dc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80034e0:	2b08      	cmp	r3, #8
 80034e2:	d828      	bhi.n	8003536 <UART_SetConfig+0x45e>
 80034e4:	a201      	add	r2, pc, #4	@ (adr r2, 80034ec <UART_SetConfig+0x414>)
 80034e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ea:	bf00      	nop
 80034ec:	08003511 	.word	0x08003511
 80034f0:	08003519 	.word	0x08003519
 80034f4:	08003521 	.word	0x08003521
 80034f8:	08003537 	.word	0x08003537
 80034fc:	08003527 	.word	0x08003527
 8003500:	08003537 	.word	0x08003537
 8003504:	08003537 	.word	0x08003537
 8003508:	08003537 	.word	0x08003537
 800350c:	0800352f 	.word	0x0800352f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003510:	f7ff fa06 	bl	8002920 <HAL_RCC_GetPCLK1Freq>
 8003514:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003516:	e014      	b.n	8003542 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003518:	f7ff fa14 	bl	8002944 <HAL_RCC_GetPCLK2Freq>
 800351c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800351e:	e010      	b.n	8003542 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003520:	4b26      	ldr	r3, [pc, #152]	@ (80035bc <UART_SetConfig+0x4e4>)
 8003522:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003524:	e00d      	b.n	8003542 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003526:	f7ff f947 	bl	80027b8 <HAL_RCC_GetSysClockFreq>
 800352a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800352c:	e009      	b.n	8003542 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800352e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003532:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003534:	e005      	b.n	8003542 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8003536:	2300      	movs	r3, #0
 8003538:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003540:	bf00      	nop
    }

    if (pclk != 0U)
 8003542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003544:	2b00      	cmp	r3, #0
 8003546:	d021      	beq.n	800358c <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800354c:	4a1a      	ldr	r2, [pc, #104]	@ (80035b8 <UART_SetConfig+0x4e0>)
 800354e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003552:	461a      	mov	r2, r3
 8003554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003556:	fbb3 f2f2 	udiv	r2, r3, r2
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	085b      	lsrs	r3, r3, #1
 8003560:	441a      	add	r2, r3
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	fbb2 f3f3 	udiv	r3, r2, r3
 800356a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800356c:	6a3b      	ldr	r3, [r7, #32]
 800356e:	2b0f      	cmp	r3, #15
 8003570:	d909      	bls.n	8003586 <UART_SetConfig+0x4ae>
 8003572:	6a3b      	ldr	r3, [r7, #32]
 8003574:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003578:	d205      	bcs.n	8003586 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800357a:	6a3b      	ldr	r3, [r7, #32]
 800357c:	b29a      	uxth	r2, r3
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	60da      	str	r2, [r3, #12]
 8003584:	e002      	b.n	800358c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	2201      	movs	r2, #1
 8003590:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	2201      	movs	r2, #1
 8003598:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	2200      	movs	r2, #0
 80035a0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	2200      	movs	r2, #0
 80035a6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80035a8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3730      	adds	r7, #48	@ 0x30
 80035b0:	46bd      	mov	sp, r7
 80035b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035b6:	bf00      	nop
 80035b8:	08004cfc 	.word	0x08004cfc
 80035bc:	00f42400 	.word	0x00f42400

080035c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035cc:	f003 0308 	and.w	r3, r3, #8
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00a      	beq.n	80035ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	430a      	orrs	r2, r1
 80035e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00a      	beq.n	800360c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	430a      	orrs	r2, r1
 800360a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003610:	f003 0302 	and.w	r3, r3, #2
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00a      	beq.n	800362e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	430a      	orrs	r2, r1
 800362c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003632:	f003 0304 	and.w	r3, r3, #4
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00a      	beq.n	8003650 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	430a      	orrs	r2, r1
 800364e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003654:	f003 0310 	and.w	r3, r3, #16
 8003658:	2b00      	cmp	r3, #0
 800365a:	d00a      	beq.n	8003672 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	430a      	orrs	r2, r1
 8003670:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003676:	f003 0320 	and.w	r3, r3, #32
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00a      	beq.n	8003694 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	430a      	orrs	r2, r1
 8003692:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003698:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800369c:	2b00      	cmp	r3, #0
 800369e:	d01a      	beq.n	80036d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	430a      	orrs	r2, r1
 80036b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80036be:	d10a      	bne.n	80036d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	430a      	orrs	r2, r1
 80036d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00a      	beq.n	80036f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	430a      	orrs	r2, r1
 80036f6:	605a      	str	r2, [r3, #4]
  }
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bc80      	pop	{r7}
 8003700:	4770      	bx	lr

08003702 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b086      	sub	sp, #24
 8003706:	af02      	add	r7, sp, #8
 8003708:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003712:	f7fd fd35 	bl	8001180 <HAL_GetTick>
 8003716:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0308 	and.w	r3, r3, #8
 8003722:	2b08      	cmp	r3, #8
 8003724:	d10e      	bne.n	8003744 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003726:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800372a:	9300      	str	r3, [sp, #0]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 f832 	bl	800379e <UART_WaitOnFlagUntilTimeout>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d001      	beq.n	8003744 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e028      	b.n	8003796 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0304 	and.w	r3, r3, #4
 800374e:	2b04      	cmp	r3, #4
 8003750:	d10e      	bne.n	8003770 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003752:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003756:	9300      	str	r3, [sp, #0]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2200      	movs	r2, #0
 800375c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f000 f81c 	bl	800379e <UART_WaitOnFlagUntilTimeout>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d001      	beq.n	8003770 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e012      	b.n	8003796 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2220      	movs	r2, #32
 8003774:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2220      	movs	r2, #32
 800377c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800379e:	b580      	push	{r7, lr}
 80037a0:	b09c      	sub	sp, #112	@ 0x70
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	60f8      	str	r0, [r7, #12]
 80037a6:	60b9      	str	r1, [r7, #8]
 80037a8:	603b      	str	r3, [r7, #0]
 80037aa:	4613      	mov	r3, r2
 80037ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037ae:	e0af      	b.n	8003910 <UART_WaitOnFlagUntilTimeout+0x172>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80037b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b6:	f000 80ab 	beq.w	8003910 <UART_WaitOnFlagUntilTimeout+0x172>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ba:	f7fd fce1 	bl	8001180 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d302      	bcc.n	80037d0 <UART_WaitOnFlagUntilTimeout+0x32>
 80037ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d140      	bne.n	8003852 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037d8:	e853 3f00 	ldrex	r3, [r3]
 80037dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80037de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037e0:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80037e4:	667b      	str	r3, [r7, #100]	@ 0x64
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	461a      	mov	r2, r3
 80037ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80037ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80037f0:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80037f4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80037f6:	e841 2300 	strex	r3, r2, [r1]
 80037fa:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80037fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1e6      	bne.n	80037d0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	3308      	adds	r3, #8
 8003808:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800380a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800380c:	e853 3f00 	ldrex	r3, [r3]
 8003810:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003814:	f023 0301 	bic.w	r3, r3, #1
 8003818:	663b      	str	r3, [r7, #96]	@ 0x60
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	3308      	adds	r3, #8
 8003820:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003822:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003824:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003826:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003828:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800382a:	e841 2300 	strex	r3, r2, [r1]
 800382e:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003830:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003832:	2b00      	cmp	r3, #0
 8003834:	d1e5      	bne.n	8003802 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2220      	movs	r2, #32
 800383a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2220      	movs	r2, #32
 8003842:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e06f      	b.n	8003932 <UART_WaitOnFlagUntilTimeout+0x194>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0304 	and.w	r3, r3, #4
 800385c:	2b00      	cmp	r3, #0
 800385e:	d057      	beq.n	8003910 <UART_WaitOnFlagUntilTimeout+0x172>
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	2b80      	cmp	r3, #128	@ 0x80
 8003864:	d054      	beq.n	8003910 <UART_WaitOnFlagUntilTimeout+0x172>
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	2b40      	cmp	r3, #64	@ 0x40
 800386a:	d051      	beq.n	8003910 <UART_WaitOnFlagUntilTimeout+0x172>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	69db      	ldr	r3, [r3, #28]
 8003872:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003876:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800387a:	d149      	bne.n	8003910 <UART_WaitOnFlagUntilTimeout+0x172>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003884:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800388c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800388e:	e853 3f00 	ldrex	r3, [r3]
 8003892:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003896:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800389a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	461a      	mov	r2, r3
 80038a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80038a6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80038aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80038ac:	e841 2300 	strex	r3, r2, [r1]
 80038b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80038b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d1e6      	bne.n	8003886 <UART_WaitOnFlagUntilTimeout+0xe8>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	3308      	adds	r3, #8
 80038be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	e853 3f00 	ldrex	r3, [r3]
 80038c6:	613b      	str	r3, [r7, #16]
   return(result);
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	f023 0301 	bic.w	r3, r3, #1
 80038ce:	66bb      	str	r3, [r7, #104]	@ 0x68
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	3308      	adds	r3, #8
 80038d6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80038d8:	623a      	str	r2, [r7, #32]
 80038da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038dc:	69f9      	ldr	r1, [r7, #28]
 80038de:	6a3a      	ldr	r2, [r7, #32]
 80038e0:	e841 2300 	strex	r3, r2, [r1]
 80038e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d1e5      	bne.n	80038b8 <UART_WaitOnFlagUntilTimeout+0x11a>

          huart->gState = HAL_UART_STATE_READY;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2220      	movs	r2, #32
 80038f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2220      	movs	r2, #32
 80038f8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2220      	movs	r2, #32
 8003900:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e010      	b.n	8003932 <UART_WaitOnFlagUntilTimeout+0x194>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	69da      	ldr	r2, [r3, #28]
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	4013      	ands	r3, r2
 800391a:	68ba      	ldr	r2, [r7, #8]
 800391c:	429a      	cmp	r2, r3
 800391e:	bf0c      	ite	eq
 8003920:	2301      	moveq	r3, #1
 8003922:	2300      	movne	r3, #0
 8003924:	b2db      	uxtb	r3, r3
 8003926:	461a      	mov	r2, r3
 8003928:	79fb      	ldrb	r3, [r7, #7]
 800392a:	429a      	cmp	r2, r3
 800392c:	f43f af40 	beq.w	80037b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3770      	adds	r7, #112	@ 0x70
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}

0800393a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800393a:	b480      	push	{r7}
 800393c:	b085      	sub	sp, #20
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003948:	2b01      	cmp	r3, #1
 800394a:	d101      	bne.n	8003950 <HAL_UARTEx_DisableFifoMode+0x16>
 800394c:	2302      	movs	r3, #2
 800394e:	e027      	b.n	80039a0 <HAL_UARTEx_DisableFifoMode+0x66>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2224      	movs	r2, #36	@ 0x24
 800395c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f022 0201 	bic.w	r2, r2, #1
 8003976:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800397e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2220      	movs	r2, #32
 8003992:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3714      	adds	r7, #20
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bc80      	pop	{r7}
 80039a8:	4770      	bx	lr

080039aa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b084      	sub	sp, #16
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
 80039b2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d101      	bne.n	80039c2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80039be:	2302      	movs	r3, #2
 80039c0:	e02d      	b.n	8003a1e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2201      	movs	r2, #1
 80039c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2224      	movs	r2, #36	@ 0x24
 80039ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f022 0201 	bic.w	r2, r2, #1
 80039e8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	683a      	ldr	r2, [r7, #0]
 80039fa:	430a      	orrs	r2, r1
 80039fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 f850 	bl	8003aa4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2220      	movs	r2, #32
 8003a10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3710      	adds	r7, #16
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003a26:	b580      	push	{r7, lr}
 8003a28:	b084      	sub	sp, #16
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
 8003a2e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d101      	bne.n	8003a3e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	e02d      	b.n	8003a9a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2224      	movs	r2, #36	@ 0x24
 8003a4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f022 0201 	bic.w	r2, r2, #1
 8003a64:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	683a      	ldr	r2, [r7, #0]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 f812 	bl	8003aa4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68fa      	ldr	r2, [r7, #12]
 8003a86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2220      	movs	r2, #32
 8003a8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3710      	adds	r7, #16
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
	...

08003aa4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b085      	sub	sp, #20
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d108      	bne.n	8003ac6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003ac4:	e031      	b.n	8003b2a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003ac6:	2308      	movs	r3, #8
 8003ac8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003aca:	2308      	movs	r3, #8
 8003acc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	0e5b      	lsrs	r3, r3, #25
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	f003 0307 	and.w	r3, r3, #7
 8003adc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	0f5b      	lsrs	r3, r3, #29
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	f003 0307 	and.w	r3, r3, #7
 8003aec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003aee:	7bbb      	ldrb	r3, [r7, #14]
 8003af0:	7b3a      	ldrb	r2, [r7, #12]
 8003af2:	4910      	ldr	r1, [pc, #64]	@ (8003b34 <UARTEx_SetNbDataToProcess+0x90>)
 8003af4:	5c8a      	ldrb	r2, [r1, r2]
 8003af6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003afa:	7b3a      	ldrb	r2, [r7, #12]
 8003afc:	490e      	ldr	r1, [pc, #56]	@ (8003b38 <UARTEx_SetNbDataToProcess+0x94>)
 8003afe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003b00:	fb93 f3f2 	sdiv	r3, r3, r2
 8003b04:	b29a      	uxth	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003b0c:	7bfb      	ldrb	r3, [r7, #15]
 8003b0e:	7b7a      	ldrb	r2, [r7, #13]
 8003b10:	4908      	ldr	r1, [pc, #32]	@ (8003b34 <UARTEx_SetNbDataToProcess+0x90>)
 8003b12:	5c8a      	ldrb	r2, [r1, r2]
 8003b14:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003b18:	7b7a      	ldrb	r2, [r7, #13]
 8003b1a:	4907      	ldr	r1, [pc, #28]	@ (8003b38 <UARTEx_SetNbDataToProcess+0x94>)
 8003b1c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003b1e:	fb93 f3f2 	sdiv	r3, r3, r2
 8003b22:	b29a      	uxth	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8003b2a:	bf00      	nop
 8003b2c:	3714      	adds	r7, #20
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bc80      	pop	{r7}
 8003b32:	4770      	bx	lr
 8003b34:	08004d14 	.word	0x08004d14
 8003b38:	08004d1c 	.word	0x08004d1c

08003b3c <std>:
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	b510      	push	{r4, lr}
 8003b40:	4604      	mov	r4, r0
 8003b42:	e9c0 3300 	strd	r3, r3, [r0]
 8003b46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003b4a:	6083      	str	r3, [r0, #8]
 8003b4c:	8181      	strh	r1, [r0, #12]
 8003b4e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003b50:	81c2      	strh	r2, [r0, #14]
 8003b52:	6183      	str	r3, [r0, #24]
 8003b54:	4619      	mov	r1, r3
 8003b56:	2208      	movs	r2, #8
 8003b58:	305c      	adds	r0, #92	@ 0x5c
 8003b5a:	f000 f9f9 	bl	8003f50 <memset>
 8003b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8003b94 <std+0x58>)
 8003b60:	6263      	str	r3, [r4, #36]	@ 0x24
 8003b62:	4b0d      	ldr	r3, [pc, #52]	@ (8003b98 <std+0x5c>)
 8003b64:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003b66:	4b0d      	ldr	r3, [pc, #52]	@ (8003b9c <std+0x60>)
 8003b68:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ba0 <std+0x64>)
 8003b6c:	6323      	str	r3, [r4, #48]	@ 0x30
 8003b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ba4 <std+0x68>)
 8003b70:	6224      	str	r4, [r4, #32]
 8003b72:	429c      	cmp	r4, r3
 8003b74:	d006      	beq.n	8003b84 <std+0x48>
 8003b76:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003b7a:	4294      	cmp	r4, r2
 8003b7c:	d002      	beq.n	8003b84 <std+0x48>
 8003b7e:	33d0      	adds	r3, #208	@ 0xd0
 8003b80:	429c      	cmp	r4, r3
 8003b82:	d105      	bne.n	8003b90 <std+0x54>
 8003b84:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b8c:	f000 ba58 	b.w	8004040 <__retarget_lock_init_recursive>
 8003b90:	bd10      	pop	{r4, pc}
 8003b92:	bf00      	nop
 8003b94:	08003da1 	.word	0x08003da1
 8003b98:	08003dc3 	.word	0x08003dc3
 8003b9c:	08003dfb 	.word	0x08003dfb
 8003ba0:	08003e1f 	.word	0x08003e1f
 8003ba4:	20000124 	.word	0x20000124

08003ba8 <stdio_exit_handler>:
 8003ba8:	4a02      	ldr	r2, [pc, #8]	@ (8003bb4 <stdio_exit_handler+0xc>)
 8003baa:	4903      	ldr	r1, [pc, #12]	@ (8003bb8 <stdio_exit_handler+0x10>)
 8003bac:	4803      	ldr	r0, [pc, #12]	@ (8003bbc <stdio_exit_handler+0x14>)
 8003bae:	f000 b869 	b.w	8003c84 <_fwalk_sglue>
 8003bb2:	bf00      	nop
 8003bb4:	2000000c 	.word	0x2000000c
 8003bb8:	080048d1 	.word	0x080048d1
 8003bbc:	2000001c 	.word	0x2000001c

08003bc0 <cleanup_stdio>:
 8003bc0:	6841      	ldr	r1, [r0, #4]
 8003bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8003bf4 <cleanup_stdio+0x34>)
 8003bc4:	4299      	cmp	r1, r3
 8003bc6:	b510      	push	{r4, lr}
 8003bc8:	4604      	mov	r4, r0
 8003bca:	d001      	beq.n	8003bd0 <cleanup_stdio+0x10>
 8003bcc:	f000 fe80 	bl	80048d0 <_fflush_r>
 8003bd0:	68a1      	ldr	r1, [r4, #8]
 8003bd2:	4b09      	ldr	r3, [pc, #36]	@ (8003bf8 <cleanup_stdio+0x38>)
 8003bd4:	4299      	cmp	r1, r3
 8003bd6:	d002      	beq.n	8003bde <cleanup_stdio+0x1e>
 8003bd8:	4620      	mov	r0, r4
 8003bda:	f000 fe79 	bl	80048d0 <_fflush_r>
 8003bde:	68e1      	ldr	r1, [r4, #12]
 8003be0:	4b06      	ldr	r3, [pc, #24]	@ (8003bfc <cleanup_stdio+0x3c>)
 8003be2:	4299      	cmp	r1, r3
 8003be4:	d004      	beq.n	8003bf0 <cleanup_stdio+0x30>
 8003be6:	4620      	mov	r0, r4
 8003be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bec:	f000 be70 	b.w	80048d0 <_fflush_r>
 8003bf0:	bd10      	pop	{r4, pc}
 8003bf2:	bf00      	nop
 8003bf4:	20000124 	.word	0x20000124
 8003bf8:	2000018c 	.word	0x2000018c
 8003bfc:	200001f4 	.word	0x200001f4

08003c00 <global_stdio_init.part.0>:
 8003c00:	b510      	push	{r4, lr}
 8003c02:	4b0b      	ldr	r3, [pc, #44]	@ (8003c30 <global_stdio_init.part.0+0x30>)
 8003c04:	4c0b      	ldr	r4, [pc, #44]	@ (8003c34 <global_stdio_init.part.0+0x34>)
 8003c06:	4a0c      	ldr	r2, [pc, #48]	@ (8003c38 <global_stdio_init.part.0+0x38>)
 8003c08:	601a      	str	r2, [r3, #0]
 8003c0a:	4620      	mov	r0, r4
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	2104      	movs	r1, #4
 8003c10:	f7ff ff94 	bl	8003b3c <std>
 8003c14:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003c18:	2201      	movs	r2, #1
 8003c1a:	2109      	movs	r1, #9
 8003c1c:	f7ff ff8e 	bl	8003b3c <std>
 8003c20:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003c24:	2202      	movs	r2, #2
 8003c26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c2a:	2112      	movs	r1, #18
 8003c2c:	f7ff bf86 	b.w	8003b3c <std>
 8003c30:	2000025c 	.word	0x2000025c
 8003c34:	20000124 	.word	0x20000124
 8003c38:	08003ba9 	.word	0x08003ba9

08003c3c <__sfp_lock_acquire>:
 8003c3c:	4801      	ldr	r0, [pc, #4]	@ (8003c44 <__sfp_lock_acquire+0x8>)
 8003c3e:	f000 ba00 	b.w	8004042 <__retarget_lock_acquire_recursive>
 8003c42:	bf00      	nop
 8003c44:	20000265 	.word	0x20000265

08003c48 <__sfp_lock_release>:
 8003c48:	4801      	ldr	r0, [pc, #4]	@ (8003c50 <__sfp_lock_release+0x8>)
 8003c4a:	f000 b9fb 	b.w	8004044 <__retarget_lock_release_recursive>
 8003c4e:	bf00      	nop
 8003c50:	20000265 	.word	0x20000265

08003c54 <__sinit>:
 8003c54:	b510      	push	{r4, lr}
 8003c56:	4604      	mov	r4, r0
 8003c58:	f7ff fff0 	bl	8003c3c <__sfp_lock_acquire>
 8003c5c:	6a23      	ldr	r3, [r4, #32]
 8003c5e:	b11b      	cbz	r3, 8003c68 <__sinit+0x14>
 8003c60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c64:	f7ff bff0 	b.w	8003c48 <__sfp_lock_release>
 8003c68:	4b04      	ldr	r3, [pc, #16]	@ (8003c7c <__sinit+0x28>)
 8003c6a:	6223      	str	r3, [r4, #32]
 8003c6c:	4b04      	ldr	r3, [pc, #16]	@ (8003c80 <__sinit+0x2c>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d1f5      	bne.n	8003c60 <__sinit+0xc>
 8003c74:	f7ff ffc4 	bl	8003c00 <global_stdio_init.part.0>
 8003c78:	e7f2      	b.n	8003c60 <__sinit+0xc>
 8003c7a:	bf00      	nop
 8003c7c:	08003bc1 	.word	0x08003bc1
 8003c80:	2000025c 	.word	0x2000025c

08003c84 <_fwalk_sglue>:
 8003c84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c88:	4607      	mov	r7, r0
 8003c8a:	4688      	mov	r8, r1
 8003c8c:	4614      	mov	r4, r2
 8003c8e:	2600      	movs	r6, #0
 8003c90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003c94:	f1b9 0901 	subs.w	r9, r9, #1
 8003c98:	d505      	bpl.n	8003ca6 <_fwalk_sglue+0x22>
 8003c9a:	6824      	ldr	r4, [r4, #0]
 8003c9c:	2c00      	cmp	r4, #0
 8003c9e:	d1f7      	bne.n	8003c90 <_fwalk_sglue+0xc>
 8003ca0:	4630      	mov	r0, r6
 8003ca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ca6:	89ab      	ldrh	r3, [r5, #12]
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d907      	bls.n	8003cbc <_fwalk_sglue+0x38>
 8003cac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	d003      	beq.n	8003cbc <_fwalk_sglue+0x38>
 8003cb4:	4629      	mov	r1, r5
 8003cb6:	4638      	mov	r0, r7
 8003cb8:	47c0      	blx	r8
 8003cba:	4306      	orrs	r6, r0
 8003cbc:	3568      	adds	r5, #104	@ 0x68
 8003cbe:	e7e9      	b.n	8003c94 <_fwalk_sglue+0x10>

08003cc0 <iprintf>:
 8003cc0:	b40f      	push	{r0, r1, r2, r3}
 8003cc2:	b507      	push	{r0, r1, r2, lr}
 8003cc4:	4906      	ldr	r1, [pc, #24]	@ (8003ce0 <iprintf+0x20>)
 8003cc6:	ab04      	add	r3, sp, #16
 8003cc8:	6808      	ldr	r0, [r1, #0]
 8003cca:	f853 2b04 	ldr.w	r2, [r3], #4
 8003cce:	6881      	ldr	r1, [r0, #8]
 8003cd0:	9301      	str	r3, [sp, #4]
 8003cd2:	f000 fad9 	bl	8004288 <_vfiprintf_r>
 8003cd6:	b003      	add	sp, #12
 8003cd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003cdc:	b004      	add	sp, #16
 8003cde:	4770      	bx	lr
 8003ce0:	20000018 	.word	0x20000018

08003ce4 <_puts_r>:
 8003ce4:	6a03      	ldr	r3, [r0, #32]
 8003ce6:	b570      	push	{r4, r5, r6, lr}
 8003ce8:	6884      	ldr	r4, [r0, #8]
 8003cea:	4605      	mov	r5, r0
 8003cec:	460e      	mov	r6, r1
 8003cee:	b90b      	cbnz	r3, 8003cf4 <_puts_r+0x10>
 8003cf0:	f7ff ffb0 	bl	8003c54 <__sinit>
 8003cf4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003cf6:	07db      	lsls	r3, r3, #31
 8003cf8:	d405      	bmi.n	8003d06 <_puts_r+0x22>
 8003cfa:	89a3      	ldrh	r3, [r4, #12]
 8003cfc:	0598      	lsls	r0, r3, #22
 8003cfe:	d402      	bmi.n	8003d06 <_puts_r+0x22>
 8003d00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003d02:	f000 f99e 	bl	8004042 <__retarget_lock_acquire_recursive>
 8003d06:	89a3      	ldrh	r3, [r4, #12]
 8003d08:	0719      	lsls	r1, r3, #28
 8003d0a:	d502      	bpl.n	8003d12 <_puts_r+0x2e>
 8003d0c:	6923      	ldr	r3, [r4, #16]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d135      	bne.n	8003d7e <_puts_r+0x9a>
 8003d12:	4621      	mov	r1, r4
 8003d14:	4628      	mov	r0, r5
 8003d16:	f000 f8c5 	bl	8003ea4 <__swsetup_r>
 8003d1a:	b380      	cbz	r0, 8003d7e <_puts_r+0x9a>
 8003d1c:	f04f 35ff 	mov.w	r5, #4294967295
 8003d20:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003d22:	07da      	lsls	r2, r3, #31
 8003d24:	d405      	bmi.n	8003d32 <_puts_r+0x4e>
 8003d26:	89a3      	ldrh	r3, [r4, #12]
 8003d28:	059b      	lsls	r3, r3, #22
 8003d2a:	d402      	bmi.n	8003d32 <_puts_r+0x4e>
 8003d2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003d2e:	f000 f989 	bl	8004044 <__retarget_lock_release_recursive>
 8003d32:	4628      	mov	r0, r5
 8003d34:	bd70      	pop	{r4, r5, r6, pc}
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	da04      	bge.n	8003d44 <_puts_r+0x60>
 8003d3a:	69a2      	ldr	r2, [r4, #24]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	dc17      	bgt.n	8003d70 <_puts_r+0x8c>
 8003d40:	290a      	cmp	r1, #10
 8003d42:	d015      	beq.n	8003d70 <_puts_r+0x8c>
 8003d44:	6823      	ldr	r3, [r4, #0]
 8003d46:	1c5a      	adds	r2, r3, #1
 8003d48:	6022      	str	r2, [r4, #0]
 8003d4a:	7019      	strb	r1, [r3, #0]
 8003d4c:	68a3      	ldr	r3, [r4, #8]
 8003d4e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003d52:	3b01      	subs	r3, #1
 8003d54:	60a3      	str	r3, [r4, #8]
 8003d56:	2900      	cmp	r1, #0
 8003d58:	d1ed      	bne.n	8003d36 <_puts_r+0x52>
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	da11      	bge.n	8003d82 <_puts_r+0x9e>
 8003d5e:	4622      	mov	r2, r4
 8003d60:	210a      	movs	r1, #10
 8003d62:	4628      	mov	r0, r5
 8003d64:	f000 f85f 	bl	8003e26 <__swbuf_r>
 8003d68:	3001      	adds	r0, #1
 8003d6a:	d0d7      	beq.n	8003d1c <_puts_r+0x38>
 8003d6c:	250a      	movs	r5, #10
 8003d6e:	e7d7      	b.n	8003d20 <_puts_r+0x3c>
 8003d70:	4622      	mov	r2, r4
 8003d72:	4628      	mov	r0, r5
 8003d74:	f000 f857 	bl	8003e26 <__swbuf_r>
 8003d78:	3001      	adds	r0, #1
 8003d7a:	d1e7      	bne.n	8003d4c <_puts_r+0x68>
 8003d7c:	e7ce      	b.n	8003d1c <_puts_r+0x38>
 8003d7e:	3e01      	subs	r6, #1
 8003d80:	e7e4      	b.n	8003d4c <_puts_r+0x68>
 8003d82:	6823      	ldr	r3, [r4, #0]
 8003d84:	1c5a      	adds	r2, r3, #1
 8003d86:	6022      	str	r2, [r4, #0]
 8003d88:	220a      	movs	r2, #10
 8003d8a:	701a      	strb	r2, [r3, #0]
 8003d8c:	e7ee      	b.n	8003d6c <_puts_r+0x88>
	...

08003d90 <puts>:
 8003d90:	4b02      	ldr	r3, [pc, #8]	@ (8003d9c <puts+0xc>)
 8003d92:	4601      	mov	r1, r0
 8003d94:	6818      	ldr	r0, [r3, #0]
 8003d96:	f7ff bfa5 	b.w	8003ce4 <_puts_r>
 8003d9a:	bf00      	nop
 8003d9c:	20000018 	.word	0x20000018

08003da0 <__sread>:
 8003da0:	b510      	push	{r4, lr}
 8003da2:	460c      	mov	r4, r1
 8003da4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003da8:	f000 f8fc 	bl	8003fa4 <_read_r>
 8003dac:	2800      	cmp	r0, #0
 8003dae:	bfab      	itete	ge
 8003db0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003db2:	89a3      	ldrhlt	r3, [r4, #12]
 8003db4:	181b      	addge	r3, r3, r0
 8003db6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003dba:	bfac      	ite	ge
 8003dbc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003dbe:	81a3      	strhlt	r3, [r4, #12]
 8003dc0:	bd10      	pop	{r4, pc}

08003dc2 <__swrite>:
 8003dc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dc6:	461f      	mov	r7, r3
 8003dc8:	898b      	ldrh	r3, [r1, #12]
 8003dca:	05db      	lsls	r3, r3, #23
 8003dcc:	4605      	mov	r5, r0
 8003dce:	460c      	mov	r4, r1
 8003dd0:	4616      	mov	r6, r2
 8003dd2:	d505      	bpl.n	8003de0 <__swrite+0x1e>
 8003dd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dd8:	2302      	movs	r3, #2
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f000 f8d0 	bl	8003f80 <_lseek_r>
 8003de0:	89a3      	ldrh	r3, [r4, #12]
 8003de2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003de6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003dea:	81a3      	strh	r3, [r4, #12]
 8003dec:	4632      	mov	r2, r6
 8003dee:	463b      	mov	r3, r7
 8003df0:	4628      	mov	r0, r5
 8003df2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003df6:	f000 b8e7 	b.w	8003fc8 <_write_r>

08003dfa <__sseek>:
 8003dfa:	b510      	push	{r4, lr}
 8003dfc:	460c      	mov	r4, r1
 8003dfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e02:	f000 f8bd 	bl	8003f80 <_lseek_r>
 8003e06:	1c43      	adds	r3, r0, #1
 8003e08:	89a3      	ldrh	r3, [r4, #12]
 8003e0a:	bf15      	itete	ne
 8003e0c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003e0e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003e12:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003e16:	81a3      	strheq	r3, [r4, #12]
 8003e18:	bf18      	it	ne
 8003e1a:	81a3      	strhne	r3, [r4, #12]
 8003e1c:	bd10      	pop	{r4, pc}

08003e1e <__sclose>:
 8003e1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e22:	f000 b89d 	b.w	8003f60 <_close_r>

08003e26 <__swbuf_r>:
 8003e26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e28:	460e      	mov	r6, r1
 8003e2a:	4614      	mov	r4, r2
 8003e2c:	4605      	mov	r5, r0
 8003e2e:	b118      	cbz	r0, 8003e38 <__swbuf_r+0x12>
 8003e30:	6a03      	ldr	r3, [r0, #32]
 8003e32:	b90b      	cbnz	r3, 8003e38 <__swbuf_r+0x12>
 8003e34:	f7ff ff0e 	bl	8003c54 <__sinit>
 8003e38:	69a3      	ldr	r3, [r4, #24]
 8003e3a:	60a3      	str	r3, [r4, #8]
 8003e3c:	89a3      	ldrh	r3, [r4, #12]
 8003e3e:	071a      	lsls	r2, r3, #28
 8003e40:	d501      	bpl.n	8003e46 <__swbuf_r+0x20>
 8003e42:	6923      	ldr	r3, [r4, #16]
 8003e44:	b943      	cbnz	r3, 8003e58 <__swbuf_r+0x32>
 8003e46:	4621      	mov	r1, r4
 8003e48:	4628      	mov	r0, r5
 8003e4a:	f000 f82b 	bl	8003ea4 <__swsetup_r>
 8003e4e:	b118      	cbz	r0, 8003e58 <__swbuf_r+0x32>
 8003e50:	f04f 37ff 	mov.w	r7, #4294967295
 8003e54:	4638      	mov	r0, r7
 8003e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e58:	6823      	ldr	r3, [r4, #0]
 8003e5a:	6922      	ldr	r2, [r4, #16]
 8003e5c:	1a98      	subs	r0, r3, r2
 8003e5e:	6963      	ldr	r3, [r4, #20]
 8003e60:	b2f6      	uxtb	r6, r6
 8003e62:	4283      	cmp	r3, r0
 8003e64:	4637      	mov	r7, r6
 8003e66:	dc05      	bgt.n	8003e74 <__swbuf_r+0x4e>
 8003e68:	4621      	mov	r1, r4
 8003e6a:	4628      	mov	r0, r5
 8003e6c:	f000 fd30 	bl	80048d0 <_fflush_r>
 8003e70:	2800      	cmp	r0, #0
 8003e72:	d1ed      	bne.n	8003e50 <__swbuf_r+0x2a>
 8003e74:	68a3      	ldr	r3, [r4, #8]
 8003e76:	3b01      	subs	r3, #1
 8003e78:	60a3      	str	r3, [r4, #8]
 8003e7a:	6823      	ldr	r3, [r4, #0]
 8003e7c:	1c5a      	adds	r2, r3, #1
 8003e7e:	6022      	str	r2, [r4, #0]
 8003e80:	701e      	strb	r6, [r3, #0]
 8003e82:	6962      	ldr	r2, [r4, #20]
 8003e84:	1c43      	adds	r3, r0, #1
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d004      	beq.n	8003e94 <__swbuf_r+0x6e>
 8003e8a:	89a3      	ldrh	r3, [r4, #12]
 8003e8c:	07db      	lsls	r3, r3, #31
 8003e8e:	d5e1      	bpl.n	8003e54 <__swbuf_r+0x2e>
 8003e90:	2e0a      	cmp	r6, #10
 8003e92:	d1df      	bne.n	8003e54 <__swbuf_r+0x2e>
 8003e94:	4621      	mov	r1, r4
 8003e96:	4628      	mov	r0, r5
 8003e98:	f000 fd1a 	bl	80048d0 <_fflush_r>
 8003e9c:	2800      	cmp	r0, #0
 8003e9e:	d0d9      	beq.n	8003e54 <__swbuf_r+0x2e>
 8003ea0:	e7d6      	b.n	8003e50 <__swbuf_r+0x2a>
	...

08003ea4 <__swsetup_r>:
 8003ea4:	b538      	push	{r3, r4, r5, lr}
 8003ea6:	4b29      	ldr	r3, [pc, #164]	@ (8003f4c <__swsetup_r+0xa8>)
 8003ea8:	4605      	mov	r5, r0
 8003eaa:	6818      	ldr	r0, [r3, #0]
 8003eac:	460c      	mov	r4, r1
 8003eae:	b118      	cbz	r0, 8003eb8 <__swsetup_r+0x14>
 8003eb0:	6a03      	ldr	r3, [r0, #32]
 8003eb2:	b90b      	cbnz	r3, 8003eb8 <__swsetup_r+0x14>
 8003eb4:	f7ff fece 	bl	8003c54 <__sinit>
 8003eb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ebc:	0719      	lsls	r1, r3, #28
 8003ebe:	d422      	bmi.n	8003f06 <__swsetup_r+0x62>
 8003ec0:	06da      	lsls	r2, r3, #27
 8003ec2:	d407      	bmi.n	8003ed4 <__swsetup_r+0x30>
 8003ec4:	2209      	movs	r2, #9
 8003ec6:	602a      	str	r2, [r5, #0]
 8003ec8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ecc:	81a3      	strh	r3, [r4, #12]
 8003ece:	f04f 30ff 	mov.w	r0, #4294967295
 8003ed2:	e033      	b.n	8003f3c <__swsetup_r+0x98>
 8003ed4:	0758      	lsls	r0, r3, #29
 8003ed6:	d512      	bpl.n	8003efe <__swsetup_r+0x5a>
 8003ed8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003eda:	b141      	cbz	r1, 8003eee <__swsetup_r+0x4a>
 8003edc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003ee0:	4299      	cmp	r1, r3
 8003ee2:	d002      	beq.n	8003eea <__swsetup_r+0x46>
 8003ee4:	4628      	mov	r0, r5
 8003ee6:	f000 f8af 	bl	8004048 <_free_r>
 8003eea:	2300      	movs	r3, #0
 8003eec:	6363      	str	r3, [r4, #52]	@ 0x34
 8003eee:	89a3      	ldrh	r3, [r4, #12]
 8003ef0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003ef4:	81a3      	strh	r3, [r4, #12]
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	6063      	str	r3, [r4, #4]
 8003efa:	6923      	ldr	r3, [r4, #16]
 8003efc:	6023      	str	r3, [r4, #0]
 8003efe:	89a3      	ldrh	r3, [r4, #12]
 8003f00:	f043 0308 	orr.w	r3, r3, #8
 8003f04:	81a3      	strh	r3, [r4, #12]
 8003f06:	6923      	ldr	r3, [r4, #16]
 8003f08:	b94b      	cbnz	r3, 8003f1e <__swsetup_r+0x7a>
 8003f0a:	89a3      	ldrh	r3, [r4, #12]
 8003f0c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003f10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f14:	d003      	beq.n	8003f1e <__swsetup_r+0x7a>
 8003f16:	4621      	mov	r1, r4
 8003f18:	4628      	mov	r0, r5
 8003f1a:	f000 fd27 	bl	800496c <__smakebuf_r>
 8003f1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f22:	f013 0201 	ands.w	r2, r3, #1
 8003f26:	d00a      	beq.n	8003f3e <__swsetup_r+0x9a>
 8003f28:	2200      	movs	r2, #0
 8003f2a:	60a2      	str	r2, [r4, #8]
 8003f2c:	6962      	ldr	r2, [r4, #20]
 8003f2e:	4252      	negs	r2, r2
 8003f30:	61a2      	str	r2, [r4, #24]
 8003f32:	6922      	ldr	r2, [r4, #16]
 8003f34:	b942      	cbnz	r2, 8003f48 <__swsetup_r+0xa4>
 8003f36:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003f3a:	d1c5      	bne.n	8003ec8 <__swsetup_r+0x24>
 8003f3c:	bd38      	pop	{r3, r4, r5, pc}
 8003f3e:	0799      	lsls	r1, r3, #30
 8003f40:	bf58      	it	pl
 8003f42:	6962      	ldrpl	r2, [r4, #20]
 8003f44:	60a2      	str	r2, [r4, #8]
 8003f46:	e7f4      	b.n	8003f32 <__swsetup_r+0x8e>
 8003f48:	2000      	movs	r0, #0
 8003f4a:	e7f7      	b.n	8003f3c <__swsetup_r+0x98>
 8003f4c:	20000018 	.word	0x20000018

08003f50 <memset>:
 8003f50:	4402      	add	r2, r0
 8003f52:	4603      	mov	r3, r0
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d100      	bne.n	8003f5a <memset+0xa>
 8003f58:	4770      	bx	lr
 8003f5a:	f803 1b01 	strb.w	r1, [r3], #1
 8003f5e:	e7f9      	b.n	8003f54 <memset+0x4>

08003f60 <_close_r>:
 8003f60:	b538      	push	{r3, r4, r5, lr}
 8003f62:	4d06      	ldr	r5, [pc, #24]	@ (8003f7c <_close_r+0x1c>)
 8003f64:	2300      	movs	r3, #0
 8003f66:	4604      	mov	r4, r0
 8003f68:	4608      	mov	r0, r1
 8003f6a:	602b      	str	r3, [r5, #0]
 8003f6c:	f7fd f806 	bl	8000f7c <_close>
 8003f70:	1c43      	adds	r3, r0, #1
 8003f72:	d102      	bne.n	8003f7a <_close_r+0x1a>
 8003f74:	682b      	ldr	r3, [r5, #0]
 8003f76:	b103      	cbz	r3, 8003f7a <_close_r+0x1a>
 8003f78:	6023      	str	r3, [r4, #0]
 8003f7a:	bd38      	pop	{r3, r4, r5, pc}
 8003f7c:	20000260 	.word	0x20000260

08003f80 <_lseek_r>:
 8003f80:	b538      	push	{r3, r4, r5, lr}
 8003f82:	4d07      	ldr	r5, [pc, #28]	@ (8003fa0 <_lseek_r+0x20>)
 8003f84:	4604      	mov	r4, r0
 8003f86:	4608      	mov	r0, r1
 8003f88:	4611      	mov	r1, r2
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	602a      	str	r2, [r5, #0]
 8003f8e:	461a      	mov	r2, r3
 8003f90:	f7fd f818 	bl	8000fc4 <_lseek>
 8003f94:	1c43      	adds	r3, r0, #1
 8003f96:	d102      	bne.n	8003f9e <_lseek_r+0x1e>
 8003f98:	682b      	ldr	r3, [r5, #0]
 8003f9a:	b103      	cbz	r3, 8003f9e <_lseek_r+0x1e>
 8003f9c:	6023      	str	r3, [r4, #0]
 8003f9e:	bd38      	pop	{r3, r4, r5, pc}
 8003fa0:	20000260 	.word	0x20000260

08003fa4 <_read_r>:
 8003fa4:	b538      	push	{r3, r4, r5, lr}
 8003fa6:	4d07      	ldr	r5, [pc, #28]	@ (8003fc4 <_read_r+0x20>)
 8003fa8:	4604      	mov	r4, r0
 8003faa:	4608      	mov	r0, r1
 8003fac:	4611      	mov	r1, r2
 8003fae:	2200      	movs	r2, #0
 8003fb0:	602a      	str	r2, [r5, #0]
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	f7fc ffa9 	bl	8000f0a <_read>
 8003fb8:	1c43      	adds	r3, r0, #1
 8003fba:	d102      	bne.n	8003fc2 <_read_r+0x1e>
 8003fbc:	682b      	ldr	r3, [r5, #0]
 8003fbe:	b103      	cbz	r3, 8003fc2 <_read_r+0x1e>
 8003fc0:	6023      	str	r3, [r4, #0]
 8003fc2:	bd38      	pop	{r3, r4, r5, pc}
 8003fc4:	20000260 	.word	0x20000260

08003fc8 <_write_r>:
 8003fc8:	b538      	push	{r3, r4, r5, lr}
 8003fca:	4d07      	ldr	r5, [pc, #28]	@ (8003fe8 <_write_r+0x20>)
 8003fcc:	4604      	mov	r4, r0
 8003fce:	4608      	mov	r0, r1
 8003fd0:	4611      	mov	r1, r2
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	602a      	str	r2, [r5, #0]
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	f7fc ffb4 	bl	8000f44 <_write>
 8003fdc:	1c43      	adds	r3, r0, #1
 8003fde:	d102      	bne.n	8003fe6 <_write_r+0x1e>
 8003fe0:	682b      	ldr	r3, [r5, #0]
 8003fe2:	b103      	cbz	r3, 8003fe6 <_write_r+0x1e>
 8003fe4:	6023      	str	r3, [r4, #0]
 8003fe6:	bd38      	pop	{r3, r4, r5, pc}
 8003fe8:	20000260 	.word	0x20000260

08003fec <__errno>:
 8003fec:	4b01      	ldr	r3, [pc, #4]	@ (8003ff4 <__errno+0x8>)
 8003fee:	6818      	ldr	r0, [r3, #0]
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	20000018 	.word	0x20000018

08003ff8 <__libc_init_array>:
 8003ff8:	b570      	push	{r4, r5, r6, lr}
 8003ffa:	4d0d      	ldr	r5, [pc, #52]	@ (8004030 <__libc_init_array+0x38>)
 8003ffc:	4c0d      	ldr	r4, [pc, #52]	@ (8004034 <__libc_init_array+0x3c>)
 8003ffe:	1b64      	subs	r4, r4, r5
 8004000:	10a4      	asrs	r4, r4, #2
 8004002:	2600      	movs	r6, #0
 8004004:	42a6      	cmp	r6, r4
 8004006:	d109      	bne.n	800401c <__libc_init_array+0x24>
 8004008:	4d0b      	ldr	r5, [pc, #44]	@ (8004038 <__libc_init_array+0x40>)
 800400a:	4c0c      	ldr	r4, [pc, #48]	@ (800403c <__libc_init_array+0x44>)
 800400c:	f000 fd1c 	bl	8004a48 <_init>
 8004010:	1b64      	subs	r4, r4, r5
 8004012:	10a4      	asrs	r4, r4, #2
 8004014:	2600      	movs	r6, #0
 8004016:	42a6      	cmp	r6, r4
 8004018:	d105      	bne.n	8004026 <__libc_init_array+0x2e>
 800401a:	bd70      	pop	{r4, r5, r6, pc}
 800401c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004020:	4798      	blx	r3
 8004022:	3601      	adds	r6, #1
 8004024:	e7ee      	b.n	8004004 <__libc_init_array+0xc>
 8004026:	f855 3b04 	ldr.w	r3, [r5], #4
 800402a:	4798      	blx	r3
 800402c:	3601      	adds	r6, #1
 800402e:	e7f2      	b.n	8004016 <__libc_init_array+0x1e>
 8004030:	08004d60 	.word	0x08004d60
 8004034:	08004d60 	.word	0x08004d60
 8004038:	08004d60 	.word	0x08004d60
 800403c:	08004d64 	.word	0x08004d64

08004040 <__retarget_lock_init_recursive>:
 8004040:	4770      	bx	lr

08004042 <__retarget_lock_acquire_recursive>:
 8004042:	4770      	bx	lr

08004044 <__retarget_lock_release_recursive>:
 8004044:	4770      	bx	lr
	...

08004048 <_free_r>:
 8004048:	b538      	push	{r3, r4, r5, lr}
 800404a:	4605      	mov	r5, r0
 800404c:	2900      	cmp	r1, #0
 800404e:	d041      	beq.n	80040d4 <_free_r+0x8c>
 8004050:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004054:	1f0c      	subs	r4, r1, #4
 8004056:	2b00      	cmp	r3, #0
 8004058:	bfb8      	it	lt
 800405a:	18e4      	addlt	r4, r4, r3
 800405c:	f000 f8e0 	bl	8004220 <__malloc_lock>
 8004060:	4a1d      	ldr	r2, [pc, #116]	@ (80040d8 <_free_r+0x90>)
 8004062:	6813      	ldr	r3, [r2, #0]
 8004064:	b933      	cbnz	r3, 8004074 <_free_r+0x2c>
 8004066:	6063      	str	r3, [r4, #4]
 8004068:	6014      	str	r4, [r2, #0]
 800406a:	4628      	mov	r0, r5
 800406c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004070:	f000 b8dc 	b.w	800422c <__malloc_unlock>
 8004074:	42a3      	cmp	r3, r4
 8004076:	d908      	bls.n	800408a <_free_r+0x42>
 8004078:	6820      	ldr	r0, [r4, #0]
 800407a:	1821      	adds	r1, r4, r0
 800407c:	428b      	cmp	r3, r1
 800407e:	bf01      	itttt	eq
 8004080:	6819      	ldreq	r1, [r3, #0]
 8004082:	685b      	ldreq	r3, [r3, #4]
 8004084:	1809      	addeq	r1, r1, r0
 8004086:	6021      	streq	r1, [r4, #0]
 8004088:	e7ed      	b.n	8004066 <_free_r+0x1e>
 800408a:	461a      	mov	r2, r3
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	b10b      	cbz	r3, 8004094 <_free_r+0x4c>
 8004090:	42a3      	cmp	r3, r4
 8004092:	d9fa      	bls.n	800408a <_free_r+0x42>
 8004094:	6811      	ldr	r1, [r2, #0]
 8004096:	1850      	adds	r0, r2, r1
 8004098:	42a0      	cmp	r0, r4
 800409a:	d10b      	bne.n	80040b4 <_free_r+0x6c>
 800409c:	6820      	ldr	r0, [r4, #0]
 800409e:	4401      	add	r1, r0
 80040a0:	1850      	adds	r0, r2, r1
 80040a2:	4283      	cmp	r3, r0
 80040a4:	6011      	str	r1, [r2, #0]
 80040a6:	d1e0      	bne.n	800406a <_free_r+0x22>
 80040a8:	6818      	ldr	r0, [r3, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	6053      	str	r3, [r2, #4]
 80040ae:	4408      	add	r0, r1
 80040b0:	6010      	str	r0, [r2, #0]
 80040b2:	e7da      	b.n	800406a <_free_r+0x22>
 80040b4:	d902      	bls.n	80040bc <_free_r+0x74>
 80040b6:	230c      	movs	r3, #12
 80040b8:	602b      	str	r3, [r5, #0]
 80040ba:	e7d6      	b.n	800406a <_free_r+0x22>
 80040bc:	6820      	ldr	r0, [r4, #0]
 80040be:	1821      	adds	r1, r4, r0
 80040c0:	428b      	cmp	r3, r1
 80040c2:	bf04      	itt	eq
 80040c4:	6819      	ldreq	r1, [r3, #0]
 80040c6:	685b      	ldreq	r3, [r3, #4]
 80040c8:	6063      	str	r3, [r4, #4]
 80040ca:	bf04      	itt	eq
 80040cc:	1809      	addeq	r1, r1, r0
 80040ce:	6021      	streq	r1, [r4, #0]
 80040d0:	6054      	str	r4, [r2, #4]
 80040d2:	e7ca      	b.n	800406a <_free_r+0x22>
 80040d4:	bd38      	pop	{r3, r4, r5, pc}
 80040d6:	bf00      	nop
 80040d8:	2000026c 	.word	0x2000026c

080040dc <sbrk_aligned>:
 80040dc:	b570      	push	{r4, r5, r6, lr}
 80040de:	4e0f      	ldr	r6, [pc, #60]	@ (800411c <sbrk_aligned+0x40>)
 80040e0:	460c      	mov	r4, r1
 80040e2:	6831      	ldr	r1, [r6, #0]
 80040e4:	4605      	mov	r5, r0
 80040e6:	b911      	cbnz	r1, 80040ee <sbrk_aligned+0x12>
 80040e8:	f000 fc9e 	bl	8004a28 <_sbrk_r>
 80040ec:	6030      	str	r0, [r6, #0]
 80040ee:	4621      	mov	r1, r4
 80040f0:	4628      	mov	r0, r5
 80040f2:	f000 fc99 	bl	8004a28 <_sbrk_r>
 80040f6:	1c43      	adds	r3, r0, #1
 80040f8:	d103      	bne.n	8004102 <sbrk_aligned+0x26>
 80040fa:	f04f 34ff 	mov.w	r4, #4294967295
 80040fe:	4620      	mov	r0, r4
 8004100:	bd70      	pop	{r4, r5, r6, pc}
 8004102:	1cc4      	adds	r4, r0, #3
 8004104:	f024 0403 	bic.w	r4, r4, #3
 8004108:	42a0      	cmp	r0, r4
 800410a:	d0f8      	beq.n	80040fe <sbrk_aligned+0x22>
 800410c:	1a21      	subs	r1, r4, r0
 800410e:	4628      	mov	r0, r5
 8004110:	f000 fc8a 	bl	8004a28 <_sbrk_r>
 8004114:	3001      	adds	r0, #1
 8004116:	d1f2      	bne.n	80040fe <sbrk_aligned+0x22>
 8004118:	e7ef      	b.n	80040fa <sbrk_aligned+0x1e>
 800411a:	bf00      	nop
 800411c:	20000268 	.word	0x20000268

08004120 <_malloc_r>:
 8004120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004124:	1ccd      	adds	r5, r1, #3
 8004126:	f025 0503 	bic.w	r5, r5, #3
 800412a:	3508      	adds	r5, #8
 800412c:	2d0c      	cmp	r5, #12
 800412e:	bf38      	it	cc
 8004130:	250c      	movcc	r5, #12
 8004132:	2d00      	cmp	r5, #0
 8004134:	4606      	mov	r6, r0
 8004136:	db01      	blt.n	800413c <_malloc_r+0x1c>
 8004138:	42a9      	cmp	r1, r5
 800413a:	d904      	bls.n	8004146 <_malloc_r+0x26>
 800413c:	230c      	movs	r3, #12
 800413e:	6033      	str	r3, [r6, #0]
 8004140:	2000      	movs	r0, #0
 8004142:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004146:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800421c <_malloc_r+0xfc>
 800414a:	f000 f869 	bl	8004220 <__malloc_lock>
 800414e:	f8d8 3000 	ldr.w	r3, [r8]
 8004152:	461c      	mov	r4, r3
 8004154:	bb44      	cbnz	r4, 80041a8 <_malloc_r+0x88>
 8004156:	4629      	mov	r1, r5
 8004158:	4630      	mov	r0, r6
 800415a:	f7ff ffbf 	bl	80040dc <sbrk_aligned>
 800415e:	1c43      	adds	r3, r0, #1
 8004160:	4604      	mov	r4, r0
 8004162:	d158      	bne.n	8004216 <_malloc_r+0xf6>
 8004164:	f8d8 4000 	ldr.w	r4, [r8]
 8004168:	4627      	mov	r7, r4
 800416a:	2f00      	cmp	r7, #0
 800416c:	d143      	bne.n	80041f6 <_malloc_r+0xd6>
 800416e:	2c00      	cmp	r4, #0
 8004170:	d04b      	beq.n	800420a <_malloc_r+0xea>
 8004172:	6823      	ldr	r3, [r4, #0]
 8004174:	4639      	mov	r1, r7
 8004176:	4630      	mov	r0, r6
 8004178:	eb04 0903 	add.w	r9, r4, r3
 800417c:	f000 fc54 	bl	8004a28 <_sbrk_r>
 8004180:	4581      	cmp	r9, r0
 8004182:	d142      	bne.n	800420a <_malloc_r+0xea>
 8004184:	6821      	ldr	r1, [r4, #0]
 8004186:	1a6d      	subs	r5, r5, r1
 8004188:	4629      	mov	r1, r5
 800418a:	4630      	mov	r0, r6
 800418c:	f7ff ffa6 	bl	80040dc <sbrk_aligned>
 8004190:	3001      	adds	r0, #1
 8004192:	d03a      	beq.n	800420a <_malloc_r+0xea>
 8004194:	6823      	ldr	r3, [r4, #0]
 8004196:	442b      	add	r3, r5
 8004198:	6023      	str	r3, [r4, #0]
 800419a:	f8d8 3000 	ldr.w	r3, [r8]
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	bb62      	cbnz	r2, 80041fc <_malloc_r+0xdc>
 80041a2:	f8c8 7000 	str.w	r7, [r8]
 80041a6:	e00f      	b.n	80041c8 <_malloc_r+0xa8>
 80041a8:	6822      	ldr	r2, [r4, #0]
 80041aa:	1b52      	subs	r2, r2, r5
 80041ac:	d420      	bmi.n	80041f0 <_malloc_r+0xd0>
 80041ae:	2a0b      	cmp	r2, #11
 80041b0:	d917      	bls.n	80041e2 <_malloc_r+0xc2>
 80041b2:	1961      	adds	r1, r4, r5
 80041b4:	42a3      	cmp	r3, r4
 80041b6:	6025      	str	r5, [r4, #0]
 80041b8:	bf18      	it	ne
 80041ba:	6059      	strne	r1, [r3, #4]
 80041bc:	6863      	ldr	r3, [r4, #4]
 80041be:	bf08      	it	eq
 80041c0:	f8c8 1000 	streq.w	r1, [r8]
 80041c4:	5162      	str	r2, [r4, r5]
 80041c6:	604b      	str	r3, [r1, #4]
 80041c8:	4630      	mov	r0, r6
 80041ca:	f000 f82f 	bl	800422c <__malloc_unlock>
 80041ce:	f104 000b 	add.w	r0, r4, #11
 80041d2:	1d23      	adds	r3, r4, #4
 80041d4:	f020 0007 	bic.w	r0, r0, #7
 80041d8:	1ac2      	subs	r2, r0, r3
 80041da:	bf1c      	itt	ne
 80041dc:	1a1b      	subne	r3, r3, r0
 80041de:	50a3      	strne	r3, [r4, r2]
 80041e0:	e7af      	b.n	8004142 <_malloc_r+0x22>
 80041e2:	6862      	ldr	r2, [r4, #4]
 80041e4:	42a3      	cmp	r3, r4
 80041e6:	bf0c      	ite	eq
 80041e8:	f8c8 2000 	streq.w	r2, [r8]
 80041ec:	605a      	strne	r2, [r3, #4]
 80041ee:	e7eb      	b.n	80041c8 <_malloc_r+0xa8>
 80041f0:	4623      	mov	r3, r4
 80041f2:	6864      	ldr	r4, [r4, #4]
 80041f4:	e7ae      	b.n	8004154 <_malloc_r+0x34>
 80041f6:	463c      	mov	r4, r7
 80041f8:	687f      	ldr	r7, [r7, #4]
 80041fa:	e7b6      	b.n	800416a <_malloc_r+0x4a>
 80041fc:	461a      	mov	r2, r3
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	42a3      	cmp	r3, r4
 8004202:	d1fb      	bne.n	80041fc <_malloc_r+0xdc>
 8004204:	2300      	movs	r3, #0
 8004206:	6053      	str	r3, [r2, #4]
 8004208:	e7de      	b.n	80041c8 <_malloc_r+0xa8>
 800420a:	230c      	movs	r3, #12
 800420c:	6033      	str	r3, [r6, #0]
 800420e:	4630      	mov	r0, r6
 8004210:	f000 f80c 	bl	800422c <__malloc_unlock>
 8004214:	e794      	b.n	8004140 <_malloc_r+0x20>
 8004216:	6005      	str	r5, [r0, #0]
 8004218:	e7d6      	b.n	80041c8 <_malloc_r+0xa8>
 800421a:	bf00      	nop
 800421c:	2000026c 	.word	0x2000026c

08004220 <__malloc_lock>:
 8004220:	4801      	ldr	r0, [pc, #4]	@ (8004228 <__malloc_lock+0x8>)
 8004222:	f7ff bf0e 	b.w	8004042 <__retarget_lock_acquire_recursive>
 8004226:	bf00      	nop
 8004228:	20000264 	.word	0x20000264

0800422c <__malloc_unlock>:
 800422c:	4801      	ldr	r0, [pc, #4]	@ (8004234 <__malloc_unlock+0x8>)
 800422e:	f7ff bf09 	b.w	8004044 <__retarget_lock_release_recursive>
 8004232:	bf00      	nop
 8004234:	20000264 	.word	0x20000264

08004238 <__sfputc_r>:
 8004238:	6893      	ldr	r3, [r2, #8]
 800423a:	3b01      	subs	r3, #1
 800423c:	2b00      	cmp	r3, #0
 800423e:	b410      	push	{r4}
 8004240:	6093      	str	r3, [r2, #8]
 8004242:	da07      	bge.n	8004254 <__sfputc_r+0x1c>
 8004244:	6994      	ldr	r4, [r2, #24]
 8004246:	42a3      	cmp	r3, r4
 8004248:	db01      	blt.n	800424e <__sfputc_r+0x16>
 800424a:	290a      	cmp	r1, #10
 800424c:	d102      	bne.n	8004254 <__sfputc_r+0x1c>
 800424e:	bc10      	pop	{r4}
 8004250:	f7ff bde9 	b.w	8003e26 <__swbuf_r>
 8004254:	6813      	ldr	r3, [r2, #0]
 8004256:	1c58      	adds	r0, r3, #1
 8004258:	6010      	str	r0, [r2, #0]
 800425a:	7019      	strb	r1, [r3, #0]
 800425c:	4608      	mov	r0, r1
 800425e:	bc10      	pop	{r4}
 8004260:	4770      	bx	lr

08004262 <__sfputs_r>:
 8004262:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004264:	4606      	mov	r6, r0
 8004266:	460f      	mov	r7, r1
 8004268:	4614      	mov	r4, r2
 800426a:	18d5      	adds	r5, r2, r3
 800426c:	42ac      	cmp	r4, r5
 800426e:	d101      	bne.n	8004274 <__sfputs_r+0x12>
 8004270:	2000      	movs	r0, #0
 8004272:	e007      	b.n	8004284 <__sfputs_r+0x22>
 8004274:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004278:	463a      	mov	r2, r7
 800427a:	4630      	mov	r0, r6
 800427c:	f7ff ffdc 	bl	8004238 <__sfputc_r>
 8004280:	1c43      	adds	r3, r0, #1
 8004282:	d1f3      	bne.n	800426c <__sfputs_r+0xa>
 8004284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004288 <_vfiprintf_r>:
 8004288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800428c:	460d      	mov	r5, r1
 800428e:	b09d      	sub	sp, #116	@ 0x74
 8004290:	4614      	mov	r4, r2
 8004292:	4698      	mov	r8, r3
 8004294:	4606      	mov	r6, r0
 8004296:	b118      	cbz	r0, 80042a0 <_vfiprintf_r+0x18>
 8004298:	6a03      	ldr	r3, [r0, #32]
 800429a:	b90b      	cbnz	r3, 80042a0 <_vfiprintf_r+0x18>
 800429c:	f7ff fcda 	bl	8003c54 <__sinit>
 80042a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80042a2:	07d9      	lsls	r1, r3, #31
 80042a4:	d405      	bmi.n	80042b2 <_vfiprintf_r+0x2a>
 80042a6:	89ab      	ldrh	r3, [r5, #12]
 80042a8:	059a      	lsls	r2, r3, #22
 80042aa:	d402      	bmi.n	80042b2 <_vfiprintf_r+0x2a>
 80042ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80042ae:	f7ff fec8 	bl	8004042 <__retarget_lock_acquire_recursive>
 80042b2:	89ab      	ldrh	r3, [r5, #12]
 80042b4:	071b      	lsls	r3, r3, #28
 80042b6:	d501      	bpl.n	80042bc <_vfiprintf_r+0x34>
 80042b8:	692b      	ldr	r3, [r5, #16]
 80042ba:	b99b      	cbnz	r3, 80042e4 <_vfiprintf_r+0x5c>
 80042bc:	4629      	mov	r1, r5
 80042be:	4630      	mov	r0, r6
 80042c0:	f7ff fdf0 	bl	8003ea4 <__swsetup_r>
 80042c4:	b170      	cbz	r0, 80042e4 <_vfiprintf_r+0x5c>
 80042c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80042c8:	07dc      	lsls	r4, r3, #31
 80042ca:	d504      	bpl.n	80042d6 <_vfiprintf_r+0x4e>
 80042cc:	f04f 30ff 	mov.w	r0, #4294967295
 80042d0:	b01d      	add	sp, #116	@ 0x74
 80042d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042d6:	89ab      	ldrh	r3, [r5, #12]
 80042d8:	0598      	lsls	r0, r3, #22
 80042da:	d4f7      	bmi.n	80042cc <_vfiprintf_r+0x44>
 80042dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80042de:	f7ff feb1 	bl	8004044 <__retarget_lock_release_recursive>
 80042e2:	e7f3      	b.n	80042cc <_vfiprintf_r+0x44>
 80042e4:	2300      	movs	r3, #0
 80042e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80042e8:	2320      	movs	r3, #32
 80042ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80042ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80042f2:	2330      	movs	r3, #48	@ 0x30
 80042f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80044a4 <_vfiprintf_r+0x21c>
 80042f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80042fc:	f04f 0901 	mov.w	r9, #1
 8004300:	4623      	mov	r3, r4
 8004302:	469a      	mov	sl, r3
 8004304:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004308:	b10a      	cbz	r2, 800430e <_vfiprintf_r+0x86>
 800430a:	2a25      	cmp	r2, #37	@ 0x25
 800430c:	d1f9      	bne.n	8004302 <_vfiprintf_r+0x7a>
 800430e:	ebba 0b04 	subs.w	fp, sl, r4
 8004312:	d00b      	beq.n	800432c <_vfiprintf_r+0xa4>
 8004314:	465b      	mov	r3, fp
 8004316:	4622      	mov	r2, r4
 8004318:	4629      	mov	r1, r5
 800431a:	4630      	mov	r0, r6
 800431c:	f7ff ffa1 	bl	8004262 <__sfputs_r>
 8004320:	3001      	adds	r0, #1
 8004322:	f000 80a7 	beq.w	8004474 <_vfiprintf_r+0x1ec>
 8004326:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004328:	445a      	add	r2, fp
 800432a:	9209      	str	r2, [sp, #36]	@ 0x24
 800432c:	f89a 3000 	ldrb.w	r3, [sl]
 8004330:	2b00      	cmp	r3, #0
 8004332:	f000 809f 	beq.w	8004474 <_vfiprintf_r+0x1ec>
 8004336:	2300      	movs	r3, #0
 8004338:	f04f 32ff 	mov.w	r2, #4294967295
 800433c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004340:	f10a 0a01 	add.w	sl, sl, #1
 8004344:	9304      	str	r3, [sp, #16]
 8004346:	9307      	str	r3, [sp, #28]
 8004348:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800434c:	931a      	str	r3, [sp, #104]	@ 0x68
 800434e:	4654      	mov	r4, sl
 8004350:	2205      	movs	r2, #5
 8004352:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004356:	4853      	ldr	r0, [pc, #332]	@ (80044a4 <_vfiprintf_r+0x21c>)
 8004358:	f7fb ff12 	bl	8000180 <memchr>
 800435c:	9a04      	ldr	r2, [sp, #16]
 800435e:	b9d8      	cbnz	r0, 8004398 <_vfiprintf_r+0x110>
 8004360:	06d1      	lsls	r1, r2, #27
 8004362:	bf44      	itt	mi
 8004364:	2320      	movmi	r3, #32
 8004366:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800436a:	0713      	lsls	r3, r2, #28
 800436c:	bf44      	itt	mi
 800436e:	232b      	movmi	r3, #43	@ 0x2b
 8004370:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004374:	f89a 3000 	ldrb.w	r3, [sl]
 8004378:	2b2a      	cmp	r3, #42	@ 0x2a
 800437a:	d015      	beq.n	80043a8 <_vfiprintf_r+0x120>
 800437c:	9a07      	ldr	r2, [sp, #28]
 800437e:	4654      	mov	r4, sl
 8004380:	2000      	movs	r0, #0
 8004382:	f04f 0c0a 	mov.w	ip, #10
 8004386:	4621      	mov	r1, r4
 8004388:	f811 3b01 	ldrb.w	r3, [r1], #1
 800438c:	3b30      	subs	r3, #48	@ 0x30
 800438e:	2b09      	cmp	r3, #9
 8004390:	d94b      	bls.n	800442a <_vfiprintf_r+0x1a2>
 8004392:	b1b0      	cbz	r0, 80043c2 <_vfiprintf_r+0x13a>
 8004394:	9207      	str	r2, [sp, #28]
 8004396:	e014      	b.n	80043c2 <_vfiprintf_r+0x13a>
 8004398:	eba0 0308 	sub.w	r3, r0, r8
 800439c:	fa09 f303 	lsl.w	r3, r9, r3
 80043a0:	4313      	orrs	r3, r2
 80043a2:	9304      	str	r3, [sp, #16]
 80043a4:	46a2      	mov	sl, r4
 80043a6:	e7d2      	b.n	800434e <_vfiprintf_r+0xc6>
 80043a8:	9b03      	ldr	r3, [sp, #12]
 80043aa:	1d19      	adds	r1, r3, #4
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	9103      	str	r1, [sp, #12]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	bfbb      	ittet	lt
 80043b4:	425b      	neglt	r3, r3
 80043b6:	f042 0202 	orrlt.w	r2, r2, #2
 80043ba:	9307      	strge	r3, [sp, #28]
 80043bc:	9307      	strlt	r3, [sp, #28]
 80043be:	bfb8      	it	lt
 80043c0:	9204      	strlt	r2, [sp, #16]
 80043c2:	7823      	ldrb	r3, [r4, #0]
 80043c4:	2b2e      	cmp	r3, #46	@ 0x2e
 80043c6:	d10a      	bne.n	80043de <_vfiprintf_r+0x156>
 80043c8:	7863      	ldrb	r3, [r4, #1]
 80043ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80043cc:	d132      	bne.n	8004434 <_vfiprintf_r+0x1ac>
 80043ce:	9b03      	ldr	r3, [sp, #12]
 80043d0:	1d1a      	adds	r2, r3, #4
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	9203      	str	r2, [sp, #12]
 80043d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80043da:	3402      	adds	r4, #2
 80043dc:	9305      	str	r3, [sp, #20]
 80043de:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80044a8 <_vfiprintf_r+0x220>
 80043e2:	7821      	ldrb	r1, [r4, #0]
 80043e4:	2203      	movs	r2, #3
 80043e6:	4650      	mov	r0, sl
 80043e8:	f7fb feca 	bl	8000180 <memchr>
 80043ec:	b138      	cbz	r0, 80043fe <_vfiprintf_r+0x176>
 80043ee:	9b04      	ldr	r3, [sp, #16]
 80043f0:	eba0 000a 	sub.w	r0, r0, sl
 80043f4:	2240      	movs	r2, #64	@ 0x40
 80043f6:	4082      	lsls	r2, r0
 80043f8:	4313      	orrs	r3, r2
 80043fa:	3401      	adds	r4, #1
 80043fc:	9304      	str	r3, [sp, #16]
 80043fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004402:	482a      	ldr	r0, [pc, #168]	@ (80044ac <_vfiprintf_r+0x224>)
 8004404:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004408:	2206      	movs	r2, #6
 800440a:	f7fb feb9 	bl	8000180 <memchr>
 800440e:	2800      	cmp	r0, #0
 8004410:	d03f      	beq.n	8004492 <_vfiprintf_r+0x20a>
 8004412:	4b27      	ldr	r3, [pc, #156]	@ (80044b0 <_vfiprintf_r+0x228>)
 8004414:	bb1b      	cbnz	r3, 800445e <_vfiprintf_r+0x1d6>
 8004416:	9b03      	ldr	r3, [sp, #12]
 8004418:	3307      	adds	r3, #7
 800441a:	f023 0307 	bic.w	r3, r3, #7
 800441e:	3308      	adds	r3, #8
 8004420:	9303      	str	r3, [sp, #12]
 8004422:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004424:	443b      	add	r3, r7
 8004426:	9309      	str	r3, [sp, #36]	@ 0x24
 8004428:	e76a      	b.n	8004300 <_vfiprintf_r+0x78>
 800442a:	fb0c 3202 	mla	r2, ip, r2, r3
 800442e:	460c      	mov	r4, r1
 8004430:	2001      	movs	r0, #1
 8004432:	e7a8      	b.n	8004386 <_vfiprintf_r+0xfe>
 8004434:	2300      	movs	r3, #0
 8004436:	3401      	adds	r4, #1
 8004438:	9305      	str	r3, [sp, #20]
 800443a:	4619      	mov	r1, r3
 800443c:	f04f 0c0a 	mov.w	ip, #10
 8004440:	4620      	mov	r0, r4
 8004442:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004446:	3a30      	subs	r2, #48	@ 0x30
 8004448:	2a09      	cmp	r2, #9
 800444a:	d903      	bls.n	8004454 <_vfiprintf_r+0x1cc>
 800444c:	2b00      	cmp	r3, #0
 800444e:	d0c6      	beq.n	80043de <_vfiprintf_r+0x156>
 8004450:	9105      	str	r1, [sp, #20]
 8004452:	e7c4      	b.n	80043de <_vfiprintf_r+0x156>
 8004454:	fb0c 2101 	mla	r1, ip, r1, r2
 8004458:	4604      	mov	r4, r0
 800445a:	2301      	movs	r3, #1
 800445c:	e7f0      	b.n	8004440 <_vfiprintf_r+0x1b8>
 800445e:	ab03      	add	r3, sp, #12
 8004460:	9300      	str	r3, [sp, #0]
 8004462:	462a      	mov	r2, r5
 8004464:	4b13      	ldr	r3, [pc, #76]	@ (80044b4 <_vfiprintf_r+0x22c>)
 8004466:	a904      	add	r1, sp, #16
 8004468:	4630      	mov	r0, r6
 800446a:	f3af 8000 	nop.w
 800446e:	4607      	mov	r7, r0
 8004470:	1c78      	adds	r0, r7, #1
 8004472:	d1d6      	bne.n	8004422 <_vfiprintf_r+0x19a>
 8004474:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004476:	07d9      	lsls	r1, r3, #31
 8004478:	d405      	bmi.n	8004486 <_vfiprintf_r+0x1fe>
 800447a:	89ab      	ldrh	r3, [r5, #12]
 800447c:	059a      	lsls	r2, r3, #22
 800447e:	d402      	bmi.n	8004486 <_vfiprintf_r+0x1fe>
 8004480:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004482:	f7ff fddf 	bl	8004044 <__retarget_lock_release_recursive>
 8004486:	89ab      	ldrh	r3, [r5, #12]
 8004488:	065b      	lsls	r3, r3, #25
 800448a:	f53f af1f 	bmi.w	80042cc <_vfiprintf_r+0x44>
 800448e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004490:	e71e      	b.n	80042d0 <_vfiprintf_r+0x48>
 8004492:	ab03      	add	r3, sp, #12
 8004494:	9300      	str	r3, [sp, #0]
 8004496:	462a      	mov	r2, r5
 8004498:	4b06      	ldr	r3, [pc, #24]	@ (80044b4 <_vfiprintf_r+0x22c>)
 800449a:	a904      	add	r1, sp, #16
 800449c:	4630      	mov	r0, r6
 800449e:	f000 f879 	bl	8004594 <_printf_i>
 80044a2:	e7e4      	b.n	800446e <_vfiprintf_r+0x1e6>
 80044a4:	08004d24 	.word	0x08004d24
 80044a8:	08004d2a 	.word	0x08004d2a
 80044ac:	08004d2e 	.word	0x08004d2e
 80044b0:	00000000 	.word	0x00000000
 80044b4:	08004263 	.word	0x08004263

080044b8 <_printf_common>:
 80044b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044bc:	4616      	mov	r6, r2
 80044be:	4698      	mov	r8, r3
 80044c0:	688a      	ldr	r2, [r1, #8]
 80044c2:	690b      	ldr	r3, [r1, #16]
 80044c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80044c8:	4293      	cmp	r3, r2
 80044ca:	bfb8      	it	lt
 80044cc:	4613      	movlt	r3, r2
 80044ce:	6033      	str	r3, [r6, #0]
 80044d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80044d4:	4607      	mov	r7, r0
 80044d6:	460c      	mov	r4, r1
 80044d8:	b10a      	cbz	r2, 80044de <_printf_common+0x26>
 80044da:	3301      	adds	r3, #1
 80044dc:	6033      	str	r3, [r6, #0]
 80044de:	6823      	ldr	r3, [r4, #0]
 80044e0:	0699      	lsls	r1, r3, #26
 80044e2:	bf42      	ittt	mi
 80044e4:	6833      	ldrmi	r3, [r6, #0]
 80044e6:	3302      	addmi	r3, #2
 80044e8:	6033      	strmi	r3, [r6, #0]
 80044ea:	6825      	ldr	r5, [r4, #0]
 80044ec:	f015 0506 	ands.w	r5, r5, #6
 80044f0:	d106      	bne.n	8004500 <_printf_common+0x48>
 80044f2:	f104 0a19 	add.w	sl, r4, #25
 80044f6:	68e3      	ldr	r3, [r4, #12]
 80044f8:	6832      	ldr	r2, [r6, #0]
 80044fa:	1a9b      	subs	r3, r3, r2
 80044fc:	42ab      	cmp	r3, r5
 80044fe:	dc26      	bgt.n	800454e <_printf_common+0x96>
 8004500:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004504:	6822      	ldr	r2, [r4, #0]
 8004506:	3b00      	subs	r3, #0
 8004508:	bf18      	it	ne
 800450a:	2301      	movne	r3, #1
 800450c:	0692      	lsls	r2, r2, #26
 800450e:	d42b      	bmi.n	8004568 <_printf_common+0xb0>
 8004510:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004514:	4641      	mov	r1, r8
 8004516:	4638      	mov	r0, r7
 8004518:	47c8      	blx	r9
 800451a:	3001      	adds	r0, #1
 800451c:	d01e      	beq.n	800455c <_printf_common+0xa4>
 800451e:	6823      	ldr	r3, [r4, #0]
 8004520:	6922      	ldr	r2, [r4, #16]
 8004522:	f003 0306 	and.w	r3, r3, #6
 8004526:	2b04      	cmp	r3, #4
 8004528:	bf02      	ittt	eq
 800452a:	68e5      	ldreq	r5, [r4, #12]
 800452c:	6833      	ldreq	r3, [r6, #0]
 800452e:	1aed      	subeq	r5, r5, r3
 8004530:	68a3      	ldr	r3, [r4, #8]
 8004532:	bf0c      	ite	eq
 8004534:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004538:	2500      	movne	r5, #0
 800453a:	4293      	cmp	r3, r2
 800453c:	bfc4      	itt	gt
 800453e:	1a9b      	subgt	r3, r3, r2
 8004540:	18ed      	addgt	r5, r5, r3
 8004542:	2600      	movs	r6, #0
 8004544:	341a      	adds	r4, #26
 8004546:	42b5      	cmp	r5, r6
 8004548:	d11a      	bne.n	8004580 <_printf_common+0xc8>
 800454a:	2000      	movs	r0, #0
 800454c:	e008      	b.n	8004560 <_printf_common+0xa8>
 800454e:	2301      	movs	r3, #1
 8004550:	4652      	mov	r2, sl
 8004552:	4641      	mov	r1, r8
 8004554:	4638      	mov	r0, r7
 8004556:	47c8      	blx	r9
 8004558:	3001      	adds	r0, #1
 800455a:	d103      	bne.n	8004564 <_printf_common+0xac>
 800455c:	f04f 30ff 	mov.w	r0, #4294967295
 8004560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004564:	3501      	adds	r5, #1
 8004566:	e7c6      	b.n	80044f6 <_printf_common+0x3e>
 8004568:	18e1      	adds	r1, r4, r3
 800456a:	1c5a      	adds	r2, r3, #1
 800456c:	2030      	movs	r0, #48	@ 0x30
 800456e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004572:	4422      	add	r2, r4
 8004574:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004578:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800457c:	3302      	adds	r3, #2
 800457e:	e7c7      	b.n	8004510 <_printf_common+0x58>
 8004580:	2301      	movs	r3, #1
 8004582:	4622      	mov	r2, r4
 8004584:	4641      	mov	r1, r8
 8004586:	4638      	mov	r0, r7
 8004588:	47c8      	blx	r9
 800458a:	3001      	adds	r0, #1
 800458c:	d0e6      	beq.n	800455c <_printf_common+0xa4>
 800458e:	3601      	adds	r6, #1
 8004590:	e7d9      	b.n	8004546 <_printf_common+0x8e>
	...

08004594 <_printf_i>:
 8004594:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004598:	7e0f      	ldrb	r7, [r1, #24]
 800459a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800459c:	2f78      	cmp	r7, #120	@ 0x78
 800459e:	4691      	mov	r9, r2
 80045a0:	4680      	mov	r8, r0
 80045a2:	460c      	mov	r4, r1
 80045a4:	469a      	mov	sl, r3
 80045a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80045aa:	d807      	bhi.n	80045bc <_printf_i+0x28>
 80045ac:	2f62      	cmp	r7, #98	@ 0x62
 80045ae:	d80a      	bhi.n	80045c6 <_printf_i+0x32>
 80045b0:	2f00      	cmp	r7, #0
 80045b2:	f000 80d1 	beq.w	8004758 <_printf_i+0x1c4>
 80045b6:	2f58      	cmp	r7, #88	@ 0x58
 80045b8:	f000 80b8 	beq.w	800472c <_printf_i+0x198>
 80045bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80045c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80045c4:	e03a      	b.n	800463c <_printf_i+0xa8>
 80045c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80045ca:	2b15      	cmp	r3, #21
 80045cc:	d8f6      	bhi.n	80045bc <_printf_i+0x28>
 80045ce:	a101      	add	r1, pc, #4	@ (adr r1, 80045d4 <_printf_i+0x40>)
 80045d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80045d4:	0800462d 	.word	0x0800462d
 80045d8:	08004641 	.word	0x08004641
 80045dc:	080045bd 	.word	0x080045bd
 80045e0:	080045bd 	.word	0x080045bd
 80045e4:	080045bd 	.word	0x080045bd
 80045e8:	080045bd 	.word	0x080045bd
 80045ec:	08004641 	.word	0x08004641
 80045f0:	080045bd 	.word	0x080045bd
 80045f4:	080045bd 	.word	0x080045bd
 80045f8:	080045bd 	.word	0x080045bd
 80045fc:	080045bd 	.word	0x080045bd
 8004600:	0800473f 	.word	0x0800473f
 8004604:	0800466b 	.word	0x0800466b
 8004608:	080046f9 	.word	0x080046f9
 800460c:	080045bd 	.word	0x080045bd
 8004610:	080045bd 	.word	0x080045bd
 8004614:	08004761 	.word	0x08004761
 8004618:	080045bd 	.word	0x080045bd
 800461c:	0800466b 	.word	0x0800466b
 8004620:	080045bd 	.word	0x080045bd
 8004624:	080045bd 	.word	0x080045bd
 8004628:	08004701 	.word	0x08004701
 800462c:	6833      	ldr	r3, [r6, #0]
 800462e:	1d1a      	adds	r2, r3, #4
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	6032      	str	r2, [r6, #0]
 8004634:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004638:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800463c:	2301      	movs	r3, #1
 800463e:	e09c      	b.n	800477a <_printf_i+0x1e6>
 8004640:	6833      	ldr	r3, [r6, #0]
 8004642:	6820      	ldr	r0, [r4, #0]
 8004644:	1d19      	adds	r1, r3, #4
 8004646:	6031      	str	r1, [r6, #0]
 8004648:	0606      	lsls	r6, r0, #24
 800464a:	d501      	bpl.n	8004650 <_printf_i+0xbc>
 800464c:	681d      	ldr	r5, [r3, #0]
 800464e:	e003      	b.n	8004658 <_printf_i+0xc4>
 8004650:	0645      	lsls	r5, r0, #25
 8004652:	d5fb      	bpl.n	800464c <_printf_i+0xb8>
 8004654:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004658:	2d00      	cmp	r5, #0
 800465a:	da03      	bge.n	8004664 <_printf_i+0xd0>
 800465c:	232d      	movs	r3, #45	@ 0x2d
 800465e:	426d      	negs	r5, r5
 8004660:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004664:	4858      	ldr	r0, [pc, #352]	@ (80047c8 <_printf_i+0x234>)
 8004666:	230a      	movs	r3, #10
 8004668:	e011      	b.n	800468e <_printf_i+0xfa>
 800466a:	6821      	ldr	r1, [r4, #0]
 800466c:	6833      	ldr	r3, [r6, #0]
 800466e:	0608      	lsls	r0, r1, #24
 8004670:	f853 5b04 	ldr.w	r5, [r3], #4
 8004674:	d402      	bmi.n	800467c <_printf_i+0xe8>
 8004676:	0649      	lsls	r1, r1, #25
 8004678:	bf48      	it	mi
 800467a:	b2ad      	uxthmi	r5, r5
 800467c:	2f6f      	cmp	r7, #111	@ 0x6f
 800467e:	4852      	ldr	r0, [pc, #328]	@ (80047c8 <_printf_i+0x234>)
 8004680:	6033      	str	r3, [r6, #0]
 8004682:	bf14      	ite	ne
 8004684:	230a      	movne	r3, #10
 8004686:	2308      	moveq	r3, #8
 8004688:	2100      	movs	r1, #0
 800468a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800468e:	6866      	ldr	r6, [r4, #4]
 8004690:	60a6      	str	r6, [r4, #8]
 8004692:	2e00      	cmp	r6, #0
 8004694:	db05      	blt.n	80046a2 <_printf_i+0x10e>
 8004696:	6821      	ldr	r1, [r4, #0]
 8004698:	432e      	orrs	r6, r5
 800469a:	f021 0104 	bic.w	r1, r1, #4
 800469e:	6021      	str	r1, [r4, #0]
 80046a0:	d04b      	beq.n	800473a <_printf_i+0x1a6>
 80046a2:	4616      	mov	r6, r2
 80046a4:	fbb5 f1f3 	udiv	r1, r5, r3
 80046a8:	fb03 5711 	mls	r7, r3, r1, r5
 80046ac:	5dc7      	ldrb	r7, [r0, r7]
 80046ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80046b2:	462f      	mov	r7, r5
 80046b4:	42bb      	cmp	r3, r7
 80046b6:	460d      	mov	r5, r1
 80046b8:	d9f4      	bls.n	80046a4 <_printf_i+0x110>
 80046ba:	2b08      	cmp	r3, #8
 80046bc:	d10b      	bne.n	80046d6 <_printf_i+0x142>
 80046be:	6823      	ldr	r3, [r4, #0]
 80046c0:	07df      	lsls	r7, r3, #31
 80046c2:	d508      	bpl.n	80046d6 <_printf_i+0x142>
 80046c4:	6923      	ldr	r3, [r4, #16]
 80046c6:	6861      	ldr	r1, [r4, #4]
 80046c8:	4299      	cmp	r1, r3
 80046ca:	bfde      	ittt	le
 80046cc:	2330      	movle	r3, #48	@ 0x30
 80046ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 80046d2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80046d6:	1b92      	subs	r2, r2, r6
 80046d8:	6122      	str	r2, [r4, #16]
 80046da:	f8cd a000 	str.w	sl, [sp]
 80046de:	464b      	mov	r3, r9
 80046e0:	aa03      	add	r2, sp, #12
 80046e2:	4621      	mov	r1, r4
 80046e4:	4640      	mov	r0, r8
 80046e6:	f7ff fee7 	bl	80044b8 <_printf_common>
 80046ea:	3001      	adds	r0, #1
 80046ec:	d14a      	bne.n	8004784 <_printf_i+0x1f0>
 80046ee:	f04f 30ff 	mov.w	r0, #4294967295
 80046f2:	b004      	add	sp, #16
 80046f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046f8:	6823      	ldr	r3, [r4, #0]
 80046fa:	f043 0320 	orr.w	r3, r3, #32
 80046fe:	6023      	str	r3, [r4, #0]
 8004700:	4832      	ldr	r0, [pc, #200]	@ (80047cc <_printf_i+0x238>)
 8004702:	2778      	movs	r7, #120	@ 0x78
 8004704:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004708:	6823      	ldr	r3, [r4, #0]
 800470a:	6831      	ldr	r1, [r6, #0]
 800470c:	061f      	lsls	r7, r3, #24
 800470e:	f851 5b04 	ldr.w	r5, [r1], #4
 8004712:	d402      	bmi.n	800471a <_printf_i+0x186>
 8004714:	065f      	lsls	r7, r3, #25
 8004716:	bf48      	it	mi
 8004718:	b2ad      	uxthmi	r5, r5
 800471a:	6031      	str	r1, [r6, #0]
 800471c:	07d9      	lsls	r1, r3, #31
 800471e:	bf44      	itt	mi
 8004720:	f043 0320 	orrmi.w	r3, r3, #32
 8004724:	6023      	strmi	r3, [r4, #0]
 8004726:	b11d      	cbz	r5, 8004730 <_printf_i+0x19c>
 8004728:	2310      	movs	r3, #16
 800472a:	e7ad      	b.n	8004688 <_printf_i+0xf4>
 800472c:	4826      	ldr	r0, [pc, #152]	@ (80047c8 <_printf_i+0x234>)
 800472e:	e7e9      	b.n	8004704 <_printf_i+0x170>
 8004730:	6823      	ldr	r3, [r4, #0]
 8004732:	f023 0320 	bic.w	r3, r3, #32
 8004736:	6023      	str	r3, [r4, #0]
 8004738:	e7f6      	b.n	8004728 <_printf_i+0x194>
 800473a:	4616      	mov	r6, r2
 800473c:	e7bd      	b.n	80046ba <_printf_i+0x126>
 800473e:	6833      	ldr	r3, [r6, #0]
 8004740:	6825      	ldr	r5, [r4, #0]
 8004742:	6961      	ldr	r1, [r4, #20]
 8004744:	1d18      	adds	r0, r3, #4
 8004746:	6030      	str	r0, [r6, #0]
 8004748:	062e      	lsls	r6, r5, #24
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	d501      	bpl.n	8004752 <_printf_i+0x1be>
 800474e:	6019      	str	r1, [r3, #0]
 8004750:	e002      	b.n	8004758 <_printf_i+0x1c4>
 8004752:	0668      	lsls	r0, r5, #25
 8004754:	d5fb      	bpl.n	800474e <_printf_i+0x1ba>
 8004756:	8019      	strh	r1, [r3, #0]
 8004758:	2300      	movs	r3, #0
 800475a:	6123      	str	r3, [r4, #16]
 800475c:	4616      	mov	r6, r2
 800475e:	e7bc      	b.n	80046da <_printf_i+0x146>
 8004760:	6833      	ldr	r3, [r6, #0]
 8004762:	1d1a      	adds	r2, r3, #4
 8004764:	6032      	str	r2, [r6, #0]
 8004766:	681e      	ldr	r6, [r3, #0]
 8004768:	6862      	ldr	r2, [r4, #4]
 800476a:	2100      	movs	r1, #0
 800476c:	4630      	mov	r0, r6
 800476e:	f7fb fd07 	bl	8000180 <memchr>
 8004772:	b108      	cbz	r0, 8004778 <_printf_i+0x1e4>
 8004774:	1b80      	subs	r0, r0, r6
 8004776:	6060      	str	r0, [r4, #4]
 8004778:	6863      	ldr	r3, [r4, #4]
 800477a:	6123      	str	r3, [r4, #16]
 800477c:	2300      	movs	r3, #0
 800477e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004782:	e7aa      	b.n	80046da <_printf_i+0x146>
 8004784:	6923      	ldr	r3, [r4, #16]
 8004786:	4632      	mov	r2, r6
 8004788:	4649      	mov	r1, r9
 800478a:	4640      	mov	r0, r8
 800478c:	47d0      	blx	sl
 800478e:	3001      	adds	r0, #1
 8004790:	d0ad      	beq.n	80046ee <_printf_i+0x15a>
 8004792:	6823      	ldr	r3, [r4, #0]
 8004794:	079b      	lsls	r3, r3, #30
 8004796:	d413      	bmi.n	80047c0 <_printf_i+0x22c>
 8004798:	68e0      	ldr	r0, [r4, #12]
 800479a:	9b03      	ldr	r3, [sp, #12]
 800479c:	4298      	cmp	r0, r3
 800479e:	bfb8      	it	lt
 80047a0:	4618      	movlt	r0, r3
 80047a2:	e7a6      	b.n	80046f2 <_printf_i+0x15e>
 80047a4:	2301      	movs	r3, #1
 80047a6:	4632      	mov	r2, r6
 80047a8:	4649      	mov	r1, r9
 80047aa:	4640      	mov	r0, r8
 80047ac:	47d0      	blx	sl
 80047ae:	3001      	adds	r0, #1
 80047b0:	d09d      	beq.n	80046ee <_printf_i+0x15a>
 80047b2:	3501      	adds	r5, #1
 80047b4:	68e3      	ldr	r3, [r4, #12]
 80047b6:	9903      	ldr	r1, [sp, #12]
 80047b8:	1a5b      	subs	r3, r3, r1
 80047ba:	42ab      	cmp	r3, r5
 80047bc:	dcf2      	bgt.n	80047a4 <_printf_i+0x210>
 80047be:	e7eb      	b.n	8004798 <_printf_i+0x204>
 80047c0:	2500      	movs	r5, #0
 80047c2:	f104 0619 	add.w	r6, r4, #25
 80047c6:	e7f5      	b.n	80047b4 <_printf_i+0x220>
 80047c8:	08004d35 	.word	0x08004d35
 80047cc:	08004d46 	.word	0x08004d46

080047d0 <__sflush_r>:
 80047d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80047d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047d6:	0716      	lsls	r6, r2, #28
 80047d8:	4605      	mov	r5, r0
 80047da:	460c      	mov	r4, r1
 80047dc:	d454      	bmi.n	8004888 <__sflush_r+0xb8>
 80047de:	684b      	ldr	r3, [r1, #4]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	dc02      	bgt.n	80047ea <__sflush_r+0x1a>
 80047e4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	dd48      	ble.n	800487c <__sflush_r+0xac>
 80047ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80047ec:	2e00      	cmp	r6, #0
 80047ee:	d045      	beq.n	800487c <__sflush_r+0xac>
 80047f0:	2300      	movs	r3, #0
 80047f2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80047f6:	682f      	ldr	r7, [r5, #0]
 80047f8:	6a21      	ldr	r1, [r4, #32]
 80047fa:	602b      	str	r3, [r5, #0]
 80047fc:	d030      	beq.n	8004860 <__sflush_r+0x90>
 80047fe:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004800:	89a3      	ldrh	r3, [r4, #12]
 8004802:	0759      	lsls	r1, r3, #29
 8004804:	d505      	bpl.n	8004812 <__sflush_r+0x42>
 8004806:	6863      	ldr	r3, [r4, #4]
 8004808:	1ad2      	subs	r2, r2, r3
 800480a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800480c:	b10b      	cbz	r3, 8004812 <__sflush_r+0x42>
 800480e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004810:	1ad2      	subs	r2, r2, r3
 8004812:	2300      	movs	r3, #0
 8004814:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004816:	6a21      	ldr	r1, [r4, #32]
 8004818:	4628      	mov	r0, r5
 800481a:	47b0      	blx	r6
 800481c:	1c43      	adds	r3, r0, #1
 800481e:	89a3      	ldrh	r3, [r4, #12]
 8004820:	d106      	bne.n	8004830 <__sflush_r+0x60>
 8004822:	6829      	ldr	r1, [r5, #0]
 8004824:	291d      	cmp	r1, #29
 8004826:	d82b      	bhi.n	8004880 <__sflush_r+0xb0>
 8004828:	4a28      	ldr	r2, [pc, #160]	@ (80048cc <__sflush_r+0xfc>)
 800482a:	40ca      	lsrs	r2, r1
 800482c:	07d6      	lsls	r6, r2, #31
 800482e:	d527      	bpl.n	8004880 <__sflush_r+0xb0>
 8004830:	2200      	movs	r2, #0
 8004832:	6062      	str	r2, [r4, #4]
 8004834:	04d9      	lsls	r1, r3, #19
 8004836:	6922      	ldr	r2, [r4, #16]
 8004838:	6022      	str	r2, [r4, #0]
 800483a:	d504      	bpl.n	8004846 <__sflush_r+0x76>
 800483c:	1c42      	adds	r2, r0, #1
 800483e:	d101      	bne.n	8004844 <__sflush_r+0x74>
 8004840:	682b      	ldr	r3, [r5, #0]
 8004842:	b903      	cbnz	r3, 8004846 <__sflush_r+0x76>
 8004844:	6560      	str	r0, [r4, #84]	@ 0x54
 8004846:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004848:	602f      	str	r7, [r5, #0]
 800484a:	b1b9      	cbz	r1, 800487c <__sflush_r+0xac>
 800484c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004850:	4299      	cmp	r1, r3
 8004852:	d002      	beq.n	800485a <__sflush_r+0x8a>
 8004854:	4628      	mov	r0, r5
 8004856:	f7ff fbf7 	bl	8004048 <_free_r>
 800485a:	2300      	movs	r3, #0
 800485c:	6363      	str	r3, [r4, #52]	@ 0x34
 800485e:	e00d      	b.n	800487c <__sflush_r+0xac>
 8004860:	2301      	movs	r3, #1
 8004862:	4628      	mov	r0, r5
 8004864:	47b0      	blx	r6
 8004866:	4602      	mov	r2, r0
 8004868:	1c50      	adds	r0, r2, #1
 800486a:	d1c9      	bne.n	8004800 <__sflush_r+0x30>
 800486c:	682b      	ldr	r3, [r5, #0]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d0c6      	beq.n	8004800 <__sflush_r+0x30>
 8004872:	2b1d      	cmp	r3, #29
 8004874:	d001      	beq.n	800487a <__sflush_r+0xaa>
 8004876:	2b16      	cmp	r3, #22
 8004878:	d11d      	bne.n	80048b6 <__sflush_r+0xe6>
 800487a:	602f      	str	r7, [r5, #0]
 800487c:	2000      	movs	r0, #0
 800487e:	e021      	b.n	80048c4 <__sflush_r+0xf4>
 8004880:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004884:	b21b      	sxth	r3, r3
 8004886:	e01a      	b.n	80048be <__sflush_r+0xee>
 8004888:	690f      	ldr	r7, [r1, #16]
 800488a:	2f00      	cmp	r7, #0
 800488c:	d0f6      	beq.n	800487c <__sflush_r+0xac>
 800488e:	0793      	lsls	r3, r2, #30
 8004890:	680e      	ldr	r6, [r1, #0]
 8004892:	bf08      	it	eq
 8004894:	694b      	ldreq	r3, [r1, #20]
 8004896:	600f      	str	r7, [r1, #0]
 8004898:	bf18      	it	ne
 800489a:	2300      	movne	r3, #0
 800489c:	1bf6      	subs	r6, r6, r7
 800489e:	608b      	str	r3, [r1, #8]
 80048a0:	2e00      	cmp	r6, #0
 80048a2:	ddeb      	ble.n	800487c <__sflush_r+0xac>
 80048a4:	6a21      	ldr	r1, [r4, #32]
 80048a6:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80048aa:	4633      	mov	r3, r6
 80048ac:	463a      	mov	r2, r7
 80048ae:	4628      	mov	r0, r5
 80048b0:	47e0      	blx	ip
 80048b2:	2800      	cmp	r0, #0
 80048b4:	dc07      	bgt.n	80048c6 <__sflush_r+0xf6>
 80048b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048be:	81a3      	strh	r3, [r4, #12]
 80048c0:	f04f 30ff 	mov.w	r0, #4294967295
 80048c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048c6:	4407      	add	r7, r0
 80048c8:	1a36      	subs	r6, r6, r0
 80048ca:	e7e9      	b.n	80048a0 <__sflush_r+0xd0>
 80048cc:	20400001 	.word	0x20400001

080048d0 <_fflush_r>:
 80048d0:	b538      	push	{r3, r4, r5, lr}
 80048d2:	690b      	ldr	r3, [r1, #16]
 80048d4:	4605      	mov	r5, r0
 80048d6:	460c      	mov	r4, r1
 80048d8:	b913      	cbnz	r3, 80048e0 <_fflush_r+0x10>
 80048da:	2500      	movs	r5, #0
 80048dc:	4628      	mov	r0, r5
 80048de:	bd38      	pop	{r3, r4, r5, pc}
 80048e0:	b118      	cbz	r0, 80048ea <_fflush_r+0x1a>
 80048e2:	6a03      	ldr	r3, [r0, #32]
 80048e4:	b90b      	cbnz	r3, 80048ea <_fflush_r+0x1a>
 80048e6:	f7ff f9b5 	bl	8003c54 <__sinit>
 80048ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d0f3      	beq.n	80048da <_fflush_r+0xa>
 80048f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80048f4:	07d0      	lsls	r0, r2, #31
 80048f6:	d404      	bmi.n	8004902 <_fflush_r+0x32>
 80048f8:	0599      	lsls	r1, r3, #22
 80048fa:	d402      	bmi.n	8004902 <_fflush_r+0x32>
 80048fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80048fe:	f7ff fba0 	bl	8004042 <__retarget_lock_acquire_recursive>
 8004902:	4628      	mov	r0, r5
 8004904:	4621      	mov	r1, r4
 8004906:	f7ff ff63 	bl	80047d0 <__sflush_r>
 800490a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800490c:	07da      	lsls	r2, r3, #31
 800490e:	4605      	mov	r5, r0
 8004910:	d4e4      	bmi.n	80048dc <_fflush_r+0xc>
 8004912:	89a3      	ldrh	r3, [r4, #12]
 8004914:	059b      	lsls	r3, r3, #22
 8004916:	d4e1      	bmi.n	80048dc <_fflush_r+0xc>
 8004918:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800491a:	f7ff fb93 	bl	8004044 <__retarget_lock_release_recursive>
 800491e:	e7dd      	b.n	80048dc <_fflush_r+0xc>

08004920 <__swhatbuf_r>:
 8004920:	b570      	push	{r4, r5, r6, lr}
 8004922:	460c      	mov	r4, r1
 8004924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004928:	2900      	cmp	r1, #0
 800492a:	b096      	sub	sp, #88	@ 0x58
 800492c:	4615      	mov	r5, r2
 800492e:	461e      	mov	r6, r3
 8004930:	da0d      	bge.n	800494e <__swhatbuf_r+0x2e>
 8004932:	89a3      	ldrh	r3, [r4, #12]
 8004934:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004938:	f04f 0100 	mov.w	r1, #0
 800493c:	bf14      	ite	ne
 800493e:	2340      	movne	r3, #64	@ 0x40
 8004940:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004944:	2000      	movs	r0, #0
 8004946:	6031      	str	r1, [r6, #0]
 8004948:	602b      	str	r3, [r5, #0]
 800494a:	b016      	add	sp, #88	@ 0x58
 800494c:	bd70      	pop	{r4, r5, r6, pc}
 800494e:	466a      	mov	r2, sp
 8004950:	f000 f848 	bl	80049e4 <_fstat_r>
 8004954:	2800      	cmp	r0, #0
 8004956:	dbec      	blt.n	8004932 <__swhatbuf_r+0x12>
 8004958:	9901      	ldr	r1, [sp, #4]
 800495a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800495e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004962:	4259      	negs	r1, r3
 8004964:	4159      	adcs	r1, r3
 8004966:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800496a:	e7eb      	b.n	8004944 <__swhatbuf_r+0x24>

0800496c <__smakebuf_r>:
 800496c:	898b      	ldrh	r3, [r1, #12]
 800496e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004970:	079d      	lsls	r5, r3, #30
 8004972:	4606      	mov	r6, r0
 8004974:	460c      	mov	r4, r1
 8004976:	d507      	bpl.n	8004988 <__smakebuf_r+0x1c>
 8004978:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800497c:	6023      	str	r3, [r4, #0]
 800497e:	6123      	str	r3, [r4, #16]
 8004980:	2301      	movs	r3, #1
 8004982:	6163      	str	r3, [r4, #20]
 8004984:	b003      	add	sp, #12
 8004986:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004988:	ab01      	add	r3, sp, #4
 800498a:	466a      	mov	r2, sp
 800498c:	f7ff ffc8 	bl	8004920 <__swhatbuf_r>
 8004990:	9f00      	ldr	r7, [sp, #0]
 8004992:	4605      	mov	r5, r0
 8004994:	4639      	mov	r1, r7
 8004996:	4630      	mov	r0, r6
 8004998:	f7ff fbc2 	bl	8004120 <_malloc_r>
 800499c:	b948      	cbnz	r0, 80049b2 <__smakebuf_r+0x46>
 800499e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049a2:	059a      	lsls	r2, r3, #22
 80049a4:	d4ee      	bmi.n	8004984 <__smakebuf_r+0x18>
 80049a6:	f023 0303 	bic.w	r3, r3, #3
 80049aa:	f043 0302 	orr.w	r3, r3, #2
 80049ae:	81a3      	strh	r3, [r4, #12]
 80049b0:	e7e2      	b.n	8004978 <__smakebuf_r+0xc>
 80049b2:	89a3      	ldrh	r3, [r4, #12]
 80049b4:	6020      	str	r0, [r4, #0]
 80049b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049ba:	81a3      	strh	r3, [r4, #12]
 80049bc:	9b01      	ldr	r3, [sp, #4]
 80049be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80049c2:	b15b      	cbz	r3, 80049dc <__smakebuf_r+0x70>
 80049c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049c8:	4630      	mov	r0, r6
 80049ca:	f000 f81d 	bl	8004a08 <_isatty_r>
 80049ce:	b128      	cbz	r0, 80049dc <__smakebuf_r+0x70>
 80049d0:	89a3      	ldrh	r3, [r4, #12]
 80049d2:	f023 0303 	bic.w	r3, r3, #3
 80049d6:	f043 0301 	orr.w	r3, r3, #1
 80049da:	81a3      	strh	r3, [r4, #12]
 80049dc:	89a3      	ldrh	r3, [r4, #12]
 80049de:	431d      	orrs	r5, r3
 80049e0:	81a5      	strh	r5, [r4, #12]
 80049e2:	e7cf      	b.n	8004984 <__smakebuf_r+0x18>

080049e4 <_fstat_r>:
 80049e4:	b538      	push	{r3, r4, r5, lr}
 80049e6:	4d07      	ldr	r5, [pc, #28]	@ (8004a04 <_fstat_r+0x20>)
 80049e8:	2300      	movs	r3, #0
 80049ea:	4604      	mov	r4, r0
 80049ec:	4608      	mov	r0, r1
 80049ee:	4611      	mov	r1, r2
 80049f0:	602b      	str	r3, [r5, #0]
 80049f2:	f7fc face 	bl	8000f92 <_fstat>
 80049f6:	1c43      	adds	r3, r0, #1
 80049f8:	d102      	bne.n	8004a00 <_fstat_r+0x1c>
 80049fa:	682b      	ldr	r3, [r5, #0]
 80049fc:	b103      	cbz	r3, 8004a00 <_fstat_r+0x1c>
 80049fe:	6023      	str	r3, [r4, #0]
 8004a00:	bd38      	pop	{r3, r4, r5, pc}
 8004a02:	bf00      	nop
 8004a04:	20000260 	.word	0x20000260

08004a08 <_isatty_r>:
 8004a08:	b538      	push	{r3, r4, r5, lr}
 8004a0a:	4d06      	ldr	r5, [pc, #24]	@ (8004a24 <_isatty_r+0x1c>)
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	4604      	mov	r4, r0
 8004a10:	4608      	mov	r0, r1
 8004a12:	602b      	str	r3, [r5, #0]
 8004a14:	f7fc facc 	bl	8000fb0 <_isatty>
 8004a18:	1c43      	adds	r3, r0, #1
 8004a1a:	d102      	bne.n	8004a22 <_isatty_r+0x1a>
 8004a1c:	682b      	ldr	r3, [r5, #0]
 8004a1e:	b103      	cbz	r3, 8004a22 <_isatty_r+0x1a>
 8004a20:	6023      	str	r3, [r4, #0]
 8004a22:	bd38      	pop	{r3, r4, r5, pc}
 8004a24:	20000260 	.word	0x20000260

08004a28 <_sbrk_r>:
 8004a28:	b538      	push	{r3, r4, r5, lr}
 8004a2a:	4d06      	ldr	r5, [pc, #24]	@ (8004a44 <_sbrk_r+0x1c>)
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	4604      	mov	r4, r0
 8004a30:	4608      	mov	r0, r1
 8004a32:	602b      	str	r3, [r5, #0]
 8004a34:	f7fc fad2 	bl	8000fdc <_sbrk>
 8004a38:	1c43      	adds	r3, r0, #1
 8004a3a:	d102      	bne.n	8004a42 <_sbrk_r+0x1a>
 8004a3c:	682b      	ldr	r3, [r5, #0]
 8004a3e:	b103      	cbz	r3, 8004a42 <_sbrk_r+0x1a>
 8004a40:	6023      	str	r3, [r4, #0]
 8004a42:	bd38      	pop	{r3, r4, r5, pc}
 8004a44:	20000260 	.word	0x20000260

08004a48 <_init>:
 8004a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a4a:	bf00      	nop
 8004a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a4e:	bc08      	pop	{r3}
 8004a50:	469e      	mov	lr, r3
 8004a52:	4770      	bx	lr

08004a54 <_fini>:
 8004a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a56:	bf00      	nop
 8004a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a5a:	bc08      	pop	{r3}
 8004a5c:	469e      	mov	lr, r3
 8004a5e:	4770      	bx	lr
