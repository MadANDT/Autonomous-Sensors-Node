
STOP2_WL55_1CPU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036cc  08000138  08000138  00001138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08003804  08003804  00004804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038e8  080038e8  00005010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080038e8  080038e8  000048e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080038f0  080038f0  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038f0  080038f0  000048f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080038f4  080038f4  000048f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080038f8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  20000010  08003908  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  08003908  000050fc  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000112ef  00000000  00000000  0000503a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025a4  00000000  00000000  00016329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c0  00000000  00000000  000188d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d81  00000000  00000000  00019a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ce30  00000000  00000000  0001a811  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ffc0  00000000  00000000  00037641  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b736d  00000000  00000000  00047601  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fe96e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a64  00000000  00000000  000fe9b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00103418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	@ (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	@ (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000010 	.word	0x20000010
 8000154:	00000000 	.word	0x00000000
 8000158:	080037ec 	.word	0x080037ec

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	@ (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	@ (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	@ (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000014 	.word	0x20000014
 8000174:	080037ec 	.word	0x080037ec

08000178 <__aeabi_uldivmod>:
 8000178:	b953      	cbnz	r3, 8000190 <__aeabi_uldivmod+0x18>
 800017a:	b94a      	cbnz	r2, 8000190 <__aeabi_uldivmod+0x18>
 800017c:	2900      	cmp	r1, #0
 800017e:	bf08      	it	eq
 8000180:	2800      	cmpeq	r0, #0
 8000182:	bf1c      	itt	ne
 8000184:	f04f 31ff 	movne.w	r1, #4294967295
 8000188:	f04f 30ff 	movne.w	r0, #4294967295
 800018c:	f000 b988 	b.w	80004a0 <__aeabi_idiv0>
 8000190:	f1ad 0c08 	sub.w	ip, sp, #8
 8000194:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000198:	f000 f806 	bl	80001a8 <__udivmoddi4>
 800019c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a4:	b004      	add	sp, #16
 80001a6:	4770      	bx	lr

080001a8 <__udivmoddi4>:
 80001a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001ac:	9d08      	ldr	r5, [sp, #32]
 80001ae:	468e      	mov	lr, r1
 80001b0:	4604      	mov	r4, r0
 80001b2:	4688      	mov	r8, r1
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d14a      	bne.n	800024e <__udivmoddi4+0xa6>
 80001b8:	428a      	cmp	r2, r1
 80001ba:	4617      	mov	r7, r2
 80001bc:	d962      	bls.n	8000284 <__udivmoddi4+0xdc>
 80001be:	fab2 f682 	clz	r6, r2
 80001c2:	b14e      	cbz	r6, 80001d8 <__udivmoddi4+0x30>
 80001c4:	f1c6 0320 	rsb	r3, r6, #32
 80001c8:	fa01 f806 	lsl.w	r8, r1, r6
 80001cc:	fa20 f303 	lsr.w	r3, r0, r3
 80001d0:	40b7      	lsls	r7, r6
 80001d2:	ea43 0808 	orr.w	r8, r3, r8
 80001d6:	40b4      	lsls	r4, r6
 80001d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80001dc:	fa1f fc87 	uxth.w	ip, r7
 80001e0:	fbb8 f1fe 	udiv	r1, r8, lr
 80001e4:	0c23      	lsrs	r3, r4, #16
 80001e6:	fb0e 8811 	mls	r8, lr, r1, r8
 80001ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001ee:	fb01 f20c 	mul.w	r2, r1, ip
 80001f2:	429a      	cmp	r2, r3
 80001f4:	d909      	bls.n	800020a <__udivmoddi4+0x62>
 80001f6:	18fb      	adds	r3, r7, r3
 80001f8:	f101 30ff 	add.w	r0, r1, #4294967295
 80001fc:	f080 80ea 	bcs.w	80003d4 <__udivmoddi4+0x22c>
 8000200:	429a      	cmp	r2, r3
 8000202:	f240 80e7 	bls.w	80003d4 <__udivmoddi4+0x22c>
 8000206:	3902      	subs	r1, #2
 8000208:	443b      	add	r3, r7
 800020a:	1a9a      	subs	r2, r3, r2
 800020c:	b2a3      	uxth	r3, r4
 800020e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000212:	fb0e 2210 	mls	r2, lr, r0, r2
 8000216:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800021a:	fb00 fc0c 	mul.w	ip, r0, ip
 800021e:	459c      	cmp	ip, r3
 8000220:	d909      	bls.n	8000236 <__udivmoddi4+0x8e>
 8000222:	18fb      	adds	r3, r7, r3
 8000224:	f100 32ff 	add.w	r2, r0, #4294967295
 8000228:	f080 80d6 	bcs.w	80003d8 <__udivmoddi4+0x230>
 800022c:	459c      	cmp	ip, r3
 800022e:	f240 80d3 	bls.w	80003d8 <__udivmoddi4+0x230>
 8000232:	443b      	add	r3, r7
 8000234:	3802      	subs	r0, #2
 8000236:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800023a:	eba3 030c 	sub.w	r3, r3, ip
 800023e:	2100      	movs	r1, #0
 8000240:	b11d      	cbz	r5, 800024a <__udivmoddi4+0xa2>
 8000242:	40f3      	lsrs	r3, r6
 8000244:	2200      	movs	r2, #0
 8000246:	e9c5 3200 	strd	r3, r2, [r5]
 800024a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800024e:	428b      	cmp	r3, r1
 8000250:	d905      	bls.n	800025e <__udivmoddi4+0xb6>
 8000252:	b10d      	cbz	r5, 8000258 <__udivmoddi4+0xb0>
 8000254:	e9c5 0100 	strd	r0, r1, [r5]
 8000258:	2100      	movs	r1, #0
 800025a:	4608      	mov	r0, r1
 800025c:	e7f5      	b.n	800024a <__udivmoddi4+0xa2>
 800025e:	fab3 f183 	clz	r1, r3
 8000262:	2900      	cmp	r1, #0
 8000264:	d146      	bne.n	80002f4 <__udivmoddi4+0x14c>
 8000266:	4573      	cmp	r3, lr
 8000268:	d302      	bcc.n	8000270 <__udivmoddi4+0xc8>
 800026a:	4282      	cmp	r2, r0
 800026c:	f200 8105 	bhi.w	800047a <__udivmoddi4+0x2d2>
 8000270:	1a84      	subs	r4, r0, r2
 8000272:	eb6e 0203 	sbc.w	r2, lr, r3
 8000276:	2001      	movs	r0, #1
 8000278:	4690      	mov	r8, r2
 800027a:	2d00      	cmp	r5, #0
 800027c:	d0e5      	beq.n	800024a <__udivmoddi4+0xa2>
 800027e:	e9c5 4800 	strd	r4, r8, [r5]
 8000282:	e7e2      	b.n	800024a <__udivmoddi4+0xa2>
 8000284:	2a00      	cmp	r2, #0
 8000286:	f000 8090 	beq.w	80003aa <__udivmoddi4+0x202>
 800028a:	fab2 f682 	clz	r6, r2
 800028e:	2e00      	cmp	r6, #0
 8000290:	f040 80a4 	bne.w	80003dc <__udivmoddi4+0x234>
 8000294:	1a8a      	subs	r2, r1, r2
 8000296:	0c03      	lsrs	r3, r0, #16
 8000298:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800029c:	b280      	uxth	r0, r0
 800029e:	b2bc      	uxth	r4, r7
 80002a0:	2101      	movs	r1, #1
 80002a2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002a6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ae:	fb04 f20c 	mul.w	r2, r4, ip
 80002b2:	429a      	cmp	r2, r3
 80002b4:	d907      	bls.n	80002c6 <__udivmoddi4+0x11e>
 80002b6:	18fb      	adds	r3, r7, r3
 80002b8:	f10c 38ff 	add.w	r8, ip, #4294967295
 80002bc:	d202      	bcs.n	80002c4 <__udivmoddi4+0x11c>
 80002be:	429a      	cmp	r2, r3
 80002c0:	f200 80e0 	bhi.w	8000484 <__udivmoddi4+0x2dc>
 80002c4:	46c4      	mov	ip, r8
 80002c6:	1a9b      	subs	r3, r3, r2
 80002c8:	fbb3 f2fe 	udiv	r2, r3, lr
 80002cc:	fb0e 3312 	mls	r3, lr, r2, r3
 80002d0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80002d4:	fb02 f404 	mul.w	r4, r2, r4
 80002d8:	429c      	cmp	r4, r3
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0x144>
 80002dc:	18fb      	adds	r3, r7, r3
 80002de:	f102 30ff 	add.w	r0, r2, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0x142>
 80002e4:	429c      	cmp	r4, r3
 80002e6:	f200 80ca 	bhi.w	800047e <__udivmoddi4+0x2d6>
 80002ea:	4602      	mov	r2, r0
 80002ec:	1b1b      	subs	r3, r3, r4
 80002ee:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80002f2:	e7a5      	b.n	8000240 <__udivmoddi4+0x98>
 80002f4:	f1c1 0620 	rsb	r6, r1, #32
 80002f8:	408b      	lsls	r3, r1
 80002fa:	fa22 f706 	lsr.w	r7, r2, r6
 80002fe:	431f      	orrs	r7, r3
 8000300:	fa0e f401 	lsl.w	r4, lr, r1
 8000304:	fa20 f306 	lsr.w	r3, r0, r6
 8000308:	fa2e fe06 	lsr.w	lr, lr, r6
 800030c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000310:	4323      	orrs	r3, r4
 8000312:	fa00 f801 	lsl.w	r8, r0, r1
 8000316:	fa1f fc87 	uxth.w	ip, r7
 800031a:	fbbe f0f9 	udiv	r0, lr, r9
 800031e:	0c1c      	lsrs	r4, r3, #16
 8000320:	fb09 ee10 	mls	lr, r9, r0, lr
 8000324:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000328:	fb00 fe0c 	mul.w	lr, r0, ip
 800032c:	45a6      	cmp	lr, r4
 800032e:	fa02 f201 	lsl.w	r2, r2, r1
 8000332:	d909      	bls.n	8000348 <__udivmoddi4+0x1a0>
 8000334:	193c      	adds	r4, r7, r4
 8000336:	f100 3aff 	add.w	sl, r0, #4294967295
 800033a:	f080 809c 	bcs.w	8000476 <__udivmoddi4+0x2ce>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f240 8099 	bls.w	8000476 <__udivmoddi4+0x2ce>
 8000344:	3802      	subs	r0, #2
 8000346:	443c      	add	r4, r7
 8000348:	eba4 040e 	sub.w	r4, r4, lr
 800034c:	fa1f fe83 	uxth.w	lr, r3
 8000350:	fbb4 f3f9 	udiv	r3, r4, r9
 8000354:	fb09 4413 	mls	r4, r9, r3, r4
 8000358:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800035c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000360:	45a4      	cmp	ip, r4
 8000362:	d908      	bls.n	8000376 <__udivmoddi4+0x1ce>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f103 3eff 	add.w	lr, r3, #4294967295
 800036a:	f080 8082 	bcs.w	8000472 <__udivmoddi4+0x2ca>
 800036e:	45a4      	cmp	ip, r4
 8000370:	d97f      	bls.n	8000472 <__udivmoddi4+0x2ca>
 8000372:	3b02      	subs	r3, #2
 8000374:	443c      	add	r4, r7
 8000376:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800037a:	eba4 040c 	sub.w	r4, r4, ip
 800037e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000382:	4564      	cmp	r4, ip
 8000384:	4673      	mov	r3, lr
 8000386:	46e1      	mov	r9, ip
 8000388:	d362      	bcc.n	8000450 <__udivmoddi4+0x2a8>
 800038a:	d05f      	beq.n	800044c <__udivmoddi4+0x2a4>
 800038c:	b15d      	cbz	r5, 80003a6 <__udivmoddi4+0x1fe>
 800038e:	ebb8 0203 	subs.w	r2, r8, r3
 8000392:	eb64 0409 	sbc.w	r4, r4, r9
 8000396:	fa04 f606 	lsl.w	r6, r4, r6
 800039a:	fa22 f301 	lsr.w	r3, r2, r1
 800039e:	431e      	orrs	r6, r3
 80003a0:	40cc      	lsrs	r4, r1
 80003a2:	e9c5 6400 	strd	r6, r4, [r5]
 80003a6:	2100      	movs	r1, #0
 80003a8:	e74f      	b.n	800024a <__udivmoddi4+0xa2>
 80003aa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003ae:	0c01      	lsrs	r1, r0, #16
 80003b0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80003ba:	463b      	mov	r3, r7
 80003bc:	4638      	mov	r0, r7
 80003be:	463c      	mov	r4, r7
 80003c0:	46b8      	mov	r8, r7
 80003c2:	46be      	mov	lr, r7
 80003c4:	2620      	movs	r6, #32
 80003c6:	fbb1 f1f7 	udiv	r1, r1, r7
 80003ca:	eba2 0208 	sub.w	r2, r2, r8
 80003ce:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80003d2:	e766      	b.n	80002a2 <__udivmoddi4+0xfa>
 80003d4:	4601      	mov	r1, r0
 80003d6:	e718      	b.n	800020a <__udivmoddi4+0x62>
 80003d8:	4610      	mov	r0, r2
 80003da:	e72c      	b.n	8000236 <__udivmoddi4+0x8e>
 80003dc:	f1c6 0220 	rsb	r2, r6, #32
 80003e0:	fa2e f302 	lsr.w	r3, lr, r2
 80003e4:	40b7      	lsls	r7, r6
 80003e6:	40b1      	lsls	r1, r6
 80003e8:	fa20 f202 	lsr.w	r2, r0, r2
 80003ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f0:	430a      	orrs	r2, r1
 80003f2:	fbb3 f8fe 	udiv	r8, r3, lr
 80003f6:	b2bc      	uxth	r4, r7
 80003f8:	fb0e 3318 	mls	r3, lr, r8, r3
 80003fc:	0c11      	lsrs	r1, r2, #16
 80003fe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000402:	fb08 f904 	mul.w	r9, r8, r4
 8000406:	40b0      	lsls	r0, r6
 8000408:	4589      	cmp	r9, r1
 800040a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800040e:	b280      	uxth	r0, r0
 8000410:	d93e      	bls.n	8000490 <__udivmoddi4+0x2e8>
 8000412:	1879      	adds	r1, r7, r1
 8000414:	f108 3cff 	add.w	ip, r8, #4294967295
 8000418:	d201      	bcs.n	800041e <__udivmoddi4+0x276>
 800041a:	4589      	cmp	r9, r1
 800041c:	d81f      	bhi.n	800045e <__udivmoddi4+0x2b6>
 800041e:	eba1 0109 	sub.w	r1, r1, r9
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fb09 f804 	mul.w	r8, r9, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	b292      	uxth	r2, r2
 8000430:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000434:	4542      	cmp	r2, r8
 8000436:	d229      	bcs.n	800048c <__udivmoddi4+0x2e4>
 8000438:	18ba      	adds	r2, r7, r2
 800043a:	f109 31ff 	add.w	r1, r9, #4294967295
 800043e:	d2c4      	bcs.n	80003ca <__udivmoddi4+0x222>
 8000440:	4542      	cmp	r2, r8
 8000442:	d2c2      	bcs.n	80003ca <__udivmoddi4+0x222>
 8000444:	f1a9 0102 	sub.w	r1, r9, #2
 8000448:	443a      	add	r2, r7
 800044a:	e7be      	b.n	80003ca <__udivmoddi4+0x222>
 800044c:	45f0      	cmp	r8, lr
 800044e:	d29d      	bcs.n	800038c <__udivmoddi4+0x1e4>
 8000450:	ebbe 0302 	subs.w	r3, lr, r2
 8000454:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000458:	3801      	subs	r0, #1
 800045a:	46e1      	mov	r9, ip
 800045c:	e796      	b.n	800038c <__udivmoddi4+0x1e4>
 800045e:	eba7 0909 	sub.w	r9, r7, r9
 8000462:	4449      	add	r1, r9
 8000464:	f1a8 0c02 	sub.w	ip, r8, #2
 8000468:	fbb1 f9fe 	udiv	r9, r1, lr
 800046c:	fb09 f804 	mul.w	r8, r9, r4
 8000470:	e7db      	b.n	800042a <__udivmoddi4+0x282>
 8000472:	4673      	mov	r3, lr
 8000474:	e77f      	b.n	8000376 <__udivmoddi4+0x1ce>
 8000476:	4650      	mov	r0, sl
 8000478:	e766      	b.n	8000348 <__udivmoddi4+0x1a0>
 800047a:	4608      	mov	r0, r1
 800047c:	e6fd      	b.n	800027a <__udivmoddi4+0xd2>
 800047e:	443b      	add	r3, r7
 8000480:	3a02      	subs	r2, #2
 8000482:	e733      	b.n	80002ec <__udivmoddi4+0x144>
 8000484:	f1ac 0c02 	sub.w	ip, ip, #2
 8000488:	443b      	add	r3, r7
 800048a:	e71c      	b.n	80002c6 <__udivmoddi4+0x11e>
 800048c:	4649      	mov	r1, r9
 800048e:	e79c      	b.n	80003ca <__udivmoddi4+0x222>
 8000490:	eba1 0109 	sub.w	r1, r1, r9
 8000494:	46c4      	mov	ip, r8
 8000496:	fbb1 f9fe 	udiv	r9, r1, lr
 800049a:	fb09 f804 	mul.w	r8, r9, r4
 800049e:	e7c4      	b.n	800042a <__udivmoddi4+0x282>

080004a0 <__aeabi_idiv0>:
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop

080004a4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004a4:	b480      	push	{r7}
 80004a6:	b085      	sub	sp, #20
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80004b0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80004b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	4313      	orrs	r3, r2
 80004ba:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80004c0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	4013      	ands	r3, r2
 80004c6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004c8:	68fb      	ldr	r3, [r7, #12]
}
 80004ca:	bf00      	nop
 80004cc:	3714      	adds	r7, #20
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bc80      	pop	{r7}
 80004d2:	4770      	bx	lr

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f000 faf8 	bl	8000acc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 f836 	bl	800054c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f000 f920 	bl	8000724 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e4:	f000 f8d2 	bl	800068c <MX_USART2_UART_Init>
  MX_RTC_Init();
 80004e8:	f000 f894 	bl	8000614 <MX_RTC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOB, currentLED_Pin, GPIO_PIN_SET);
 80004ec:	4b13      	ldr	r3, [pc, #76]	@ (800053c <main+0x68>)
 80004ee:	881b      	ldrh	r3, [r3, #0]
 80004f0:	2201      	movs	r2, #1
 80004f2:	4619      	mov	r1, r3
 80004f4:	4812      	ldr	r0, [pc, #72]	@ (8000540 <main+0x6c>)
 80004f6:	f000 fe0b 	bl	8001110 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 80004fa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80004fe:	f000 fb5b 	bl	8000bb8 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, currentLED_Pin, GPIO_PIN_RESET);
 8000502:	4b0e      	ldr	r3, [pc, #56]	@ (800053c <main+0x68>)
 8000504:	881b      	ldrh	r3, [r3, #0]
 8000506:	2200      	movs	r2, #0
 8000508:	4619      	mov	r1, r3
 800050a:	480d      	ldr	r0, [pc, #52]	@ (8000540 <main+0x6c>)
 800050c:	f000 fe00 	bl	8001110 <HAL_GPIO_WritePin>


	  HAL_SuspendTick();
 8000510:	f000 fb76 	bl	8000c00 <HAL_SuspendTick>
	  HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, blinkLength, RTC_WAKEUPCLOCK_RTCCLK_DIV16, 0);
 8000514:	4b0b      	ldr	r3, [pc, #44]	@ (8000544 <main+0x70>)
 8000516:	881b      	ldrh	r3, [r3, #0]
 8000518:	4619      	mov	r1, r3
 800051a:	2300      	movs	r3, #0
 800051c:	2200      	movs	r2, #0
 800051e:	480a      	ldr	r0, [pc, #40]	@ (8000548 <main+0x74>)
 8000520:	f002 fa98 	bl	8002a54 <HAL_RTCEx_SetWakeUpTimer_IT>

	  /* Enter STOP 2 mode */
	  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8000524:	2001      	movs	r0, #1
 8000526:	f000 fe3d 	bl	80011a4 <HAL_PWREx_EnterSTOP2Mode>
	  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 800052a:	4807      	ldr	r0, [pc, #28]	@ (8000548 <main+0x74>)
 800052c:	f002 fb18 	bl	8002b60 <HAL_RTCEx_DeactivateWakeUpTimer>
	  SystemClock_Config();
 8000530:	f000 f80c 	bl	800054c <SystemClock_Config>

	  HAL_ResumeTick();
 8000534:	f000 fb72 	bl	8000c1c <HAL_ResumeTick>
	  HAL_GPIO_WritePin(GPIOB, currentLED_Pin, GPIO_PIN_SET);
 8000538:	bf00      	nop
 800053a:	e7d7      	b.n	80004ec <main+0x18>
 800053c:	20000000 	.word	0x20000000
 8000540:	48000400 	.word	0x48000400
 8000544:	20000002 	.word	0x20000002
 8000548:	2000002c 	.word	0x2000002c

0800054c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b09a      	sub	sp, #104	@ 0x68
 8000550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000552:	f107 0320 	add.w	r3, r7, #32
 8000556:	2248      	movs	r2, #72	@ 0x48
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f003 f91a 	bl	8003794 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	605a      	str	r2, [r3, #4]
 8000568:	609a      	str	r2, [r3, #8]
 800056a:	60da      	str	r2, [r3, #12]
 800056c:	611a      	str	r2, [r3, #16]
 800056e:	615a      	str	r2, [r3, #20]
 8000570:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000572:	4b27      	ldr	r3, [pc, #156]	@ (8000610 <SystemClock_Config+0xc4>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800057a:	4a25      	ldr	r2, [pc, #148]	@ (8000610 <SystemClock_Config+0xc4>)
 800057c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000580:	6013      	str	r3, [r2, #0]
 8000582:	4b23      	ldr	r3, [pc, #140]	@ (8000610 <SystemClock_Config+0xc4>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800058a:	603b      	str	r3, [r7, #0]
 800058c:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 800058e:	2328      	movs	r3, #40	@ 0x28
 8000590:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000592:	2301      	movs	r3, #1
 8000594:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000596:	2300      	movs	r3, #0
 8000598:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800059a:	2360      	movs	r3, #96	@ 0x60
 800059c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80005a2:	2301      	movs	r3, #1
 80005a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a6:	2302      	movs	r3, #2
 80005a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005aa:	2301      	movs	r3, #1
 80005ac:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80005ae:	2300      	movs	r3, #0
 80005b0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 24;
 80005b2:	2318      	movs	r3, #24
 80005b4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80005ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005bc:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80005c0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80005c6:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c8:	f107 0320 	add.w	r3, r7, #32
 80005cc:	4618      	mov	r0, r3
 80005ce:	f001 f8cb 	bl	8001768 <HAL_RCC_OscConfig>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80005d8:	f000 f944 	bl	8000864 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80005dc:	234f      	movs	r3, #79	@ 0x4f
 80005de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e0:	2303      	movs	r3, #3
 80005e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005f4:	1d3b      	adds	r3, r7, #4
 80005f6:	2102      	movs	r1, #2
 80005f8:	4618      	mov	r0, r3
 80005fa:	f001 fc37 	bl	8001e6c <HAL_RCC_ClockConfig>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000604:	f000 f92e 	bl	8000864 <Error_Handler>
  }
}
 8000608:	bf00      	nop
 800060a:	3768      	adds	r7, #104	@ 0x68
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	58000400 	.word	0x58000400

08000614 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000618:	4b1a      	ldr	r3, [pc, #104]	@ (8000684 <MX_RTC_Init+0x70>)
 800061a:	4a1b      	ldr	r2, [pc, #108]	@ (8000688 <MX_RTC_Init+0x74>)
 800061c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800061e:	4b19      	ldr	r3, [pc, #100]	@ (8000684 <MX_RTC_Init+0x70>)
 8000620:	2200      	movs	r2, #0
 8000622:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000624:	4b17      	ldr	r3, [pc, #92]	@ (8000684 <MX_RTC_Init+0x70>)
 8000626:	227f      	movs	r2, #127	@ 0x7f
 8000628:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800062a:	4b16      	ldr	r3, [pc, #88]	@ (8000684 <MX_RTC_Init+0x70>)
 800062c:	22ff      	movs	r2, #255	@ 0xff
 800062e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000630:	4b14      	ldr	r3, [pc, #80]	@ (8000684 <MX_RTC_Init+0x70>)
 8000632:	2200      	movs	r2, #0
 8000634:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000636:	4b13      	ldr	r3, [pc, #76]	@ (8000684 <MX_RTC_Init+0x70>)
 8000638:	2200      	movs	r2, #0
 800063a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800063c:	4b11      	ldr	r3, [pc, #68]	@ (8000684 <MX_RTC_Init+0x70>)
 800063e:	2200      	movs	r2, #0
 8000640:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000642:	4b10      	ldr	r3, [pc, #64]	@ (8000684 <MX_RTC_Init+0x70>)
 8000644:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000648:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800064a:	4b0e      	ldr	r3, [pc, #56]	@ (8000684 <MX_RTC_Init+0x70>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <MX_RTC_Init+0x70>)
 8000652:	2200      	movs	r2, #0
 8000654:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000656:	480b      	ldr	r0, [pc, #44]	@ (8000684 <MX_RTC_Init+0x70>)
 8000658:	f002 f8e2 	bl	8002820 <HAL_RTC_Init>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000662:	f000 f8ff 	bl	8000864 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x0FA0, RTC_WAKEUPCLOCK_RTCCLK_DIV16, 0) != HAL_OK)
 8000666:	2300      	movs	r3, #0
 8000668:	2200      	movs	r2, #0
 800066a:	f44f 617a 	mov.w	r1, #4000	@ 0xfa0
 800066e:	4805      	ldr	r0, [pc, #20]	@ (8000684 <MX_RTC_Init+0x70>)
 8000670:	f002 f9f0 	bl	8002a54 <HAL_RTCEx_SetWakeUpTimer_IT>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_RTC_Init+0x6a>
  {
    Error_Handler();
 800067a:	f000 f8f3 	bl	8000864 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	2000002c 	.word	0x2000002c
 8000688:	40002800 	.word	0x40002800

0800068c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000690:	4b22      	ldr	r3, [pc, #136]	@ (800071c <MX_USART2_UART_Init+0x90>)
 8000692:	4a23      	ldr	r2, [pc, #140]	@ (8000720 <MX_USART2_UART_Init+0x94>)
 8000694:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000696:	4b21      	ldr	r3, [pc, #132]	@ (800071c <MX_USART2_UART_Init+0x90>)
 8000698:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800069c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800069e:	4b1f      	ldr	r3, [pc, #124]	@ (800071c <MX_USART2_UART_Init+0x90>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006a4:	4b1d      	ldr	r3, [pc, #116]	@ (800071c <MX_USART2_UART_Init+0x90>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006aa:	4b1c      	ldr	r3, [pc, #112]	@ (800071c <MX_USART2_UART_Init+0x90>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006b0:	4b1a      	ldr	r3, [pc, #104]	@ (800071c <MX_USART2_UART_Init+0x90>)
 80006b2:	220c      	movs	r2, #12
 80006b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006b6:	4b19      	ldr	r3, [pc, #100]	@ (800071c <MX_USART2_UART_Init+0x90>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006bc:	4b17      	ldr	r3, [pc, #92]	@ (800071c <MX_USART2_UART_Init+0x90>)
 80006be:	2200      	movs	r2, #0
 80006c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006c2:	4b16      	ldr	r3, [pc, #88]	@ (800071c <MX_USART2_UART_Init+0x90>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006c8:	4b14      	ldr	r3, [pc, #80]	@ (800071c <MX_USART2_UART_Init+0x90>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006ce:	4b13      	ldr	r3, [pc, #76]	@ (800071c <MX_USART2_UART_Init+0x90>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006d4:	4811      	ldr	r0, [pc, #68]	@ (800071c <MX_USART2_UART_Init+0x90>)
 80006d6:	f002 fadb 	bl	8002c90 <HAL_UART_Init>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80006e0:	f000 f8c0 	bl	8000864 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006e4:	2100      	movs	r1, #0
 80006e6:	480d      	ldr	r0, [pc, #52]	@ (800071c <MX_USART2_UART_Init+0x90>)
 80006e8:	f002 ff8b 	bl	8003602 <HAL_UARTEx_SetTxFifoThreshold>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80006f2:	f000 f8b7 	bl	8000864 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006f6:	2100      	movs	r1, #0
 80006f8:	4808      	ldr	r0, [pc, #32]	@ (800071c <MX_USART2_UART_Init+0x90>)
 80006fa:	f002 ffc0 	bl	800367e <HAL_UARTEx_SetRxFifoThreshold>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000704:	f000 f8ae 	bl	8000864 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000708:	4804      	ldr	r0, [pc, #16]	@ (800071c <MX_USART2_UART_Init+0x90>)
 800070a:	f002 ff42 	bl	8003592 <HAL_UARTEx_DisableFifoMode>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000714:	f000 f8a6 	bl	8000864 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000064 	.word	0x20000064
 8000720:	40004400 	.word	0x40004400

08000724 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b086      	sub	sp, #24
 8000728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
 8000736:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000738:	2002      	movs	r0, #2
 800073a:	f7ff feb3 	bl	80004a4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073e:	2004      	movs	r0, #4
 8000740:	f7ff feb0 	bl	80004a4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000744:	2001      	movs	r0, #1
 8000746:	f7ff fead 	bl	80004a4 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BLED_Pin|GLED_Pin|RLED_Pin, GPIO_PIN_RESET);
 800074a:	2200      	movs	r2, #0
 800074c:	f44f 410a 	mov.w	r1, #35328	@ 0x8a00
 8000750:	481d      	ldr	r0, [pc, #116]	@ (80007c8 <MX_GPIO_Init+0xa4>)
 8000752:	f000 fcdd 	bl	8001110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	2138      	movs	r1, #56	@ 0x38
 800075a:	481c      	ldr	r0, [pc, #112]	@ (80007cc <MX_GPIO_Init+0xa8>)
 800075c:	f000 fcd8 	bl	8001110 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BLED_Pin GLED_Pin RLED_Pin */
  GPIO_InitStruct.Pin = BLED_Pin|GLED_Pin|RLED_Pin;
 8000760:	f44f 430a 	mov.w	r3, #35328	@ 0x8a00
 8000764:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000766:	2301      	movs	r3, #1
 8000768:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076e:	2300      	movs	r3, #0
 8000770:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	4619      	mov	r1, r3
 8000776:	4814      	ldr	r0, [pc, #80]	@ (80007c8 <MX_GPIO_Init+0xa4>)
 8000778:	f000 fb6a 	bl	8000e50 <HAL_GPIO_Init>

  /*Configure GPIO pins : FE_CTRL3_Pin FE_CTRL2_Pin FE_CTRL1_Pin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 800077c:	2338      	movs	r3, #56	@ 0x38
 800077e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000780:	2301      	movs	r3, #1
 8000782:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000788:	2303      	movs	r3, #3
 800078a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	4619      	mov	r1, r3
 8000790:	480e      	ldr	r0, [pc, #56]	@ (80007cc <MX_GPIO_Init+0xa8>)
 8000792:	f000 fb5d 	bl	8000e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : UB1_Pin */
  GPIO_InitStruct.Pin = UB1_Pin;
 8000796:	2301      	movs	r3, #1
 8000798:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800079a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800079e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007a0:	2301      	movs	r3, #1
 80007a2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(UB1_GPIO_Port, &GPIO_InitStruct);
 80007a4:	1d3b      	adds	r3, r7, #4
 80007a6:	4619      	mov	r1, r3
 80007a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007ac:	f000 fb50 	bl	8000e50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80007b0:	2200      	movs	r2, #0
 80007b2:	2100      	movs	r1, #0
 80007b4:	2006      	movs	r0, #6
 80007b6:	f000 fb16 	bl	8000de6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007ba:	2006      	movs	r0, #6
 80007bc:	f000 fb2d 	bl	8000e1a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007c0:	bf00      	nop
 80007c2:	3718      	adds	r7, #24
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	48000400 	.word	0x48000400
 80007cc:	48000800 	.word	0x48000800

080007d0 <HAL_GPIO_EXTI_Callback>:
  * `currentLED_Pin` and `blinkLength` are updated here.
  * @param GPIO_Pin: Pin number that triggered the interrupt
  * @note  This function is called by the HAL when an external interrupt occurs.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	80fb      	strh	r3, [r7, #6]

	if (currentLED_Pin == BLED_Pin){
 80007da:	4b1f      	ldr	r3, [pc, #124]	@ (8000858 <HAL_GPIO_EXTI_Callback+0x88>)
 80007dc:	881b      	ldrh	r3, [r3, #0]
 80007de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80007e2:	d10e      	bne.n	8000802 <HAL_GPIO_EXTI_Callback+0x32>
		/* Wake up clock counter updates to 4 seconds,
		 * which corresponds to 0x1F40.
		 */ blinkLength = 0x1F40;
 80007e4:	4b1d      	ldr	r3, [pc, #116]	@ (800085c <HAL_GPIO_EXTI_Callback+0x8c>)
 80007e6:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80007ea:	801a      	strh	r2, [r3, #0]
		// Change blinking LED to green LED
		HAL_GPIO_WritePin(GPIOB, BLED_Pin, 0);
 80007ec:	2200      	movs	r2, #0
 80007ee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007f2:	481b      	ldr	r0, [pc, #108]	@ (8000860 <HAL_GPIO_EXTI_Callback+0x90>)
 80007f4:	f000 fc8c 	bl	8001110 <HAL_GPIO_WritePin>
		currentLED_Pin = GLED_Pin;
 80007f8:	4b17      	ldr	r3, [pc, #92]	@ (8000858 <HAL_GPIO_EXTI_Callback+0x88>)
 80007fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007fe:	801a      	strh	r2, [r3, #0]
		// Change blinking LED to blue LED
		HAL_GPIO_WritePin(GPIOB, RLED_Pin, 0);
		currentLED_Pin = BLED_Pin;
	}

}
 8000800:	e026      	b.n	8000850 <HAL_GPIO_EXTI_Callback+0x80>
	} else if (currentLED_Pin == GLED_Pin){
 8000802:	4b15      	ldr	r3, [pc, #84]	@ (8000858 <HAL_GPIO_EXTI_Callback+0x88>)
 8000804:	881b      	ldrh	r3, [r3, #0]
 8000806:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800080a:	d10e      	bne.n	800082a <HAL_GPIO_EXTI_Callback+0x5a>
		 */ blinkLength = 0x2EE0;
 800080c:	4b13      	ldr	r3, [pc, #76]	@ (800085c <HAL_GPIO_EXTI_Callback+0x8c>)
 800080e:	f642 62e0 	movw	r2, #12000	@ 0x2ee0
 8000812:	801a      	strh	r2, [r3, #0]
		 HAL_GPIO_WritePin(GPIOB, GLED_Pin, 0);
 8000814:	2200      	movs	r2, #0
 8000816:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800081a:	4811      	ldr	r0, [pc, #68]	@ (8000860 <HAL_GPIO_EXTI_Callback+0x90>)
 800081c:	f000 fc78 	bl	8001110 <HAL_GPIO_WritePin>
		 currentLED_Pin = RLED_Pin;
 8000820:	4b0d      	ldr	r3, [pc, #52]	@ (8000858 <HAL_GPIO_EXTI_Callback+0x88>)
 8000822:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000826:	801a      	strh	r2, [r3, #0]
}
 8000828:	e012      	b.n	8000850 <HAL_GPIO_EXTI_Callback+0x80>
	} else if (currentLED_Pin == RLED_Pin){
 800082a:	4b0b      	ldr	r3, [pc, #44]	@ (8000858 <HAL_GPIO_EXTI_Callback+0x88>)
 800082c:	881b      	ldrh	r3, [r3, #0]
 800082e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000832:	d10d      	bne.n	8000850 <HAL_GPIO_EXTI_Callback+0x80>
		 */ blinkLength = 0x0FA0;
 8000834:	4b09      	ldr	r3, [pc, #36]	@ (800085c <HAL_GPIO_EXTI_Callback+0x8c>)
 8000836:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 800083a:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, RLED_Pin, 0);
 800083c:	2200      	movs	r2, #0
 800083e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000842:	4807      	ldr	r0, [pc, #28]	@ (8000860 <HAL_GPIO_EXTI_Callback+0x90>)
 8000844:	f000 fc64 	bl	8001110 <HAL_GPIO_WritePin>
		currentLED_Pin = BLED_Pin;
 8000848:	4b03      	ldr	r3, [pc, #12]	@ (8000858 <HAL_GPIO_EXTI_Callback+0x88>)
 800084a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800084e:	801a      	strh	r2, [r3, #0]
}
 8000850:	bf00      	nop
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20000000 	.word	0x20000000
 800085c:	20000002 	.word	0x20000002
 8000860:	48000400 	.word	0x48000400

08000864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000868:	b672      	cpsid	i
}
 800086a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800086c:	bf00      	nop
 800086e:	e7fd      	b.n	800086c <Error_Handler+0x8>

08000870 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000874:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000878:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800087c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000880:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000884:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr

08000890 <LL_AHB2_GRP1_EnableClock>:
{
 8000890:	b480      	push	{r7}
 8000892:	b085      	sub	sp, #20
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000898:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800089c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800089e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	4313      	orrs	r3, r2
 80008a6:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80008a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80008ac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	4013      	ands	r3, r2
 80008b2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008b4:	68fb      	ldr	r3, [r7, #12]
}
 80008b6:	bf00      	nop
 80008b8:	3714      	adds	r7, #20
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bc80      	pop	{r7}
 80008be:	4770      	bx	lr

080008c0 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b085      	sub	sp, #20
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80008c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80008cc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80008ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	4313      	orrs	r3, r2
 80008d6:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80008d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80008dc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	4013      	ands	r3, r2
 80008e2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008e4:	68fb      	ldr	r3, [r7, #12]
}
 80008e6:	bf00      	nop
 80008e8:	3714      	adds	r7, #20
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr

080008f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bc80      	pop	{r7}
 80008fa:	4770      	bx	lr

080008fc <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b090      	sub	sp, #64	@ 0x40
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000904:	f107 0308 	add.w	r3, r7, #8
 8000908:	2238      	movs	r2, #56	@ 0x38
 800090a:	2100      	movs	r1, #0
 800090c:	4618      	mov	r0, r3
 800090e:	f002 ff41 	bl	8003794 <memset>
  if(hrtc->Instance==RTC)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a12      	ldr	r2, [pc, #72]	@ (8000960 <HAL_RTC_MspInit+0x64>)
 8000918:	4293      	cmp	r3, r2
 800091a:	d11d      	bne.n	8000958 <HAL_RTC_MspInit+0x5c>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800091c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000920:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000922:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000926:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000928:	f107 0308 	add.w	r3, r7, #8
 800092c:	4618      	mov	r0, r3
 800092e:	f001 fe5d 	bl	80025ec <HAL_RCCEx_PeriphCLKConfig>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000938:	f7ff ff94 	bl	8000864 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800093c:	f7ff ff98 	bl	8000870 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000940:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000944:	f7ff ffbc 	bl	80008c0 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8000948:	2200      	movs	r2, #0
 800094a:	2100      	movs	r1, #0
 800094c:	2003      	movs	r0, #3
 800094e:	f000 fa4a 	bl	8000de6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8000952:	2003      	movs	r0, #3
 8000954:	f000 fa61 	bl	8000e1a <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8000958:	bf00      	nop
 800095a:	3740      	adds	r7, #64	@ 0x40
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40002800 	.word	0x40002800

08000964 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b096      	sub	sp, #88	@ 0x58
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	609a      	str	r2, [r3, #8]
 8000978:	60da      	str	r2, [r3, #12]
 800097a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800097c:	f107 030c 	add.w	r3, r7, #12
 8000980:	2238      	movs	r2, #56	@ 0x38
 8000982:	2100      	movs	r1, #0
 8000984:	4618      	mov	r0, r3
 8000986:	f002 ff05 	bl	8003794 <memset>
  if(huart->Instance==USART2)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a17      	ldr	r2, [pc, #92]	@ (80009ec <HAL_UART_MspInit+0x88>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d126      	bne.n	80009e2 <HAL_UART_MspInit+0x7e>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000994:	2302      	movs	r3, #2
 8000996:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000998:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 800099c:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800099e:	f107 030c 	add.w	r3, r7, #12
 80009a2:	4618      	mov	r0, r3
 80009a4:	f001 fe22 	bl	80025ec <HAL_RCCEx_PeriphCLKConfig>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80009ae:	f7ff ff59 	bl	8000864 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009b2:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80009b6:	f7ff ff83 	bl	80008c0 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ba:	2001      	movs	r0, #1
 80009bc:	f7ff ff68 	bl	8000890 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 80009c0:	230c      	movs	r3, #12
 80009c2:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c4:	2302      	movs	r3, #2
 80009c6:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009cc:	2300      	movs	r3, #0
 80009ce:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009d0:	2307      	movs	r3, #7
 80009d2:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80009d8:	4619      	mov	r1, r3
 80009da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009de:	f000 fa37 	bl	8000e50 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80009e2:	bf00      	nop
 80009e4:	3758      	adds	r7, #88	@ 0x58
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40004400 	.word	0x40004400

080009f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009f4:	bf00      	nop
 80009f6:	e7fd      	b.n	80009f4 <NMI_Handler+0x4>

080009f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009fc:	bf00      	nop
 80009fe:	e7fd      	b.n	80009fc <HardFault_Handler+0x4>

08000a00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a04:	bf00      	nop
 8000a06:	e7fd      	b.n	8000a04 <MemManage_Handler+0x4>

08000a08 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a0c:	bf00      	nop
 8000a0e:	e7fd      	b.n	8000a0c <BusFault_Handler+0x4>

08000a10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a14:	bf00      	nop
 8000a16:	e7fd      	b.n	8000a14 <UsageFault_Handler+0x4>

08000a18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bc80      	pop	{r7}
 8000a22:	4770      	bx	lr

08000a24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bc80      	pop	{r7}
 8000a2e:	4770      	bx	lr

08000a30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr

08000a3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a40:	f000 f89e 	bl	8000b80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC Wakeup Interrupt.
  */
void RTC_WKUP_IRQHandler(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000a4c:	4802      	ldr	r0, [pc, #8]	@ (8000a58 <RTC_WKUP_IRQHandler+0x10>)
 8000a4e:	f002 f8db 	bl	8002c08 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	2000002c 	.word	0x2000002c

08000a5c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line 0 Interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UB1_Pin);
 8000a60:	2001      	movs	r0, #1
 8000a62:	f000 fb6d 	bl	8001140 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}

08000a6a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000a6e:	bf00      	nop
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bc80      	pop	{r7}
 8000a74:	4770      	bx	lr
	...

08000a78 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a78:	480d      	ldr	r0, [pc, #52]	@ (8000ab0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a7a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a7c:	f7ff fff5 	bl	8000a6a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a80:	480c      	ldr	r0, [pc, #48]	@ (8000ab4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a82:	490d      	ldr	r1, [pc, #52]	@ (8000ab8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a84:	4a0d      	ldr	r2, [pc, #52]	@ (8000abc <LoopForever+0xe>)
  movs r3, #0
 8000a86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a88:	e002      	b.n	8000a90 <LoopCopyDataInit>

08000a8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a8e:	3304      	adds	r3, #4

08000a90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a94:	d3f9      	bcc.n	8000a8a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a96:	4a0a      	ldr	r2, [pc, #40]	@ (8000ac0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a98:	4c0a      	ldr	r4, [pc, #40]	@ (8000ac4 <LoopForever+0x16>)
  movs r3, #0
 8000a9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a9c:	e001      	b.n	8000aa2 <LoopFillZerobss>

08000a9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa0:	3204      	adds	r2, #4

08000aa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa4:	d3fb      	bcc.n	8000a9e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000aa6:	f002 fe7d 	bl	80037a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000aaa:	f7ff fd13 	bl	80004d4 <main>

08000aae <LoopForever>:

LoopForever:
    b LoopForever
 8000aae:	e7fe      	b.n	8000aae <LoopForever>
  ldr   r0, =_estack
 8000ab0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000ab4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000abc:	080038f8 	.word	0x080038f8
  ldr r2, =_sbss
 8000ac0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000ac4:	200000fc 	.word	0x200000fc

08000ac8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ac8:	e7fe      	b.n	8000ac8 <ADC_IRQHandler>
	...

08000acc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ad6:	2003      	movs	r0, #3
 8000ad8:	f000 f97a 	bl	8000dd0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000adc:	f001 fba8 	bl	8002230 <HAL_RCC_GetHCLKFreq>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	4a09      	ldr	r2, [pc, #36]	@ (8000b08 <HAL_Init+0x3c>)
 8000ae4:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ae6:	2000      	movs	r0, #0
 8000ae8:	f000 f810 	bl	8000b0c <HAL_InitTick>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d002      	beq.n	8000af8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000af2:	2301      	movs	r3, #1
 8000af4:	71fb      	strb	r3, [r7, #7]
 8000af6:	e001      	b.n	8000afc <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000af8:	f7ff fefa 	bl	80008f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000afc:	79fb      	ldrb	r3, [r7, #7]
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000004 	.word	0x20000004

08000b0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b14:	2300      	movs	r3, #0
 8000b16:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b18:	4b17      	ldr	r3, [pc, #92]	@ (8000b78 <HAL_InitTick+0x6c>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d024      	beq.n	8000b6a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b20:	f001 fb86 	bl	8002230 <HAL_RCC_GetHCLKFreq>
 8000b24:	4602      	mov	r2, r0
 8000b26:	4b14      	ldr	r3, [pc, #80]	@ (8000b78 <HAL_InitTick+0x6c>)
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b30:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f000 f97c 	bl	8000e36 <HAL_SYSTICK_Config>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d10f      	bne.n	8000b64 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2b0f      	cmp	r3, #15
 8000b48:	d809      	bhi.n	8000b5e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	6879      	ldr	r1, [r7, #4]
 8000b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8000b52:	f000 f948 	bl	8000de6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b56:	4a09      	ldr	r2, [pc, #36]	@ (8000b7c <HAL_InitTick+0x70>)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6013      	str	r3, [r2, #0]
 8000b5c:	e007      	b.n	8000b6e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	73fb      	strb	r3, [r7, #15]
 8000b62:	e004      	b.n	8000b6e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b64:	2301      	movs	r3, #1
 8000b66:	73fb      	strb	r3, [r7, #15]
 8000b68:	e001      	b.n	8000b6e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3710      	adds	r7, #16
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	2000000c 	.word	0x2000000c
 8000b7c:	20000008 	.word	0x20000008

08000b80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b84:	4b05      	ldr	r3, [pc, #20]	@ (8000b9c <HAL_IncTick+0x1c>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	4b05      	ldr	r3, [pc, #20]	@ (8000ba0 <HAL_IncTick+0x20>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4413      	add	r3, r2
 8000b90:	4a03      	ldr	r2, [pc, #12]	@ (8000ba0 <HAL_IncTick+0x20>)
 8000b92:	6013      	str	r3, [r2, #0]
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bc80      	pop	{r7}
 8000b9a:	4770      	bx	lr
 8000b9c:	2000000c 	.word	0x2000000c
 8000ba0:	200000f8 	.word	0x200000f8

08000ba4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba8:	4b02      	ldr	r3, [pc, #8]	@ (8000bb4 <HAL_GetTick+0x10>)
 8000baa:	681b      	ldr	r3, [r3, #0]
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	4770      	bx	lr
 8000bb4:	200000f8 	.word	0x200000f8

08000bb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bc0:	f7ff fff0 	bl	8000ba4 <HAL_GetTick>
 8000bc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bd0:	d005      	beq.n	8000bde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8000bfc <HAL_Delay+0x44>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	4413      	add	r3, r2
 8000bdc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bde:	bf00      	nop
 8000be0:	f7ff ffe0 	bl	8000ba4 <HAL_GetTick>
 8000be4:	4602      	mov	r2, r0
 8000be6:	68bb      	ldr	r3, [r7, #8]
 8000be8:	1ad3      	subs	r3, r2, r3
 8000bea:	68fa      	ldr	r2, [r7, #12]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d8f7      	bhi.n	8000be0 <HAL_Delay+0x28>
  {
  }
}
 8000bf0:	bf00      	nop
 8000bf2:	bf00      	nop
 8000bf4:	3710      	adds	r7, #16
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	2000000c 	.word	0x2000000c

08000c00 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000c04:	4b04      	ldr	r3, [pc, #16]	@ (8000c18 <HAL_SuspendTick+0x18>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a03      	ldr	r2, [pc, #12]	@ (8000c18 <HAL_SuspendTick+0x18>)
 8000c0a:	f023 0302 	bic.w	r3, r3, #2
 8000c0e:	6013      	str	r3, [r2, #0]
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bc80      	pop	{r7}
 8000c16:	4770      	bx	lr
 8000c18:	e000e010 	.word	0xe000e010

08000c1c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000c20:	4b04      	ldr	r3, [pc, #16]	@ (8000c34 <HAL_ResumeTick+0x18>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a03      	ldr	r2, [pc, #12]	@ (8000c34 <HAL_ResumeTick+0x18>)
 8000c26:	f043 0302 	orr.w	r3, r3, #2
 8000c2a:	6013      	str	r3, [r2, #0]
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bc80      	pop	{r7}
 8000c32:	4770      	bx	lr
 8000c34:	e000e010 	.word	0xe000e010

08000c38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	f003 0307 	and.w	r3, r3, #7
 8000c46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c48:	4b0c      	ldr	r3, [pc, #48]	@ (8000c7c <__NVIC_SetPriorityGrouping+0x44>)
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c4e:	68ba      	ldr	r2, [r7, #8]
 8000c50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c54:	4013      	ands	r3, r2
 8000c56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c6a:	4a04      	ldr	r2, [pc, #16]	@ (8000c7c <__NVIC_SetPriorityGrouping+0x44>)
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	60d3      	str	r3, [r2, #12]
}
 8000c70:	bf00      	nop
 8000c72:	3714      	adds	r7, #20
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bc80      	pop	{r7}
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c84:	4b04      	ldr	r3, [pc, #16]	@ (8000c98 <__NVIC_GetPriorityGrouping+0x18>)
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	0a1b      	lsrs	r3, r3, #8
 8000c8a:	f003 0307 	and.w	r3, r3, #7
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bc80      	pop	{r7}
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	db0b      	blt.n	8000cc6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	f003 021f 	and.w	r2, r3, #31
 8000cb4:	4906      	ldr	r1, [pc, #24]	@ (8000cd0 <__NVIC_EnableIRQ+0x34>)
 8000cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cba:	095b      	lsrs	r3, r3, #5
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	fa00 f202 	lsl.w	r2, r0, r2
 8000cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cc6:	bf00      	nop
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bc80      	pop	{r7}
 8000cce:	4770      	bx	lr
 8000cd0:	e000e100 	.word	0xe000e100

08000cd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	6039      	str	r1, [r7, #0]
 8000cde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	db0a      	blt.n	8000cfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	b2da      	uxtb	r2, r3
 8000cec:	490c      	ldr	r1, [pc, #48]	@ (8000d20 <__NVIC_SetPriority+0x4c>)
 8000cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf2:	0112      	lsls	r2, r2, #4
 8000cf4:	b2d2      	uxtb	r2, r2
 8000cf6:	440b      	add	r3, r1
 8000cf8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cfc:	e00a      	b.n	8000d14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	b2da      	uxtb	r2, r3
 8000d02:	4908      	ldr	r1, [pc, #32]	@ (8000d24 <__NVIC_SetPriority+0x50>)
 8000d04:	79fb      	ldrb	r3, [r7, #7]
 8000d06:	f003 030f 	and.w	r3, r3, #15
 8000d0a:	3b04      	subs	r3, #4
 8000d0c:	0112      	lsls	r2, r2, #4
 8000d0e:	b2d2      	uxtb	r2, r2
 8000d10:	440b      	add	r3, r1
 8000d12:	761a      	strb	r2, [r3, #24]
}
 8000d14:	bf00      	nop
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bc80      	pop	{r7}
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	e000e100 	.word	0xe000e100
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b089      	sub	sp, #36	@ 0x24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	f003 0307 	and.w	r3, r3, #7
 8000d3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	f1c3 0307 	rsb	r3, r3, #7
 8000d42:	2b04      	cmp	r3, #4
 8000d44:	bf28      	it	cs
 8000d46:	2304      	movcs	r3, #4
 8000d48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	3304      	adds	r3, #4
 8000d4e:	2b06      	cmp	r3, #6
 8000d50:	d902      	bls.n	8000d58 <NVIC_EncodePriority+0x30>
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	3b03      	subs	r3, #3
 8000d56:	e000      	b.n	8000d5a <NVIC_EncodePriority+0x32>
 8000d58:	2300      	movs	r3, #0
 8000d5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d60:	69bb      	ldr	r3, [r7, #24]
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	43da      	mvns	r2, r3
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	401a      	ands	r2, r3
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d70:	f04f 31ff 	mov.w	r1, #4294967295
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7a:	43d9      	mvns	r1, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d80:	4313      	orrs	r3, r2
         );
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3724      	adds	r7, #36	@ 0x24
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr

08000d8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3b01      	subs	r3, #1
 8000d98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d9c:	d301      	bcc.n	8000da2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e00f      	b.n	8000dc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000da2:	4a0a      	ldr	r2, [pc, #40]	@ (8000dcc <SysTick_Config+0x40>)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	3b01      	subs	r3, #1
 8000da8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000daa:	210f      	movs	r1, #15
 8000dac:	f04f 30ff 	mov.w	r0, #4294967295
 8000db0:	f7ff ff90 	bl	8000cd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000db4:	4b05      	ldr	r3, [pc, #20]	@ (8000dcc <SysTick_Config+0x40>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dba:	4b04      	ldr	r3, [pc, #16]	@ (8000dcc <SysTick_Config+0x40>)
 8000dbc:	2207      	movs	r2, #7
 8000dbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dc0:	2300      	movs	r3, #0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	e000e010 	.word	0xe000e010

08000dd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f7ff ff2d 	bl	8000c38 <__NVIC_SetPriorityGrouping>
}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b086      	sub	sp, #24
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	4603      	mov	r3, r0
 8000dee:	60b9      	str	r1, [r7, #8]
 8000df0:	607a      	str	r2, [r7, #4]
 8000df2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000df4:	f7ff ff44 	bl	8000c80 <__NVIC_GetPriorityGrouping>
 8000df8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	68b9      	ldr	r1, [r7, #8]
 8000dfe:	6978      	ldr	r0, [r7, #20]
 8000e00:	f7ff ff92 	bl	8000d28 <NVIC_EncodePriority>
 8000e04:	4602      	mov	r2, r0
 8000e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e0a:	4611      	mov	r1, r2
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff ff61 	bl	8000cd4 <__NVIC_SetPriority>
}
 8000e12:	bf00      	nop
 8000e14:	3718      	adds	r7, #24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b082      	sub	sp, #8
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	4603      	mov	r3, r0
 8000e22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff ff37 	bl	8000c9c <__NVIC_EnableIRQ>
}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b082      	sub	sp, #8
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000e3e:	6878      	ldr	r0, [r7, #4]
 8000e40:	f7ff ffa4 	bl	8000d8c <SysTick_Config>
 8000e44:	4603      	mov	r3, r0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b087      	sub	sp, #28
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e5e:	e140      	b.n	80010e2 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	2101      	movs	r1, #1
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	f000 8132 	beq.w	80010dc <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f003 0303 	and.w	r3, r3, #3
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d005      	beq.n	8000e90 <HAL_GPIO_Init+0x40>
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f003 0303 	and.w	r3, r3, #3
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	d130      	bne.n	8000ef2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	2203      	movs	r2, #3
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	68da      	ldr	r2, [r3, #12]
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	091b      	lsrs	r3, r3, #4
 8000edc:	f003 0201 	and.w	r2, r3, #1
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f003 0303 	and.w	r3, r3, #3
 8000efa:	2b03      	cmp	r3, #3
 8000efc:	d017      	beq.n	8000f2e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	68db      	ldr	r3, [r3, #12]
 8000f02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	2203      	movs	r2, #3
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	4013      	ands	r3, r2
 8000f14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	689a      	ldr	r2, [r3, #8]
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f003 0303 	and.w	r3, r3, #3
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d123      	bne.n	8000f82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	08da      	lsrs	r2, r3, #3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	3208      	adds	r2, #8
 8000f42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	f003 0307 	and.w	r3, r3, #7
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	220f      	movs	r2, #15
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	43db      	mvns	r3, r3
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	691a      	ldr	r2, [r3, #16]
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	f003 0307 	and.w	r3, r3, #7
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	08da      	lsrs	r2, r3, #3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3208      	adds	r2, #8
 8000f7c:	6939      	ldr	r1, [r7, #16]
 8000f7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	2203      	movs	r2, #3
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	43db      	mvns	r3, r3
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	4013      	ands	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f003 0203 	and.w	r2, r3, #3
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	f000 808c 	beq.w	80010dc <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000fc4:	4a4e      	ldr	r2, [pc, #312]	@ (8001100 <HAL_GPIO_Init+0x2b0>)
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	089b      	lsrs	r3, r3, #2
 8000fca:	3302      	adds	r3, #2
 8000fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	f003 0303 	and.w	r3, r3, #3
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	2207      	movs	r2, #7
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000fee:	d00d      	beq.n	800100c <HAL_GPIO_Init+0x1bc>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4a44      	ldr	r2, [pc, #272]	@ (8001104 <HAL_GPIO_Init+0x2b4>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d007      	beq.n	8001008 <HAL_GPIO_Init+0x1b8>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4a43      	ldr	r2, [pc, #268]	@ (8001108 <HAL_GPIO_Init+0x2b8>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d101      	bne.n	8001004 <HAL_GPIO_Init+0x1b4>
 8001000:	2302      	movs	r3, #2
 8001002:	e004      	b.n	800100e <HAL_GPIO_Init+0x1be>
 8001004:	2307      	movs	r3, #7
 8001006:	e002      	b.n	800100e <HAL_GPIO_Init+0x1be>
 8001008:	2301      	movs	r3, #1
 800100a:	e000      	b.n	800100e <HAL_GPIO_Init+0x1be>
 800100c:	2300      	movs	r3, #0
 800100e:	697a      	ldr	r2, [r7, #20]
 8001010:	f002 0203 	and.w	r2, r2, #3
 8001014:	0092      	lsls	r2, r2, #2
 8001016:	4093      	lsls	r3, r2
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	4313      	orrs	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800101e:	4938      	ldr	r1, [pc, #224]	@ (8001100 <HAL_GPIO_Init+0x2b0>)
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	089b      	lsrs	r3, r3, #2
 8001024:	3302      	adds	r3, #2
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800102c:	4b37      	ldr	r3, [pc, #220]	@ (800110c <HAL_GPIO_Init+0x2bc>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	43db      	mvns	r3, r3
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	4013      	ands	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001044:	2b00      	cmp	r3, #0
 8001046:	d003      	beq.n	8001050 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	4313      	orrs	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001050:	4a2e      	ldr	r2, [pc, #184]	@ (800110c <HAL_GPIO_Init+0x2bc>)
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001056:	4b2d      	ldr	r3, [pc, #180]	@ (800110c <HAL_GPIO_Init+0x2bc>)
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	43db      	mvns	r3, r3
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	4013      	ands	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d003      	beq.n	800107a <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	4313      	orrs	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800107a:	4a24      	ldr	r2, [pc, #144]	@ (800110c <HAL_GPIO_Init+0x2bc>)
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001080:	4b22      	ldr	r3, [pc, #136]	@ (800110c <HAL_GPIO_Init+0x2bc>)
 8001082:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001086:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	43db      	mvns	r3, r3
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	4013      	ands	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d003      	beq.n	80010a6 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80010a6:	4a19      	ldr	r2, [pc, #100]	@ (800110c <HAL_GPIO_Init+0x2bc>)
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80010ae:	4b17      	ldr	r3, [pc, #92]	@ (800110c <HAL_GPIO_Init+0x2bc>)
 80010b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80010b4:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	43db      	mvns	r3, r3
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	4013      	ands	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d003      	beq.n	80010d4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80010d4:	4a0d      	ldr	r2, [pc, #52]	@ (800110c <HAL_GPIO_Init+0x2bc>)
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	3301      	adds	r3, #1
 80010e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	fa22 f303 	lsr.w	r3, r2, r3
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	f47f aeb7 	bne.w	8000e60 <HAL_GPIO_Init+0x10>
  }
}
 80010f2:	bf00      	nop
 80010f4:	bf00      	nop
 80010f6:	371c      	adds	r7, #28
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bc80      	pop	{r7}
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	40010000 	.word	0x40010000
 8001104:	48000400 	.word	0x48000400
 8001108:	48000800 	.word	0x48000800
 800110c:	58000800 	.word	0x58000800

08001110 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	460b      	mov	r3, r1
 800111a:	807b      	strh	r3, [r7, #2]
 800111c:	4613      	mov	r3, r2
 800111e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001120:	787b      	ldrb	r3, [r7, #1]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d003      	beq.n	800112e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001126:	887a      	ldrh	r2, [r7, #2]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800112c:	e002      	b.n	8001134 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800112e:	887a      	ldrh	r2, [r7, #2]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001134:	bf00      	nop
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	bc80      	pop	{r7}
 800113c:	4770      	bx	lr
	...

08001140 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800114a:	4b08      	ldr	r3, [pc, #32]	@ (800116c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800114c:	68da      	ldr	r2, [r3, #12]
 800114e:	88fb      	ldrh	r3, [r7, #6]
 8001150:	4013      	ands	r3, r2
 8001152:	2b00      	cmp	r3, #0
 8001154:	d006      	beq.n	8001164 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001156:	4a05      	ldr	r2, [pc, #20]	@ (800116c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001158:	88fb      	ldrh	r3, [r7, #6]
 800115a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800115c:	88fb      	ldrh	r3, [r7, #6]
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff fb36 	bl	80007d0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001164:	bf00      	nop
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	58000800 	.word	0x58000800

08001170 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001174:	4b04      	ldr	r3, [pc, #16]	@ (8001188 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a03      	ldr	r2, [pc, #12]	@ (8001188 <HAL_PWR_EnableBkUpAccess+0x18>)
 800117a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800117e:	6013      	str	r3, [r2, #0]
}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	bc80      	pop	{r7}
 8001186:	4770      	bx	lr
 8001188:	58000400 	.word	0x58000400

0800118c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001190:	4b03      	ldr	r3, [pc, #12]	@ (80011a0 <HAL_PWREx_GetVoltageRange+0x14>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8001198:	4618      	mov	r0, r3
 800119a:	46bd      	mov	sp, r7
 800119c:	bc80      	pop	{r7}
 800119e:	4770      	bx	lr
 80011a0:	58000400 	.word	0x58000400

080011a4 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 80011ae:	4b10      	ldr	r3, [pc, #64]	@ (80011f0 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f023 0307 	bic.w	r3, r3, #7
 80011b6:	4a0e      	ldr	r2, [pc, #56]	@ (80011f0 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 80011b8:	f043 0302 	orr.w	r3, r3, #2
 80011bc:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80011be:	4b0d      	ldr	r3, [pc, #52]	@ (80011f4 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80011c0:	691b      	ldr	r3, [r3, #16]
 80011c2:	4a0c      	ldr	r2, [pc, #48]	@ (80011f4 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80011c4:	f043 0304 	orr.w	r3, r3, #4
 80011c8:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d101      	bne.n	80011d4 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80011d0:	bf30      	wfi
 80011d2:	e002      	b.n	80011da <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80011d4:	bf40      	sev
    __WFE();
 80011d6:	bf20      	wfe
    __WFE();
 80011d8:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80011da:	4b06      	ldr	r3, [pc, #24]	@ (80011f4 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80011dc:	691b      	ldr	r3, [r3, #16]
 80011de:	4a05      	ldr	r2, [pc, #20]	@ (80011f4 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80011e0:	f023 0304 	bic.w	r3, r3, #4
 80011e4:	6113      	str	r3, [r2, #16]
}
 80011e6:	bf00      	nop
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bc80      	pop	{r7}
 80011ee:	4770      	bx	lr
 80011f0:	58000400 	.word	0x58000400
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80011fc:	4b06      	ldr	r3, [pc, #24]	@ (8001218 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001204:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001208:	d101      	bne.n	800120e <LL_PWR_IsEnabledBkUpAccess+0x16>
 800120a:	2301      	movs	r3, #1
 800120c:	e000      	b.n	8001210 <LL_PWR_IsEnabledBkUpAccess+0x18>
 800120e:	2300      	movs	r3, #0
}
 8001210:	4618      	mov	r0, r3
 8001212:	46bd      	mov	sp, r7
 8001214:	bc80      	pop	{r7}
 8001216:	4770      	bx	lr
 8001218:	58000400 	.word	0x58000400

0800121c <LL_RCC_HSE_EnableTcxo>:
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001220:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800122a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800122e:	6013      	str	r3, [r2, #0]
}
 8001230:	bf00      	nop
 8001232:	46bd      	mov	sp, r7
 8001234:	bc80      	pop	{r7}
 8001236:	4770      	bx	lr

08001238 <LL_RCC_HSE_DisableTcxo>:
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800123c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001246:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800124a:	6013      	str	r3, [r2, #0]
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	bc80      	pop	{r7}
 8001252:	4770      	bx	lr

08001254 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001258:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001262:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001266:	d101      	bne.n	800126c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001268:	2301      	movs	r3, #1
 800126a:	e000      	b.n	800126e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	46bd      	mov	sp, r7
 8001272:	bc80      	pop	{r7}
 8001274:	4770      	bx	lr

08001276 <LL_RCC_HSE_Enable>:
{
 8001276:	b480      	push	{r7}
 8001278:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800127a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001284:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001288:	6013      	str	r3, [r2, #0]
}
 800128a:	bf00      	nop
 800128c:	46bd      	mov	sp, r7
 800128e:	bc80      	pop	{r7}
 8001290:	4770      	bx	lr

08001292 <LL_RCC_HSE_Disable>:
{
 8001292:	b480      	push	{r7}
 8001294:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001296:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80012a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012a4:	6013      	str	r3, [r2, #0]
}
 80012a6:	bf00      	nop
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bc80      	pop	{r7}
 80012ac:	4770      	bx	lr

080012ae <LL_RCC_HSE_IsReady>:
{
 80012ae:	b480      	push	{r7}
 80012b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80012b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80012c0:	d101      	bne.n	80012c6 <LL_RCC_HSE_IsReady+0x18>
 80012c2:	2301      	movs	r3, #1
 80012c4:	e000      	b.n	80012c8 <LL_RCC_HSE_IsReady+0x1a>
 80012c6:	2300      	movs	r3, #0
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bc80      	pop	{r7}
 80012ce:	4770      	bx	lr

080012d0 <LL_RCC_HSI_Enable>:
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80012d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80012de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012e2:	6013      	str	r3, [r2, #0]
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr

080012ec <LL_RCC_HSI_Disable>:
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80012f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80012fa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80012fe:	6013      	str	r3, [r2, #0]
}
 8001300:	bf00      	nop
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr

08001308 <LL_RCC_HSI_IsReady>:
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800130c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001316:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800131a:	d101      	bne.n	8001320 <LL_RCC_HSI_IsReady+0x18>
 800131c:	2301      	movs	r3, #1
 800131e:	e000      	b.n	8001322 <LL_RCC_HSI_IsReady+0x1a>
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	46bd      	mov	sp, r7
 8001326:	bc80      	pop	{r7}
 8001328:	4770      	bx	lr

0800132a <LL_RCC_HSI_SetCalibTrimming>:
{
 800132a:	b480      	push	{r7}
 800132c:	b083      	sub	sp, #12
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001332:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	061b      	lsls	r3, r3, #24
 8001340:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001344:	4313      	orrs	r3, r2
 8001346:	604b      	str	r3, [r1, #4]
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	bc80      	pop	{r7}
 8001350:	4770      	bx	lr

08001352 <LL_RCC_LSE_IsReady>:
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001356:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800135a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	2b02      	cmp	r3, #2
 8001364:	d101      	bne.n	800136a <LL_RCC_LSE_IsReady+0x18>
 8001366:	2301      	movs	r3, #1
 8001368:	e000      	b.n	800136c <LL_RCC_LSE_IsReady+0x1a>
 800136a:	2300      	movs	r3, #0
}
 800136c:	4618      	mov	r0, r3
 800136e:	46bd      	mov	sp, r7
 8001370:	bc80      	pop	{r7}
 8001372:	4770      	bx	lr

08001374 <LL_RCC_LSI_Enable>:
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001378:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800137c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001380:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr

08001394 <LL_RCC_LSI_Disable>:
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001398:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800139c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80013a4:	f023 0301 	bic.w	r3, r3, #1
 80013a8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr

080013b4 <LL_RCC_LSI_IsReady>:
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80013b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013c0:	f003 0302 	and.w	r3, r3, #2
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d101      	bne.n	80013cc <LL_RCC_LSI_IsReady+0x18>
 80013c8:	2301      	movs	r3, #1
 80013ca:	e000      	b.n	80013ce <LL_RCC_LSI_IsReady+0x1a>
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bc80      	pop	{r7}
 80013d4:	4770      	bx	lr

080013d6 <LL_RCC_MSI_Enable>:
{
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80013da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80013e4:	f043 0301 	orr.w	r3, r3, #1
 80013e8:	6013      	str	r3, [r2, #0]
}
 80013ea:	bf00      	nop
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bc80      	pop	{r7}
 80013f0:	4770      	bx	lr

080013f2 <LL_RCC_MSI_Disable>:
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80013f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001400:	f023 0301 	bic.w	r3, r3, #1
 8001404:	6013      	str	r3, [r2, #0]
}
 8001406:	bf00      	nop
 8001408:	46bd      	mov	sp, r7
 800140a:	bc80      	pop	{r7}
 800140c:	4770      	bx	lr

0800140e <LL_RCC_MSI_IsReady>:
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001412:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 0302 	and.w	r3, r3, #2
 800141c:	2b02      	cmp	r3, #2
 800141e:	d101      	bne.n	8001424 <LL_RCC_MSI_IsReady+0x16>
 8001420:	2301      	movs	r3, #1
 8001422:	e000      	b.n	8001426 <LL_RCC_MSI_IsReady+0x18>
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	46bd      	mov	sp, r7
 800142a:	bc80      	pop	{r7}
 800142c:	4770      	bx	lr

0800142e <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8001432:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0308 	and.w	r3, r3, #8
 800143c:	2b08      	cmp	r3, #8
 800143e:	d101      	bne.n	8001444 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001440:	2301      	movs	r3, #1
 8001442:	e000      	b.n	8001446 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	46bd      	mov	sp, r7
 800144a:	bc80      	pop	{r7}
 800144c:	4770      	bx	lr

0800144e <LL_RCC_MSI_GetRange>:
{
 800144e:	b480      	push	{r7}
 8001450:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8001452:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800145c:	4618      	mov	r0, r3
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr

08001464 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001468:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800146c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001470:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8001474:	4618      	mov	r0, r3
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr

0800147c <LL_RCC_MSI_SetCalibTrimming>:
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001484:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	021b      	lsls	r3, r3, #8
 8001492:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001496:	4313      	orrs	r3, r2
 8001498:	604b      	str	r3, [r1, #4]
}
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr

080014a4 <LL_RCC_SetSysClkSource>:
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80014ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f023 0203 	bic.w	r2, r3, #3
 80014b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4313      	orrs	r3, r2
 80014be:	608b      	str	r3, [r1, #8]
}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bc80      	pop	{r7}
 80014c8:	4770      	bx	lr

080014ca <LL_RCC_GetSysClkSource>:
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80014ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	f003 030c 	and.w	r3, r3, #12
}
 80014d8:	4618      	mov	r0, r3
 80014da:	46bd      	mov	sp, r7
 80014dc:	bc80      	pop	{r7}
 80014de:	4770      	bx	lr

080014e0 <LL_RCC_SetAHBPrescaler>:
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80014e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	608b      	str	r3, [r1, #8]
}
 80014fc:	bf00      	nop
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	bc80      	pop	{r7}
 8001504:	4770      	bx	lr

08001506 <LL_C2_RCC_SetAHBPrescaler>:
{
 8001506:	b480      	push	{r7}
 8001508:	b083      	sub	sp, #12
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800150e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001512:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001516:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800151a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4313      	orrs	r3, r2
 8001522:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8001526:	bf00      	nop
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr

08001530 <LL_RCC_SetAHB3Prescaler>:
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001538:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800153c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001540:	f023 020f 	bic.w	r2, r3, #15
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	091b      	lsrs	r3, r3, #4
 8001548:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800154c:	4313      	orrs	r3, r2
 800154e:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8001552:	bf00      	nop
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr

0800155c <LL_RCC_SetAPB1Prescaler>:
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001564:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800156e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4313      	orrs	r3, r2
 8001576:	608b      	str	r3, [r1, #8]
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	bc80      	pop	{r7}
 8001580:	4770      	bx	lr

08001582 <LL_RCC_SetAPB2Prescaler>:
{
 8001582:	b480      	push	{r7}
 8001584:	b083      	sub	sp, #12
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800158a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001594:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	4313      	orrs	r3, r2
 800159c:	608b      	str	r3, [r1, #8]
}
 800159e:	bf00      	nop
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bc80      	pop	{r7}
 80015a6:	4770      	bx	lr

080015a8 <LL_RCC_GetAHBPrescaler>:
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80015ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bc80      	pop	{r7}
 80015bc:	4770      	bx	lr

080015be <LL_RCC_GetAHB3Prescaler>:
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80015c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015c6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80015ca:	011b      	lsls	r3, r3, #4
 80015cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr

080015d8 <LL_RCC_GetAPB1Prescaler>:
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80015dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bc80      	pop	{r7}
 80015ec:	4770      	bx	lr

080015ee <LL_RCC_GetAPB2Prescaler>:
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80015f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	46bd      	mov	sp, r7
 8001600:	bc80      	pop	{r7}
 8001602:	4770      	bx	lr

08001604 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001608:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001612:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001616:	6013      	str	r3, [r2, #0]
}
 8001618:	bf00      	nop
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr

08001620 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001624:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800162e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001632:	6013      	str	r3, [r2, #0]
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	bc80      	pop	{r7}
 800163a:	4770      	bx	lr

0800163c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001640:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800164a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800164e:	d101      	bne.n	8001654 <LL_RCC_PLL_IsReady+0x18>
 8001650:	2301      	movs	r3, #1
 8001652:	e000      	b.n	8001656 <LL_RCC_PLL_IsReady+0x1a>
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	46bd      	mov	sp, r7
 800165a:	bc80      	pop	{r7}
 800165c:	4770      	bx	lr

0800165e <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001662:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	0a1b      	lsrs	r3, r3, #8
 800166a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800166e:	4618      	mov	r0, r3
 8001670:	46bd      	mov	sp, r7
 8001672:	bc80      	pop	{r7}
 8001674:	4770      	bx	lr

08001676 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001676:	b480      	push	{r7}
 8001678:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800167a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8001684:	4618      	mov	r0, r3
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr

0800168c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001690:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800169a:	4618      	mov	r0, r3
 800169c:	46bd      	mov	sp, r7
 800169e:	bc80      	pop	{r7}
 80016a0:	4770      	bx	lr

080016a2 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80016a2:	b480      	push	{r7}
 80016a4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80016a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	f003 0303 	and.w	r3, r3, #3
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr

080016b8 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80016bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016ca:	d101      	bne.n	80016d0 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80016cc:	2301      	movs	r3, #1
 80016ce:	e000      	b.n	80016d2 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc80      	pop	{r7}
 80016d8:	4770      	bx	lr

080016da <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80016da:	b480      	push	{r7}
 80016dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80016de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016e2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80016e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80016ee:	d101      	bne.n	80016f4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80016f0:	2301      	movs	r3, #1
 80016f2:	e000      	b.n	80016f6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bc80      	pop	{r7}
 80016fc:	4770      	bx	lr

080016fe <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80016fe:	b480      	push	{r7}
 8001700:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001702:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001706:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800170a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800170e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001712:	d101      	bne.n	8001718 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001714:	2301      	movs	r3, #1
 8001716:	e000      	b.n	800171a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr

08001722 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001722:	b480      	push	{r7}
 8001724:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001726:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001730:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001734:	d101      	bne.n	800173a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001736:	2301      	movs	r3, #1
 8001738:	e000      	b.n	800173c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800173a:	2300      	movs	r3, #0
}
 800173c:	4618      	mov	r0, r3
 800173e:	46bd      	mov	sp, r7
 8001740:	bc80      	pop	{r7}
 8001742:	4770      	bx	lr

08001744 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001748:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001752:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001756:	d101      	bne.n	800175c <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001758:	2301      	movs	r3, #1
 800175a:	e000      	b.n	800175e <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	46bd      	mov	sp, r7
 8001762:	bc80      	pop	{r7}
 8001764:	4770      	bx	lr
	...

08001768 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b088      	sub	sp, #32
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d101      	bne.n	800177a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e36f      	b.n	8001e5a <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800177a:	f7ff fea6 	bl	80014ca <LL_RCC_GetSysClkSource>
 800177e:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001780:	f7ff ff8f 	bl	80016a2 <LL_RCC_PLL_GetMainSource>
 8001784:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0320 	and.w	r3, r3, #32
 800178e:	2b00      	cmp	r3, #0
 8001790:	f000 80c4 	beq.w	800191c <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d005      	beq.n	80017a6 <HAL_RCC_OscConfig+0x3e>
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	2b0c      	cmp	r3, #12
 800179e:	d176      	bne.n	800188e <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d173      	bne.n	800188e <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a1b      	ldr	r3, [r3, #32]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d101      	bne.n	80017b2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e353      	b.n	8001e5a <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80017b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0308 	and.w	r3, r3, #8
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d005      	beq.n	80017d0 <HAL_RCC_OscConfig+0x68>
 80017c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80017ce:	e006      	b.n	80017de <HAL_RCC_OscConfig+0x76>
 80017d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017d8:	091b      	lsrs	r3, r3, #4
 80017da:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80017de:	4293      	cmp	r3, r2
 80017e0:	d222      	bcs.n	8001828 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017e6:	4618      	mov	r0, r3
 80017e8:	f000 fd5a 	bl	80022a0 <RCC_SetFlashLatencyFromMSIRange>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e331      	b.n	8001e5a <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001800:	f043 0308 	orr.w	r3, r3, #8
 8001804:	6013      	str	r3, [r2, #0]
 8001806:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001814:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001818:	4313      	orrs	r3, r2
 800181a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff fe2b 	bl	800147c <LL_RCC_MSI_SetCalibTrimming>
 8001826:	e021      	b.n	800186c <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001828:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001832:	f043 0308 	orr.w	r3, r3, #8
 8001836:	6013      	str	r3, [r2, #0]
 8001838:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001846:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800184a:	4313      	orrs	r3, r2
 800184c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff fe12 	bl	800147c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800185c:	4618      	mov	r0, r3
 800185e:	f000 fd1f 	bl	80022a0 <RCC_SetFlashLatencyFromMSIRange>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e2f6      	b.n	8001e5a <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800186c:	f000 fce0 	bl	8002230 <HAL_RCC_GetHCLKFreq>
 8001870:	4603      	mov	r3, r0
 8001872:	4aa7      	ldr	r2, [pc, #668]	@ (8001b10 <HAL_RCC_OscConfig+0x3a8>)
 8001874:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8001876:	4ba7      	ldr	r3, [pc, #668]	@ (8001b14 <HAL_RCC_OscConfig+0x3ac>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff f946 	bl	8000b0c <HAL_InitTick>
 8001880:	4603      	mov	r3, r0
 8001882:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8001884:	7cfb      	ldrb	r3, [r7, #19]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d047      	beq.n	800191a <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 800188a:	7cfb      	ldrb	r3, [r7, #19]
 800188c:	e2e5      	b.n	8001e5a <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6a1b      	ldr	r3, [r3, #32]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d02c      	beq.n	80018f0 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001896:	f7ff fd9e 	bl	80013d6 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800189a:	f7ff f983 	bl	8000ba4 <HAL_GetTick>
 800189e:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80018a0:	e008      	b.n	80018b4 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018a2:	f7ff f97f 	bl	8000ba4 <HAL_GetTick>
 80018a6:	4602      	mov	r2, r0
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e2d2      	b.n	8001e5a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 80018b4:	f7ff fdab 	bl	800140e <LL_RCC_MSI_IsReady>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d0f1      	beq.n	80018a2 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80018c8:	f043 0308 	orr.w	r3, r3, #8
 80018cc:	6013      	str	r3, [r2, #0]
 80018ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018dc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80018e0:	4313      	orrs	r3, r2
 80018e2:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff fdc7 	bl	800147c <LL_RCC_MSI_SetCalibTrimming>
 80018ee:	e015      	b.n	800191c <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80018f0:	f7ff fd7f 	bl	80013f2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018f4:	f7ff f956 	bl	8000ba4 <HAL_GetTick>
 80018f8:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80018fa:	e008      	b.n	800190e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018fc:	f7ff f952 	bl	8000ba4 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b02      	cmp	r3, #2
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e2a5      	b.n	8001e5a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 800190e:	f7ff fd7e 	bl	800140e <LL_RCC_MSI_IsReady>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d1f1      	bne.n	80018fc <HAL_RCC_OscConfig+0x194>
 8001918:	e000      	b.n	800191c <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800191a:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0301 	and.w	r3, r3, #1
 8001924:	2b00      	cmp	r3, #0
 8001926:	d058      	beq.n	80019da <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	2b08      	cmp	r3, #8
 800192c:	d005      	beq.n	800193a <HAL_RCC_OscConfig+0x1d2>
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	2b0c      	cmp	r3, #12
 8001932:	d108      	bne.n	8001946 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	2b03      	cmp	r3, #3
 8001938:	d105      	bne.n	8001946 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d14b      	bne.n	80019da <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e289      	b.n	8001e5a <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8001946:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001958:	4313      	orrs	r3, r2
 800195a:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001964:	d102      	bne.n	800196c <HAL_RCC_OscConfig+0x204>
 8001966:	f7ff fc86 	bl	8001276 <LL_RCC_HSE_Enable>
 800196a:	e00d      	b.n	8001988 <HAL_RCC_OscConfig+0x220>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8001974:	d104      	bne.n	8001980 <HAL_RCC_OscConfig+0x218>
 8001976:	f7ff fc51 	bl	800121c <LL_RCC_HSE_EnableTcxo>
 800197a:	f7ff fc7c 	bl	8001276 <LL_RCC_HSE_Enable>
 800197e:	e003      	b.n	8001988 <HAL_RCC_OscConfig+0x220>
 8001980:	f7ff fc87 	bl	8001292 <LL_RCC_HSE_Disable>
 8001984:	f7ff fc58 	bl	8001238 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d012      	beq.n	80019b6 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001990:	f7ff f908 	bl	8000ba4 <HAL_GetTick>
 8001994:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001998:	f7ff f904 	bl	8000ba4 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b64      	cmp	r3, #100	@ 0x64
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e257      	b.n	8001e5a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 80019aa:	f7ff fc80 	bl	80012ae <LL_RCC_HSE_IsReady>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d0f1      	beq.n	8001998 <HAL_RCC_OscConfig+0x230>
 80019b4:	e011      	b.n	80019da <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b6:	f7ff f8f5 	bl	8000ba4 <HAL_GetTick>
 80019ba:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80019bc:	e008      	b.n	80019d0 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019be:	f7ff f8f1 	bl	8000ba4 <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b64      	cmp	r3, #100	@ 0x64
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e244      	b.n	8001e5a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 80019d0:	f7ff fc6d 	bl	80012ae <LL_RCC_HSE_IsReady>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1f1      	bne.n	80019be <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d046      	beq.n	8001a74 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	2b04      	cmp	r3, #4
 80019ea:	d005      	beq.n	80019f8 <HAL_RCC_OscConfig+0x290>
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	2b0c      	cmp	r3, #12
 80019f0:	d10e      	bne.n	8001a10 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d10b      	bne.n	8001a10 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	691b      	ldr	r3, [r3, #16]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d101      	bne.n	8001a04 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e22a      	b.n	8001e5a <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	695b      	ldr	r3, [r3, #20]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff fc8e 	bl	800132a <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001a0e:	e031      	b.n	8001a74 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	691b      	ldr	r3, [r3, #16]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d019      	beq.n	8001a4c <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a18:	f7ff fc5a 	bl	80012d0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1c:	f7ff f8c2 	bl	8000ba4 <HAL_GetTick>
 8001a20:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a24:	f7ff f8be 	bl	8000ba4 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e211      	b.n	8001e5a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001a36:	f7ff fc67 	bl	8001308 <LL_RCC_HSI_IsReady>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d0f1      	beq.n	8001a24 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	695b      	ldr	r3, [r3, #20]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff fc70 	bl	800132a <LL_RCC_HSI_SetCalibTrimming>
 8001a4a:	e013      	b.n	8001a74 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a4c:	f7ff fc4e 	bl	80012ec <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a50:	f7ff f8a8 	bl	8000ba4 <HAL_GetTick>
 8001a54:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a58:	f7ff f8a4 	bl	8000ba4 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e1f7      	b.n	8001e5a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001a6a:	f7ff fc4d 	bl	8001308 <LL_RCC_HSI_IsReady>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d1f1      	bne.n	8001a58 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0308 	and.w	r3, r3, #8
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d06e      	beq.n	8001b5e <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d056      	beq.n	8001b36 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8001a88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a90:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	69da      	ldr	r2, [r3, #28]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	f003 0310 	and.w	r3, r3, #16
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d031      	beq.n	8001b04 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d006      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d101      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e1d0      	b.n	8001e5a <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d013      	beq.n	8001aea <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8001ac2:	f7ff fc67 	bl	8001394 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ac6:	f7ff f86d 	bl	8000ba4 <HAL_GetTick>
 8001aca:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8001acc:	e008      	b.n	8001ae0 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ace:	f7ff f869 	bl	8000ba4 <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b11      	cmp	r3, #17
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e1bc      	b.n	8001e5a <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8001ae0:	f7ff fc68 	bl	80013b4 <LL_RCC_LSI_IsReady>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1f1      	bne.n	8001ace <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8001aea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001aee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001af2:	f023 0210 	bic.w	r2, r3, #16
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	69db      	ldr	r3, [r3, #28]
 8001afa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001afe:	4313      	orrs	r3, r2
 8001b00:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b04:	f7ff fc36 	bl	8001374 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b08:	f7ff f84c 	bl	8000ba4 <HAL_GetTick>
 8001b0c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8001b0e:	e00c      	b.n	8001b2a <HAL_RCC_OscConfig+0x3c2>
 8001b10:	20000004 	.word	0x20000004
 8001b14:	20000008 	.word	0x20000008
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b18:	f7ff f844 	bl	8000ba4 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b11      	cmp	r3, #17
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e197      	b.n	8001e5a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8001b2a:	f7ff fc43 	bl	80013b4 <LL_RCC_LSI_IsReady>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d0f1      	beq.n	8001b18 <HAL_RCC_OscConfig+0x3b0>
 8001b34:	e013      	b.n	8001b5e <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b36:	f7ff fc2d 	bl	8001394 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b3a:	f7ff f833 	bl	8000ba4 <HAL_GetTick>
 8001b3e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8001b40:	e008      	b.n	8001b54 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b42:	f7ff f82f 	bl	8000ba4 <HAL_GetTick>
 8001b46:	4602      	mov	r2, r0
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	2b11      	cmp	r3, #17
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e182      	b.n	8001e5a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8001b54:	f7ff fc2e 	bl	80013b4 <LL_RCC_LSI_IsReady>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d1f1      	bne.n	8001b42 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0304 	and.w	r3, r3, #4
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f000 80d8 	beq.w	8001d1c <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001b6c:	f7ff fb44 	bl	80011f8 <LL_PWR_IsEnabledBkUpAccess>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d113      	bne.n	8001b9e <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001b76:	f7ff fafb 	bl	8001170 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b7a:	f7ff f813 	bl	8000ba4 <HAL_GetTick>
 8001b7e:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001b80:	e008      	b.n	8001b94 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b82:	f7ff f80f 	bl	8000ba4 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d901      	bls.n	8001b94 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e162      	b.n	8001e5a <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001b94:	f7ff fb30 	bl	80011f8 <LL_PWR_IsEnabledBkUpAccess>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d0f1      	beq.n	8001b82 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d07b      	beq.n	8001c9e <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	2b85      	cmp	r3, #133	@ 0x85
 8001bac:	d003      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	2b05      	cmp	r3, #5
 8001bb4:	d109      	bne.n	8001bca <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001bb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bbe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001bc2:	f043 0304 	orr.w	r3, r3, #4
 8001bc6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bca:	f7fe ffeb 	bl	8000ba4 <HAL_GetTick>
 8001bce:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001bd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bd8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001be4:	e00a      	b.n	8001bfc <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001be6:	f7fe ffdd 	bl	8000ba4 <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d901      	bls.n	8001bfc <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e12e      	b.n	8001e5a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001bfc:	f7ff fba9 	bl	8001352 <LL_RCC_LSE_IsReady>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d0ef      	beq.n	8001be6 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	2b81      	cmp	r3, #129	@ 0x81
 8001c0c:	d003      	beq.n	8001c16 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	2b85      	cmp	r3, #133	@ 0x85
 8001c14:	d121      	bne.n	8001c5a <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c16:	f7fe ffc5 	bl	8000ba4 <HAL_GetTick>
 8001c1a:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001c1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c24:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001c30:	e00a      	b.n	8001c48 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c32:	f7fe ffb7 	bl	8000ba4 <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d901      	bls.n	8001c48 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e108      	b.n	8001e5a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001c48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d0ec      	beq.n	8001c32 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001c58:	e060      	b.n	8001d1c <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5a:	f7fe ffa3 	bl	8000ba4 <HAL_GetTick>
 8001c5e:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001c60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c68:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c6c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001c70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001c74:	e00a      	b.n	8001c8c <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c76:	f7fe ff95 	bl	8000ba4 <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e0e6      	b.n	8001e5a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001c8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d1ec      	bne.n	8001c76 <HAL_RCC_OscConfig+0x50e>
 8001c9c:	e03e      	b.n	8001d1c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c9e:	f7fe ff81 	bl	8000ba4 <HAL_GetTick>
 8001ca2:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001ca4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001cb0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001cb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001cb8:	e00a      	b.n	8001cd0 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cba:	f7fe ff73 	bl	8000ba4 <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e0c4      	b.n	8001e5a <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001cd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d1ec      	bne.n	8001cba <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ce0:	f7fe ff60 	bl	8000ba4 <HAL_GetTick>
 8001ce4:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001ce6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001cf2:	f023 0301 	bic.w	r3, r3, #1
 8001cf6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8001cfa:	e00a      	b.n	8001d12 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cfc:	f7fe ff52 	bl	8000ba4 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e0a3      	b.n	8001e5a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8001d12:	f7ff fb1e 	bl	8001352 <LL_RCC_LSE_IsReady>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d1ef      	bne.n	8001cfc <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	f000 8099 	beq.w	8001e58 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	2b0c      	cmp	r3, #12
 8001d2a:	d06c      	beq.n	8001e06 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d14b      	bne.n	8001dcc <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d34:	f7ff fc74 	bl	8001620 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d38:	f7fe ff34 	bl	8000ba4 <HAL_GetTick>
 8001d3c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d40:	f7fe ff30 	bl	8000ba4 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b0a      	cmp	r3, #10
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e083      	b.n	8001e5a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001d52:	f7ff fc73 	bl	800163c <LL_RCC_PLL_IsReady>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d1f1      	bne.n	8001d40 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d60:	68da      	ldr	r2, [r3, #12]
 8001d62:	4b40      	ldr	r3, [pc, #256]	@ (8001e64 <HAL_RCC_OscConfig+0x6fc>)
 8001d64:	4013      	ands	r3, r2
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001d6e:	4311      	orrs	r1, r2
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001d74:	0212      	lsls	r2, r2, #8
 8001d76:	4311      	orrs	r1, r2
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001d7c:	4311      	orrs	r1, r2
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001d82:	4311      	orrs	r1, r2
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d92:	f7ff fc37 	bl	8001604 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001da0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001da4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da6:	f7fe fefd 	bl	8000ba4 <HAL_GetTick>
 8001daa:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8001dac:	e008      	b.n	8001dc0 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dae:	f7fe fef9 	bl	8000ba4 <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	2b0a      	cmp	r3, #10
 8001dba:	d901      	bls.n	8001dc0 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e04c      	b.n	8001e5a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8001dc0:	f7ff fc3c 	bl	800163c <LL_RCC_PLL_IsReady>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d0f1      	beq.n	8001dae <HAL_RCC_OscConfig+0x646>
 8001dca:	e045      	b.n	8001e58 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dcc:	f7ff fc28 	bl	8001620 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd0:	f7fe fee8 	bl	8000ba4 <HAL_GetTick>
 8001dd4:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001dd6:	e008      	b.n	8001dea <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dd8:	f7fe fee4 	bl	8000ba4 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b0a      	cmp	r3, #10
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e037      	b.n	8001e5a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001dea:	f7ff fc27 	bl	800163c <LL_RCC_PLL_IsReady>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d1f1      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8001df4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001df8:	68da      	ldr	r2, [r3, #12]
 8001dfa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001dfe:	4b1a      	ldr	r3, [pc, #104]	@ (8001e68 <HAL_RCC_OscConfig+0x700>)
 8001e00:	4013      	ands	r3, r2
 8001e02:	60cb      	str	r3, [r1, #12]
 8001e04:	e028      	b.n	8001e58 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d101      	bne.n	8001e12 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e023      	b.n	8001e5a <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	f003 0203 	and.w	r2, r3, #3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d115      	bne.n	8001e54 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d10e      	bne.n	8001e54 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e40:	021b      	lsls	r3, r3, #8
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d106      	bne.n	8001e54 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d001      	beq.n	8001e58 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e000      	b.n	8001e5a <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3720      	adds	r7, #32
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	11c1808c 	.word	0x11c1808c
 8001e68:	eefefffc 	.word	0xeefefffc

08001e6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d101      	bne.n	8001e80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e12c      	b.n	80020da <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e80:	4b98      	ldr	r3, [pc, #608]	@ (80020e4 <HAL_RCC_ClockConfig+0x278>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0307 	and.w	r3, r3, #7
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d91b      	bls.n	8001ec6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e8e:	4b95      	ldr	r3, [pc, #596]	@ (80020e4 <HAL_RCC_ClockConfig+0x278>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f023 0207 	bic.w	r2, r3, #7
 8001e96:	4993      	ldr	r1, [pc, #588]	@ (80020e4 <HAL_RCC_ClockConfig+0x278>)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e9e:	f7fe fe81 	bl	8000ba4 <HAL_GetTick>
 8001ea2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ea4:	e008      	b.n	8001eb8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001ea6:	f7fe fe7d 	bl	8000ba4 <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e110      	b.n	80020da <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eb8:	4b8a      	ldr	r3, [pc, #552]	@ (80020e4 <HAL_RCC_ClockConfig+0x278>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0307 	and.w	r3, r3, #7
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d1ef      	bne.n	8001ea6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d016      	beq.n	8001f00 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff fb02 	bl	80014e0 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001edc:	f7fe fe62 	bl	8000ba4 <HAL_GetTick>
 8001ee0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001ee4:	f7fe fe5e 	bl	8000ba4 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e0f1      	b.n	80020da <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001ef6:	f7ff fbdf 	bl	80016b8 <LL_RCC_IsActiveFlag_HPRE>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d0f1      	beq.n	8001ee4 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0320 	and.w	r3, r3, #32
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d016      	beq.n	8001f3a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	695b      	ldr	r3, [r3, #20]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff faf8 	bl	8001506 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001f16:	f7fe fe45 	bl	8000ba4 <HAL_GetTick>
 8001f1a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001f1c:	e008      	b.n	8001f30 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001f1e:	f7fe fe41 	bl	8000ba4 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e0d4      	b.n	80020da <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001f30:	f7ff fbd3 	bl	80016da <LL_RCC_IsActiveFlag_C2HPRE>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d0f1      	beq.n	8001f1e <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d016      	beq.n	8001f74 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7ff faf0 	bl	8001530 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001f50:	f7fe fe28 	bl	8000ba4 <HAL_GetTick>
 8001f54:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001f58:	f7fe fe24 	bl	8000ba4 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e0b7      	b.n	80020da <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001f6a:	f7ff fbc8 	bl	80016fe <LL_RCC_IsActiveFlag_SHDHPRE>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d0f1      	beq.n	8001f58 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0304 	and.w	r3, r3, #4
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d016      	beq.n	8001fae <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff fae9 	bl	800155c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001f8a:	f7fe fe0b 	bl	8000ba4 <HAL_GetTick>
 8001f8e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001f90:	e008      	b.n	8001fa4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001f92:	f7fe fe07 	bl	8000ba4 <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d901      	bls.n	8001fa4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e09a      	b.n	80020da <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001fa4:	f7ff fbbd 	bl	8001722 <LL_RCC_IsActiveFlag_PPRE1>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d0f1      	beq.n	8001f92 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0308 	and.w	r3, r3, #8
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d017      	beq.n	8001fea <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff fade 	bl	8001582 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001fc6:	f7fe fded 	bl	8000ba4 <HAL_GetTick>
 8001fca:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001fcc:	e008      	b.n	8001fe0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001fce:	f7fe fde9 	bl	8000ba4 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e07c      	b.n	80020da <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001fe0:	f7ff fbb0 	bl	8001744 <LL_RCC_IsActiveFlag_PPRE2>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d0f1      	beq.n	8001fce <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d043      	beq.n	800207e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d106      	bne.n	800200c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8001ffe:	f7ff f956 	bl	80012ae <LL_RCC_HSE_IsReady>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d11e      	bne.n	8002046 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e066      	b.n	80020da <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	2b03      	cmp	r3, #3
 8002012:	d106      	bne.n	8002022 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002014:	f7ff fb12 	bl	800163c <LL_RCC_PLL_IsReady>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d113      	bne.n	8002046 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e05b      	b.n	80020da <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d106      	bne.n	8002038 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800202a:	f7ff f9f0 	bl	800140e <LL_RCC_MSI_IsReady>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d108      	bne.n	8002046 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e050      	b.n	80020da <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002038:	f7ff f966 	bl	8001308 <LL_RCC_HSI_IsReady>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d101      	bne.n	8002046 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e049      	b.n	80020da <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff fa2a 	bl	80014a4 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002050:	f7fe fda8 	bl	8000ba4 <HAL_GetTick>
 8002054:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002056:	e00a      	b.n	800206e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002058:	f7fe fda4 	bl	8000ba4 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002066:	4293      	cmp	r3, r2
 8002068:	d901      	bls.n	800206e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e035      	b.n	80020da <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800206e:	f7ff fa2c 	bl	80014ca <LL_RCC_GetSysClkSource>
 8002072:	4602      	mov	r2, r0
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	429a      	cmp	r2, r3
 800207c:	d1ec      	bne.n	8002058 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800207e:	4b19      	ldr	r3, [pc, #100]	@ (80020e4 <HAL_RCC_ClockConfig+0x278>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0307 	and.w	r3, r3, #7
 8002086:	683a      	ldr	r2, [r7, #0]
 8002088:	429a      	cmp	r2, r3
 800208a:	d21b      	bcs.n	80020c4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800208c:	4b15      	ldr	r3, [pc, #84]	@ (80020e4 <HAL_RCC_ClockConfig+0x278>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f023 0207 	bic.w	r2, r3, #7
 8002094:	4913      	ldr	r1, [pc, #76]	@ (80020e4 <HAL_RCC_ClockConfig+0x278>)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	4313      	orrs	r3, r2
 800209a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800209c:	f7fe fd82 	bl	8000ba4 <HAL_GetTick>
 80020a0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80020a4:	f7fe fd7e 	bl	8000ba4 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e011      	b.n	80020da <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020b6:	4b0b      	ldr	r3, [pc, #44]	@ (80020e4 <HAL_RCC_ClockConfig+0x278>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0307 	and.w	r3, r3, #7
 80020be:	683a      	ldr	r2, [r7, #0]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d1ef      	bne.n	80020a4 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80020c4:	f000 f8b4 	bl	8002230 <HAL_RCC_GetHCLKFreq>
 80020c8:	4603      	mov	r3, r0
 80020ca:	4a07      	ldr	r2, [pc, #28]	@ (80020e8 <HAL_RCC_ClockConfig+0x27c>)
 80020cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 80020ce:	4b07      	ldr	r3, [pc, #28]	@ (80020ec <HAL_RCC_ClockConfig+0x280>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7fe fd1a 	bl	8000b0c <HAL_InitTick>
 80020d8:	4603      	mov	r3, r0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	58004000 	.word	0x58004000
 80020e8:	20000004 	.word	0x20000004
 80020ec:	20000008 	.word	0x20000008

080020f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020f0:	b590      	push	{r4, r7, lr}
 80020f2:	b087      	sub	sp, #28
 80020f4:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80020f6:	2300      	movs	r3, #0
 80020f8:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80020fa:	2300      	movs	r3, #0
 80020fc:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020fe:	f7ff f9e4 	bl	80014ca <LL_RCC_GetSysClkSource>
 8002102:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002104:	f7ff facd 	bl	80016a2 <LL_RCC_PLL_GetMainSource>
 8002108:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d005      	beq.n	800211c <HAL_RCC_GetSysClockFreq+0x2c>
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	2b0c      	cmp	r3, #12
 8002114:	d139      	bne.n	800218a <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2b01      	cmp	r3, #1
 800211a:	d136      	bne.n	800218a <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800211c:	f7ff f987 	bl	800142e <LL_RCC_MSI_IsEnabledRangeSelect>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d115      	bne.n	8002152 <HAL_RCC_GetSysClockFreq+0x62>
 8002126:	f7ff f982 	bl	800142e <LL_RCC_MSI_IsEnabledRangeSelect>
 800212a:	4603      	mov	r3, r0
 800212c:	2b01      	cmp	r3, #1
 800212e:	d106      	bne.n	800213e <HAL_RCC_GetSysClockFreq+0x4e>
 8002130:	f7ff f98d 	bl	800144e <LL_RCC_MSI_GetRange>
 8002134:	4603      	mov	r3, r0
 8002136:	0a1b      	lsrs	r3, r3, #8
 8002138:	f003 030f 	and.w	r3, r3, #15
 800213c:	e005      	b.n	800214a <HAL_RCC_GetSysClockFreq+0x5a>
 800213e:	f7ff f991 	bl	8001464 <LL_RCC_MSI_GetRangeAfterStandby>
 8002142:	4603      	mov	r3, r0
 8002144:	0a1b      	lsrs	r3, r3, #8
 8002146:	f003 030f 	and.w	r3, r3, #15
 800214a:	4a36      	ldr	r2, [pc, #216]	@ (8002224 <HAL_RCC_GetSysClockFreq+0x134>)
 800214c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002150:	e014      	b.n	800217c <HAL_RCC_GetSysClockFreq+0x8c>
 8002152:	f7ff f96c 	bl	800142e <LL_RCC_MSI_IsEnabledRangeSelect>
 8002156:	4603      	mov	r3, r0
 8002158:	2b01      	cmp	r3, #1
 800215a:	d106      	bne.n	800216a <HAL_RCC_GetSysClockFreq+0x7a>
 800215c:	f7ff f977 	bl	800144e <LL_RCC_MSI_GetRange>
 8002160:	4603      	mov	r3, r0
 8002162:	091b      	lsrs	r3, r3, #4
 8002164:	f003 030f 	and.w	r3, r3, #15
 8002168:	e005      	b.n	8002176 <HAL_RCC_GetSysClockFreq+0x86>
 800216a:	f7ff f97b 	bl	8001464 <LL_RCC_MSI_GetRangeAfterStandby>
 800216e:	4603      	mov	r3, r0
 8002170:	091b      	lsrs	r3, r3, #4
 8002172:	f003 030f 	and.w	r3, r3, #15
 8002176:	4a2b      	ldr	r2, [pc, #172]	@ (8002224 <HAL_RCC_GetSysClockFreq+0x134>)
 8002178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800217c:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d115      	bne.n	80021b0 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002188:	e012      	b.n	80021b0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	2b04      	cmp	r3, #4
 800218e:	d102      	bne.n	8002196 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002190:	4b25      	ldr	r3, [pc, #148]	@ (8002228 <HAL_RCC_GetSysClockFreq+0x138>)
 8002192:	617b      	str	r3, [r7, #20]
 8002194:	e00c      	b.n	80021b0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	2b08      	cmp	r3, #8
 800219a:	d109      	bne.n	80021b0 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800219c:	f7ff f85a 	bl	8001254 <LL_RCC_HSE_IsEnabledDiv2>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d102      	bne.n	80021ac <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80021a6:	4b20      	ldr	r3, [pc, #128]	@ (8002228 <HAL_RCC_GetSysClockFreq+0x138>)
 80021a8:	617b      	str	r3, [r7, #20]
 80021aa:	e001      	b.n	80021b0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80021ac:	4b1f      	ldr	r3, [pc, #124]	@ (800222c <HAL_RCC_GetSysClockFreq+0x13c>)
 80021ae:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021b0:	f7ff f98b 	bl	80014ca <LL_RCC_GetSysClkSource>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b0c      	cmp	r3, #12
 80021b8:	d12f      	bne.n	800221a <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80021ba:	f7ff fa72 	bl	80016a2 <LL_RCC_PLL_GetMainSource>
 80021be:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d003      	beq.n	80021ce <HAL_RCC_GetSysClockFreq+0xde>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2b03      	cmp	r3, #3
 80021ca:	d003      	beq.n	80021d4 <HAL_RCC_GetSysClockFreq+0xe4>
 80021cc:	e00d      	b.n	80021ea <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80021ce:	4b16      	ldr	r3, [pc, #88]	@ (8002228 <HAL_RCC_GetSysClockFreq+0x138>)
 80021d0:	60fb      	str	r3, [r7, #12]
        break;
 80021d2:	e00d      	b.n	80021f0 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80021d4:	f7ff f83e 	bl	8001254 <LL_RCC_HSE_IsEnabledDiv2>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d102      	bne.n	80021e4 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80021de:	4b12      	ldr	r3, [pc, #72]	@ (8002228 <HAL_RCC_GetSysClockFreq+0x138>)
 80021e0:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80021e2:	e005      	b.n	80021f0 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80021e4:	4b11      	ldr	r3, [pc, #68]	@ (800222c <HAL_RCC_GetSysClockFreq+0x13c>)
 80021e6:	60fb      	str	r3, [r7, #12]
        break;
 80021e8:	e002      	b.n	80021f0 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	60fb      	str	r3, [r7, #12]
        break;
 80021ee:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80021f0:	f7ff fa35 	bl	800165e <LL_RCC_PLL_GetN>
 80021f4:	4602      	mov	r2, r0
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	fb03 f402 	mul.w	r4, r3, r2
 80021fc:	f7ff fa46 	bl	800168c <LL_RCC_PLL_GetDivider>
 8002200:	4603      	mov	r3, r0
 8002202:	091b      	lsrs	r3, r3, #4
 8002204:	3301      	adds	r3, #1
 8002206:	fbb4 f4f3 	udiv	r4, r4, r3
 800220a:	f7ff fa34 	bl	8001676 <LL_RCC_PLL_GetR>
 800220e:	4603      	mov	r3, r0
 8002210:	0f5b      	lsrs	r3, r3, #29
 8002212:	3301      	adds	r3, #1
 8002214:	fbb4 f3f3 	udiv	r3, r4, r3
 8002218:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800221a:	697b      	ldr	r3, [r7, #20]
}
 800221c:	4618      	mov	r0, r3
 800221e:	371c      	adds	r7, #28
 8002220:	46bd      	mov	sp, r7
 8002222:	bd90      	pop	{r4, r7, pc}
 8002224:	08003880 	.word	0x08003880
 8002228:	00f42400 	.word	0x00f42400
 800222c:	01e84800 	.word	0x01e84800

08002230 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002230:	b598      	push	{r3, r4, r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002234:	f7ff ff5c 	bl	80020f0 <HAL_RCC_GetSysClockFreq>
 8002238:	4604      	mov	r4, r0
 800223a:	f7ff f9b5 	bl	80015a8 <LL_RCC_GetAHBPrescaler>
 800223e:	4603      	mov	r3, r0
 8002240:	091b      	lsrs	r3, r3, #4
 8002242:	f003 030f 	and.w	r3, r3, #15
 8002246:	4a03      	ldr	r2, [pc, #12]	@ (8002254 <HAL_RCC_GetHCLKFreq+0x24>)
 8002248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800224c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002250:	4618      	mov	r0, r3
 8002252:	bd98      	pop	{r3, r4, r7, pc}
 8002254:	08003820 	.word	0x08003820

08002258 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002258:	b598      	push	{r3, r4, r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800225c:	f7ff ffe8 	bl	8002230 <HAL_RCC_GetHCLKFreq>
 8002260:	4604      	mov	r4, r0
 8002262:	f7ff f9b9 	bl	80015d8 <LL_RCC_GetAPB1Prescaler>
 8002266:	4603      	mov	r3, r0
 8002268:	0a1b      	lsrs	r3, r3, #8
 800226a:	4a03      	ldr	r2, [pc, #12]	@ (8002278 <HAL_RCC_GetPCLK1Freq+0x20>)
 800226c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002270:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002274:	4618      	mov	r0, r3
 8002276:	bd98      	pop	{r3, r4, r7, pc}
 8002278:	08003860 	.word	0x08003860

0800227c <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800227c:	b598      	push	{r3, r4, r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002280:	f7ff ffd6 	bl	8002230 <HAL_RCC_GetHCLKFreq>
 8002284:	4604      	mov	r4, r0
 8002286:	f7ff f9b2 	bl	80015ee <LL_RCC_GetAPB2Prescaler>
 800228a:	4603      	mov	r3, r0
 800228c:	0adb      	lsrs	r3, r3, #11
 800228e:	4a03      	ldr	r2, [pc, #12]	@ (800229c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002294:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002298:	4618      	mov	r0, r3
 800229a:	bd98      	pop	{r3, r4, r7, pc}
 800229c:	08003860 	.word	0x08003860

080022a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80022a0:	b590      	push	{r4, r7, lr}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	091b      	lsrs	r3, r3, #4
 80022ac:	f003 030f 	and.w	r3, r3, #15
 80022b0:	4a10      	ldr	r2, [pc, #64]	@ (80022f4 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80022b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022b6:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80022b8:	f7ff f981 	bl	80015be <LL_RCC_GetAHB3Prescaler>
 80022bc:	4603      	mov	r3, r0
 80022be:	091b      	lsrs	r3, r3, #4
 80022c0:	f003 030f 	and.w	r3, r3, #15
 80022c4:	4a0c      	ldr	r2, [pc, #48]	@ (80022f8 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80022c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d0:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	4a09      	ldr	r2, [pc, #36]	@ (80022fc <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80022d6:	fba2 2303 	umull	r2, r3, r2, r3
 80022da:	0c9c      	lsrs	r4, r3, #18
 80022dc:	f7fe ff56 	bl	800118c <HAL_PWREx_GetVoltageRange>
 80022e0:	4603      	mov	r3, r0
 80022e2:	4619      	mov	r1, r3
 80022e4:	4620      	mov	r0, r4
 80022e6:	f000 f80b 	bl	8002300 <RCC_SetFlashLatency>
 80022ea:	4603      	mov	r3, r0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3714      	adds	r7, #20
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd90      	pop	{r4, r7, pc}
 80022f4:	08003880 	.word	0x08003880
 80022f8:	08003820 	.word	0x08003820
 80022fc:	431bde83 	.word	0x431bde83

08002300 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b08e      	sub	sp, #56	@ 0x38
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800230a:	4a3a      	ldr	r2, [pc, #232]	@ (80023f4 <RCC_SetFlashLatency+0xf4>)
 800230c:	f107 0320 	add.w	r3, r7, #32
 8002310:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002314:	6018      	str	r0, [r3, #0]
 8002316:	3304      	adds	r3, #4
 8002318:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800231a:	4a37      	ldr	r2, [pc, #220]	@ (80023f8 <RCC_SetFlashLatency+0xf8>)
 800231c:	f107 0318 	add.w	r3, r7, #24
 8002320:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002324:	6018      	str	r0, [r3, #0]
 8002326:	3304      	adds	r3, #4
 8002328:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800232a:	4a34      	ldr	r2, [pc, #208]	@ (80023fc <RCC_SetFlashLatency+0xfc>)
 800232c:	f107 030c 	add.w	r3, r7, #12
 8002330:	ca07      	ldmia	r2, {r0, r1, r2}
 8002332:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002336:	2300      	movs	r3, #0
 8002338:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002340:	d11b      	bne.n	800237a <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002342:	2300      	movs	r3, #0
 8002344:	633b      	str	r3, [r7, #48]	@ 0x30
 8002346:	e014      	b.n	8002372 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	3338      	adds	r3, #56	@ 0x38
 800234e:	443b      	add	r3, r7
 8002350:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002354:	461a      	mov	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4293      	cmp	r3, r2
 800235a:	d807      	bhi.n	800236c <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800235c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	3338      	adds	r3, #56	@ 0x38
 8002362:	443b      	add	r3, r7
 8002364:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002368:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800236a:	e021      	b.n	80023b0 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800236c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800236e:	3301      	adds	r3, #1
 8002370:	633b      	str	r3, [r7, #48]	@ 0x30
 8002372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002374:	2b02      	cmp	r3, #2
 8002376:	d9e7      	bls.n	8002348 <RCC_SetFlashLatency+0x48>
 8002378:	e01a      	b.n	80023b0 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800237a:	2300      	movs	r3, #0
 800237c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800237e:	e014      	b.n	80023aa <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	3338      	adds	r3, #56	@ 0x38
 8002386:	443b      	add	r3, r7
 8002388:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 800238c:	461a      	mov	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4293      	cmp	r3, r2
 8002392:	d807      	bhi.n	80023a4 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	3338      	adds	r3, #56	@ 0x38
 800239a:	443b      	add	r3, r7
 800239c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80023a0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80023a2:	e005      	b.n	80023b0 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80023a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023a6:	3301      	adds	r3, #1
 80023a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d9e7      	bls.n	8002380 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80023b0:	4b13      	ldr	r3, [pc, #76]	@ (8002400 <RCC_SetFlashLatency+0x100>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f023 0207 	bic.w	r2, r3, #7
 80023b8:	4911      	ldr	r1, [pc, #68]	@ (8002400 <RCC_SetFlashLatency+0x100>)
 80023ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023bc:	4313      	orrs	r3, r2
 80023be:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80023c0:	f7fe fbf0 	bl	8000ba4 <HAL_GetTick>
 80023c4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80023c6:	e008      	b.n	80023da <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80023c8:	f7fe fbec 	bl	8000ba4 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d901      	bls.n	80023da <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e007      	b.n	80023ea <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80023da:	4b09      	ldr	r3, [pc, #36]	@ (8002400 <RCC_SetFlashLatency+0x100>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0307 	and.w	r3, r3, #7
 80023e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d1ef      	bne.n	80023c8 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3738      	adds	r7, #56	@ 0x38
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	08003804 	.word	0x08003804
 80023f8:	0800380c 	.word	0x0800380c
 80023fc:	08003814 	.word	0x08003814
 8002400:	58004000 	.word	0x58004000

08002404 <LL_RCC_LSE_IsReady>:
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002408:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800240c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	2b02      	cmp	r3, #2
 8002416:	d101      	bne.n	800241c <LL_RCC_LSE_IsReady+0x18>
 8002418:	2301      	movs	r3, #1
 800241a:	e000      	b.n	800241e <LL_RCC_LSE_IsReady+0x1a>
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	46bd      	mov	sp, r7
 8002422:	bc80      	pop	{r7}
 8002424:	4770      	bx	lr

08002426 <LL_RCC_SetUSARTClockSource>:
{
 8002426:	b480      	push	{r7}
 8002428:	b083      	sub	sp, #12
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800242e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002432:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	0c1b      	lsrs	r3, r3, #16
 800243a:	43db      	mvns	r3, r3
 800243c:	401a      	ands	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	b29b      	uxth	r3, r3
 8002442:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002446:	4313      	orrs	r3, r2
 8002448:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	bc80      	pop	{r7}
 8002454:	4770      	bx	lr

08002456 <LL_RCC_SetI2SClockSource>:
{
 8002456:	b480      	push	{r7}
 8002458:	b083      	sub	sp, #12
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800245e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002462:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002466:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800246a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4313      	orrs	r3, r2
 8002472:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002476:	bf00      	nop
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	bc80      	pop	{r7}
 800247e:	4770      	bx	lr

08002480 <LL_RCC_SetLPUARTClockSource>:
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002488:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800248c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002490:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002494:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4313      	orrs	r3, r2
 800249c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bc80      	pop	{r7}
 80024a8:	4770      	bx	lr

080024aa <LL_RCC_SetI2CClockSource>:
{
 80024aa:	b480      	push	{r7}
 80024ac:	b083      	sub	sp, #12
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80024b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024b6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	091b      	lsrs	r3, r3, #4
 80024be:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80024c2:	43db      	mvns	r3, r3
 80024c4:	401a      	ands	r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	011b      	lsls	r3, r3, #4
 80024ca:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80024ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80024d2:	4313      	orrs	r3, r2
 80024d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80024d8:	bf00      	nop
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	bc80      	pop	{r7}
 80024e0:	4770      	bx	lr

080024e2 <LL_RCC_SetLPTIMClockSource>:
{
 80024e2:	b480      	push	{r7}
 80024e4:	b083      	sub	sp, #12
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80024ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024ee:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	0c1b      	lsrs	r3, r3, #16
 80024f6:	041b      	lsls	r3, r3, #16
 80024f8:	43db      	mvns	r3, r3
 80024fa:	401a      	ands	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	041b      	lsls	r3, r3, #16
 8002500:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002504:	4313      	orrs	r3, r2
 8002506:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800250a:	bf00      	nop
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	bc80      	pop	{r7}
 8002512:	4770      	bx	lr

08002514 <LL_RCC_SetRNGClockSource>:
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800251c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002520:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002524:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002528:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4313      	orrs	r3, r2
 8002530:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002534:	bf00      	nop
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	bc80      	pop	{r7}
 800253c:	4770      	bx	lr

0800253e <LL_RCC_SetADCClockSource>:
{
 800253e:	b480      	push	{r7}
 8002540:	b083      	sub	sp, #12
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002546:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800254a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800254e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002552:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4313      	orrs	r3, r2
 800255a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800255e:	bf00      	nop
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	bc80      	pop	{r7}
 8002566:	4770      	bx	lr

08002568 <LL_RCC_SetRTCClockSource>:
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002570:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002574:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002578:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800257c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4313      	orrs	r3, r2
 8002584:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	bc80      	pop	{r7}
 8002590:	4770      	bx	lr

08002592 <LL_RCC_GetRTCClockSource>:
{
 8002592:	b480      	push	{r7}
 8002594:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002596:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800259a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800259e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bc80      	pop	{r7}
 80025a8:	4770      	bx	lr

080025aa <LL_RCC_ForceBackupDomainReset>:
{
 80025aa:	b480      	push	{r7}
 80025ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80025ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80025ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80025c2:	bf00      	nop
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bc80      	pop	{r7}
 80025c8:	4770      	bx	lr

080025ca <LL_RCC_ReleaseBackupDomainReset>:
{
 80025ca:	b480      	push	{r7}
 80025cc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80025ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80025da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80025e2:	bf00      	nop
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bc80      	pop	{r7}
 80025e8:	4770      	bx	lr
	...

080025ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80025f4:	2300      	movs	r3, #0
 80025f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80025f8:	2300      	movs	r3, #0
 80025fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80025fc:	2300      	movs	r3, #0
 80025fe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d058      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 800260c:	f7fe fdb0 	bl	8001170 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002610:	f7fe fac8 	bl	8000ba4 <HAL_GetTick>
 8002614:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002616:	e009      	b.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002618:	f7fe fac4 	bl	8000ba4 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d902      	bls.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	74fb      	strb	r3, [r7, #19]
        break;
 800262a:	e006      	b.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800262c:	4b7b      	ldr	r3, [pc, #492]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002634:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002638:	d1ee      	bne.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 800263a:	7cfb      	ldrb	r3, [r7, #19]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d13c      	bne.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002640:	f7ff ffa7 	bl	8002592 <LL_RCC_GetRTCClockSource>
 8002644:	4602      	mov	r2, r0
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800264a:	429a      	cmp	r2, r3
 800264c:	d00f      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800264e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002652:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002656:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800265a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800265c:	f7ff ffa5 	bl	80025aa <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002660:	f7ff ffb3 	bl	80025ca <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002664:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d014      	beq.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002678:	f7fe fa94 	bl	8000ba4 <HAL_GetTick>
 800267c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800267e:	e00b      	b.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002680:	f7fe fa90 	bl	8000ba4 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800268e:	4293      	cmp	r3, r2
 8002690:	d902      	bls.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	74fb      	strb	r3, [r7, #19]
            break;
 8002696:	e004      	b.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8002698:	f7ff feb4 	bl	8002404 <LL_RCC_LSE_IsReady>
 800269c:	4603      	mov	r3, r0
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d1ee      	bne.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80026a2:	7cfb      	ldrb	r3, [r7, #19]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d105      	bne.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7ff ff5b 	bl	8002568 <LL_RCC_SetRTCClockSource>
 80026b2:	e004      	b.n	80026be <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80026b4:	7cfb      	ldrb	r3, [r7, #19]
 80026b6:	74bb      	strb	r3, [r7, #18]
 80026b8:	e001      	b.n	80026be <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026ba:	7cfb      	ldrb	r3, [r7, #19]
 80026bc:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d004      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7ff fea9 	bl	8002426 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0302 	and.w	r3, r3, #2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d004      	beq.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7ff fe9e 	bl	8002426 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0320 	and.w	r3, r3, #32
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d004      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7ff fec0 	bl	8002480 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002708:	2b00      	cmp	r3, #0
 800270a:	d004      	beq.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a1b      	ldr	r3, [r3, #32]
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff fee6 	bl	80024e2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800271e:	2b00      	cmp	r3, #0
 8002720:	d004      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002726:	4618      	mov	r0, r3
 8002728:	f7ff fedb 	bl	80024e2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002734:	2b00      	cmp	r3, #0
 8002736:	d004      	beq.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800273c:	4618      	mov	r0, r3
 800273e:	f7ff fed0 	bl	80024e2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800274a:	2b00      	cmp	r3, #0
 800274c:	d004      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	4618      	mov	r0, r3
 8002754:	f7ff fea9 	bl	80024aa <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002760:	2b00      	cmp	r3, #0
 8002762:	d004      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	4618      	mov	r0, r3
 800276a:	f7ff fe9e 	bl	80024aa <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002776:	2b00      	cmp	r3, #0
 8002778:	d004      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	69db      	ldr	r3, [r3, #28]
 800277e:	4618      	mov	r0, r3
 8002780:	f7ff fe93 	bl	80024aa <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0310 	and.w	r3, r3, #16
 800278c:	2b00      	cmp	r3, #0
 800278e:	d011      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff fe5e 	bl	8002456 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027a2:	d107      	bne.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80027a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80027ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027b2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d010      	beq.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7ff fea5 	bl	8002514 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d107      	bne.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80027d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80027dc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027e0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d011      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7ff fea3 	bl	800253e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002800:	d107      	bne.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002802:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800280c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002810:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8002812:	7cbb      	ldrb	r3, [r7, #18]
}
 8002814:	4618      	mov	r0, r3
 8002816:	3718      	adds	r7, #24
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	58000400 	.word	0x58000400

08002820 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d071      	beq.n	8002916 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d106      	bne.n	800284c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f7fe f858 	bl	80008fc <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2202      	movs	r2, #2
 8002850:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002854:	4b32      	ldr	r3, [pc, #200]	@ (8002920 <HAL_RTC_Init+0x100>)
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	f003 0310 	and.w	r3, r3, #16
 800285c:	2b10      	cmp	r3, #16
 800285e:	d051      	beq.n	8002904 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002860:	4b2f      	ldr	r3, [pc, #188]	@ (8002920 <HAL_RTC_Init+0x100>)
 8002862:	22ca      	movs	r2, #202	@ 0xca
 8002864:	625a      	str	r2, [r3, #36]	@ 0x24
 8002866:	4b2e      	ldr	r3, [pc, #184]	@ (8002920 <HAL_RTC_Init+0x100>)
 8002868:	2253      	movs	r2, #83	@ 0x53
 800286a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f000 f87f 	bl	8002970 <RTC_EnterInitMode>
 8002872:	4603      	mov	r3, r0
 8002874:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8002876:	7bfb      	ldrb	r3, [r7, #15]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d13f      	bne.n	80028fc <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800287c:	4b28      	ldr	r3, [pc, #160]	@ (8002920 <HAL_RTC_Init+0x100>)
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	4a27      	ldr	r2, [pc, #156]	@ (8002920 <HAL_RTC_Init+0x100>)
 8002882:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8002886:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800288a:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800288c:	4b24      	ldr	r3, [pc, #144]	@ (8002920 <HAL_RTC_Init+0x100>)
 800288e:	699a      	ldr	r2, [r3, #24]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6859      	ldr	r1, [r3, #4]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	691b      	ldr	r3, [r3, #16]
 8002898:	4319      	orrs	r1, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	430b      	orrs	r3, r1
 80028a0:	491f      	ldr	r1, [pc, #124]	@ (8002920 <HAL_RTC_Init+0x100>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	68da      	ldr	r2, [r3, #12]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	041b      	lsls	r3, r3, #16
 80028b0:	491b      	ldr	r1, [pc, #108]	@ (8002920 <HAL_RTC_Init+0x100>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80028b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002920 <HAL_RTC_Init+0x100>)
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028c6:	430b      	orrs	r3, r1
 80028c8:	4915      	ldr	r1, [pc, #84]	@ (8002920 <HAL_RTC_Init+0x100>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 f882 	bl	80029d8 <RTC_ExitInitMode>
 80028d4:	4603      	mov	r3, r0
 80028d6:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 80028d8:	7bfb      	ldrb	r3, [r7, #15]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d10e      	bne.n	80028fc <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 80028de:	4b10      	ldr	r3, [pc, #64]	@ (8002920 <HAL_RTC_Init+0x100>)
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a19      	ldr	r1, [r3, #32]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	69db      	ldr	r3, [r3, #28]
 80028ee:	4319      	orrs	r1, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	695b      	ldr	r3, [r3, #20]
 80028f4:	430b      	orrs	r3, r1
 80028f6:	490a      	ldr	r1, [pc, #40]	@ (8002920 <HAL_RTC_Init+0x100>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80028fc:	4b08      	ldr	r3, [pc, #32]	@ (8002920 <HAL_RTC_Init+0x100>)
 80028fe:	22ff      	movs	r2, #255	@ 0xff
 8002900:	625a      	str	r2, [r3, #36]	@ 0x24
 8002902:	e001      	b.n	8002908 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8002904:	2300      	movs	r3, #0
 8002906:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002908:	7bfb      	ldrb	r3, [r7, #15]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d103      	bne.n	8002916 <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2201      	movs	r2, #1
 8002912:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 8002916:	7bfb      	ldrb	r3, [r7, #15]
}
 8002918:	4618      	mov	r0, r3
 800291a:	3710      	adds	r7, #16
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40002800 	.word	0x40002800

08002924 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800292c:	4b0f      	ldr	r3, [pc, #60]	@ (800296c <HAL_RTC_WaitForSynchro+0x48>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	4a0e      	ldr	r2, [pc, #56]	@ (800296c <HAL_RTC_WaitForSynchro+0x48>)
 8002932:	f023 0320 	bic.w	r3, r3, #32
 8002936:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8002938:	f7fe f934 	bl	8000ba4 <HAL_GetTick>
 800293c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800293e:	e009      	b.n	8002954 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002940:	f7fe f930 	bl	8000ba4 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800294e:	d901      	bls.n	8002954 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e006      	b.n	8002962 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8002954:	4b05      	ldr	r3, [pc, #20]	@ (800296c <HAL_RTC_WaitForSynchro+0x48>)
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	f003 0320 	and.w	r3, r3, #32
 800295c:	2b00      	cmp	r3, #0
 800295e:	d0ef      	beq.n	8002940 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3710      	adds	r7, #16
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	40002800 	.word	0x40002800

08002970 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002978:	2300      	movs	r3, #0
 800297a:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800297c:	4b15      	ldr	r3, [pc, #84]	@ (80029d4 <RTC_EnterInitMode+0x64>)
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002984:	2b00      	cmp	r3, #0
 8002986:	d120      	bne.n	80029ca <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8002988:	4b12      	ldr	r3, [pc, #72]	@ (80029d4 <RTC_EnterInitMode+0x64>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	4a11      	ldr	r2, [pc, #68]	@ (80029d4 <RTC_EnterInitMode+0x64>)
 800298e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002992:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8002994:	f7fe f906 	bl	8000ba4 <HAL_GetTick>
 8002998:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800299a:	e00d      	b.n	80029b8 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800299c:	f7fe f902 	bl	8000ba4 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80029aa:	d905      	bls.n	80029b8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2203      	movs	r2, #3
 80029b4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80029b8:	4b06      	ldr	r3, [pc, #24]	@ (80029d4 <RTC_EnterInitMode+0x64>)
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d102      	bne.n	80029ca <RTC_EnterInitMode+0x5a>
 80029c4:	7bfb      	ldrb	r3, [r7, #15]
 80029c6:	2b03      	cmp	r3, #3
 80029c8:	d1e8      	bne.n	800299c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80029ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3710      	adds	r7, #16
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40002800 	.word	0x40002800

080029d8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029e0:	2300      	movs	r3, #0
 80029e2:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80029e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002a50 <RTC_ExitInitMode+0x78>)
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	4a19      	ldr	r2, [pc, #100]	@ (8002a50 <RTC_ExitInitMode+0x78>)
 80029ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80029ee:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80029f0:	4b17      	ldr	r3, [pc, #92]	@ (8002a50 <RTC_ExitInitMode+0x78>)
 80029f2:	699b      	ldr	r3, [r3, #24]
 80029f4:	f003 0320 	and.w	r3, r3, #32
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d10c      	bne.n	8002a16 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f7ff ff91 	bl	8002924 <HAL_RTC_WaitForSynchro>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d01e      	beq.n	8002a46 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2203      	movs	r2, #3
 8002a0c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	73fb      	strb	r3, [r7, #15]
 8002a14:	e017      	b.n	8002a46 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002a16:	4b0e      	ldr	r3, [pc, #56]	@ (8002a50 <RTC_ExitInitMode+0x78>)
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	4a0d      	ldr	r2, [pc, #52]	@ (8002a50 <RTC_ExitInitMode+0x78>)
 8002a1c:	f023 0320 	bic.w	r3, r3, #32
 8002a20:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f7ff ff7e 	bl	8002924 <HAL_RTC_WaitForSynchro>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d005      	beq.n	8002a3a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2203      	movs	r2, #3
 8002a32:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002a3a:	4b05      	ldr	r3, [pc, #20]	@ (8002a50 <RTC_ExitInitMode+0x78>)
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	4a04      	ldr	r2, [pc, #16]	@ (8002a50 <RTC_ExitInitMode+0x78>)
 8002a40:	f043 0320 	orr.w	r3, r3, #32
 8002a44:	6193      	str	r3, [r2, #24]
  }

  return status;
 8002a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	40002800 	.word	0x40002800

08002a54 <HAL_RTCEx_SetWakeUpTimer_IT>:
  *                       - This feature is meaningful in case of Low power mode to avoid any RTC software execution after Wake Up.
  *                         That is why when WakeUpAutoClr is set, EXTI is configured as EVENT instead of Interrupt to avoid useless IRQ handler execution.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b086      	sub	sp, #24
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
 8002a60:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d101      	bne.n	8002a70 <HAL_RTCEx_SetWakeUpTimer_IT+0x1c>
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	e06f      	b.n	8002b50 <HAL_RTCEx_SetWakeUpTimer_IT+0xfc>
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2202      	movs	r2, #2
 8002a7c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a80:	4b35      	ldr	r3, [pc, #212]	@ (8002b58 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8002a82:	22ca      	movs	r2, #202	@ 0xca
 8002a84:	625a      	str	r2, [r3, #36]	@ 0x24
 8002a86:	4b34      	ldr	r3, [pc, #208]	@ (8002b58 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8002a88:	2253      	movs	r2, #83	@ 0x53
 8002a8a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 8002a8c:	4b32      	ldr	r3, [pc, #200]	@ (8002b58 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	4a31      	ldr	r2, [pc, #196]	@ (8002b58 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8002a92:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002a96:	6193      	str	r3, [r2, #24]

  /* Clear flag Wake-Up */
  WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 8002a98:	4b2f      	ldr	r3, [pc, #188]	@ (8002b58 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8002a9a:	2204      	movs	r2, #4
 8002a9c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8002a9e:	4b2e      	ldr	r3, [pc, #184]	@ (8002b58 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d11e      	bne.n	8002ae8 <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
  {
    tickstart = HAL_GetTick();
 8002aaa:	f7fe f87b 	bl	8000ba4 <HAL_GetTick>
 8002aae:	6178      	str	r0, [r7, #20]
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8002ab0:	e014      	b.n	8002adc <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002ab2:	f7fe f877 	bl	8000ba4 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002ac0:	d90c      	bls.n	8002adc <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ac2:	4b25      	ldr	r3, [pc, #148]	@ (8002b58 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8002ac4:	22ff      	movs	r2, #255	@ 0xff
 8002ac6:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2203      	movs	r2, #3
 8002acc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

        return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e039      	b.n	8002b50 <HAL_RTCEx_SetWakeUpTimer_IT+0xfc>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8002adc:	4b1e      	ldr	r3, [pc, #120]	@ (8002b58 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	f003 0304 	and.w	r3, r3, #4
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d0e4      	beq.n	8002ab2 <HAL_RTCEx_SetWakeUpTimer_IT+0x5e>
      }
    }
  }

  /* Configure the Wakeup Timer counter and auto clear value */
  WRITE_REG(RTC->WUTR, (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos)));
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	041a      	lsls	r2, r3, #16
 8002aec:	491a      	ldr	r1, [pc, #104]	@ (8002b58 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	614b      	str	r3, [r1, #20]

  /* Configure the clock source */
  MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8002af4:	4b18      	ldr	r3, [pc, #96]	@ (8002b58 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8002af6:	699b      	ldr	r3, [r3, #24]
 8002af8:	f023 0207 	bic.w	r2, r3, #7
 8002afc:	4916      	ldr	r1, [pc, #88]	@ (8002b58 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	618b      	str	r3, [r1, #24]

  /* In case of WUT autoclr, the IRQ handler should not be called */
  if (WakeUpAutoClr != 0U)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d008      	beq.n	8002b1c <HAL_RTCEx_SetWakeUpTimer_IT+0xc8>
  {
    /* RTC WakeUpTimer EXTI Configuration: Event configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_EVENT();
 8002b0a:	4b14      	ldr	r3, [pc, #80]	@ (8002b5c <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 8002b0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b10:	4a12      	ldr	r2, [pc, #72]	@ (8002b5c <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 8002b12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b16:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
 8002b1a:	e007      	b.n	8002b2c <HAL_RTCEx_SetWakeUpTimer_IT+0xd8>
  }
  else
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8002b1c:	4b0f      	ldr	r3, [pc, #60]	@ (8002b5c <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 8002b1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b22:	4a0e      	ldr	r2, [pc, #56]	@ (8002b5c <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 8002b24:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b28:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  }

  /* Configure the Interrupt in the RTC_CR register and Enable the Wakeup Timer*/
  SET_BIT(RTC->CR, (RTC_CR_WUTIE | RTC_CR_WUTE));
 8002b2c:	4b0a      	ldr	r3, [pc, #40]	@ (8002b58 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	4a09      	ldr	r2, [pc, #36]	@ (8002b58 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8002b32:	f443 4388 	orr.w	r3, r3, #17408	@ 0x4400
 8002b36:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b38:	4b07      	ldr	r3, [pc, #28]	@ (8002b58 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8002b3a:	22ff      	movs	r2, #255	@ 0xff
 8002b3c:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2201      	movs	r2, #1
 8002b42:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3718      	adds	r7, #24
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	40002800 	.word	0x40002800
 8002b5c:	58000800 	.word	0x58000800

08002b60 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d101      	bne.n	8002b76 <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8002b72:	2302      	movs	r3, #2
 8002b74:	e041      	b.n	8002bfa <HAL_RTCEx_DeactivateWakeUpTimer+0x9a>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2202      	movs	r2, #2
 8002b82:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002b86:	4b1f      	ldr	r3, [pc, #124]	@ (8002c04 <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>)
 8002b88:	22ca      	movs	r2, #202	@ 0xca
 8002b8a:	625a      	str	r2, [r3, #36]	@ 0x24
 8002b8c:	4b1d      	ldr	r3, [pc, #116]	@ (8002c04 <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>)
 8002b8e:	2253      	movs	r2, #83	@ 0x53
 8002b90:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  /* In case of interrupt mode is used, the interrupt source must disabled */
  CLEAR_BIT(RTC->CR, (RTC_CR_WUTE | RTC_CR_WUTIE));
 8002b92:	4b1c      	ldr	r3, [pc, #112]	@ (8002c04 <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>)
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	4a1b      	ldr	r2, [pc, #108]	@ (8002c04 <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>)
 8002b98:	f423 4388 	bic.w	r3, r3, #17408	@ 0x4400
 8002b9c:	6193      	str	r3, [r2, #24]

  tickstart = HAL_GetTick();
 8002b9e:	f7fe f801 	bl	8000ba4 <HAL_GetTick>
 8002ba2:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8002ba4:	e014      	b.n	8002bd0 <HAL_RTCEx_DeactivateWakeUpTimer+0x70>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002ba6:	f7fd fffd 	bl	8000ba4 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002bb4:	d90c      	bls.n	8002bd0 <HAL_RTCEx_DeactivateWakeUpTimer+0x70>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002bb6:	4b13      	ldr	r3, [pc, #76]	@ (8002c04 <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>)
 8002bb8:	22ff      	movs	r2, #255	@ 0xff
 8002bba:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2203      	movs	r2, #3
 8002bc0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e014      	b.n	8002bfa <HAL_RTCEx_DeactivateWakeUpTimer+0x9a>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8002bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8002c04 <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>)
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	f003 0304 	and.w	r3, r3, #4
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d0e4      	beq.n	8002ba6 <HAL_RTCEx_DeactivateWakeUpTimer+0x46>
    }
  }

  /* Clear wakeup timer flag */
  WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 8002bdc:	4b09      	ldr	r3, [pc, #36]	@ (8002c04 <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>)
 8002bde:	2204      	movs	r2, #4
 8002be0:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002be2:	4b08      	ldr	r3, [pc, #32]	@ (8002c04 <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>)
 8002be4:	22ff      	movs	r2, #255	@ 0xff
 8002be6:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	40002800 	.word	0x40002800

08002c08 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  if (READ_BIT(RTC->MISR, RTC_MISR_WUTMF) != 0U)
 8002c10:	4b09      	ldr	r3, [pc, #36]	@ (8002c38 <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 8002c12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c14:	f003 0304 	and.w	r3, r3, #4
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d005      	beq.n	8002c28 <HAL_RTCEx_WakeUpTimerIRQHandler+0x20>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 8002c1c:	4b06      	ldr	r3, [pc, #24]	@ (8002c38 <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 8002c1e:	2204      	movs	r2, #4
 8002c20:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    /* WAKEUPTIMER callback */
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 f80a 	bl	8002c3c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8002c30:	bf00      	nop
 8002c32:	3708      	adds	r7, #8
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	40002800 	.word	0x40002800

08002c3c <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bc80      	pop	{r7}
 8002c4c:	4770      	bx	lr

08002c4e <LL_RCC_GetUSARTClockSource>:
{
 8002c4e:	b480      	push	{r7}
 8002c50:	b083      	sub	sp, #12
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8002c56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c5a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	401a      	ands	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	041b      	lsls	r3, r3, #16
 8002c66:	4313      	orrs	r3, r2
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bc80      	pop	{r7}
 8002c70:	4770      	bx	lr

08002c72 <LL_RCC_GetLPUARTClockSource>:
{
 8002c72:	b480      	push	{r7}
 8002c74:	b083      	sub	sp, #12
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8002c7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c7e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4013      	ands	r3, r2
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bc80      	pop	{r7}
 8002c8e:	4770      	bx	lr

08002c90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e042      	b.n	8002d28 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d106      	bne.n	8002cba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f7fd fe55 	bl	8000964 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2224      	movs	r2, #36	@ 0x24
 8002cbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f022 0201 	bic.w	r2, r2, #1
 8002cd0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d002      	beq.n	8002ce0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 fa9c 	bl	8003218 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 f825 	bl	8002d30 <UART_SetConfig>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d101      	bne.n	8002cf0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e01b      	b.n	8002d28 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	685a      	ldr	r2, [r3, #4]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002cfe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	689a      	ldr	r2, [r3, #8]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002d0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f042 0201 	orr.w	r2, r2, #1
 8002d1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f000 fb1a 	bl	800335a <UART_CheckIdleState>
 8002d26:	4603      	mov	r3, r0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3708      	adds	r7, #8
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d34:	b08c      	sub	sp, #48	@ 0x30
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	689a      	ldr	r2, [r3, #8]
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	431a      	orrs	r2, r3
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	431a      	orrs	r2, r3
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	69db      	ldr	r3, [r3, #28]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	4b94      	ldr	r3, [pc, #592]	@ (8002fb0 <UART_SetConfig+0x280>)
 8002d60:	4013      	ands	r3, r2
 8002d62:	697a      	ldr	r2, [r7, #20]
 8002d64:	6812      	ldr	r2, [r2, #0]
 8002d66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d68:	430b      	orrs	r3, r1
 8002d6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	68da      	ldr	r2, [r3, #12]
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a89      	ldr	r2, [pc, #548]	@ (8002fb4 <UART_SetConfig+0x284>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d004      	beq.n	8002d9c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002da6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002daa:	697a      	ldr	r2, [r7, #20]
 8002dac:	6812      	ldr	r2, [r2, #0]
 8002dae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002db0:	430b      	orrs	r3, r1
 8002db2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dba:	f023 010f 	bic.w	r1, r3, #15
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a7a      	ldr	r2, [pc, #488]	@ (8002fb8 <UART_SetConfig+0x288>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d127      	bne.n	8002e24 <UART_SetConfig+0xf4>
 8002dd4:	2003      	movs	r0, #3
 8002dd6:	f7ff ff3a 	bl	8002c4e <LL_RCC_GetUSARTClockSource>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8002de0:	2b03      	cmp	r3, #3
 8002de2:	d81b      	bhi.n	8002e1c <UART_SetConfig+0xec>
 8002de4:	a201      	add	r2, pc, #4	@ (adr r2, 8002dec <UART_SetConfig+0xbc>)
 8002de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dea:	bf00      	nop
 8002dec:	08002dfd 	.word	0x08002dfd
 8002df0:	08002e0d 	.word	0x08002e0d
 8002df4:	08002e05 	.word	0x08002e05
 8002df8:	08002e15 	.word	0x08002e15
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e02:	e080      	b.n	8002f06 <UART_SetConfig+0x1d6>
 8002e04:	2302      	movs	r3, #2
 8002e06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e0a:	e07c      	b.n	8002f06 <UART_SetConfig+0x1d6>
 8002e0c:	2304      	movs	r3, #4
 8002e0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e12:	e078      	b.n	8002f06 <UART_SetConfig+0x1d6>
 8002e14:	2308      	movs	r3, #8
 8002e16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e1a:	e074      	b.n	8002f06 <UART_SetConfig+0x1d6>
 8002e1c:	2310      	movs	r3, #16
 8002e1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e22:	e070      	b.n	8002f06 <UART_SetConfig+0x1d6>
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a64      	ldr	r2, [pc, #400]	@ (8002fbc <UART_SetConfig+0x28c>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d138      	bne.n	8002ea0 <UART_SetConfig+0x170>
 8002e2e:	200c      	movs	r0, #12
 8002e30:	f7ff ff0d 	bl	8002c4e <LL_RCC_GetUSARTClockSource>
 8002e34:	4603      	mov	r3, r0
 8002e36:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8002e3a:	2b0c      	cmp	r3, #12
 8002e3c:	d82c      	bhi.n	8002e98 <UART_SetConfig+0x168>
 8002e3e:	a201      	add	r2, pc, #4	@ (adr r2, 8002e44 <UART_SetConfig+0x114>)
 8002e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e44:	08002e79 	.word	0x08002e79
 8002e48:	08002e99 	.word	0x08002e99
 8002e4c:	08002e99 	.word	0x08002e99
 8002e50:	08002e99 	.word	0x08002e99
 8002e54:	08002e89 	.word	0x08002e89
 8002e58:	08002e99 	.word	0x08002e99
 8002e5c:	08002e99 	.word	0x08002e99
 8002e60:	08002e99 	.word	0x08002e99
 8002e64:	08002e81 	.word	0x08002e81
 8002e68:	08002e99 	.word	0x08002e99
 8002e6c:	08002e99 	.word	0x08002e99
 8002e70:	08002e99 	.word	0x08002e99
 8002e74:	08002e91 	.word	0x08002e91
 8002e78:	2300      	movs	r3, #0
 8002e7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e7e:	e042      	b.n	8002f06 <UART_SetConfig+0x1d6>
 8002e80:	2302      	movs	r3, #2
 8002e82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e86:	e03e      	b.n	8002f06 <UART_SetConfig+0x1d6>
 8002e88:	2304      	movs	r3, #4
 8002e8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e8e:	e03a      	b.n	8002f06 <UART_SetConfig+0x1d6>
 8002e90:	2308      	movs	r3, #8
 8002e92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e96:	e036      	b.n	8002f06 <UART_SetConfig+0x1d6>
 8002e98:	2310      	movs	r3, #16
 8002e9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e9e:	e032      	b.n	8002f06 <UART_SetConfig+0x1d6>
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a43      	ldr	r2, [pc, #268]	@ (8002fb4 <UART_SetConfig+0x284>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d12a      	bne.n	8002f00 <UART_SetConfig+0x1d0>
 8002eaa:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8002eae:	f7ff fee0 	bl	8002c72 <LL_RCC_GetLPUARTClockSource>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002eb8:	d01a      	beq.n	8002ef0 <UART_SetConfig+0x1c0>
 8002eba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002ebe:	d81b      	bhi.n	8002ef8 <UART_SetConfig+0x1c8>
 8002ec0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ec4:	d00c      	beq.n	8002ee0 <UART_SetConfig+0x1b0>
 8002ec6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002eca:	d815      	bhi.n	8002ef8 <UART_SetConfig+0x1c8>
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d003      	beq.n	8002ed8 <UART_SetConfig+0x1a8>
 8002ed0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ed4:	d008      	beq.n	8002ee8 <UART_SetConfig+0x1b8>
 8002ed6:	e00f      	b.n	8002ef8 <UART_SetConfig+0x1c8>
 8002ed8:	2300      	movs	r3, #0
 8002eda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ede:	e012      	b.n	8002f06 <UART_SetConfig+0x1d6>
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ee6:	e00e      	b.n	8002f06 <UART_SetConfig+0x1d6>
 8002ee8:	2304      	movs	r3, #4
 8002eea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002eee:	e00a      	b.n	8002f06 <UART_SetConfig+0x1d6>
 8002ef0:	2308      	movs	r3, #8
 8002ef2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ef6:	e006      	b.n	8002f06 <UART_SetConfig+0x1d6>
 8002ef8:	2310      	movs	r3, #16
 8002efa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002efe:	e002      	b.n	8002f06 <UART_SetConfig+0x1d6>
 8002f00:	2310      	movs	r3, #16
 8002f02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a2a      	ldr	r2, [pc, #168]	@ (8002fb4 <UART_SetConfig+0x284>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	f040 80a4 	bne.w	800305a <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002f12:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002f16:	2b08      	cmp	r3, #8
 8002f18:	d823      	bhi.n	8002f62 <UART_SetConfig+0x232>
 8002f1a:	a201      	add	r2, pc, #4	@ (adr r2, 8002f20 <UART_SetConfig+0x1f0>)
 8002f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f20:	08002f45 	.word	0x08002f45
 8002f24:	08002f63 	.word	0x08002f63
 8002f28:	08002f4d 	.word	0x08002f4d
 8002f2c:	08002f63 	.word	0x08002f63
 8002f30:	08002f53 	.word	0x08002f53
 8002f34:	08002f63 	.word	0x08002f63
 8002f38:	08002f63 	.word	0x08002f63
 8002f3c:	08002f63 	.word	0x08002f63
 8002f40:	08002f5b 	.word	0x08002f5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f44:	f7ff f988 	bl	8002258 <HAL_RCC_GetPCLK1Freq>
 8002f48:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002f4a:	e010      	b.n	8002f6e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f4c:	4b1c      	ldr	r3, [pc, #112]	@ (8002fc0 <UART_SetConfig+0x290>)
 8002f4e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002f50:	e00d      	b.n	8002f6e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f52:	f7ff f8cd 	bl	80020f0 <HAL_RCC_GetSysClockFreq>
 8002f56:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002f58:	e009      	b.n	8002f6e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f5e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002f60:	e005      	b.n	8002f6e <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8002f62:	2300      	movs	r3, #0
 8002f64:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002f6c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	f000 8137 	beq.w	80031e4 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f7a:	4a12      	ldr	r2, [pc, #72]	@ (8002fc4 <UART_SetConfig+0x294>)
 8002f7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f80:	461a      	mov	r2, r3
 8002f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f84:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f88:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	685a      	ldr	r2, [r3, #4]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	4413      	add	r3, r2
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d305      	bcc.n	8002fa6 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d910      	bls.n	8002fc8 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002fac:	e11a      	b.n	80031e4 <UART_SetConfig+0x4b4>
 8002fae:	bf00      	nop
 8002fb0:	cfff69f3 	.word	0xcfff69f3
 8002fb4:	40008000 	.word	0x40008000
 8002fb8:	40013800 	.word	0x40013800
 8002fbc:	40004400 	.word	0x40004400
 8002fc0:	00f42400 	.word	0x00f42400
 8002fc4:	080038c0 	.word	0x080038c0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fca:	2200      	movs	r2, #0
 8002fcc:	60bb      	str	r3, [r7, #8]
 8002fce:	60fa      	str	r2, [r7, #12]
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd4:	4a8e      	ldr	r2, [pc, #568]	@ (8003210 <UART_SetConfig+0x4e0>)
 8002fd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	2200      	movs	r2, #0
 8002fde:	603b      	str	r3, [r7, #0]
 8002fe0:	607a      	str	r2, [r7, #4]
 8002fe2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002fe6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002fea:	f7fd f8c5 	bl	8000178 <__aeabi_uldivmod>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	4610      	mov	r0, r2
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	f04f 0200 	mov.w	r2, #0
 8002ffa:	f04f 0300 	mov.w	r3, #0
 8002ffe:	020b      	lsls	r3, r1, #8
 8003000:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003004:	0202      	lsls	r2, r0, #8
 8003006:	6979      	ldr	r1, [r7, #20]
 8003008:	6849      	ldr	r1, [r1, #4]
 800300a:	0849      	lsrs	r1, r1, #1
 800300c:	2000      	movs	r0, #0
 800300e:	460c      	mov	r4, r1
 8003010:	4605      	mov	r5, r0
 8003012:	eb12 0804 	adds.w	r8, r2, r4
 8003016:	eb43 0905 	adc.w	r9, r3, r5
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	469a      	mov	sl, r3
 8003022:	4693      	mov	fp, r2
 8003024:	4652      	mov	r2, sl
 8003026:	465b      	mov	r3, fp
 8003028:	4640      	mov	r0, r8
 800302a:	4649      	mov	r1, r9
 800302c:	f7fd f8a4 	bl	8000178 <__aeabi_uldivmod>
 8003030:	4602      	mov	r2, r0
 8003032:	460b      	mov	r3, r1
 8003034:	4613      	mov	r3, r2
 8003036:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003038:	6a3b      	ldr	r3, [r7, #32]
 800303a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800303e:	d308      	bcc.n	8003052 <UART_SetConfig+0x322>
 8003040:	6a3b      	ldr	r3, [r7, #32]
 8003042:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003046:	d204      	bcs.n	8003052 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	6a3a      	ldr	r2, [r7, #32]
 800304e:	60da      	str	r2, [r3, #12]
 8003050:	e0c8      	b.n	80031e4 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003058:	e0c4      	b.n	80031e4 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	69db      	ldr	r3, [r3, #28]
 800305e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003062:	d167      	bne.n	8003134 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8003064:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003068:	2b08      	cmp	r3, #8
 800306a:	d828      	bhi.n	80030be <UART_SetConfig+0x38e>
 800306c:	a201      	add	r2, pc, #4	@ (adr r2, 8003074 <UART_SetConfig+0x344>)
 800306e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003072:	bf00      	nop
 8003074:	08003099 	.word	0x08003099
 8003078:	080030a1 	.word	0x080030a1
 800307c:	080030a9 	.word	0x080030a9
 8003080:	080030bf 	.word	0x080030bf
 8003084:	080030af 	.word	0x080030af
 8003088:	080030bf 	.word	0x080030bf
 800308c:	080030bf 	.word	0x080030bf
 8003090:	080030bf 	.word	0x080030bf
 8003094:	080030b7 	.word	0x080030b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003098:	f7ff f8de 	bl	8002258 <HAL_RCC_GetPCLK1Freq>
 800309c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800309e:	e014      	b.n	80030ca <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030a0:	f7ff f8ec 	bl	800227c <HAL_RCC_GetPCLK2Freq>
 80030a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80030a6:	e010      	b.n	80030ca <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030a8:	4b5a      	ldr	r3, [pc, #360]	@ (8003214 <UART_SetConfig+0x4e4>)
 80030aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80030ac:	e00d      	b.n	80030ca <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030ae:	f7ff f81f 	bl	80020f0 <HAL_RCC_GetSysClockFreq>
 80030b2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80030b4:	e009      	b.n	80030ca <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80030bc:	e005      	b.n	80030ca <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 80030be:	2300      	movs	r3, #0
 80030c0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80030c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80030ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f000 8089 	beq.w	80031e4 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d6:	4a4e      	ldr	r2, [pc, #312]	@ (8003210 <UART_SetConfig+0x4e0>)
 80030d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030dc:	461a      	mov	r2, r3
 80030de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80030e4:	005a      	lsls	r2, r3, #1
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	085b      	lsrs	r3, r3, #1
 80030ec:	441a      	add	r2, r3
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030f8:	6a3b      	ldr	r3, [r7, #32]
 80030fa:	2b0f      	cmp	r3, #15
 80030fc:	d916      	bls.n	800312c <UART_SetConfig+0x3fc>
 80030fe:	6a3b      	ldr	r3, [r7, #32]
 8003100:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003104:	d212      	bcs.n	800312c <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003106:	6a3b      	ldr	r3, [r7, #32]
 8003108:	b29b      	uxth	r3, r3
 800310a:	f023 030f 	bic.w	r3, r3, #15
 800310e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003110:	6a3b      	ldr	r3, [r7, #32]
 8003112:	085b      	lsrs	r3, r3, #1
 8003114:	b29b      	uxth	r3, r3
 8003116:	f003 0307 	and.w	r3, r3, #7
 800311a:	b29a      	uxth	r2, r3
 800311c:	8bfb      	ldrh	r3, [r7, #30]
 800311e:	4313      	orrs	r3, r2
 8003120:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	8bfa      	ldrh	r2, [r7, #30]
 8003128:	60da      	str	r2, [r3, #12]
 800312a:	e05b      	b.n	80031e4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003132:	e057      	b.n	80031e4 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003134:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003138:	2b08      	cmp	r3, #8
 800313a:	d828      	bhi.n	800318e <UART_SetConfig+0x45e>
 800313c:	a201      	add	r2, pc, #4	@ (adr r2, 8003144 <UART_SetConfig+0x414>)
 800313e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003142:	bf00      	nop
 8003144:	08003169 	.word	0x08003169
 8003148:	08003171 	.word	0x08003171
 800314c:	08003179 	.word	0x08003179
 8003150:	0800318f 	.word	0x0800318f
 8003154:	0800317f 	.word	0x0800317f
 8003158:	0800318f 	.word	0x0800318f
 800315c:	0800318f 	.word	0x0800318f
 8003160:	0800318f 	.word	0x0800318f
 8003164:	08003187 	.word	0x08003187
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003168:	f7ff f876 	bl	8002258 <HAL_RCC_GetPCLK1Freq>
 800316c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800316e:	e014      	b.n	800319a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003170:	f7ff f884 	bl	800227c <HAL_RCC_GetPCLK2Freq>
 8003174:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003176:	e010      	b.n	800319a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003178:	4b26      	ldr	r3, [pc, #152]	@ (8003214 <UART_SetConfig+0x4e4>)
 800317a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800317c:	e00d      	b.n	800319a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800317e:	f7fe ffb7 	bl	80020f0 <HAL_RCC_GetSysClockFreq>
 8003182:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003184:	e009      	b.n	800319a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003186:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800318a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800318c:	e005      	b.n	800319a <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800318e:	2300      	movs	r3, #0
 8003190:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003198:	bf00      	nop
    }

    if (pclk != 0U)
 800319a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800319c:	2b00      	cmp	r3, #0
 800319e:	d021      	beq.n	80031e4 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a4:	4a1a      	ldr	r2, [pc, #104]	@ (8003210 <UART_SetConfig+0x4e0>)
 80031a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031aa:	461a      	mov	r2, r3
 80031ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ae:	fbb3 f2f2 	udiv	r2, r3, r2
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	085b      	lsrs	r3, r3, #1
 80031b8:	441a      	add	r2, r3
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031c4:	6a3b      	ldr	r3, [r7, #32]
 80031c6:	2b0f      	cmp	r3, #15
 80031c8:	d909      	bls.n	80031de <UART_SetConfig+0x4ae>
 80031ca:	6a3b      	ldr	r3, [r7, #32]
 80031cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031d0:	d205      	bcs.n	80031de <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80031d2:	6a3b      	ldr	r3, [r7, #32]
 80031d4:	b29a      	uxth	r2, r3
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	60da      	str	r2, [r3, #12]
 80031dc:	e002      	b.n	80031e4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	2200      	movs	r2, #0
 80031f8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	2200      	movs	r2, #0
 80031fe:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003200:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003204:	4618      	mov	r0, r3
 8003206:	3730      	adds	r7, #48	@ 0x30
 8003208:	46bd      	mov	sp, r7
 800320a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800320e:	bf00      	nop
 8003210:	080038c0 	.word	0x080038c0
 8003214:	00f42400 	.word	0x00f42400

08003218 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003224:	f003 0308 	and.w	r3, r3, #8
 8003228:	2b00      	cmp	r3, #0
 800322a:	d00a      	beq.n	8003242 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	430a      	orrs	r2, r1
 8003240:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00a      	beq.n	8003264 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	430a      	orrs	r2, r1
 8003262:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00a      	beq.n	8003286 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	430a      	orrs	r2, r1
 8003284:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800328a:	f003 0304 	and.w	r3, r3, #4
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00a      	beq.n	80032a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	430a      	orrs	r2, r1
 80032a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ac:	f003 0310 	and.w	r3, r3, #16
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d00a      	beq.n	80032ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	430a      	orrs	r2, r1
 80032c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ce:	f003 0320 	and.w	r3, r3, #32
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00a      	beq.n	80032ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	430a      	orrs	r2, r1
 80032ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d01a      	beq.n	800332e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	430a      	orrs	r2, r1
 800330c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003312:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003316:	d10a      	bne.n	800332e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	430a      	orrs	r2, r1
 800332c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003332:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00a      	beq.n	8003350 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	430a      	orrs	r2, r1
 800334e:	605a      	str	r2, [r3, #4]
  }
}
 8003350:	bf00      	nop
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	bc80      	pop	{r7}
 8003358:	4770      	bx	lr

0800335a <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b086      	sub	sp, #24
 800335e:	af02      	add	r7, sp, #8
 8003360:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800336a:	f7fd fc1b 	bl	8000ba4 <HAL_GetTick>
 800336e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0308 	and.w	r3, r3, #8
 800337a:	2b08      	cmp	r3, #8
 800337c:	d10e      	bne.n	800339c <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800337e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003382:	9300      	str	r3, [sp, #0]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 f832 	bl	80033f6 <UART_WaitOnFlagUntilTimeout>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d001      	beq.n	800339c <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e028      	b.n	80033ee <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0304 	and.w	r3, r3, #4
 80033a6:	2b04      	cmp	r3, #4
 80033a8:	d10e      	bne.n	80033c8 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033aa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80033ae:	9300      	str	r3, [sp, #0]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f000 f81c 	bl	80033f6 <UART_WaitOnFlagUntilTimeout>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d001      	beq.n	80033c8 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e012      	b.n	80033ee <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2220      	movs	r2, #32
 80033cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2220      	movs	r2, #32
 80033d4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b09c      	sub	sp, #112	@ 0x70
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	60f8      	str	r0, [r7, #12]
 80033fe:	60b9      	str	r1, [r7, #8]
 8003400:	603b      	str	r3, [r7, #0]
 8003402:	4613      	mov	r3, r2
 8003404:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003406:	e0af      	b.n	8003568 <UART_WaitOnFlagUntilTimeout+0x172>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003408:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800340a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800340e:	f000 80ab 	beq.w	8003568 <UART_WaitOnFlagUntilTimeout+0x172>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003412:	f7fd fbc7 	bl	8000ba4 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800341e:	429a      	cmp	r2, r3
 8003420:	d302      	bcc.n	8003428 <UART_WaitOnFlagUntilTimeout+0x32>
 8003422:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003424:	2b00      	cmp	r3, #0
 8003426:	d140      	bne.n	80034aa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800342e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003430:	e853 3f00 	ldrex	r3, [r3]
 8003434:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003436:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003438:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800343c:	667b      	str	r3, [r7, #100]	@ 0x64
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	461a      	mov	r2, r3
 8003444:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003446:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003448:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800344a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800344c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800344e:	e841 2300 	strex	r3, r2, [r1]
 8003452:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8003454:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1e6      	bne.n	8003428 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	3308      	adds	r3, #8
 8003460:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003462:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003464:	e853 3f00 	ldrex	r3, [r3]
 8003468:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800346a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800346c:	f023 0301 	bic.w	r3, r3, #1
 8003470:	663b      	str	r3, [r7, #96]	@ 0x60
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	3308      	adds	r3, #8
 8003478:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800347a:	64ba      	str	r2, [r7, #72]	@ 0x48
 800347c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800347e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003480:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003482:	e841 2300 	strex	r3, r2, [r1]
 8003486:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003488:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1e5      	bne.n	800345a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2220      	movs	r2, #32
 8003492:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2220      	movs	r2, #32
 800349a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e06f      	b.n	800358a <UART_WaitOnFlagUntilTimeout+0x194>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0304 	and.w	r3, r3, #4
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d057      	beq.n	8003568 <UART_WaitOnFlagUntilTimeout+0x172>
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	2b80      	cmp	r3, #128	@ 0x80
 80034bc:	d054      	beq.n	8003568 <UART_WaitOnFlagUntilTimeout+0x172>
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	2b40      	cmp	r3, #64	@ 0x40
 80034c2:	d051      	beq.n	8003568 <UART_WaitOnFlagUntilTimeout+0x172>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	69db      	ldr	r3, [r3, #28]
 80034ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034d2:	d149      	bne.n	8003568 <UART_WaitOnFlagUntilTimeout+0x172>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80034dc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034e6:	e853 3f00 	ldrex	r3, [r3]
 80034ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80034ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ee:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80034f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	461a      	mov	r2, r3
 80034fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80034fe:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003500:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003502:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003504:	e841 2300 	strex	r3, r2, [r1]
 8003508:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800350a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1e6      	bne.n	80034de <UART_WaitOnFlagUntilTimeout+0xe8>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	3308      	adds	r3, #8
 8003516:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	e853 3f00 	ldrex	r3, [r3]
 800351e:	613b      	str	r3, [r7, #16]
   return(result);
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	f023 0301 	bic.w	r3, r3, #1
 8003526:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	3308      	adds	r3, #8
 800352e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003530:	623a      	str	r2, [r7, #32]
 8003532:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003534:	69f9      	ldr	r1, [r7, #28]
 8003536:	6a3a      	ldr	r2, [r7, #32]
 8003538:	e841 2300 	strex	r3, r2, [r1]
 800353c:	61bb      	str	r3, [r7, #24]
   return(result);
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d1e5      	bne.n	8003510 <UART_WaitOnFlagUntilTimeout+0x11a>

          huart->gState = HAL_UART_STATE_READY;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2220      	movs	r2, #32
 8003548:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2220      	movs	r2, #32
 8003550:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2220      	movs	r2, #32
 8003558:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e010      	b.n	800358a <UART_WaitOnFlagUntilTimeout+0x194>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	69da      	ldr	r2, [r3, #28]
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	4013      	ands	r3, r2
 8003572:	68ba      	ldr	r2, [r7, #8]
 8003574:	429a      	cmp	r2, r3
 8003576:	bf0c      	ite	eq
 8003578:	2301      	moveq	r3, #1
 800357a:	2300      	movne	r3, #0
 800357c:	b2db      	uxtb	r3, r3
 800357e:	461a      	mov	r2, r3
 8003580:	79fb      	ldrb	r3, [r7, #7]
 8003582:	429a      	cmp	r2, r3
 8003584:	f43f af40 	beq.w	8003408 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3770      	adds	r7, #112	@ 0x70
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003592:	b480      	push	{r7}
 8003594:	b085      	sub	sp, #20
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d101      	bne.n	80035a8 <HAL_UARTEx_DisableFifoMode+0x16>
 80035a4:	2302      	movs	r3, #2
 80035a6:	e027      	b.n	80035f8 <HAL_UARTEx_DisableFifoMode+0x66>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2224      	movs	r2, #36	@ 0x24
 80035b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f022 0201 	bic.w	r2, r2, #1
 80035ce:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80035d6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2220      	movs	r2, #32
 80035ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3714      	adds	r7, #20
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bc80      	pop	{r7}
 8003600:	4770      	bx	lr

08003602 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b084      	sub	sp, #16
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
 800360a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003612:	2b01      	cmp	r3, #1
 8003614:	d101      	bne.n	800361a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003616:	2302      	movs	r3, #2
 8003618:	e02d      	b.n	8003676 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2201      	movs	r2, #1
 800361e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2224      	movs	r2, #36	@ 0x24
 8003626:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 0201 	bic.w	r2, r2, #1
 8003640:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	430a      	orrs	r2, r1
 8003654:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 f850 	bl	80036fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2220      	movs	r2, #32
 8003668:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800367e:	b580      	push	{r7, lr}
 8003680:	b084      	sub	sp, #16
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
 8003686:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800368e:	2b01      	cmp	r3, #1
 8003690:	d101      	bne.n	8003696 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003692:	2302      	movs	r3, #2
 8003694:	e02d      	b.n	80036f2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2201      	movs	r2, #1
 800369a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2224      	movs	r2, #36	@ 0x24
 80036a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f022 0201 	bic.w	r2, r2, #1
 80036bc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	683a      	ldr	r2, [r7, #0]
 80036ce:	430a      	orrs	r2, r1
 80036d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 f812 	bl	80036fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2220      	movs	r2, #32
 80036e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3710      	adds	r7, #16
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
	...

080036fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003708:	2b00      	cmp	r3, #0
 800370a:	d108      	bne.n	800371e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800371c:	e031      	b.n	8003782 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800371e:	2308      	movs	r3, #8
 8003720:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003722:	2308      	movs	r3, #8
 8003724:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	0e5b      	lsrs	r3, r3, #25
 800372e:	b2db      	uxtb	r3, r3
 8003730:	f003 0307 	and.w	r3, r3, #7
 8003734:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	0f5b      	lsrs	r3, r3, #29
 800373e:	b2db      	uxtb	r3, r3
 8003740:	f003 0307 	and.w	r3, r3, #7
 8003744:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003746:	7bbb      	ldrb	r3, [r7, #14]
 8003748:	7b3a      	ldrb	r2, [r7, #12]
 800374a:	4910      	ldr	r1, [pc, #64]	@ (800378c <UARTEx_SetNbDataToProcess+0x90>)
 800374c:	5c8a      	ldrb	r2, [r1, r2]
 800374e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003752:	7b3a      	ldrb	r2, [r7, #12]
 8003754:	490e      	ldr	r1, [pc, #56]	@ (8003790 <UARTEx_SetNbDataToProcess+0x94>)
 8003756:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003758:	fb93 f3f2 	sdiv	r3, r3, r2
 800375c:	b29a      	uxth	r2, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003764:	7bfb      	ldrb	r3, [r7, #15]
 8003766:	7b7a      	ldrb	r2, [r7, #13]
 8003768:	4908      	ldr	r1, [pc, #32]	@ (800378c <UARTEx_SetNbDataToProcess+0x90>)
 800376a:	5c8a      	ldrb	r2, [r1, r2]
 800376c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003770:	7b7a      	ldrb	r2, [r7, #13]
 8003772:	4907      	ldr	r1, [pc, #28]	@ (8003790 <UARTEx_SetNbDataToProcess+0x94>)
 8003774:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003776:	fb93 f3f2 	sdiv	r3, r3, r2
 800377a:	b29a      	uxth	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8003782:	bf00      	nop
 8003784:	3714      	adds	r7, #20
 8003786:	46bd      	mov	sp, r7
 8003788:	bc80      	pop	{r7}
 800378a:	4770      	bx	lr
 800378c:	080038d8 	.word	0x080038d8
 8003790:	080038e0 	.word	0x080038e0

08003794 <memset>:
 8003794:	4402      	add	r2, r0
 8003796:	4603      	mov	r3, r0
 8003798:	4293      	cmp	r3, r2
 800379a:	d100      	bne.n	800379e <memset+0xa>
 800379c:	4770      	bx	lr
 800379e:	f803 1b01 	strb.w	r1, [r3], #1
 80037a2:	e7f9      	b.n	8003798 <memset+0x4>

080037a4 <__libc_init_array>:
 80037a4:	b570      	push	{r4, r5, r6, lr}
 80037a6:	4d0d      	ldr	r5, [pc, #52]	@ (80037dc <__libc_init_array+0x38>)
 80037a8:	4c0d      	ldr	r4, [pc, #52]	@ (80037e0 <__libc_init_array+0x3c>)
 80037aa:	1b64      	subs	r4, r4, r5
 80037ac:	10a4      	asrs	r4, r4, #2
 80037ae:	2600      	movs	r6, #0
 80037b0:	42a6      	cmp	r6, r4
 80037b2:	d109      	bne.n	80037c8 <__libc_init_array+0x24>
 80037b4:	4d0b      	ldr	r5, [pc, #44]	@ (80037e4 <__libc_init_array+0x40>)
 80037b6:	4c0c      	ldr	r4, [pc, #48]	@ (80037e8 <__libc_init_array+0x44>)
 80037b8:	f000 f818 	bl	80037ec <_init>
 80037bc:	1b64      	subs	r4, r4, r5
 80037be:	10a4      	asrs	r4, r4, #2
 80037c0:	2600      	movs	r6, #0
 80037c2:	42a6      	cmp	r6, r4
 80037c4:	d105      	bne.n	80037d2 <__libc_init_array+0x2e>
 80037c6:	bd70      	pop	{r4, r5, r6, pc}
 80037c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80037cc:	4798      	blx	r3
 80037ce:	3601      	adds	r6, #1
 80037d0:	e7ee      	b.n	80037b0 <__libc_init_array+0xc>
 80037d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80037d6:	4798      	blx	r3
 80037d8:	3601      	adds	r6, #1
 80037da:	e7f2      	b.n	80037c2 <__libc_init_array+0x1e>
 80037dc:	080038f0 	.word	0x080038f0
 80037e0:	080038f0 	.word	0x080038f0
 80037e4:	080038f0 	.word	0x080038f0
 80037e8:	080038f4 	.word	0x080038f4

080037ec <_init>:
 80037ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ee:	bf00      	nop
 80037f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037f2:	bc08      	pop	{r3}
 80037f4:	469e      	mov	lr, r3
 80037f6:	4770      	bx	lr

080037f8 <_fini>:
 80037f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037fa:	bf00      	nop
 80037fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037fe:	bc08      	pop	{r3}
 8003800:	469e      	mov	lr, r3
 8003802:	4770      	bx	lr
