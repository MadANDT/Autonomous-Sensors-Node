
STOP2_WL55_1CPU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026b0  08000138  08000138  00001138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  080027e8  080027e8  000037e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002884  08002884  00004010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002884  08002884  00004010  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002884  08002884  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002884  08002884  00003884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002888  08002888  00003888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  0800288c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000058  20000010  0800289c  00004010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000068  0800289c  00004068  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a86c  00000000  00000000  0000403a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f13  00000000  00000000  0000e8a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea0  00000000  00000000  000107c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ae2  00000000  00000000  00011660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c17a  00000000  00000000  00012142  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b989  00000000  00000000  0002e2bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b11eb  00000000  00000000  00039c45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eae30  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bd4  00000000  00000000  000eae74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a0  00000000  00000000  000eea48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	@ (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	@ (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000010 	.word	0x20000010
 8000154:	00000000 	.word	0x00000000
 8000158:	080027d0 	.word	0x080027d0

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	@ (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	@ (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	@ (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000014 	.word	0x20000014
 8000174:	080027d0 	.word	0x080027d0

08000178 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000178:	b480      	push	{r7}
 800017a:	b085      	sub	sp, #20
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000180:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000184:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000186:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	4313      	orrs	r3, r2
 800018e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000190:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000194:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	4013      	ands	r3, r2
 800019a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800019c:	68fb      	ldr	r3, [r7, #12]
}
 800019e:	bf00      	nop
 80001a0:	3714      	adds	r7, #20
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ac:	f000 fa5c 	bl	8000668 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001b0:	f000 f834 	bl	800021c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001b4:	f000 f8d2 	bl	800035c <MX_GPIO_Init>
  MX_RTC_Init();
 80001b8:	f000 f894 	bl	80002e4 <MX_RTC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOB, currentLED_Pin, GPIO_PIN_SET);
 80001bc:	4b13      	ldr	r3, [pc, #76]	@ (800020c <main+0x64>)
 80001be:	881b      	ldrh	r3, [r3, #0]
 80001c0:	2201      	movs	r2, #1
 80001c2:	4619      	mov	r1, r3
 80001c4:	4812      	ldr	r0, [pc, #72]	@ (8000210 <main+0x68>)
 80001c6:	f000 fd71 	bl	8000cac <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 80001ca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001ce:	f000 fac1 	bl	8000754 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, currentLED_Pin, GPIO_PIN_RESET);
 80001d2:	4b0e      	ldr	r3, [pc, #56]	@ (800020c <main+0x64>)
 80001d4:	881b      	ldrh	r3, [r3, #0]
 80001d6:	2200      	movs	r2, #0
 80001d8:	4619      	mov	r1, r3
 80001da:	480d      	ldr	r0, [pc, #52]	@ (8000210 <main+0x68>)
 80001dc:	f000 fd66 	bl	8000cac <HAL_GPIO_WritePin>
	  // Suspend SysTick increment
	  HAL_SuspendTick();
 80001e0:	f000 fadc 	bl	800079c <HAL_SuspendTick>
	  // Set RTC interrupt as our wake-up signal
	  HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, sleepDuration, RTC_WAKEUPCLOCK_RTCCLK_DIV16, 0);
 80001e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000214 <main+0x6c>)
 80001e6:	881b      	ldrh	r3, [r3, #0]
 80001e8:	4619      	mov	r1, r3
 80001ea:	2300      	movs	r3, #0
 80001ec:	2200      	movs	r2, #0
 80001ee:	480a      	ldr	r0, [pc, #40]	@ (8000218 <main+0x70>)
 80001f0:	f002 f9c4 	bl	800257c <HAL_RTCEx_SetWakeUpTimer_IT>

	  /* Enter STOP 2 mode */
	  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 80001f4:	2001      	movs	r0, #1
 80001f6:	f000 fda3 	bl	8000d40 <HAL_PWREx_EnterSTOP2Mode>
	   * MCU is asleep in STOP2 mode
	   * ####----####----####----####
	   */

	  // Dectivate wake-up timer
	  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 80001fa:	4807      	ldr	r0, [pc, #28]	@ (8000218 <main+0x70>)
 80001fc:	f002 fa44 	bl	8002688 <HAL_RTCEx_DeactivateWakeUpTimer>
	  // Reset System clock configuration, as STOP2 blocks most of the clocks
	  SystemClock_Config();
 8000200:	f000 f80c 	bl	800021c <SystemClock_Config>
	  // Resume the SysTick increment
	  HAL_ResumeTick();
 8000204:	f000 fad8 	bl	80007b8 <HAL_ResumeTick>
	  HAL_GPIO_WritePin(GPIOB, currentLED_Pin, GPIO_PIN_SET);
 8000208:	bf00      	nop
 800020a:	e7d7      	b.n	80001bc <main+0x14>
 800020c:	20000000 	.word	0x20000000
 8000210:	48000400 	.word	0x48000400
 8000214:	20000002 	.word	0x20000002
 8000218:	2000002c 	.word	0x2000002c

0800021c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b09a      	sub	sp, #104	@ 0x68
 8000220:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000222:	f107 0320 	add.w	r3, r7, #32
 8000226:	2248      	movs	r2, #72	@ 0x48
 8000228:	2100      	movs	r1, #0
 800022a:	4618      	mov	r0, r3
 800022c:	f002 faa3 	bl	8002776 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000230:	1d3b      	adds	r3, r7, #4
 8000232:	2200      	movs	r2, #0
 8000234:	601a      	str	r2, [r3, #0]
 8000236:	605a      	str	r2, [r3, #4]
 8000238:	609a      	str	r2, [r3, #8]
 800023a:	60da      	str	r2, [r3, #12]
 800023c:	611a      	str	r2, [r3, #16]
 800023e:	615a      	str	r2, [r3, #20]
 8000240:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000242:	4b27      	ldr	r3, [pc, #156]	@ (80002e0 <SystemClock_Config+0xc4>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800024a:	4a25      	ldr	r2, [pc, #148]	@ (80002e0 <SystemClock_Config+0xc4>)
 800024c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000250:	6013      	str	r3, [r2, #0]
 8000252:	4b23      	ldr	r3, [pc, #140]	@ (80002e0 <SystemClock_Config+0xc4>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800025a:	603b      	str	r3, [r7, #0]
 800025c:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 800025e:	2328      	movs	r3, #40	@ 0x28
 8000260:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000262:	2301      	movs	r3, #1
 8000264:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000266:	2300      	movs	r3, #0
 8000268:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800026a:	2360      	movs	r3, #96	@ 0x60
 800026c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 800026e:	2300      	movs	r3, #0
 8000270:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000272:	2301      	movs	r3, #1
 8000274:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000276:	2302      	movs	r3, #2
 8000278:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800027a:	2301      	movs	r3, #1
 800027c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800027e:	2300      	movs	r3, #0
 8000280:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000282:	2318      	movs	r3, #24
 8000284:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000286:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800028a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800028c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000290:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000292:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000296:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000298:	f107 0320 	add.w	r3, r7, #32
 800029c:	4618      	mov	r0, r3
 800029e:	f001 f81b 	bl	80012d8 <HAL_RCC_OscConfig>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d001      	beq.n	80002ac <SystemClock_Config+0x90>
  {
    Error_Handler();
 80002a8:	f000 f908 	bl	80004bc <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80002ac:	234f      	movs	r3, #79	@ 0x4f
 80002ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002b0:	2303      	movs	r3, #3
 80002b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b4:	2300      	movs	r3, #0
 80002b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002b8:	2300      	movs	r3, #0
 80002ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002bc:	2300      	movs	r3, #0
 80002be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80002c0:	2300      	movs	r3, #0
 80002c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002c4:	1d3b      	adds	r3, r7, #4
 80002c6:	2102      	movs	r1, #2
 80002c8:	4618      	mov	r0, r3
 80002ca:	f001 fb87 	bl	80019dc <HAL_RCC_ClockConfig>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d001      	beq.n	80002d8 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80002d4:	f000 f8f2 	bl	80004bc <Error_Handler>
  }
}
 80002d8:	bf00      	nop
 80002da:	3768      	adds	r7, #104	@ 0x68
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	58000400 	.word	0x58000400

080002e4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80002e8:	4b1a      	ldr	r3, [pc, #104]	@ (8000354 <MX_RTC_Init+0x70>)
 80002ea:	4a1b      	ldr	r2, [pc, #108]	@ (8000358 <MX_RTC_Init+0x74>)
 80002ec:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80002ee:	4b19      	ldr	r3, [pc, #100]	@ (8000354 <MX_RTC_Init+0x70>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80002f4:	4b17      	ldr	r3, [pc, #92]	@ (8000354 <MX_RTC_Init+0x70>)
 80002f6:	227f      	movs	r2, #127	@ 0x7f
 80002f8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80002fa:	4b16      	ldr	r3, [pc, #88]	@ (8000354 <MX_RTC_Init+0x70>)
 80002fc:	22ff      	movs	r2, #255	@ 0xff
 80002fe:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000300:	4b14      	ldr	r3, [pc, #80]	@ (8000354 <MX_RTC_Init+0x70>)
 8000302:	2200      	movs	r2, #0
 8000304:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000306:	4b13      	ldr	r3, [pc, #76]	@ (8000354 <MX_RTC_Init+0x70>)
 8000308:	2200      	movs	r2, #0
 800030a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800030c:	4b11      	ldr	r3, [pc, #68]	@ (8000354 <MX_RTC_Init+0x70>)
 800030e:	2200      	movs	r2, #0
 8000310:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000312:	4b10      	ldr	r3, [pc, #64]	@ (8000354 <MX_RTC_Init+0x70>)
 8000314:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000318:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800031a:	4b0e      	ldr	r3, [pc, #56]	@ (8000354 <MX_RTC_Init+0x70>)
 800031c:	2200      	movs	r2, #0
 800031e:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8000320:	4b0c      	ldr	r3, [pc, #48]	@ (8000354 <MX_RTC_Init+0x70>)
 8000322:	2200      	movs	r2, #0
 8000324:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000326:	480b      	ldr	r0, [pc, #44]	@ (8000354 <MX_RTC_Init+0x70>)
 8000328:	f002 f80e 	bl	8002348 <HAL_RTC_Init>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000332:	f000 f8c3 	bl	80004bc <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x0FA0, RTC_WAKEUPCLOCK_RTCCLK_DIV16, 0) != HAL_OK)
 8000336:	2300      	movs	r3, #0
 8000338:	2200      	movs	r2, #0
 800033a:	f44f 617a 	mov.w	r1, #4000	@ 0xfa0
 800033e:	4805      	ldr	r0, [pc, #20]	@ (8000354 <MX_RTC_Init+0x70>)
 8000340:	f002 f91c 	bl	800257c <HAL_RTCEx_SetWakeUpTimer_IT>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <MX_RTC_Init+0x6a>
  {
    Error_Handler();
 800034a:	f000 f8b7 	bl	80004bc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800034e:	bf00      	nop
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	2000002c 	.word	0x2000002c
 8000358:	40002800 	.word	0x40002800

0800035c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b086      	sub	sp, #24
 8000360:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000362:	1d3b      	adds	r3, r7, #4
 8000364:	2200      	movs	r2, #0
 8000366:	601a      	str	r2, [r3, #0]
 8000368:	605a      	str	r2, [r3, #4]
 800036a:	609a      	str	r2, [r3, #8]
 800036c:	60da      	str	r2, [r3, #12]
 800036e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000370:	2002      	movs	r0, #2
 8000372:	f7ff ff01 	bl	8000178 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000376:	2004      	movs	r0, #4
 8000378:	f7ff fefe 	bl	8000178 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800037c:	2001      	movs	r0, #1
 800037e:	f7ff fefb 	bl	8000178 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BLED_Pin|GLED_Pin|RLED_Pin, GPIO_PIN_RESET);
 8000382:	2200      	movs	r2, #0
 8000384:	f44f 410a 	mov.w	r1, #35328	@ 0x8a00
 8000388:	4825      	ldr	r0, [pc, #148]	@ (8000420 <MX_GPIO_Init+0xc4>)
 800038a:	f000 fc8f 	bl	8000cac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 800038e:	2200      	movs	r2, #0
 8000390:	2138      	movs	r1, #56	@ 0x38
 8000392:	4824      	ldr	r0, [pc, #144]	@ (8000424 <MX_GPIO_Init+0xc8>)
 8000394:	f000 fc8a 	bl	8000cac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BLED_Pin GLED_Pin RLED_Pin */
  GPIO_InitStruct.Pin = BLED_Pin|GLED_Pin|RLED_Pin;
 8000398:	f44f 430a 	mov.w	r3, #35328	@ 0x8a00
 800039c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800039e:	2301      	movs	r3, #1
 80003a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a2:	2300      	movs	r3, #0
 80003a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003a6:	2300      	movs	r3, #0
 80003a8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003aa:	1d3b      	adds	r3, r7, #4
 80003ac:	4619      	mov	r1, r3
 80003ae:	481c      	ldr	r0, [pc, #112]	@ (8000420 <MX_GPIO_Init+0xc4>)
 80003b0:	f000 fb1c 	bl	80009ec <HAL_GPIO_Init>

  /*Configure GPIO pins : FE_CTRL3_Pin FE_CTRL2_Pin FE_CTRL1_Pin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 80003b4:	2338      	movs	r3, #56	@ 0x38
 80003b6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003b8:	2301      	movs	r3, #1
 80003ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003bc:	2300      	movs	r3, #0
 80003be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80003c0:	2303      	movs	r3, #3
 80003c2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003c4:	1d3b      	adds	r3, r7, #4
 80003c6:	4619      	mov	r1, r3
 80003c8:	4816      	ldr	r0, [pc, #88]	@ (8000424 <MX_GPIO_Init+0xc8>)
 80003ca:	f000 fb0f 	bl	80009ec <HAL_GPIO_Init>

  /*Configure GPIO pin : UB1_Pin */
  GPIO_InitStruct.Pin = UB1_Pin;
 80003ce:	2301      	movs	r3, #1
 80003d0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003d2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80003d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003d8:	2301      	movs	r3, #1
 80003da:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(UB1_GPIO_Port, &GPIO_InitStruct);
 80003dc:	1d3b      	adds	r3, r7, #4
 80003de:	4619      	mov	r1, r3
 80003e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003e4:	f000 fb02 	bl	80009ec <HAL_GPIO_Init>

  /*Configure GPIO pins : T_VCP_RX_Pin T_VCP_RXA2_Pin */
  GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 80003e8:	230c      	movs	r3, #12
 80003ea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003ec:	2302      	movs	r3, #2
 80003ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f0:	2300      	movs	r3, #0
 80003f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003f4:	2300      	movs	r3, #0
 80003f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80003f8:	2307      	movs	r3, #7
 80003fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003fc:	1d3b      	adds	r3, r7, #4
 80003fe:	4619      	mov	r1, r3
 8000400:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000404:	f000 faf2 	bl	80009ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000408:	2200      	movs	r2, #0
 800040a:	2100      	movs	r1, #0
 800040c:	2006      	movs	r0, #6
 800040e:	f000 fab8 	bl	8000982 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000412:	2006      	movs	r0, #6
 8000414:	f000 facf 	bl	80009b6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000418:	bf00      	nop
 800041a:	3718      	adds	r7, #24
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}
 8000420:	48000400 	.word	0x48000400
 8000424:	48000800 	.word	0x48000800

08000428 <HAL_GPIO_EXTI_Callback>:
  * `currentLED_Pin` and `sleepDuration` are updated here.
  * @param GPIO_Pin: Pin number that triggered the interrupt
  * @note  This function is called by the HAL when an external interrupt occurs.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
 800042e:	4603      	mov	r3, r0
 8000430:	80fb      	strh	r3, [r7, #6]

	if (currentLED_Pin == BLED_Pin){
 8000432:	4b1f      	ldr	r3, [pc, #124]	@ (80004b0 <HAL_GPIO_EXTI_Callback+0x88>)
 8000434:	881b      	ldrh	r3, [r3, #0]
 8000436:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800043a:	d10e      	bne.n	800045a <HAL_GPIO_EXTI_Callback+0x32>
		/* Wake up clock counter updates to 4 seconds,
		 * which corresponds to 0x1F40.
		 */ sleepDuration = 0x1F40;
 800043c:	4b1d      	ldr	r3, [pc, #116]	@ (80004b4 <HAL_GPIO_EXTI_Callback+0x8c>)
 800043e:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8000442:	801a      	strh	r2, [r3, #0]
		// Change blinking LED to green LED
		HAL_GPIO_WritePin(GPIOB, BLED_Pin, 0);
 8000444:	2200      	movs	r2, #0
 8000446:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800044a:	481b      	ldr	r0, [pc, #108]	@ (80004b8 <HAL_GPIO_EXTI_Callback+0x90>)
 800044c:	f000 fc2e 	bl	8000cac <HAL_GPIO_WritePin>
		currentLED_Pin = GLED_Pin;
 8000450:	4b17      	ldr	r3, [pc, #92]	@ (80004b0 <HAL_GPIO_EXTI_Callback+0x88>)
 8000452:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000456:	801a      	strh	r2, [r3, #0]
		 */ sleepDuration = 0x0FA0;
		// Change blinking LED to blue LED
		HAL_GPIO_WritePin(GPIOB, RLED_Pin, 0);
		currentLED_Pin = BLED_Pin;
	}
}
 8000458:	e026      	b.n	80004a8 <HAL_GPIO_EXTI_Callback+0x80>
	} else if (currentLED_Pin == GLED_Pin){
 800045a:	4b15      	ldr	r3, [pc, #84]	@ (80004b0 <HAL_GPIO_EXTI_Callback+0x88>)
 800045c:	881b      	ldrh	r3, [r3, #0]
 800045e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000462:	d10e      	bne.n	8000482 <HAL_GPIO_EXTI_Callback+0x5a>
		 */ sleepDuration = 0x2EE0;
 8000464:	4b13      	ldr	r3, [pc, #76]	@ (80004b4 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000466:	f642 62e0 	movw	r2, #12000	@ 0x2ee0
 800046a:	801a      	strh	r2, [r3, #0]
		 HAL_GPIO_WritePin(GPIOB, GLED_Pin, 0);
 800046c:	2200      	movs	r2, #0
 800046e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000472:	4811      	ldr	r0, [pc, #68]	@ (80004b8 <HAL_GPIO_EXTI_Callback+0x90>)
 8000474:	f000 fc1a 	bl	8000cac <HAL_GPIO_WritePin>
		 currentLED_Pin = RLED_Pin;
 8000478:	4b0d      	ldr	r3, [pc, #52]	@ (80004b0 <HAL_GPIO_EXTI_Callback+0x88>)
 800047a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800047e:	801a      	strh	r2, [r3, #0]
}
 8000480:	e012      	b.n	80004a8 <HAL_GPIO_EXTI_Callback+0x80>
	} else if (currentLED_Pin == RLED_Pin){
 8000482:	4b0b      	ldr	r3, [pc, #44]	@ (80004b0 <HAL_GPIO_EXTI_Callback+0x88>)
 8000484:	881b      	ldrh	r3, [r3, #0]
 8000486:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800048a:	d10d      	bne.n	80004a8 <HAL_GPIO_EXTI_Callback+0x80>
		 */ sleepDuration = 0x0FA0;
 800048c:	4b09      	ldr	r3, [pc, #36]	@ (80004b4 <HAL_GPIO_EXTI_Callback+0x8c>)
 800048e:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8000492:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, RLED_Pin, 0);
 8000494:	2200      	movs	r2, #0
 8000496:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800049a:	4807      	ldr	r0, [pc, #28]	@ (80004b8 <HAL_GPIO_EXTI_Callback+0x90>)
 800049c:	f000 fc06 	bl	8000cac <HAL_GPIO_WritePin>
		currentLED_Pin = BLED_Pin;
 80004a0:	4b03      	ldr	r3, [pc, #12]	@ (80004b0 <HAL_GPIO_EXTI_Callback+0x88>)
 80004a2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80004a6:	801a      	strh	r2, [r3, #0]
}
 80004a8:	bf00      	nop
 80004aa:	3708      	adds	r7, #8
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	20000000 	.word	0x20000000
 80004b4:	20000002 	.word	0x20000002
 80004b8:	48000400 	.word	0x48000400

080004bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004c0:	b672      	cpsid	i
}
 80004c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004c4:	bf00      	nop
 80004c6:	e7fd      	b.n	80004c4 <Error_Handler+0x8>

080004c8 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80004cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80004d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80004d4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80004d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80004dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80004e0:	bf00      	nop
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bc80      	pop	{r7}
 80004e6:	4770      	bx	lr

080004e8 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b085      	sub	sp, #20
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80004f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80004f4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80004f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	4313      	orrs	r3, r2
 80004fe:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000500:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000504:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	4013      	ands	r3, r2
 800050a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800050c:	68fb      	ldr	r3, [r7, #12]
}
 800050e:	bf00      	nop
 8000510:	3714      	adds	r7, #20
 8000512:	46bd      	mov	sp, r7
 8000514:	bc80      	pop	{r7}
 8000516:	4770      	bx	lr

08000518 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800051c:	bf00      	nop
 800051e:	46bd      	mov	sp, r7
 8000520:	bc80      	pop	{r7}
 8000522:	4770      	bx	lr

08000524 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b090      	sub	sp, #64	@ 0x40
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800052c:	f107 0308 	add.w	r3, r7, #8
 8000530:	2238      	movs	r2, #56	@ 0x38
 8000532:	2100      	movs	r1, #0
 8000534:	4618      	mov	r0, r3
 8000536:	f002 f91e 	bl	8002776 <memset>
  if(hrtc->Instance==RTC)
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	4a12      	ldr	r2, [pc, #72]	@ (8000588 <HAL_RTC_MspInit+0x64>)
 8000540:	4293      	cmp	r3, r2
 8000542:	d11d      	bne.n	8000580 <HAL_RTC_MspInit+0x5c>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000544:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000548:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800054a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800054e:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000550:	f107 0308 	add.w	r3, r7, #8
 8000554:	4618      	mov	r0, r3
 8000556:	f001 fddd 	bl	8002114 <HAL_RCCEx_PeriphCLKConfig>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000560:	f7ff ffac 	bl	80004bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000564:	f7ff ffb0 	bl	80004c8 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000568:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800056c:	f7ff ffbc 	bl	80004e8 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8000570:	2200      	movs	r2, #0
 8000572:	2100      	movs	r1, #0
 8000574:	2003      	movs	r0, #3
 8000576:	f000 fa04 	bl	8000982 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800057a:	2003      	movs	r0, #3
 800057c:	f000 fa1b 	bl	80009b6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8000580:	bf00      	nop
 8000582:	3740      	adds	r7, #64	@ 0x40
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	40002800 	.word	0x40002800

0800058c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000590:	bf00      	nop
 8000592:	e7fd      	b.n	8000590 <NMI_Handler+0x4>

08000594 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000598:	bf00      	nop
 800059a:	e7fd      	b.n	8000598 <HardFault_Handler+0x4>

0800059c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005a0:	bf00      	nop
 80005a2:	e7fd      	b.n	80005a0 <MemManage_Handler+0x4>

080005a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005a8:	bf00      	nop
 80005aa:	e7fd      	b.n	80005a8 <BusFault_Handler+0x4>

080005ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005b0:	bf00      	nop
 80005b2:	e7fd      	b.n	80005b0 <UsageFault_Handler+0x4>

080005b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005b8:	bf00      	nop
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bc80      	pop	{r7}
 80005be:	4770      	bx	lr

080005c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005c4:	bf00      	nop
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc80      	pop	{r7}
 80005ca:	4770      	bx	lr

080005cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bc80      	pop	{r7}
 80005d6:	4770      	bx	lr

080005d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005dc:	f000 f89e 	bl	800071c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005e0:	bf00      	nop
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC Wakeup Interrupt.
  */
void RTC_WKUP_IRQHandler(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80005e8:	4802      	ldr	r0, [pc, #8]	@ (80005f4 <RTC_WKUP_IRQHandler+0x10>)
 80005ea:	f002 f8a1 	bl	8002730 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	2000002c 	.word	0x2000002c

080005f8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line 0 Interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UB1_Pin);
 80005fc:	2001      	movs	r0, #1
 80005fe:	f000 fb6d 	bl	8000cdc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000602:	bf00      	nop
 8000604:	bd80      	pop	{r7, pc}

08000606 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000606:	b480      	push	{r7}
 8000608:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 800060a:	bf00      	nop
 800060c:	46bd      	mov	sp, r7
 800060e:	bc80      	pop	{r7}
 8000610:	4770      	bx	lr
	...

08000614 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000614:	480d      	ldr	r0, [pc, #52]	@ (800064c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000616:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000618:	f7ff fff5 	bl	8000606 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800061c:	480c      	ldr	r0, [pc, #48]	@ (8000650 <LoopForever+0x6>)
  ldr r1, =_edata
 800061e:	490d      	ldr	r1, [pc, #52]	@ (8000654 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000620:	4a0d      	ldr	r2, [pc, #52]	@ (8000658 <LoopForever+0xe>)
  movs r3, #0
 8000622:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000624:	e002      	b.n	800062c <LoopCopyDataInit>

08000626 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000626:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000628:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800062a:	3304      	adds	r3, #4

0800062c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800062c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800062e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000630:	d3f9      	bcc.n	8000626 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000632:	4a0a      	ldr	r2, [pc, #40]	@ (800065c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000634:	4c0a      	ldr	r4, [pc, #40]	@ (8000660 <LoopForever+0x16>)
  movs r3, #0
 8000636:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000638:	e001      	b.n	800063e <LoopFillZerobss>

0800063a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800063a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800063c:	3204      	adds	r2, #4

0800063e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800063e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000640:	d3fb      	bcc.n	800063a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000642:	f002 f8a1 	bl	8002788 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000646:	f7ff fdaf 	bl	80001a8 <main>

0800064a <LoopForever>:

LoopForever:
    b LoopForever
 800064a:	e7fe      	b.n	800064a <LoopForever>
  ldr   r0, =_estack
 800064c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000650:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000654:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000658:	0800288c 	.word	0x0800288c
  ldr r2, =_sbss
 800065c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000660:	20000068 	.word	0x20000068

08000664 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000664:	e7fe      	b.n	8000664 <ADC_IRQHandler>
	...

08000668 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800066e:	2300      	movs	r3, #0
 8000670:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000672:	2003      	movs	r0, #3
 8000674:	f000 f97a 	bl	800096c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000678:	f001 fb92 	bl	8001da0 <HAL_RCC_GetHCLKFreq>
 800067c:	4603      	mov	r3, r0
 800067e:	4a09      	ldr	r2, [pc, #36]	@ (80006a4 <HAL_Init+0x3c>)
 8000680:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000682:	2000      	movs	r0, #0
 8000684:	f000 f810 	bl	80006a8 <HAL_InitTick>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d002      	beq.n	8000694 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800068e:	2301      	movs	r3, #1
 8000690:	71fb      	strb	r3, [r7, #7]
 8000692:	e001      	b.n	8000698 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000694:	f7ff ff40 	bl	8000518 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000698:	79fb      	ldrb	r3, [r7, #7]
}
 800069a:	4618      	mov	r0, r3
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20000004 	.word	0x20000004

080006a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80006b0:	2300      	movs	r3, #0
 80006b2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80006b4:	4b17      	ldr	r3, [pc, #92]	@ (8000714 <HAL_InitTick+0x6c>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d024      	beq.n	8000706 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80006bc:	f001 fb70 	bl	8001da0 <HAL_RCC_GetHCLKFreq>
 80006c0:	4602      	mov	r2, r0
 80006c2:	4b14      	ldr	r3, [pc, #80]	@ (8000714 <HAL_InitTick+0x6c>)
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	4619      	mov	r1, r3
 80006c8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006cc:	fbb3 f3f1 	udiv	r3, r3, r1
 80006d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80006d4:	4618      	mov	r0, r3
 80006d6:	f000 f97c 	bl	80009d2 <HAL_SYSTICK_Config>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d10f      	bne.n	8000700 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	2b0f      	cmp	r3, #15
 80006e4:	d809      	bhi.n	80006fa <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006e6:	2200      	movs	r2, #0
 80006e8:	6879      	ldr	r1, [r7, #4]
 80006ea:	f04f 30ff 	mov.w	r0, #4294967295
 80006ee:	f000 f948 	bl	8000982 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006f2:	4a09      	ldr	r2, [pc, #36]	@ (8000718 <HAL_InitTick+0x70>)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	6013      	str	r3, [r2, #0]
 80006f8:	e007      	b.n	800070a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80006fa:	2301      	movs	r3, #1
 80006fc:	73fb      	strb	r3, [r7, #15]
 80006fe:	e004      	b.n	800070a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000700:	2301      	movs	r3, #1
 8000702:	73fb      	strb	r3, [r7, #15]
 8000704:	e001      	b.n	800070a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000706:	2301      	movs	r3, #1
 8000708:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800070a:	7bfb      	ldrb	r3, [r7, #15]
}
 800070c:	4618      	mov	r0, r3
 800070e:	3710      	adds	r7, #16
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	2000000c 	.word	0x2000000c
 8000718:	20000008 	.word	0x20000008

0800071c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000720:	4b05      	ldr	r3, [pc, #20]	@ (8000738 <HAL_IncTick+0x1c>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	461a      	mov	r2, r3
 8000726:	4b05      	ldr	r3, [pc, #20]	@ (800073c <HAL_IncTick+0x20>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4413      	add	r3, r2
 800072c:	4a03      	ldr	r2, [pc, #12]	@ (800073c <HAL_IncTick+0x20>)
 800072e:	6013      	str	r3, [r2, #0]
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr
 8000738:	2000000c 	.word	0x2000000c
 800073c:	20000064 	.word	0x20000064

08000740 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  return uwTick;
 8000744:	4b02      	ldr	r3, [pc, #8]	@ (8000750 <HAL_GetTick+0x10>)
 8000746:	681b      	ldr	r3, [r3, #0]
}
 8000748:	4618      	mov	r0, r3
 800074a:	46bd      	mov	sp, r7
 800074c:	bc80      	pop	{r7}
 800074e:	4770      	bx	lr
 8000750:	20000064 	.word	0x20000064

08000754 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800075c:	f7ff fff0 	bl	8000740 <HAL_GetTick>
 8000760:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800076c:	d005      	beq.n	800077a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800076e:	4b0a      	ldr	r3, [pc, #40]	@ (8000798 <HAL_Delay+0x44>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	461a      	mov	r2, r3
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	4413      	add	r3, r2
 8000778:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800077a:	bf00      	nop
 800077c:	f7ff ffe0 	bl	8000740 <HAL_GetTick>
 8000780:	4602      	mov	r2, r0
 8000782:	68bb      	ldr	r3, [r7, #8]
 8000784:	1ad3      	subs	r3, r2, r3
 8000786:	68fa      	ldr	r2, [r7, #12]
 8000788:	429a      	cmp	r2, r3
 800078a:	d8f7      	bhi.n	800077c <HAL_Delay+0x28>
  {
  }
}
 800078c:	bf00      	nop
 800078e:	bf00      	nop
 8000790:	3710      	adds	r7, #16
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	2000000c 	.word	0x2000000c

0800079c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80007a0:	4b04      	ldr	r3, [pc, #16]	@ (80007b4 <HAL_SuspendTick+0x18>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a03      	ldr	r2, [pc, #12]	@ (80007b4 <HAL_SuspendTick+0x18>)
 80007a6:	f023 0302 	bic.w	r3, r3, #2
 80007aa:	6013      	str	r3, [r2, #0]
}
 80007ac:	bf00      	nop
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bc80      	pop	{r7}
 80007b2:	4770      	bx	lr
 80007b4:	e000e010 	.word	0xe000e010

080007b8 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80007bc:	4b04      	ldr	r3, [pc, #16]	@ (80007d0 <HAL_ResumeTick+0x18>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a03      	ldr	r2, [pc, #12]	@ (80007d0 <HAL_ResumeTick+0x18>)
 80007c2:	f043 0302 	orr.w	r3, r3, #2
 80007c6:	6013      	str	r3, [r2, #0]
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bc80      	pop	{r7}
 80007ce:	4770      	bx	lr
 80007d0:	e000e010 	.word	0xe000e010

080007d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b085      	sub	sp, #20
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	f003 0307 	and.w	r3, r3, #7
 80007e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000818 <__NVIC_SetPriorityGrouping+0x44>)
 80007e6:	68db      	ldr	r3, [r3, #12]
 80007e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007ea:	68ba      	ldr	r2, [r7, #8]
 80007ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80007f0:	4013      	ands	r3, r2
 80007f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000800:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000804:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000806:	4a04      	ldr	r2, [pc, #16]	@ (8000818 <__NVIC_SetPriorityGrouping+0x44>)
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	60d3      	str	r3, [r2, #12]
}
 800080c:	bf00      	nop
 800080e:	3714      	adds	r7, #20
 8000810:	46bd      	mov	sp, r7
 8000812:	bc80      	pop	{r7}
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	e000ed00 	.word	0xe000ed00

0800081c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000820:	4b04      	ldr	r3, [pc, #16]	@ (8000834 <__NVIC_GetPriorityGrouping+0x18>)
 8000822:	68db      	ldr	r3, [r3, #12]
 8000824:	0a1b      	lsrs	r3, r3, #8
 8000826:	f003 0307 	and.w	r3, r3, #7
}
 800082a:	4618      	mov	r0, r3
 800082c:	46bd      	mov	sp, r7
 800082e:	bc80      	pop	{r7}
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	e000ed00 	.word	0xe000ed00

08000838 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000846:	2b00      	cmp	r3, #0
 8000848:	db0b      	blt.n	8000862 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	f003 021f 	and.w	r2, r3, #31
 8000850:	4906      	ldr	r1, [pc, #24]	@ (800086c <__NVIC_EnableIRQ+0x34>)
 8000852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000856:	095b      	lsrs	r3, r3, #5
 8000858:	2001      	movs	r0, #1
 800085a:	fa00 f202 	lsl.w	r2, r0, r2
 800085e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000862:	bf00      	nop
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	bc80      	pop	{r7}
 800086a:	4770      	bx	lr
 800086c:	e000e100 	.word	0xe000e100

08000870 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	6039      	str	r1, [r7, #0]
 800087a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800087c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000880:	2b00      	cmp	r3, #0
 8000882:	db0a      	blt.n	800089a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	b2da      	uxtb	r2, r3
 8000888:	490c      	ldr	r1, [pc, #48]	@ (80008bc <__NVIC_SetPriority+0x4c>)
 800088a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800088e:	0112      	lsls	r2, r2, #4
 8000890:	b2d2      	uxtb	r2, r2
 8000892:	440b      	add	r3, r1
 8000894:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000898:	e00a      	b.n	80008b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	b2da      	uxtb	r2, r3
 800089e:	4908      	ldr	r1, [pc, #32]	@ (80008c0 <__NVIC_SetPriority+0x50>)
 80008a0:	79fb      	ldrb	r3, [r7, #7]
 80008a2:	f003 030f 	and.w	r3, r3, #15
 80008a6:	3b04      	subs	r3, #4
 80008a8:	0112      	lsls	r2, r2, #4
 80008aa:	b2d2      	uxtb	r2, r2
 80008ac:	440b      	add	r3, r1
 80008ae:	761a      	strb	r2, [r3, #24]
}
 80008b0:	bf00      	nop
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bc80      	pop	{r7}
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	e000e100 	.word	0xe000e100
 80008c0:	e000ed00 	.word	0xe000ed00

080008c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b089      	sub	sp, #36	@ 0x24
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	60f8      	str	r0, [r7, #12]
 80008cc:	60b9      	str	r1, [r7, #8]
 80008ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	f003 0307 	and.w	r3, r3, #7
 80008d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008d8:	69fb      	ldr	r3, [r7, #28]
 80008da:	f1c3 0307 	rsb	r3, r3, #7
 80008de:	2b04      	cmp	r3, #4
 80008e0:	bf28      	it	cs
 80008e2:	2304      	movcs	r3, #4
 80008e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008e6:	69fb      	ldr	r3, [r7, #28]
 80008e8:	3304      	adds	r3, #4
 80008ea:	2b06      	cmp	r3, #6
 80008ec:	d902      	bls.n	80008f4 <NVIC_EncodePriority+0x30>
 80008ee:	69fb      	ldr	r3, [r7, #28]
 80008f0:	3b03      	subs	r3, #3
 80008f2:	e000      	b.n	80008f6 <NVIC_EncodePriority+0x32>
 80008f4:	2300      	movs	r3, #0
 80008f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f8:	f04f 32ff 	mov.w	r2, #4294967295
 80008fc:	69bb      	ldr	r3, [r7, #24]
 80008fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000902:	43da      	mvns	r2, r3
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	401a      	ands	r2, r3
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800090c:	f04f 31ff 	mov.w	r1, #4294967295
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	fa01 f303 	lsl.w	r3, r1, r3
 8000916:	43d9      	mvns	r1, r3
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800091c:	4313      	orrs	r3, r2
         );
}
 800091e:	4618      	mov	r0, r3
 8000920:	3724      	adds	r7, #36	@ 0x24
 8000922:	46bd      	mov	sp, r7
 8000924:	bc80      	pop	{r7}
 8000926:	4770      	bx	lr

08000928 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	3b01      	subs	r3, #1
 8000934:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000938:	d301      	bcc.n	800093e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800093a:	2301      	movs	r3, #1
 800093c:	e00f      	b.n	800095e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800093e:	4a0a      	ldr	r2, [pc, #40]	@ (8000968 <SysTick_Config+0x40>)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	3b01      	subs	r3, #1
 8000944:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000946:	210f      	movs	r1, #15
 8000948:	f04f 30ff 	mov.w	r0, #4294967295
 800094c:	f7ff ff90 	bl	8000870 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000950:	4b05      	ldr	r3, [pc, #20]	@ (8000968 <SysTick_Config+0x40>)
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000956:	4b04      	ldr	r3, [pc, #16]	@ (8000968 <SysTick_Config+0x40>)
 8000958:	2207      	movs	r2, #7
 800095a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800095c:	2300      	movs	r3, #0
}
 800095e:	4618      	mov	r0, r3
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	e000e010 	.word	0xe000e010

0800096c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000974:	6878      	ldr	r0, [r7, #4]
 8000976:	f7ff ff2d 	bl	80007d4 <__NVIC_SetPriorityGrouping>
}
 800097a:	bf00      	nop
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	b086      	sub	sp, #24
 8000986:	af00      	add	r7, sp, #0
 8000988:	4603      	mov	r3, r0
 800098a:	60b9      	str	r1, [r7, #8]
 800098c:	607a      	str	r2, [r7, #4]
 800098e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000990:	f7ff ff44 	bl	800081c <__NVIC_GetPriorityGrouping>
 8000994:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000996:	687a      	ldr	r2, [r7, #4]
 8000998:	68b9      	ldr	r1, [r7, #8]
 800099a:	6978      	ldr	r0, [r7, #20]
 800099c:	f7ff ff92 	bl	80008c4 <NVIC_EncodePriority>
 80009a0:	4602      	mov	r2, r0
 80009a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009a6:	4611      	mov	r1, r2
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff ff61 	bl	8000870 <__NVIC_SetPriority>
}
 80009ae:	bf00      	nop
 80009b0:	3718      	adds	r7, #24
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	b082      	sub	sp, #8
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	4603      	mov	r3, r0
 80009be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff ff37 	bl	8000838 <__NVIC_EnableIRQ>
}
 80009ca:	bf00      	nop
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}

080009d2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009d2:	b580      	push	{r7, lr}
 80009d4:	b082      	sub	sp, #8
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80009da:	6878      	ldr	r0, [r7, #4]
 80009dc:	f7ff ffa4 	bl	8000928 <SysTick_Config>
 80009e0:	4603      	mov	r3, r0
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
	...

080009ec <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b087      	sub	sp, #28
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009f6:	2300      	movs	r3, #0
 80009f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009fa:	e140      	b.n	8000c7e <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	2101      	movs	r1, #1
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	fa01 f303 	lsl.w	r3, r1, r3
 8000a08:	4013      	ands	r3, r2
 8000a0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	f000 8132 	beq.w	8000c78 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	f003 0303 	and.w	r3, r3, #3
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d005      	beq.n	8000a2c <HAL_GPIO_Init+0x40>
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	f003 0303 	and.w	r3, r3, #3
 8000a28:	2b02      	cmp	r3, #2
 8000a2a:	d130      	bne.n	8000a8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	689b      	ldr	r3, [r3, #8]
 8000a30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	005b      	lsls	r3, r3, #1
 8000a36:	2203      	movs	r2, #3
 8000a38:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3c:	43db      	mvns	r3, r3
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	4013      	ands	r3, r2
 8000a42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	68da      	ldr	r2, [r3, #12]
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	005b      	lsls	r3, r3, #1
 8000a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a50:	693a      	ldr	r2, [r7, #16]
 8000a52:	4313      	orrs	r3, r2
 8000a54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	693a      	ldr	r2, [r7, #16]
 8000a5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a62:	2201      	movs	r2, #1
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6a:	43db      	mvns	r3, r3
 8000a6c:	693a      	ldr	r2, [r7, #16]
 8000a6e:	4013      	ands	r3, r2
 8000a70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	091b      	lsrs	r3, r3, #4
 8000a78:	f003 0201 	and.w	r2, r3, #1
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a82:	693a      	ldr	r2, [r7, #16]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	693a      	ldr	r2, [r7, #16]
 8000a8c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	f003 0303 	and.w	r3, r3, #3
 8000a96:	2b03      	cmp	r3, #3
 8000a98:	d017      	beq.n	8000aca <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	68db      	ldr	r3, [r3, #12]
 8000a9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	005b      	lsls	r3, r3, #1
 8000aa4:	2203      	movs	r2, #3
 8000aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aaa:	43db      	mvns	r3, r3
 8000aac:	693a      	ldr	r2, [r7, #16]
 8000aae:	4013      	ands	r3, r2
 8000ab0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	689a      	ldr	r2, [r3, #8]
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	fa02 f303 	lsl.w	r3, r2, r3
 8000abe:	693a      	ldr	r2, [r7, #16]
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	f003 0303 	and.w	r3, r3, #3
 8000ad2:	2b02      	cmp	r3, #2
 8000ad4:	d123      	bne.n	8000b1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	08da      	lsrs	r2, r3, #3
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	3208      	adds	r2, #8
 8000ade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ae2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	f003 0307 	and.w	r3, r3, #7
 8000aea:	009b      	lsls	r3, r3, #2
 8000aec:	220f      	movs	r2, #15
 8000aee:	fa02 f303 	lsl.w	r3, r2, r3
 8000af2:	43db      	mvns	r3, r3
 8000af4:	693a      	ldr	r2, [r7, #16]
 8000af6:	4013      	ands	r3, r2
 8000af8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	691a      	ldr	r2, [r3, #16]
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	f003 0307 	and.w	r3, r3, #7
 8000b04:	009b      	lsls	r3, r3, #2
 8000b06:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	08da      	lsrs	r2, r3, #3
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	3208      	adds	r2, #8
 8000b18:	6939      	ldr	r1, [r7, #16]
 8000b1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	005b      	lsls	r3, r3, #1
 8000b28:	2203      	movs	r2, #3
 8000b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2e:	43db      	mvns	r3, r3
 8000b30:	693a      	ldr	r2, [r7, #16]
 8000b32:	4013      	ands	r3, r2
 8000b34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	f003 0203 	and.w	r2, r3, #3
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	005b      	lsls	r3, r3, #1
 8000b42:	fa02 f303 	lsl.w	r3, r2, r3
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	f000 808c 	beq.w	8000c78 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000b60:	4a4e      	ldr	r2, [pc, #312]	@ (8000c9c <HAL_GPIO_Init+0x2b0>)
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	089b      	lsrs	r3, r3, #2
 8000b66:	3302      	adds	r3, #2
 8000b68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	f003 0303 	and.w	r3, r3, #3
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	2207      	movs	r2, #7
 8000b78:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7c:	43db      	mvns	r3, r3
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	4013      	ands	r3, r2
 8000b82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000b8a:	d00d      	beq.n	8000ba8 <HAL_GPIO_Init+0x1bc>
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	4a44      	ldr	r2, [pc, #272]	@ (8000ca0 <HAL_GPIO_Init+0x2b4>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d007      	beq.n	8000ba4 <HAL_GPIO_Init+0x1b8>
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	4a43      	ldr	r2, [pc, #268]	@ (8000ca4 <HAL_GPIO_Init+0x2b8>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d101      	bne.n	8000ba0 <HAL_GPIO_Init+0x1b4>
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	e004      	b.n	8000baa <HAL_GPIO_Init+0x1be>
 8000ba0:	2307      	movs	r3, #7
 8000ba2:	e002      	b.n	8000baa <HAL_GPIO_Init+0x1be>
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	e000      	b.n	8000baa <HAL_GPIO_Init+0x1be>
 8000ba8:	2300      	movs	r3, #0
 8000baa:	697a      	ldr	r2, [r7, #20]
 8000bac:	f002 0203 	and.w	r2, r2, #3
 8000bb0:	0092      	lsls	r2, r2, #2
 8000bb2:	4093      	lsls	r3, r2
 8000bb4:	693a      	ldr	r2, [r7, #16]
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000bba:	4938      	ldr	r1, [pc, #224]	@ (8000c9c <HAL_GPIO_Init+0x2b0>)
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	089b      	lsrs	r3, r3, #2
 8000bc0:	3302      	adds	r3, #2
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000bc8:	4b37      	ldr	r3, [pc, #220]	@ (8000ca8 <HAL_GPIO_Init+0x2bc>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	43db      	mvns	r3, r3
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d003      	beq.n	8000bec <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8000be4:	693a      	ldr	r2, [r7, #16]
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	4313      	orrs	r3, r2
 8000bea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000bec:	4a2e      	ldr	r2, [pc, #184]	@ (8000ca8 <HAL_GPIO_Init+0x2bc>)
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000bf2:	4b2d      	ldr	r3, [pc, #180]	@ (8000ca8 <HAL_GPIO_Init+0x2bc>)
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	43db      	mvns	r3, r3
 8000bfc:	693a      	ldr	r2, [r7, #16]
 8000bfe:	4013      	ands	r3, r2
 8000c00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d003      	beq.n	8000c16 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	4313      	orrs	r3, r2
 8000c14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c16:	4a24      	ldr	r2, [pc, #144]	@ (8000ca8 <HAL_GPIO_Init+0x2bc>)
 8000c18:	693b      	ldr	r3, [r7, #16]
 8000c1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8000c1c:	4b22      	ldr	r3, [pc, #136]	@ (8000ca8 <HAL_GPIO_Init+0x2bc>)
 8000c1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000c22:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	43db      	mvns	r3, r3
 8000c28:	693a      	ldr	r2, [r7, #16]
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d003      	beq.n	8000c42 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8000c42:	4a19      	ldr	r2, [pc, #100]	@ (8000ca8 <HAL_GPIO_Init+0x2bc>)
 8000c44:	693b      	ldr	r3, [r7, #16]
 8000c46:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8000c4a:	4b17      	ldr	r3, [pc, #92]	@ (8000ca8 <HAL_GPIO_Init+0x2bc>)
 8000c4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000c50:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	43db      	mvns	r3, r3
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	4013      	ands	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d003      	beq.n	8000c70 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000c68:	693a      	ldr	r2, [r7, #16]
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8000c70:	4a0d      	ldr	r2, [pc, #52]	@ (8000ca8 <HAL_GPIO_Init+0x2bc>)
 8000c72:	693b      	ldr	r3, [r7, #16]
 8000c74:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	fa22 f303 	lsr.w	r3, r2, r3
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	f47f aeb7 	bne.w	80009fc <HAL_GPIO_Init+0x10>
  }
}
 8000c8e:	bf00      	nop
 8000c90:	bf00      	nop
 8000c92:	371c      	adds	r7, #28
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bc80      	pop	{r7}
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	40010000 	.word	0x40010000
 8000ca0:	48000400 	.word	0x48000400
 8000ca4:	48000800 	.word	0x48000800
 8000ca8:	58000800 	.word	0x58000800

08000cac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	460b      	mov	r3, r1
 8000cb6:	807b      	strh	r3, [r7, #2]
 8000cb8:	4613      	mov	r3, r2
 8000cba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000cbc:	787b      	ldrb	r3, [r7, #1]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d003      	beq.n	8000cca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000cc2:	887a      	ldrh	r2, [r7, #2]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000cc8:	e002      	b.n	8000cd0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cca:	887a      	ldrh	r2, [r7, #2]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000cd0:	bf00      	nop
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bc80      	pop	{r7}
 8000cd8:	4770      	bx	lr
	...

08000cdc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000ce6:	4b08      	ldr	r3, [pc, #32]	@ (8000d08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ce8:	68da      	ldr	r2, [r3, #12]
 8000cea:	88fb      	ldrh	r3, [r7, #6]
 8000cec:	4013      	ands	r3, r2
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d006      	beq.n	8000d00 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000cf2:	4a05      	ldr	r2, [pc, #20]	@ (8000d08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000cf4:	88fb      	ldrh	r3, [r7, #6]
 8000cf6:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000cf8:	88fb      	ldrh	r3, [r7, #6]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff fb94 	bl	8000428 <HAL_GPIO_EXTI_Callback>
  }
}
 8000d00:	bf00      	nop
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	58000800 	.word	0x58000800

08000d0c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000d10:	4b04      	ldr	r3, [pc, #16]	@ (8000d24 <HAL_PWR_EnableBkUpAccess+0x18>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a03      	ldr	r2, [pc, #12]	@ (8000d24 <HAL_PWR_EnableBkUpAccess+0x18>)
 8000d16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d1a:	6013      	str	r3, [r2, #0]
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bc80      	pop	{r7}
 8000d22:	4770      	bx	lr
 8000d24:	58000400 	.word	0x58000400

08000d28 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8000d2c:	4b03      	ldr	r3, [pc, #12]	@ (8000d3c <HAL_PWREx_GetVoltageRange+0x14>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bc80      	pop	{r7}
 8000d3a:	4770      	bx	lr
 8000d3c:	58000400 	.word	0x58000400

08000d40 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8000d4a:	4b10      	ldr	r3, [pc, #64]	@ (8000d8c <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f023 0307 	bic.w	r3, r3, #7
 8000d52:	4a0e      	ldr	r2, [pc, #56]	@ (8000d8c <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8000d54:	f043 0302 	orr.w	r3, r3, #2
 8000d58:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000d90 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8000d5c:	691b      	ldr	r3, [r3, #16]
 8000d5e:	4a0c      	ldr	r2, [pc, #48]	@ (8000d90 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8000d60:	f043 0304 	orr.w	r3, r3, #4
 8000d64:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d101      	bne.n	8000d70 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8000d6c:	bf30      	wfi
 8000d6e:	e002      	b.n	8000d76 <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8000d70:	bf40      	sev
    __WFE();
 8000d72:	bf20      	wfe
    __WFE();
 8000d74:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000d76:	4b06      	ldr	r3, [pc, #24]	@ (8000d90 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8000d78:	691b      	ldr	r3, [r3, #16]
 8000d7a:	4a05      	ldr	r2, [pc, #20]	@ (8000d90 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8000d7c:	f023 0304 	bic.w	r3, r3, #4
 8000d80:	6113      	str	r3, [r2, #16]
}
 8000d82:	bf00      	nop
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr
 8000d8c:	58000400 	.word	0x58000400
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8000d98:	4b06      	ldr	r3, [pc, #24]	@ (8000db4 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000da0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000da4:	d101      	bne.n	8000daa <LL_PWR_IsEnabledBkUpAccess+0x16>
 8000da6:	2301      	movs	r3, #1
 8000da8:	e000      	b.n	8000dac <LL_PWR_IsEnabledBkUpAccess+0x18>
 8000daa:	2300      	movs	r3, #0
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bc80      	pop	{r7}
 8000db2:	4770      	bx	lr
 8000db4:	58000400 	.word	0x58000400

08000db8 <LL_RCC_HSE_EnableTcxo>:
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8000dbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000dc6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000dca:	6013      	str	r3, [r2, #0]
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bc80      	pop	{r7}
 8000dd2:	4770      	bx	lr

08000dd4 <LL_RCC_HSE_DisableTcxo>:
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8000dd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000de2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000de6:	6013      	str	r3, [r2, #0]
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bc80      	pop	{r7}
 8000dee:	4770      	bx	lr

08000df0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8000df4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000dfe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8000e02:	d101      	bne.n	8000e08 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8000e04:	2301      	movs	r3, #1
 8000e06:	e000      	b.n	8000e0a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bc80      	pop	{r7}
 8000e10:	4770      	bx	lr

08000e12 <LL_RCC_HSE_Enable>:
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000e16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000e20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e24:	6013      	str	r3, [r2, #0]
}
 8000e26:	bf00      	nop
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bc80      	pop	{r7}
 8000e2c:	4770      	bx	lr

08000e2e <LL_RCC_HSE_Disable>:
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8000e32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000e3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e40:	6013      	str	r3, [r2, #0]
}
 8000e42:	bf00      	nop
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bc80      	pop	{r7}
 8000e48:	4770      	bx	lr

08000e4a <LL_RCC_HSE_IsReady>:
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8000e4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8000e5c:	d101      	bne.n	8000e62 <LL_RCC_HSE_IsReady+0x18>
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e000      	b.n	8000e64 <LL_RCC_HSE_IsReady+0x1a>
 8000e62:	2300      	movs	r3, #0
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bc80      	pop	{r7}
 8000e6a:	4770      	bx	lr

08000e6c <LL_RCC_HSI_Enable>:
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000e70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000e7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e7e:	6013      	str	r3, [r2, #0]
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bc80      	pop	{r7}
 8000e86:	4770      	bx	lr

08000e88 <LL_RCC_HSI_Disable>:
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8000e8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000e96:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000e9a:	6013      	str	r3, [r2, #0]
}
 8000e9c:	bf00      	nop
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bc80      	pop	{r7}
 8000ea2:	4770      	bx	lr

08000ea4 <LL_RCC_HSI_IsReady>:
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000ea8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000eb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000eb6:	d101      	bne.n	8000ebc <LL_RCC_HSI_IsReady+0x18>
 8000eb8:	2301      	movs	r3, #1
 8000eba:	e000      	b.n	8000ebe <LL_RCC_HSI_IsReady+0x1a>
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bc80      	pop	{r7}
 8000ec4:	4770      	bx	lr

08000ec6 <LL_RCC_HSI_SetCalibTrimming>:
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	b083      	sub	sp, #12
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000ece:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	061b      	lsls	r3, r3, #24
 8000edc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	604b      	str	r3, [r1, #4]
}
 8000ee4:	bf00      	nop
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bc80      	pop	{r7}
 8000eec:	4770      	bx	lr

08000eee <LL_RCC_LSE_IsReady>:
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8000ef2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000efa:	f003 0302 	and.w	r3, r3, #2
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	d101      	bne.n	8000f06 <LL_RCC_LSE_IsReady+0x18>
 8000f02:	2301      	movs	r3, #1
 8000f04:	e000      	b.n	8000f08 <LL_RCC_LSE_IsReady+0x1a>
 8000f06:	2300      	movs	r3, #0
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bc80      	pop	{r7}
 8000f0e:	4770      	bx	lr

08000f10 <LL_RCC_LSI_Enable>:
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8000f14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f1c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bc80      	pop	{r7}
 8000f2e:	4770      	bx	lr

08000f30 <LL_RCC_LSI_Disable>:
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8000f34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f3c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f40:	f023 0301 	bic.w	r3, r3, #1
 8000f44:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bc80      	pop	{r7}
 8000f4e:	4770      	bx	lr

08000f50 <LL_RCC_LSI_IsReady>:
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8000f54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f5c:	f003 0302 	and.w	r3, r3, #2
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d101      	bne.n	8000f68 <LL_RCC_LSI_IsReady+0x18>
 8000f64:	2301      	movs	r3, #1
 8000f66:	e000      	b.n	8000f6a <LL_RCC_LSI_IsReady+0x1a>
 8000f68:	2300      	movs	r3, #0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bc80      	pop	{r7}
 8000f70:	4770      	bx	lr

08000f72 <LL_RCC_MSI_Enable>:
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000f76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	6013      	str	r3, [r2, #0]
}
 8000f86:	bf00      	nop
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bc80      	pop	{r7}
 8000f8c:	4770      	bx	lr

08000f8e <LL_RCC_MSI_Disable>:
{
 8000f8e:	b480      	push	{r7}
 8000f90:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8000f92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f9c:	f023 0301 	bic.w	r3, r3, #1
 8000fa0:	6013      	str	r3, [r2, #0]
}
 8000fa2:	bf00      	nop
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bc80      	pop	{r7}
 8000fa8:	4770      	bx	lr

08000faa <LL_RCC_MSI_IsReady>:
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8000fae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f003 0302 	and.w	r3, r3, #2
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d101      	bne.n	8000fc0 <LL_RCC_MSI_IsReady+0x16>
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	e000      	b.n	8000fc2 <LL_RCC_MSI_IsReady+0x18>
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bc80      	pop	{r7}
 8000fc8:	4770      	bx	lr

08000fca <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8000fce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f003 0308 	and.w	r3, r3, #8
 8000fd8:	2b08      	cmp	r3, #8
 8000fda:	d101      	bne.n	8000fe0 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e000      	b.n	8000fe2 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bc80      	pop	{r7}
 8000fe8:	4770      	bx	lr

08000fea <LL_RCC_MSI_GetRange>:
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8000fee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bc80      	pop	{r7}
 8000ffe:	4770      	bx	lr

08001000 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001004:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001008:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800100c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8001010:	4618      	mov	r0, r3
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr

08001018 <LL_RCC_MSI_SetCalibTrimming>:
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001020:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	021b      	lsls	r3, r3, #8
 800102e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001032:	4313      	orrs	r3, r2
 8001034:	604b      	str	r3, [r1, #4]
}
 8001036:	bf00      	nop
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	bc80      	pop	{r7}
 800103e:	4770      	bx	lr

08001040 <LL_RCC_SetSysClkSource>:
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001048:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	f023 0203 	bic.w	r2, r3, #3
 8001052:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4313      	orrs	r3, r2
 800105a:	608b      	str	r3, [r1, #8]
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	bc80      	pop	{r7}
 8001064:	4770      	bx	lr

08001066 <LL_RCC_GetSysClkSource>:
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800106a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	f003 030c 	and.w	r3, r3, #12
}
 8001074:	4618      	mov	r0, r3
 8001076:	46bd      	mov	sp, r7
 8001078:	bc80      	pop	{r7}
 800107a:	4770      	bx	lr

0800107c <LL_RCC_SetAHBPrescaler>:
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001084:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800108e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4313      	orrs	r3, r2
 8001096:	608b      	str	r3, [r1, #8]
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	bc80      	pop	{r7}
 80010a0:	4770      	bx	lr

080010a2 <LL_C2_RCC_SetAHBPrescaler>:
{
 80010a2:	b480      	push	{r7}
 80010a4:	b083      	sub	sp, #12
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80010aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010ae:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80010b2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80010b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4313      	orrs	r3, r2
 80010be:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80010c2:	bf00      	nop
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bc80      	pop	{r7}
 80010ca:	4770      	bx	lr

080010cc <LL_RCC_SetAHB3Prescaler>:
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80010d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010d8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80010dc:	f023 020f 	bic.w	r2, r3, #15
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	091b      	lsrs	r3, r3, #4
 80010e4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80010e8:	4313      	orrs	r3, r2
 80010ea:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80010ee:	bf00      	nop
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bc80      	pop	{r7}
 80010f6:	4770      	bx	lr

080010f8 <LL_RCC_SetAPB1Prescaler>:
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001100:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800110a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4313      	orrs	r3, r2
 8001112:	608b      	str	r3, [r1, #8]
}
 8001114:	bf00      	nop
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	bc80      	pop	{r7}
 800111c:	4770      	bx	lr

0800111e <LL_RCC_SetAPB2Prescaler>:
{
 800111e:	b480      	push	{r7}
 8001120:	b083      	sub	sp, #12
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001126:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001130:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4313      	orrs	r3, r2
 8001138:	608b      	str	r3, [r1, #8]
}
 800113a:	bf00      	nop
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr

08001144 <LL_RCC_GetAHBPrescaler>:
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001148:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001152:	4618      	mov	r0, r3
 8001154:	46bd      	mov	sp, r7
 8001156:	bc80      	pop	{r7}
 8001158:	4770      	bx	lr

0800115a <LL_RCC_GetAHB3Prescaler>:
{
 800115a:	b480      	push	{r7}
 800115c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800115e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001162:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001166:	011b      	lsls	r3, r3, #4
 8001168:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800116c:	4618      	mov	r0, r3
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr

08001174 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001178:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001182:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001186:	6013      	str	r3, [r2, #0]
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	bc80      	pop	{r7}
 800118e:	4770      	bx	lr

08001190 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001194:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800119e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80011a2:	6013      	str	r3, [r2, #0]
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bc80      	pop	{r7}
 80011aa:	4770      	bx	lr

080011ac <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80011b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80011be:	d101      	bne.n	80011c4 <LL_RCC_PLL_IsReady+0x18>
 80011c0:	2301      	movs	r3, #1
 80011c2:	e000      	b.n	80011c6 <LL_RCC_PLL_IsReady+0x1a>
 80011c4:	2300      	movs	r3, #0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bc80      	pop	{r7}
 80011cc:	4770      	bx	lr

080011ce <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80011ce:	b480      	push	{r7}
 80011d0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80011d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	0a1b      	lsrs	r3, r3, #8
 80011da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80011de:	4618      	mov	r0, r3
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bc80      	pop	{r7}
 80011e4:	4770      	bx	lr

080011e6 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80011e6:	b480      	push	{r7}
 80011e8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80011ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bc80      	pop	{r7}
 80011fa:	4770      	bx	lr

080011fc <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001200:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001204:	68db      	ldr	r3, [r3, #12]
 8001206:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800120a:	4618      	mov	r0, r3
 800120c:	46bd      	mov	sp, r7
 800120e:	bc80      	pop	{r7}
 8001210:	4770      	bx	lr

08001212 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001216:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	f003 0303 	and.w	r3, r3, #3
}
 8001220:	4618      	mov	r0, r3
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr

08001228 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800122c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001236:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800123a:	d101      	bne.n	8001240 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800123c:	2301      	movs	r3, #1
 800123e:	e000      	b.n	8001242 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	46bd      	mov	sp, r7
 8001246:	bc80      	pop	{r7}
 8001248:	4770      	bx	lr

0800124a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800124e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001252:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001256:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800125a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800125e:	d101      	bne.n	8001264 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001260:	2301      	movs	r3, #1
 8001262:	e000      	b.n	8001266 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	46bd      	mov	sp, r7
 800126a:	bc80      	pop	{r7}
 800126c:	4770      	bx	lr

0800126e <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001272:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001276:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800127a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800127e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001282:	d101      	bne.n	8001288 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001284:	2301      	movs	r3, #1
 8001286:	e000      	b.n	800128a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	46bd      	mov	sp, r7
 800128e:	bc80      	pop	{r7}
 8001290:	4770      	bx	lr

08001292 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001292:	b480      	push	{r7}
 8001294:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001296:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80012a4:	d101      	bne.n	80012aa <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80012a6:	2301      	movs	r3, #1
 80012a8:	e000      	b.n	80012ac <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80012aa:	2300      	movs	r3, #0
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bc80      	pop	{r7}
 80012b2:	4770      	bx	lr

080012b4 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80012b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80012c2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80012c6:	d101      	bne.n	80012cc <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80012c8:	2301      	movs	r3, #1
 80012ca:	e000      	b.n	80012ce <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bc80      	pop	{r7}
 80012d4:	4770      	bx	lr
	...

080012d8 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b088      	sub	sp, #32
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d101      	bne.n	80012ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e36f      	b.n	80019ca <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012ea:	f7ff febc 	bl	8001066 <LL_RCC_GetSysClkSource>
 80012ee:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012f0:	f7ff ff8f 	bl	8001212 <LL_RCC_PLL_GetMainSource>
 80012f4:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0320 	and.w	r3, r3, #32
 80012fe:	2b00      	cmp	r3, #0
 8001300:	f000 80c4 	beq.w	800148c <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d005      	beq.n	8001316 <HAL_RCC_OscConfig+0x3e>
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	2b0c      	cmp	r3, #12
 800130e:	d176      	bne.n	80013fe <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	2b01      	cmp	r3, #1
 8001314:	d173      	bne.n	80013fe <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6a1b      	ldr	r3, [r3, #32]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d101      	bne.n	8001322 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e353      	b.n	80019ca <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001326:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0308 	and.w	r3, r3, #8
 8001330:	2b00      	cmp	r3, #0
 8001332:	d005      	beq.n	8001340 <HAL_RCC_OscConfig+0x68>
 8001334:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800133e:	e006      	b.n	800134e <HAL_RCC_OscConfig+0x76>
 8001340:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001344:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001348:	091b      	lsrs	r3, r3, #4
 800134a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800134e:	4293      	cmp	r3, r2
 8001350:	d222      	bcs.n	8001398 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001356:	4618      	mov	r0, r3
 8001358:	f000 fd36 	bl	8001dc8 <RCC_SetFlashLatencyFromMSIRange>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e331      	b.n	80019ca <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001366:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001370:	f043 0308 	orr.w	r3, r3, #8
 8001374:	6013      	str	r3, [r2, #0]
 8001376:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001384:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001388:	4313      	orrs	r3, r2
 800138a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff fe41 	bl	8001018 <LL_RCC_MSI_SetCalibTrimming>
 8001396:	e021      	b.n	80013dc <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001398:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80013a2:	f043 0308 	orr.w	r3, r3, #8
 80013a6:	6013      	str	r3, [r2, #0]
 80013a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013ba:	4313      	orrs	r3, r2
 80013bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff fe28 	bl	8001018 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013cc:	4618      	mov	r0, r3
 80013ce:	f000 fcfb 	bl	8001dc8 <RCC_SetFlashLatencyFromMSIRange>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e2f6      	b.n	80019ca <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80013dc:	f000 fce0 	bl	8001da0 <HAL_RCC_GetHCLKFreq>
 80013e0:	4603      	mov	r3, r0
 80013e2:	4aa7      	ldr	r2, [pc, #668]	@ (8001680 <HAL_RCC_OscConfig+0x3a8>)
 80013e4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 80013e6:	4ba7      	ldr	r3, [pc, #668]	@ (8001684 <HAL_RCC_OscConfig+0x3ac>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff f95c 	bl	80006a8 <HAL_InitTick>
 80013f0:	4603      	mov	r3, r0
 80013f2:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80013f4:	7cfb      	ldrb	r3, [r7, #19]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d047      	beq.n	800148a <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 80013fa:	7cfb      	ldrb	r3, [r7, #19]
 80013fc:	e2e5      	b.n	80019ca <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6a1b      	ldr	r3, [r3, #32]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d02c      	beq.n	8001460 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001406:	f7ff fdb4 	bl	8000f72 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800140a:	f7ff f999 	bl	8000740 <HAL_GetTick>
 800140e:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001410:	e008      	b.n	8001424 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001412:	f7ff f995 	bl	8000740 <HAL_GetTick>
 8001416:	4602      	mov	r2, r0
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	2b02      	cmp	r3, #2
 800141e:	d901      	bls.n	8001424 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8001420:	2303      	movs	r3, #3
 8001422:	e2d2      	b.n	80019ca <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001424:	f7ff fdc1 	bl	8000faa <LL_RCC_MSI_IsReady>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d0f1      	beq.n	8001412 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800142e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001438:	f043 0308 	orr.w	r3, r3, #8
 800143c:	6013      	str	r3, [r2, #0]
 800143e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800144c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001450:	4313      	orrs	r3, r2
 8001452:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff fddd 	bl	8001018 <LL_RCC_MSI_SetCalibTrimming>
 800145e:	e015      	b.n	800148c <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001460:	f7ff fd95 	bl	8000f8e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001464:	f7ff f96c 	bl	8000740 <HAL_GetTick>
 8001468:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800146a:	e008      	b.n	800147e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800146c:	f7ff f968 	bl	8000740 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b02      	cmp	r3, #2
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e2a5      	b.n	80019ca <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 800147e:	f7ff fd94 	bl	8000faa <LL_RCC_MSI_IsReady>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1f1      	bne.n	800146c <HAL_RCC_OscConfig+0x194>
 8001488:	e000      	b.n	800148c <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800148a:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 0301 	and.w	r3, r3, #1
 8001494:	2b00      	cmp	r3, #0
 8001496:	d058      	beq.n	800154a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	2b08      	cmp	r3, #8
 800149c:	d005      	beq.n	80014aa <HAL_RCC_OscConfig+0x1d2>
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	2b0c      	cmp	r3, #12
 80014a2:	d108      	bne.n	80014b6 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	2b03      	cmp	r3, #3
 80014a8:	d105      	bne.n	80014b6 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d14b      	bne.n	800154a <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e289      	b.n	80019ca <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80014b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80014c8:	4313      	orrs	r3, r2
 80014ca:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014d4:	d102      	bne.n	80014dc <HAL_RCC_OscConfig+0x204>
 80014d6:	f7ff fc9c 	bl	8000e12 <LL_RCC_HSE_Enable>
 80014da:	e00d      	b.n	80014f8 <HAL_RCC_OscConfig+0x220>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 80014e4:	d104      	bne.n	80014f0 <HAL_RCC_OscConfig+0x218>
 80014e6:	f7ff fc67 	bl	8000db8 <LL_RCC_HSE_EnableTcxo>
 80014ea:	f7ff fc92 	bl	8000e12 <LL_RCC_HSE_Enable>
 80014ee:	e003      	b.n	80014f8 <HAL_RCC_OscConfig+0x220>
 80014f0:	f7ff fc9d 	bl	8000e2e <LL_RCC_HSE_Disable>
 80014f4:	f7ff fc6e 	bl	8000dd4 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d012      	beq.n	8001526 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001500:	f7ff f91e 	bl	8000740 <HAL_GetTick>
 8001504:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001506:	e008      	b.n	800151a <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001508:	f7ff f91a 	bl	8000740 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b64      	cmp	r3, #100	@ 0x64
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e257      	b.n	80019ca <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 800151a:	f7ff fc96 	bl	8000e4a <LL_RCC_HSE_IsReady>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d0f1      	beq.n	8001508 <HAL_RCC_OscConfig+0x230>
 8001524:	e011      	b.n	800154a <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001526:	f7ff f90b 	bl	8000740 <HAL_GetTick>
 800152a:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800152c:	e008      	b.n	8001540 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800152e:	f7ff f907 	bl	8000740 <HAL_GetTick>
 8001532:	4602      	mov	r2, r0
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b64      	cmp	r3, #100	@ 0x64
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e244      	b.n	80019ca <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001540:	f7ff fc83 	bl	8000e4a <LL_RCC_HSE_IsReady>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d1f1      	bne.n	800152e <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d046      	beq.n	80015e4 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	2b04      	cmp	r3, #4
 800155a:	d005      	beq.n	8001568 <HAL_RCC_OscConfig+0x290>
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	2b0c      	cmp	r3, #12
 8001560:	d10e      	bne.n	8001580 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	2b02      	cmp	r3, #2
 8001566:	d10b      	bne.n	8001580 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	691b      	ldr	r3, [r3, #16]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d101      	bne.n	8001574 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e22a      	b.n	80019ca <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	695b      	ldr	r3, [r3, #20]
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff fca4 	bl	8000ec6 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800157e:	e031      	b.n	80015e4 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	691b      	ldr	r3, [r3, #16]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d019      	beq.n	80015bc <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001588:	f7ff fc70 	bl	8000e6c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800158c:	f7ff f8d8 	bl	8000740 <HAL_GetTick>
 8001590:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001594:	f7ff f8d4 	bl	8000740 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e211      	b.n	80019ca <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 80015a6:	f7ff fc7d 	bl	8000ea4 <LL_RCC_HSI_IsReady>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d0f1      	beq.n	8001594 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	695b      	ldr	r3, [r3, #20]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff fc86 	bl	8000ec6 <LL_RCC_HSI_SetCalibTrimming>
 80015ba:	e013      	b.n	80015e4 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015bc:	f7ff fc64 	bl	8000e88 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c0:	f7ff f8be 	bl	8000740 <HAL_GetTick>
 80015c4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80015c6:	e008      	b.n	80015da <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015c8:	f7ff f8ba 	bl	8000740 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e1f7      	b.n	80019ca <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 80015da:	f7ff fc63 	bl	8000ea4 <LL_RCC_HSI_IsReady>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d1f1      	bne.n	80015c8 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0308 	and.w	r3, r3, #8
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d06e      	beq.n	80016ce <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d056      	beq.n	80016a6 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 80015f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001600:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	69da      	ldr	r2, [r3, #28]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	f003 0310 	and.w	r3, r3, #16
 800160c:	429a      	cmp	r2, r3
 800160e:	d031      	beq.n	8001674 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d006      	beq.n	8001628 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001620:	2b00      	cmp	r3, #0
 8001622:	d101      	bne.n	8001628 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e1d0      	b.n	80019ca <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	2b00      	cmp	r3, #0
 8001630:	d013      	beq.n	800165a <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8001632:	f7ff fc7d 	bl	8000f30 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001636:	f7ff f883 	bl	8000740 <HAL_GetTick>
 800163a:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 800163c:	e008      	b.n	8001650 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800163e:	f7ff f87f 	bl	8000740 <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b11      	cmp	r3, #17
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e1bc      	b.n	80019ca <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8001650:	f7ff fc7e 	bl	8000f50 <LL_RCC_LSI_IsReady>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d1f1      	bne.n	800163e <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800165a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800165e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001662:	f023 0210 	bic.w	r2, r3, #16
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	69db      	ldr	r3, [r3, #28]
 800166a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800166e:	4313      	orrs	r3, r2
 8001670:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001674:	f7ff fc4c 	bl	8000f10 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001678:	f7ff f862 	bl	8000740 <HAL_GetTick>
 800167c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800167e:	e00c      	b.n	800169a <HAL_RCC_OscConfig+0x3c2>
 8001680:	20000004 	.word	0x20000004
 8001684:	20000008 	.word	0x20000008
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001688:	f7ff f85a 	bl	8000740 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b11      	cmp	r3, #17
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e197      	b.n	80019ca <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 800169a:	f7ff fc59 	bl	8000f50 <LL_RCC_LSI_IsReady>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d0f1      	beq.n	8001688 <HAL_RCC_OscConfig+0x3b0>
 80016a4:	e013      	b.n	80016ce <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016a6:	f7ff fc43 	bl	8000f30 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016aa:	f7ff f849 	bl	8000740 <HAL_GetTick>
 80016ae:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80016b0:	e008      	b.n	80016c4 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016b2:	f7ff f845 	bl	8000740 <HAL_GetTick>
 80016b6:	4602      	mov	r2, r0
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	2b11      	cmp	r3, #17
 80016be:	d901      	bls.n	80016c4 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80016c0:	2303      	movs	r3, #3
 80016c2:	e182      	b.n	80019ca <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 80016c4:	f7ff fc44 	bl	8000f50 <LL_RCC_LSI_IsReady>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1f1      	bne.n	80016b2 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0304 	and.w	r3, r3, #4
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	f000 80d8 	beq.w	800188c <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80016dc:	f7ff fb5a 	bl	8000d94 <LL_PWR_IsEnabledBkUpAccess>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d113      	bne.n	800170e <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80016e6:	f7ff fb11 	bl	8000d0c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016ea:	f7ff f829 	bl	8000740 <HAL_GetTick>
 80016ee:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80016f0:	e008      	b.n	8001704 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016f2:	f7ff f825 	bl	8000740 <HAL_GetTick>
 80016f6:	4602      	mov	r2, r0
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d901      	bls.n	8001704 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e162      	b.n	80019ca <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001704:	f7ff fb46 	bl	8000d94 <LL_PWR_IsEnabledBkUpAccess>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d0f1      	beq.n	80016f2 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d07b      	beq.n	800180e <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	2b85      	cmp	r3, #133	@ 0x85
 800171c:	d003      	beq.n	8001726 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	2b05      	cmp	r3, #5
 8001724:	d109      	bne.n	800173a <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001726:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800172a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800172e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001732:	f043 0304 	orr.w	r3, r3, #4
 8001736:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800173a:	f7ff f801 	bl	8000740 <HAL_GetTick>
 800173e:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001740:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001744:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001748:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001754:	e00a      	b.n	800176c <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001756:	f7fe fff3 	bl	8000740 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001764:	4293      	cmp	r3, r2
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e12e      	b.n	80019ca <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 800176c:	f7ff fbbf 	bl	8000eee <LL_RCC_LSE_IsReady>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d0ef      	beq.n	8001756 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	2b81      	cmp	r3, #129	@ 0x81
 800177c:	d003      	beq.n	8001786 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	68db      	ldr	r3, [r3, #12]
 8001782:	2b85      	cmp	r3, #133	@ 0x85
 8001784:	d121      	bne.n	80017ca <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001786:	f7fe ffdb 	bl	8000740 <HAL_GetTick>
 800178a:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800178c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001790:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001794:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001798:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800179c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80017a0:	e00a      	b.n	80017b8 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017a2:	f7fe ffcd 	bl	8000740 <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d901      	bls.n	80017b8 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e108      	b.n	80019ca <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80017b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d0ec      	beq.n	80017a2 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80017c8:	e060      	b.n	800188c <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ca:	f7fe ffb9 	bl	8000740 <HAL_GetTick>
 80017ce:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80017d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80017dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80017e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80017e4:	e00a      	b.n	80017fc <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017e6:	f7fe ffab 	bl	8000740 <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d901      	bls.n	80017fc <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e0e6      	b.n	80019ca <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80017fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001800:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001804:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001808:	2b00      	cmp	r3, #0
 800180a:	d1ec      	bne.n	80017e6 <HAL_RCC_OscConfig+0x50e>
 800180c:	e03e      	b.n	800188c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800180e:	f7fe ff97 	bl	8000740 <HAL_GetTick>
 8001812:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001814:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001818:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800181c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001820:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001824:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001828:	e00a      	b.n	8001840 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800182a:	f7fe ff89 	bl	8000740 <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001838:	4293      	cmp	r3, r2
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e0c4      	b.n	80019ca <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001840:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001844:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001848:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800184c:	2b00      	cmp	r3, #0
 800184e:	d1ec      	bne.n	800182a <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001850:	f7fe ff76 	bl	8000740 <HAL_GetTick>
 8001854:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001856:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800185a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800185e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001862:	f023 0301 	bic.w	r3, r3, #1
 8001866:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800186a:	e00a      	b.n	8001882 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800186c:	f7fe ff68 	bl	8000740 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	f241 3288 	movw	r2, #5000	@ 0x1388
 800187a:	4293      	cmp	r3, r2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e0a3      	b.n	80019ca <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8001882:	f7ff fb34 	bl	8000eee <LL_RCC_LSE_IsReady>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d1ef      	bne.n	800186c <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001890:	2b00      	cmp	r3, #0
 8001892:	f000 8099 	beq.w	80019c8 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	2b0c      	cmp	r3, #12
 800189a:	d06c      	beq.n	8001976 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d14b      	bne.n	800193c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018a4:	f7ff fc74 	bl	8001190 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a8:	f7fe ff4a 	bl	8000740 <HAL_GetTick>
 80018ac:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018b0:	f7fe ff46 	bl	8000740 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b0a      	cmp	r3, #10
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e083      	b.n	80019ca <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80018c2:	f7ff fc73 	bl	80011ac <LL_RCC_PLL_IsReady>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d1f1      	bne.n	80018b0 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018d0:	68da      	ldr	r2, [r3, #12]
 80018d2:	4b40      	ldr	r3, [pc, #256]	@ (80019d4 <HAL_RCC_OscConfig+0x6fc>)
 80018d4:	4013      	ands	r3, r2
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80018de:	4311      	orrs	r1, r2
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80018e4:	0212      	lsls	r2, r2, #8
 80018e6:	4311      	orrs	r1, r2
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80018ec:	4311      	orrs	r1, r2
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80018f2:	4311      	orrs	r1, r2
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80018f8:	430a      	orrs	r2, r1
 80018fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80018fe:	4313      	orrs	r3, r2
 8001900:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001902:	f7ff fc37 	bl	8001174 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001906:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001910:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001914:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001916:	f7fe ff13 	bl	8000740 <HAL_GetTick>
 800191a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 800191c:	e008      	b.n	8001930 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800191e:	f7fe ff0f 	bl	8000740 <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	2b0a      	cmp	r3, #10
 800192a:	d901      	bls.n	8001930 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e04c      	b.n	80019ca <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8001930:	f7ff fc3c 	bl	80011ac <LL_RCC_PLL_IsReady>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d0f1      	beq.n	800191e <HAL_RCC_OscConfig+0x646>
 800193a:	e045      	b.n	80019c8 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800193c:	f7ff fc28 	bl	8001190 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001940:	f7fe fefe 	bl	8000740 <HAL_GetTick>
 8001944:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001948:	f7fe fefa 	bl	8000740 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b0a      	cmp	r3, #10
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e037      	b.n	80019ca <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800195a:	f7ff fc27 	bl	80011ac <LL_RCC_PLL_IsReady>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d1f1      	bne.n	8001948 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8001964:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001968:	68da      	ldr	r2, [r3, #12]
 800196a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800196e:	4b1a      	ldr	r3, [pc, #104]	@ (80019d8 <HAL_RCC_OscConfig+0x700>)
 8001970:	4013      	ands	r3, r2
 8001972:	60cb      	str	r3, [r1, #12]
 8001974:	e028      	b.n	80019c8 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800197a:	2b01      	cmp	r3, #1
 800197c:	d101      	bne.n	8001982 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e023      	b.n	80019ca <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001982:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	f003 0203 	and.w	r2, r3, #3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001994:	429a      	cmp	r2, r3
 8001996:	d115      	bne.n	80019c4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d10e      	bne.n	80019c4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019b0:	021b      	lsls	r3, r3, #8
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d106      	bne.n	80019c4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d001      	beq.n	80019c8 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e000      	b.n	80019ca <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3720      	adds	r7, #32
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	11c1808c 	.word	0x11c1808c
 80019d8:	eefefffc 	.word	0xeefefffc

080019dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d101      	bne.n	80019f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e12c      	b.n	8001c4a <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019f0:	4b98      	ldr	r3, [pc, #608]	@ (8001c54 <HAL_RCC_ClockConfig+0x278>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0307 	and.w	r3, r3, #7
 80019f8:	683a      	ldr	r2, [r7, #0]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d91b      	bls.n	8001a36 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019fe:	4b95      	ldr	r3, [pc, #596]	@ (8001c54 <HAL_RCC_ClockConfig+0x278>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f023 0207 	bic.w	r2, r3, #7
 8001a06:	4993      	ldr	r1, [pc, #588]	@ (8001c54 <HAL_RCC_ClockConfig+0x278>)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a0e:	f7fe fe97 	bl	8000740 <HAL_GetTick>
 8001a12:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a14:	e008      	b.n	8001a28 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001a16:	f7fe fe93 	bl	8000740 <HAL_GetTick>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d901      	bls.n	8001a28 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e110      	b.n	8001c4a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a28:	4b8a      	ldr	r3, [pc, #552]	@ (8001c54 <HAL_RCC_ClockConfig+0x278>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0307 	and.w	r3, r3, #7
 8001a30:	683a      	ldr	r2, [r7, #0]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d1ef      	bne.n	8001a16 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d016      	beq.n	8001a70 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff fb18 	bl	800107c <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001a4c:	f7fe fe78 	bl	8000740 <HAL_GetTick>
 8001a50:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001a54:	f7fe fe74 	bl	8000740 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e0f1      	b.n	8001c4a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001a66:	f7ff fbdf 	bl	8001228 <LL_RCC_IsActiveFlag_HPRE>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d0f1      	beq.n	8001a54 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0320 	and.w	r3, r3, #32
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d016      	beq.n	8001aaa <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	695b      	ldr	r3, [r3, #20]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff fb0e 	bl	80010a2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001a86:	f7fe fe5b 	bl	8000740 <HAL_GetTick>
 8001a8a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001a8c:	e008      	b.n	8001aa0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001a8e:	f7fe fe57 	bl	8000740 <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e0d4      	b.n	8001c4a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001aa0:	f7ff fbd3 	bl	800124a <LL_RCC_IsActiveFlag_C2HPRE>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d0f1      	beq.n	8001a8e <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d016      	beq.n	8001ae4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff fb06 	bl	80010cc <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001ac0:	f7fe fe3e 	bl	8000740 <HAL_GetTick>
 8001ac4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001ac6:	e008      	b.n	8001ada <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001ac8:	f7fe fe3a 	bl	8000740 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e0b7      	b.n	8001c4a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001ada:	f7ff fbc8 	bl	800126e <LL_RCC_IsActiveFlag_SHDHPRE>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d0f1      	beq.n	8001ac8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0304 	and.w	r3, r3, #4
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d016      	beq.n	8001b1e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff faff 	bl	80010f8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001afa:	f7fe fe21 	bl	8000740 <HAL_GetTick>
 8001afe:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001b00:	e008      	b.n	8001b14 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001b02:	f7fe fe1d 	bl	8000740 <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e09a      	b.n	8001c4a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001b14:	f7ff fbbd 	bl	8001292 <LL_RCC_IsActiveFlag_PPRE1>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d0f1      	beq.n	8001b02 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0308 	and.w	r3, r3, #8
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d017      	beq.n	8001b5a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	691b      	ldr	r3, [r3, #16]
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff faf4 	bl	800111e <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001b36:	f7fe fe03 	bl	8000740 <HAL_GetTick>
 8001b3a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001b3c:	e008      	b.n	8001b50 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001b3e:	f7fe fdff 	bl	8000740 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e07c      	b.n	8001c4a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001b50:	f7ff fbb0 	bl	80012b4 <LL_RCC_IsActiveFlag_PPRE2>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d0f1      	beq.n	8001b3e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d043      	beq.n	8001bee <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d106      	bne.n	8001b7c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8001b6e:	f7ff f96c 	bl	8000e4a <LL_RCC_HSE_IsReady>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d11e      	bne.n	8001bb6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e066      	b.n	8001c4a <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	2b03      	cmp	r3, #3
 8001b82:	d106      	bne.n	8001b92 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8001b84:	f7ff fb12 	bl	80011ac <LL_RCC_PLL_IsReady>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d113      	bne.n	8001bb6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e05b      	b.n	8001c4a <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d106      	bne.n	8001ba8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8001b9a:	f7ff fa06 	bl	8000faa <LL_RCC_MSI_IsReady>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d108      	bne.n	8001bb6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e050      	b.n	8001c4a <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8001ba8:	f7ff f97c 	bl	8000ea4 <LL_RCC_HSI_IsReady>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d101      	bne.n	8001bb6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e049      	b.n	8001c4a <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff fa40 	bl	8001040 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bc0:	f7fe fdbe 	bl	8000740 <HAL_GetTick>
 8001bc4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bc6:	e00a      	b.n	8001bde <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bc8:	f7fe fdba 	bl	8000740 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e035      	b.n	8001c4a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bde:	f7ff fa42 	bl	8001066 <LL_RCC_GetSysClkSource>
 8001be2:	4602      	mov	r2, r0
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d1ec      	bne.n	8001bc8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bee:	4b19      	ldr	r3, [pc, #100]	@ (8001c54 <HAL_RCC_ClockConfig+0x278>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	683a      	ldr	r2, [r7, #0]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d21b      	bcs.n	8001c34 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bfc:	4b15      	ldr	r3, [pc, #84]	@ (8001c54 <HAL_RCC_ClockConfig+0x278>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f023 0207 	bic.w	r2, r3, #7
 8001c04:	4913      	ldr	r1, [pc, #76]	@ (8001c54 <HAL_RCC_ClockConfig+0x278>)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c0c:	f7fe fd98 	bl	8000740 <HAL_GetTick>
 8001c10:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001c14:	f7fe fd94 	bl	8000740 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e011      	b.n	8001c4a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c26:	4b0b      	ldr	r3, [pc, #44]	@ (8001c54 <HAL_RCC_ClockConfig+0x278>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	683a      	ldr	r2, [r7, #0]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d1ef      	bne.n	8001c14 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001c34:	f000 f8b4 	bl	8001da0 <HAL_RCC_GetHCLKFreq>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	4a07      	ldr	r2, [pc, #28]	@ (8001c58 <HAL_RCC_ClockConfig+0x27c>)
 8001c3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8001c3e:	4b07      	ldr	r3, [pc, #28]	@ (8001c5c <HAL_RCC_ClockConfig+0x280>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7fe fd30 	bl	80006a8 <HAL_InitTick>
 8001c48:	4603      	mov	r3, r0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	58004000 	.word	0x58004000
 8001c58:	20000004 	.word	0x20000004
 8001c5c:	20000008 	.word	0x20000008

08001c60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c60:	b590      	push	{r4, r7, lr}
 8001c62:	b087      	sub	sp, #28
 8001c64:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8001c66:	2300      	movs	r3, #0
 8001c68:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c6e:	f7ff f9fa 	bl	8001066 <LL_RCC_GetSysClkSource>
 8001c72:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c74:	f7ff facd 	bl	8001212 <LL_RCC_PLL_GetMainSource>
 8001c78:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d005      	beq.n	8001c8c <HAL_RCC_GetSysClockFreq+0x2c>
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	2b0c      	cmp	r3, #12
 8001c84:	d139      	bne.n	8001cfa <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d136      	bne.n	8001cfa <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8001c8c:	f7ff f99d 	bl	8000fca <LL_RCC_MSI_IsEnabledRangeSelect>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d115      	bne.n	8001cc2 <HAL_RCC_GetSysClockFreq+0x62>
 8001c96:	f7ff f998 	bl	8000fca <LL_RCC_MSI_IsEnabledRangeSelect>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d106      	bne.n	8001cae <HAL_RCC_GetSysClockFreq+0x4e>
 8001ca0:	f7ff f9a3 	bl	8000fea <LL_RCC_MSI_GetRange>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	0a1b      	lsrs	r3, r3, #8
 8001ca8:	f003 030f 	and.w	r3, r3, #15
 8001cac:	e005      	b.n	8001cba <HAL_RCC_GetSysClockFreq+0x5a>
 8001cae:	f7ff f9a7 	bl	8001000 <LL_RCC_MSI_GetRangeAfterStandby>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	0a1b      	lsrs	r3, r3, #8
 8001cb6:	f003 030f 	and.w	r3, r3, #15
 8001cba:	4a36      	ldr	r2, [pc, #216]	@ (8001d94 <HAL_RCC_GetSysClockFreq+0x134>)
 8001cbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cc0:	e014      	b.n	8001cec <HAL_RCC_GetSysClockFreq+0x8c>
 8001cc2:	f7ff f982 	bl	8000fca <LL_RCC_MSI_IsEnabledRangeSelect>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d106      	bne.n	8001cda <HAL_RCC_GetSysClockFreq+0x7a>
 8001ccc:	f7ff f98d 	bl	8000fea <LL_RCC_MSI_GetRange>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	091b      	lsrs	r3, r3, #4
 8001cd4:	f003 030f 	and.w	r3, r3, #15
 8001cd8:	e005      	b.n	8001ce6 <HAL_RCC_GetSysClockFreq+0x86>
 8001cda:	f7ff f991 	bl	8001000 <LL_RCC_MSI_GetRangeAfterStandby>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	091b      	lsrs	r3, r3, #4
 8001ce2:	f003 030f 	and.w	r3, r3, #15
 8001ce6:	4a2b      	ldr	r2, [pc, #172]	@ (8001d94 <HAL_RCC_GetSysClockFreq+0x134>)
 8001ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cec:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d115      	bne.n	8001d20 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001cf8:	e012      	b.n	8001d20 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	2b04      	cmp	r3, #4
 8001cfe:	d102      	bne.n	8001d06 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d00:	4b25      	ldr	r3, [pc, #148]	@ (8001d98 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d02:	617b      	str	r3, [r7, #20]
 8001d04:	e00c      	b.n	8001d20 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	2b08      	cmp	r3, #8
 8001d0a:	d109      	bne.n	8001d20 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001d0c:	f7ff f870 	bl	8000df0 <LL_RCC_HSE_IsEnabledDiv2>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d102      	bne.n	8001d1c <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8001d16:	4b20      	ldr	r3, [pc, #128]	@ (8001d98 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d18:	617b      	str	r3, [r7, #20]
 8001d1a:	e001      	b.n	8001d20 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8001d1c:	4b1f      	ldr	r3, [pc, #124]	@ (8001d9c <HAL_RCC_GetSysClockFreq+0x13c>)
 8001d1e:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d20:	f7ff f9a1 	bl	8001066 <LL_RCC_GetSysClkSource>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b0c      	cmp	r3, #12
 8001d28:	d12f      	bne.n	8001d8a <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8001d2a:	f7ff fa72 	bl	8001212 <LL_RCC_PLL_GetMainSource>
 8001d2e:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d003      	beq.n	8001d3e <HAL_RCC_GetSysClockFreq+0xde>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2b03      	cmp	r3, #3
 8001d3a:	d003      	beq.n	8001d44 <HAL_RCC_GetSysClockFreq+0xe4>
 8001d3c:	e00d      	b.n	8001d5a <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8001d3e:	4b16      	ldr	r3, [pc, #88]	@ (8001d98 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d40:	60fb      	str	r3, [r7, #12]
        break;
 8001d42:	e00d      	b.n	8001d60 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001d44:	f7ff f854 	bl	8000df0 <LL_RCC_HSE_IsEnabledDiv2>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d102      	bne.n	8001d54 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8001d4e:	4b12      	ldr	r3, [pc, #72]	@ (8001d98 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d50:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8001d52:	e005      	b.n	8001d60 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8001d54:	4b11      	ldr	r3, [pc, #68]	@ (8001d9c <HAL_RCC_GetSysClockFreq+0x13c>)
 8001d56:	60fb      	str	r3, [r7, #12]
        break;
 8001d58:	e002      	b.n	8001d60 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	60fb      	str	r3, [r7, #12]
        break;
 8001d5e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8001d60:	f7ff fa35 	bl	80011ce <LL_RCC_PLL_GetN>
 8001d64:	4602      	mov	r2, r0
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	fb03 f402 	mul.w	r4, r3, r2
 8001d6c:	f7ff fa46 	bl	80011fc <LL_RCC_PLL_GetDivider>
 8001d70:	4603      	mov	r3, r0
 8001d72:	091b      	lsrs	r3, r3, #4
 8001d74:	3301      	adds	r3, #1
 8001d76:	fbb4 f4f3 	udiv	r4, r4, r3
 8001d7a:	f7ff fa34 	bl	80011e6 <LL_RCC_PLL_GetR>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	0f5b      	lsrs	r3, r3, #29
 8001d82:	3301      	adds	r3, #1
 8001d84:	fbb4 f3f3 	udiv	r3, r4, r3
 8001d88:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8001d8a:	697b      	ldr	r3, [r7, #20]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	371c      	adds	r7, #28
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd90      	pop	{r4, r7, pc}
 8001d94:	08002844 	.word	0x08002844
 8001d98:	00f42400 	.word	0x00f42400
 8001d9c:	01e84800 	.word	0x01e84800

08001da0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001da0:	b598      	push	{r3, r4, r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8001da4:	f7ff ff5c 	bl	8001c60 <HAL_RCC_GetSysClockFreq>
 8001da8:	4604      	mov	r4, r0
 8001daa:	f7ff f9cb 	bl	8001144 <LL_RCC_GetAHBPrescaler>
 8001dae:	4603      	mov	r3, r0
 8001db0:	091b      	lsrs	r3, r3, #4
 8001db2:	f003 030f 	and.w	r3, r3, #15
 8001db6:	4a03      	ldr	r2, [pc, #12]	@ (8001dc4 <HAL_RCC_GetHCLKFreq+0x24>)
 8001db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dbc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	bd98      	pop	{r3, r4, r7, pc}
 8001dc4:	08002804 	.word	0x08002804

08001dc8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8001dc8:	b590      	push	{r4, r7, lr}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	091b      	lsrs	r3, r3, #4
 8001dd4:	f003 030f 	and.w	r3, r3, #15
 8001dd8:	4a10      	ldr	r2, [pc, #64]	@ (8001e1c <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8001dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dde:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8001de0:	f7ff f9bb 	bl	800115a <LL_RCC_GetAHB3Prescaler>
 8001de4:	4603      	mov	r3, r0
 8001de6:	091b      	lsrs	r3, r3, #4
 8001de8:	f003 030f 	and.w	r3, r3, #15
 8001dec:	4a0c      	ldr	r2, [pc, #48]	@ (8001e20 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8001dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001df2:	68fa      	ldr	r2, [r7, #12]
 8001df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df8:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	4a09      	ldr	r2, [pc, #36]	@ (8001e24 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8001dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001e02:	0c9c      	lsrs	r4, r3, #18
 8001e04:	f7fe ff90 	bl	8000d28 <HAL_PWREx_GetVoltageRange>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4620      	mov	r0, r4
 8001e0e:	f000 f80b 	bl	8001e28 <RCC_SetFlashLatency>
 8001e12:	4603      	mov	r3, r0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3714      	adds	r7, #20
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd90      	pop	{r4, r7, pc}
 8001e1c:	08002844 	.word	0x08002844
 8001e20:	08002804 	.word	0x08002804
 8001e24:	431bde83 	.word	0x431bde83

08001e28 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b08e      	sub	sp, #56	@ 0x38
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8001e32:	4a3a      	ldr	r2, [pc, #232]	@ (8001f1c <RCC_SetFlashLatency+0xf4>)
 8001e34:	f107 0320 	add.w	r3, r7, #32
 8001e38:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e3c:	6018      	str	r0, [r3, #0]
 8001e3e:	3304      	adds	r3, #4
 8001e40:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8001e42:	4a37      	ldr	r2, [pc, #220]	@ (8001f20 <RCC_SetFlashLatency+0xf8>)
 8001e44:	f107 0318 	add.w	r3, r7, #24
 8001e48:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e4c:	6018      	str	r0, [r3, #0]
 8001e4e:	3304      	adds	r3, #4
 8001e50:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8001e52:	4a34      	ldr	r2, [pc, #208]	@ (8001f24 <RCC_SetFlashLatency+0xfc>)
 8001e54:	f107 030c 	add.w	r3, r7, #12
 8001e58:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e5a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8001e5e:	2300      	movs	r3, #0
 8001e60:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e68:	d11b      	bne.n	8001ea2 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e6e:	e014      	b.n	8001e9a <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8001e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	3338      	adds	r3, #56	@ 0x38
 8001e76:	443b      	add	r3, r7
 8001e78:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d807      	bhi.n	8001e94 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	3338      	adds	r3, #56	@ 0x38
 8001e8a:	443b      	add	r3, r7
 8001e8c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001e90:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8001e92:	e021      	b.n	8001ed8 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e96:	3301      	adds	r3, #1
 8001e98:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d9e7      	bls.n	8001e70 <RCC_SetFlashLatency+0x48>
 8001ea0:	e01a      	b.n	8001ed8 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ea6:	e014      	b.n	8001ed2 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8001ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	3338      	adds	r3, #56	@ 0x38
 8001eae:	443b      	add	r3, r7
 8001eb0:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d807      	bhi.n	8001ecc <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001ebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	3338      	adds	r3, #56	@ 0x38
 8001ec2:	443b      	add	r3, r7
 8001ec4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001ec8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8001eca:	e005      	b.n	8001ed8 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ece:	3301      	adds	r3, #1
 8001ed0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d9e7      	bls.n	8001ea8 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ed8:	4b13      	ldr	r3, [pc, #76]	@ (8001f28 <RCC_SetFlashLatency+0x100>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f023 0207 	bic.w	r2, r3, #7
 8001ee0:	4911      	ldr	r1, [pc, #68]	@ (8001f28 <RCC_SetFlashLatency+0x100>)
 8001ee2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001ee8:	f7fe fc2a 	bl	8000740 <HAL_GetTick>
 8001eec:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001eee:	e008      	b.n	8001f02 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001ef0:	f7fe fc26 	bl	8000740 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d901      	bls.n	8001f02 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e007      	b.n	8001f12 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001f02:	4b09      	ldr	r3, [pc, #36]	@ (8001f28 <RCC_SetFlashLatency+0x100>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0307 	and.w	r3, r3, #7
 8001f0a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d1ef      	bne.n	8001ef0 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3738      	adds	r7, #56	@ 0x38
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	080027e8 	.word	0x080027e8
 8001f20:	080027f0 	.word	0x080027f0
 8001f24:	080027f8 	.word	0x080027f8
 8001f28:	58004000 	.word	0x58004000

08001f2c <LL_RCC_LSE_IsReady>:
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001f30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d101      	bne.n	8001f44 <LL_RCC_LSE_IsReady+0x18>
 8001f40:	2301      	movs	r3, #1
 8001f42:	e000      	b.n	8001f46 <LL_RCC_LSE_IsReady+0x1a>
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bc80      	pop	{r7}
 8001f4c:	4770      	bx	lr

08001f4e <LL_RCC_SetUSARTClockSource>:
{
 8001f4e:	b480      	push	{r7}
 8001f50:	b083      	sub	sp, #12
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8001f56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f5a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	0c1b      	lsrs	r3, r3, #16
 8001f62:	43db      	mvns	r3, r3
 8001f64:	401a      	ands	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8001f74:	bf00      	nop
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bc80      	pop	{r7}
 8001f7c:	4770      	bx	lr

08001f7e <LL_RCC_SetI2SClockSource>:
{
 8001f7e:	b480      	push	{r7}
 8001f80:	b083      	sub	sp, #12
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8001f86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f8e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001f92:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8001f9e:	bf00      	nop
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bc80      	pop	{r7}
 8001fa6:	4770      	bx	lr

08001fa8 <LL_RCC_SetLPUARTClockSource>:
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8001fb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fb8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001fbc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bc80      	pop	{r7}
 8001fd0:	4770      	bx	lr

08001fd2 <LL_RCC_SetI2CClockSource>:
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	b083      	sub	sp, #12
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8001fda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fde:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	091b      	lsrs	r3, r3, #4
 8001fe6:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8001fea:	43db      	mvns	r3, r3
 8001fec:	401a      	ands	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	011b      	lsls	r3, r3, #4
 8001ff2:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8001ff6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	bc80      	pop	{r7}
 8002008:	4770      	bx	lr

0800200a <LL_RCC_SetLPTIMClockSource>:
{
 800200a:	b480      	push	{r7}
 800200c:	b083      	sub	sp, #12
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002012:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002016:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	0c1b      	lsrs	r3, r3, #16
 800201e:	041b      	lsls	r3, r3, #16
 8002020:	43db      	mvns	r3, r3
 8002022:	401a      	ands	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	041b      	lsls	r3, r3, #16
 8002028:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800202c:	4313      	orrs	r3, r2
 800202e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	bc80      	pop	{r7}
 800203a:	4770      	bx	lr

0800203c <LL_RCC_SetRNGClockSource>:
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002044:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002048:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800204c:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002050:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4313      	orrs	r3, r2
 8002058:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	bc80      	pop	{r7}
 8002064:	4770      	bx	lr

08002066 <LL_RCC_SetADCClockSource>:
{
 8002066:	b480      	push	{r7}
 8002068:	b083      	sub	sp, #12
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800206e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002072:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002076:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800207a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4313      	orrs	r3, r2
 8002082:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002086:	bf00      	nop
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	bc80      	pop	{r7}
 800208e:	4770      	bx	lr

08002090 <LL_RCC_SetRTCClockSource>:
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002098:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800209c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80020a4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bc80      	pop	{r7}
 80020b8:	4770      	bx	lr

080020ba <LL_RCC_GetRTCClockSource>:
{
 80020ba:	b480      	push	{r7}
 80020bc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80020be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bc80      	pop	{r7}
 80020d0:	4770      	bx	lr

080020d2 <LL_RCC_ForceBackupDomainReset>:
{
 80020d2:	b480      	push	{r7}
 80020d4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80020d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80020ea:	bf00      	nop
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bc80      	pop	{r7}
 80020f0:	4770      	bx	lr

080020f2 <LL_RCC_ReleaseBackupDomainReset>:
{
 80020f2:	b480      	push	{r7}
 80020f4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80020f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002102:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002106:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800210a:	bf00      	nop
 800210c:	46bd      	mov	sp, r7
 800210e:	bc80      	pop	{r7}
 8002110:	4770      	bx	lr
	...

08002114 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 800211c:	2300      	movs	r3, #0
 800211e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8002120:	2300      	movs	r3, #0
 8002122:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002124:	2300      	movs	r3, #0
 8002126:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d058      	beq.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8002134:	f7fe fdea 	bl	8000d0c <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002138:	f7fe fb02 	bl	8000740 <HAL_GetTick>
 800213c:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800213e:	e009      	b.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002140:	f7fe fafe 	bl	8000740 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b02      	cmp	r3, #2
 800214c:	d902      	bls.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	74fb      	strb	r3, [r7, #19]
        break;
 8002152:	e006      	b.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002154:	4b7b      	ldr	r3, [pc, #492]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800215c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002160:	d1ee      	bne.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8002162:	7cfb      	ldrb	r3, [r7, #19]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d13c      	bne.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002168:	f7ff ffa7 	bl	80020ba <LL_RCC_GetRTCClockSource>
 800216c:	4602      	mov	r2, r0
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002172:	429a      	cmp	r2, r3
 8002174:	d00f      	beq.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002176:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800217a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800217e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002182:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002184:	f7ff ffa5 	bl	80020d2 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002188:	f7ff ffb3 	bl	80020f2 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800218c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d014      	beq.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a0:	f7fe face 	bl	8000740 <HAL_GetTick>
 80021a4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80021a6:	e00b      	b.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021a8:	f7fe faca 	bl	8000740 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d902      	bls.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	74fb      	strb	r3, [r7, #19]
            break;
 80021be:	e004      	b.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80021c0:	f7ff feb4 	bl	8001f2c <LL_RCC_LSE_IsReady>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d1ee      	bne.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80021ca:	7cfb      	ldrb	r3, [r7, #19]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d105      	bne.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff ff5b 	bl	8002090 <LL_RCC_SetRTCClockSource>
 80021da:	e004      	b.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80021dc:	7cfb      	ldrb	r3, [r7, #19]
 80021de:	74bb      	strb	r3, [r7, #18]
 80021e0:	e001      	b.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021e2:	7cfb      	ldrb	r3, [r7, #19]
 80021e4:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d004      	beq.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7ff fea9 	bl	8001f4e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d004      	beq.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff fe9e 	bl	8001f4e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0320 	and.w	r3, r3, #32
 800221a:	2b00      	cmp	r3, #0
 800221c:	d004      	beq.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	4618      	mov	r0, r3
 8002224:	f7ff fec0 	bl	8001fa8 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002230:	2b00      	cmp	r3, #0
 8002232:	d004      	beq.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a1b      	ldr	r3, [r3, #32]
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff fee6 	bl	800200a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002246:	2b00      	cmp	r3, #0
 8002248:	d004      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800224e:	4618      	mov	r0, r3
 8002250:	f7ff fedb 	bl	800200a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800225c:	2b00      	cmp	r3, #0
 800225e:	d004      	beq.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff fed0 	bl	800200a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002272:	2b00      	cmp	r3, #0
 8002274:	d004      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	4618      	mov	r0, r3
 800227c:	f7ff fea9 	bl	8001fd2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002288:	2b00      	cmp	r3, #0
 800228a:	d004      	beq.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff fe9e 	bl	8001fd2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d004      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	69db      	ldr	r3, [r3, #28]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7ff fe93 	bl	8001fd2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0310 	and.w	r3, r3, #16
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d011      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff fe5e 	bl	8001f7e <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80022ca:	d107      	bne.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80022cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80022d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022da:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d010      	beq.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff fea5 	bl	800203c <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d107      	bne.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80022fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002304:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002308:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d011      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff fea3 	bl	8002066 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002324:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002328:	d107      	bne.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800232a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002334:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002338:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800233a:	7cbb      	ldrb	r3, [r7, #18]
}
 800233c:	4618      	mov	r0, r3
 800233e:	3718      	adds	r7, #24
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	58000400 	.word	0x58000400

08002348 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d071      	beq.n	800243e <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b00      	cmp	r3, #0
 8002364:	d106      	bne.n	8002374 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7fe f8d8 	bl	8000524 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2202      	movs	r2, #2
 8002378:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800237c:	4b32      	ldr	r3, [pc, #200]	@ (8002448 <HAL_RTC_Init+0x100>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	f003 0310 	and.w	r3, r3, #16
 8002384:	2b10      	cmp	r3, #16
 8002386:	d051      	beq.n	800242c <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002388:	4b2f      	ldr	r3, [pc, #188]	@ (8002448 <HAL_RTC_Init+0x100>)
 800238a:	22ca      	movs	r2, #202	@ 0xca
 800238c:	625a      	str	r2, [r3, #36]	@ 0x24
 800238e:	4b2e      	ldr	r3, [pc, #184]	@ (8002448 <HAL_RTC_Init+0x100>)
 8002390:	2253      	movs	r2, #83	@ 0x53
 8002392:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f000 f87f 	bl	8002498 <RTC_EnterInitMode>
 800239a:	4603      	mov	r3, r0
 800239c:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800239e:	7bfb      	ldrb	r3, [r7, #15]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d13f      	bne.n	8002424 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80023a4:	4b28      	ldr	r3, [pc, #160]	@ (8002448 <HAL_RTC_Init+0x100>)
 80023a6:	699b      	ldr	r3, [r3, #24]
 80023a8:	4a27      	ldr	r2, [pc, #156]	@ (8002448 <HAL_RTC_Init+0x100>)
 80023aa:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 80023ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80023b2:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80023b4:	4b24      	ldr	r3, [pc, #144]	@ (8002448 <HAL_RTC_Init+0x100>)
 80023b6:	699a      	ldr	r2, [r3, #24]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6859      	ldr	r1, [r3, #4]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	691b      	ldr	r3, [r3, #16]
 80023c0:	4319      	orrs	r1, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	430b      	orrs	r3, r1
 80023c8:	491f      	ldr	r1, [pc, #124]	@ (8002448 <HAL_RTC_Init+0x100>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	68da      	ldr	r2, [r3, #12]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	041b      	lsls	r3, r3, #16
 80023d8:	491b      	ldr	r1, [pc, #108]	@ (8002448 <HAL_RTC_Init+0x100>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80023de:	4b1a      	ldr	r3, [pc, #104]	@ (8002448 <HAL_RTC_Init+0x100>)
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ee:	430b      	orrs	r3, r1
 80023f0:	4915      	ldr	r1, [pc, #84]	@ (8002448 <HAL_RTC_Init+0x100>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 f882 	bl	8002500 <RTC_ExitInitMode>
 80023fc:	4603      	mov	r3, r0
 80023fe:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8002400:	7bfb      	ldrb	r3, [r7, #15]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d10e      	bne.n	8002424 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8002406:	4b10      	ldr	r3, [pc, #64]	@ (8002448 <HAL_RTC_Init+0x100>)
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a19      	ldr	r1, [r3, #32]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	69db      	ldr	r3, [r3, #28]
 8002416:	4319      	orrs	r1, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	695b      	ldr	r3, [r3, #20]
 800241c:	430b      	orrs	r3, r1
 800241e:	490a      	ldr	r1, [pc, #40]	@ (8002448 <HAL_RTC_Init+0x100>)
 8002420:	4313      	orrs	r3, r2
 8002422:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002424:	4b08      	ldr	r3, [pc, #32]	@ (8002448 <HAL_RTC_Init+0x100>)
 8002426:	22ff      	movs	r2, #255	@ 0xff
 8002428:	625a      	str	r2, [r3, #36]	@ 0x24
 800242a:	e001      	b.n	8002430 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800242c:	2300      	movs	r3, #0
 800242e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002430:	7bfb      	ldrb	r3, [r7, #15]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d103      	bne.n	800243e <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2201      	movs	r2, #1
 800243a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800243e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002440:	4618      	mov	r0, r3
 8002442:	3710      	adds	r7, #16
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	40002800 	.word	0x40002800

0800244c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8002454:	4b0f      	ldr	r3, [pc, #60]	@ (8002494 <HAL_RTC_WaitForSynchro+0x48>)
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	4a0e      	ldr	r2, [pc, #56]	@ (8002494 <HAL_RTC_WaitForSynchro+0x48>)
 800245a:	f023 0320 	bic.w	r3, r3, #32
 800245e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8002460:	f7fe f96e 	bl	8000740 <HAL_GetTick>
 8002464:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8002466:	e009      	b.n	800247c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002468:	f7fe f96a 	bl	8000740 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002476:	d901      	bls.n	800247c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e006      	b.n	800248a <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800247c:	4b05      	ldr	r3, [pc, #20]	@ (8002494 <HAL_RTC_WaitForSynchro+0x48>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	f003 0320 	and.w	r3, r3, #32
 8002484:	2b00      	cmp	r3, #0
 8002486:	d0ef      	beq.n	8002468 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3710      	adds	r7, #16
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	40002800 	.word	0x40002800

08002498 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80024a0:	2300      	movs	r3, #0
 80024a2:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80024a4:	4b15      	ldr	r3, [pc, #84]	@ (80024fc <RTC_EnterInitMode+0x64>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d120      	bne.n	80024f2 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80024b0:	4b12      	ldr	r3, [pc, #72]	@ (80024fc <RTC_EnterInitMode+0x64>)
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	4a11      	ldr	r2, [pc, #68]	@ (80024fc <RTC_EnterInitMode+0x64>)
 80024b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024ba:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80024bc:	f7fe f940 	bl	8000740 <HAL_GetTick>
 80024c0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80024c2:	e00d      	b.n	80024e0 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80024c4:	f7fe f93c 	bl	8000740 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80024d2:	d905      	bls.n	80024e0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2203      	movs	r2, #3
 80024dc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80024e0:	4b06      	ldr	r3, [pc, #24]	@ (80024fc <RTC_EnterInitMode+0x64>)
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d102      	bne.n	80024f2 <RTC_EnterInitMode+0x5a>
 80024ec:	7bfb      	ldrb	r3, [r7, #15]
 80024ee:	2b03      	cmp	r3, #3
 80024f0:	d1e8      	bne.n	80024c4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80024f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3710      	adds	r7, #16
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	40002800 	.word	0x40002800

08002500 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002508:	2300      	movs	r3, #0
 800250a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800250c:	4b1a      	ldr	r3, [pc, #104]	@ (8002578 <RTC_ExitInitMode+0x78>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	4a19      	ldr	r2, [pc, #100]	@ (8002578 <RTC_ExitInitMode+0x78>)
 8002512:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002516:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002518:	4b17      	ldr	r3, [pc, #92]	@ (8002578 <RTC_ExitInitMode+0x78>)
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	f003 0320 	and.w	r3, r3, #32
 8002520:	2b00      	cmp	r3, #0
 8002522:	d10c      	bne.n	800253e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f7ff ff91 	bl	800244c <HAL_RTC_WaitForSynchro>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d01e      	beq.n	800256e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2203      	movs	r2, #3
 8002534:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	73fb      	strb	r3, [r7, #15]
 800253c:	e017      	b.n	800256e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800253e:	4b0e      	ldr	r3, [pc, #56]	@ (8002578 <RTC_ExitInitMode+0x78>)
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	4a0d      	ldr	r2, [pc, #52]	@ (8002578 <RTC_ExitInitMode+0x78>)
 8002544:	f023 0320 	bic.w	r3, r3, #32
 8002548:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f7ff ff7e 	bl	800244c <HAL_RTC_WaitForSynchro>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d005      	beq.n	8002562 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2203      	movs	r2, #3
 800255a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002562:	4b05      	ldr	r3, [pc, #20]	@ (8002578 <RTC_ExitInitMode+0x78>)
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	4a04      	ldr	r2, [pc, #16]	@ (8002578 <RTC_ExitInitMode+0x78>)
 8002568:	f043 0320 	orr.w	r3, r3, #32
 800256c:	6193      	str	r3, [r2, #24]
  }

  return status;
 800256e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002570:	4618      	mov	r0, r3
 8002572:	3710      	adds	r7, #16
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	40002800 	.word	0x40002800

0800257c <HAL_RTCEx_SetWakeUpTimer_IT>:
  *                       - This feature is meaningful in case of Low power mode to avoid any RTC software execution after Wake Up.
  *                         That is why when WakeUpAutoClr is set, EXTI is configured as EVENT instead of Interrupt to avoid useless IRQ handler execution.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b086      	sub	sp, #24
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
 8002588:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002590:	2b01      	cmp	r3, #1
 8002592:	d101      	bne.n	8002598 <HAL_RTCEx_SetWakeUpTimer_IT+0x1c>
 8002594:	2302      	movs	r3, #2
 8002596:	e06f      	b.n	8002678 <HAL_RTCEx_SetWakeUpTimer_IT+0xfc>
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2202      	movs	r2, #2
 80025a4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80025a8:	4b35      	ldr	r3, [pc, #212]	@ (8002680 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 80025aa:	22ca      	movs	r2, #202	@ 0xca
 80025ac:	625a      	str	r2, [r3, #36]	@ 0x24
 80025ae:	4b34      	ldr	r3, [pc, #208]	@ (8002680 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 80025b0:	2253      	movs	r2, #83	@ 0x53
 80025b2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 80025b4:	4b32      	ldr	r3, [pc, #200]	@ (8002680 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	4a31      	ldr	r2, [pc, #196]	@ (8002680 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 80025ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80025be:	6193      	str	r3, [r2, #24]

  /* Clear flag Wake-Up */
  WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 80025c0:	4b2f      	ldr	r3, [pc, #188]	@ (8002680 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 80025c2:	2204      	movs	r2, #4
 80025c4:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80025c6:	4b2e      	ldr	r3, [pc, #184]	@ (8002680 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d11e      	bne.n	8002610 <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
  {
    tickstart = HAL_GetTick();
 80025d2:	f7fe f8b5 	bl	8000740 <HAL_GetTick>
 80025d6:	6178      	str	r0, [r7, #20]
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 80025d8:	e014      	b.n	8002604 <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80025da:	f7fe f8b1 	bl	8000740 <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80025e8:	d90c      	bls.n	8002604 <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025ea:	4b25      	ldr	r3, [pc, #148]	@ (8002680 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 80025ec:	22ff      	movs	r2, #255	@ 0xff
 80025ee:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2203      	movs	r2, #3
 80025f4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

        return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e039      	b.n	8002678 <HAL_RTCEx_SetWakeUpTimer_IT+0xfc>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8002604:	4b1e      	ldr	r3, [pc, #120]	@ (8002680 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	f003 0304 	and.w	r3, r3, #4
 800260c:	2b00      	cmp	r3, #0
 800260e:	d0e4      	beq.n	80025da <HAL_RTCEx_SetWakeUpTimer_IT+0x5e>
      }
    }
  }

  /* Configure the Wakeup Timer counter and auto clear value */
  WRITE_REG(RTC->WUTR, (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos)));
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	041a      	lsls	r2, r3, #16
 8002614:	491a      	ldr	r1, [pc, #104]	@ (8002680 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	4313      	orrs	r3, r2
 800261a:	614b      	str	r3, [r1, #20]

  /* Configure the clock source */
  MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 800261c:	4b18      	ldr	r3, [pc, #96]	@ (8002680 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	f023 0207 	bic.w	r2, r3, #7
 8002624:	4916      	ldr	r1, [pc, #88]	@ (8002680 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4313      	orrs	r3, r2
 800262a:	618b      	str	r3, [r1, #24]

  /* In case of WUT autoclr, the IRQ handler should not be called */
  if (WakeUpAutoClr != 0U)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d008      	beq.n	8002644 <HAL_RTCEx_SetWakeUpTimer_IT+0xc8>
  {
    /* RTC WakeUpTimer EXTI Configuration: Event configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_EVENT();
 8002632:	4b14      	ldr	r3, [pc, #80]	@ (8002684 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 8002634:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002638:	4a12      	ldr	r2, [pc, #72]	@ (8002684 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 800263a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800263e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
 8002642:	e007      	b.n	8002654 <HAL_RTCEx_SetWakeUpTimer_IT+0xd8>
  }
  else
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8002644:	4b0f      	ldr	r3, [pc, #60]	@ (8002684 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 8002646:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800264a:	4a0e      	ldr	r2, [pc, #56]	@ (8002684 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 800264c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002650:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  }

  /* Configure the Interrupt in the RTC_CR register and Enable the Wakeup Timer*/
  SET_BIT(RTC->CR, (RTC_CR_WUTIE | RTC_CR_WUTE));
 8002654:	4b0a      	ldr	r3, [pc, #40]	@ (8002680 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	4a09      	ldr	r2, [pc, #36]	@ (8002680 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 800265a:	f443 4388 	orr.w	r3, r3, #17408	@ 0x4400
 800265e:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002660:	4b07      	ldr	r3, [pc, #28]	@ (8002680 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8002662:	22ff      	movs	r2, #255	@ 0xff
 8002664:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2201      	movs	r2, #1
 800266a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8002676:	2300      	movs	r3, #0
}
 8002678:	4618      	mov	r0, r3
 800267a:	3718      	adds	r7, #24
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	40002800 	.word	0x40002800
 8002684:	58000800 	.word	0x58000800

08002688 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002696:	2b01      	cmp	r3, #1
 8002698:	d101      	bne.n	800269e <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 800269a:	2302      	movs	r3, #2
 800269c:	e041      	b.n	8002722 <HAL_RTCEx_DeactivateWakeUpTimer+0x9a>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2201      	movs	r2, #1
 80026a2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2202      	movs	r2, #2
 80026aa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80026ae:	4b1f      	ldr	r3, [pc, #124]	@ (800272c <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>)
 80026b0:	22ca      	movs	r2, #202	@ 0xca
 80026b2:	625a      	str	r2, [r3, #36]	@ 0x24
 80026b4:	4b1d      	ldr	r3, [pc, #116]	@ (800272c <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>)
 80026b6:	2253      	movs	r2, #83	@ 0x53
 80026b8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  /* In case of interrupt mode is used, the interrupt source must disabled */
  CLEAR_BIT(RTC->CR, (RTC_CR_WUTE | RTC_CR_WUTIE));
 80026ba:	4b1c      	ldr	r3, [pc, #112]	@ (800272c <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>)
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	4a1b      	ldr	r2, [pc, #108]	@ (800272c <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>)
 80026c0:	f423 4388 	bic.w	r3, r3, #17408	@ 0x4400
 80026c4:	6193      	str	r3, [r2, #24]

  tickstart = HAL_GetTick();
 80026c6:	f7fe f83b 	bl	8000740 <HAL_GetTick>
 80026ca:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 80026cc:	e014      	b.n	80026f8 <HAL_RTCEx_DeactivateWakeUpTimer+0x70>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80026ce:	f7fe f837 	bl	8000740 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80026dc:	d90c      	bls.n	80026f8 <HAL_RTCEx_DeactivateWakeUpTimer+0x70>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80026de:	4b13      	ldr	r3, [pc, #76]	@ (800272c <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>)
 80026e0:	22ff      	movs	r2, #255	@ 0xff
 80026e2:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2203      	movs	r2, #3
 80026e8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e014      	b.n	8002722 <HAL_RTCEx_DeactivateWakeUpTimer+0x9a>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 80026f8:	4b0c      	ldr	r3, [pc, #48]	@ (800272c <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>)
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	f003 0304 	and.w	r3, r3, #4
 8002700:	2b00      	cmp	r3, #0
 8002702:	d0e4      	beq.n	80026ce <HAL_RTCEx_DeactivateWakeUpTimer+0x46>
    }
  }

  /* Clear wakeup timer flag */
  WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 8002704:	4b09      	ldr	r3, [pc, #36]	@ (800272c <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>)
 8002706:	2204      	movs	r2, #4
 8002708:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800270a:	4b08      	ldr	r3, [pc, #32]	@ (800272c <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>)
 800270c:	22ff      	movs	r2, #255	@ 0xff
 800270e:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	40002800 	.word	0x40002800

08002730 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  if (READ_BIT(RTC->MISR, RTC_MISR_WUTMF) != 0U)
 8002738:	4b09      	ldr	r3, [pc, #36]	@ (8002760 <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 800273a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800273c:	f003 0304 	and.w	r3, r3, #4
 8002740:	2b00      	cmp	r3, #0
 8002742:	d005      	beq.n	8002750 <HAL_RTCEx_WakeUpTimerIRQHandler+0x20>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 8002744:	4b06      	ldr	r3, [pc, #24]	@ (8002760 <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 8002746:	2204      	movs	r2, #4
 8002748:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    /* WAKEUPTIMER callback */
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 f80a 	bl	8002764 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8002758:	bf00      	nop
 800275a:	3708      	adds	r7, #8
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40002800 	.word	0x40002800

08002764 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	bc80      	pop	{r7}
 8002774:	4770      	bx	lr

08002776 <memset>:
 8002776:	4402      	add	r2, r0
 8002778:	4603      	mov	r3, r0
 800277a:	4293      	cmp	r3, r2
 800277c:	d100      	bne.n	8002780 <memset+0xa>
 800277e:	4770      	bx	lr
 8002780:	f803 1b01 	strb.w	r1, [r3], #1
 8002784:	e7f9      	b.n	800277a <memset+0x4>
	...

08002788 <__libc_init_array>:
 8002788:	b570      	push	{r4, r5, r6, lr}
 800278a:	4d0d      	ldr	r5, [pc, #52]	@ (80027c0 <__libc_init_array+0x38>)
 800278c:	4c0d      	ldr	r4, [pc, #52]	@ (80027c4 <__libc_init_array+0x3c>)
 800278e:	1b64      	subs	r4, r4, r5
 8002790:	10a4      	asrs	r4, r4, #2
 8002792:	2600      	movs	r6, #0
 8002794:	42a6      	cmp	r6, r4
 8002796:	d109      	bne.n	80027ac <__libc_init_array+0x24>
 8002798:	4d0b      	ldr	r5, [pc, #44]	@ (80027c8 <__libc_init_array+0x40>)
 800279a:	4c0c      	ldr	r4, [pc, #48]	@ (80027cc <__libc_init_array+0x44>)
 800279c:	f000 f818 	bl	80027d0 <_init>
 80027a0:	1b64      	subs	r4, r4, r5
 80027a2:	10a4      	asrs	r4, r4, #2
 80027a4:	2600      	movs	r6, #0
 80027a6:	42a6      	cmp	r6, r4
 80027a8:	d105      	bne.n	80027b6 <__libc_init_array+0x2e>
 80027aa:	bd70      	pop	{r4, r5, r6, pc}
 80027ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80027b0:	4798      	blx	r3
 80027b2:	3601      	adds	r6, #1
 80027b4:	e7ee      	b.n	8002794 <__libc_init_array+0xc>
 80027b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80027ba:	4798      	blx	r3
 80027bc:	3601      	adds	r6, #1
 80027be:	e7f2      	b.n	80027a6 <__libc_init_array+0x1e>
 80027c0:	08002884 	.word	0x08002884
 80027c4:	08002884 	.word	0x08002884
 80027c8:	08002884 	.word	0x08002884
 80027cc:	08002888 	.word	0x08002888

080027d0 <_init>:
 80027d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027d2:	bf00      	nop
 80027d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027d6:	bc08      	pop	{r3}
 80027d8:	469e      	mov	lr, r3
 80027da:	4770      	bx	lr

080027dc <_fini>:
 80027dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027de:	bf00      	nop
 80027e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027e2:	bc08      	pop	{r3}
 80027e4:	469e      	mov	lr, r3
 80027e6:	4770      	bx	lr
