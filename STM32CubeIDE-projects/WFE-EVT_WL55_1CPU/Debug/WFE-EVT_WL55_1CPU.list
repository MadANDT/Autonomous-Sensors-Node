
WFE-EVT_WL55_1CPU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c0c  08000138  08000138  00001138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  08003d44  08003d44  00004d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ed0  08003ed0  00005068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003ed0  08003ed0  00004ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ed8  08003ed8  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ed8  08003ed8  00004ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003edc  08003edc  00004edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003ee0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  20000068  08003f48  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  08003f48  0000526c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e951  00000000  00000000  00005092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022de  00000000  00000000  000139e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc0  00000000  00000000  00015cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000be7  00000000  00000000  00016c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cdf4  00000000  00000000  0001786f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e769  00000000  00000000  00034663  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b211c  00000000  00000000  00042dcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f4ee8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004724  00000000  00000000  000f4f2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  000f9650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	@ (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	@ (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000068 	.word	0x20000068
 8000154:	00000000 	.word	0x00000000
 8000158:	08003d2c 	.word	0x08003d2c

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	@ (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	@ (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	@ (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	2000006c 	.word	0x2000006c
 8000174:	08003d2c 	.word	0x08003d2c

08000178 <__aeabi_uldivmod>:
 8000178:	b953      	cbnz	r3, 8000190 <__aeabi_uldivmod+0x18>
 800017a:	b94a      	cbnz	r2, 8000190 <__aeabi_uldivmod+0x18>
 800017c:	2900      	cmp	r1, #0
 800017e:	bf08      	it	eq
 8000180:	2800      	cmpeq	r0, #0
 8000182:	bf1c      	itt	ne
 8000184:	f04f 31ff 	movne.w	r1, #4294967295
 8000188:	f04f 30ff 	movne.w	r0, #4294967295
 800018c:	f000 b988 	b.w	80004a0 <__aeabi_idiv0>
 8000190:	f1ad 0c08 	sub.w	ip, sp, #8
 8000194:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000198:	f000 f806 	bl	80001a8 <__udivmoddi4>
 800019c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a4:	b004      	add	sp, #16
 80001a6:	4770      	bx	lr

080001a8 <__udivmoddi4>:
 80001a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001ac:	9d08      	ldr	r5, [sp, #32]
 80001ae:	468e      	mov	lr, r1
 80001b0:	4604      	mov	r4, r0
 80001b2:	4688      	mov	r8, r1
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d14a      	bne.n	800024e <__udivmoddi4+0xa6>
 80001b8:	428a      	cmp	r2, r1
 80001ba:	4617      	mov	r7, r2
 80001bc:	d962      	bls.n	8000284 <__udivmoddi4+0xdc>
 80001be:	fab2 f682 	clz	r6, r2
 80001c2:	b14e      	cbz	r6, 80001d8 <__udivmoddi4+0x30>
 80001c4:	f1c6 0320 	rsb	r3, r6, #32
 80001c8:	fa01 f806 	lsl.w	r8, r1, r6
 80001cc:	fa20 f303 	lsr.w	r3, r0, r3
 80001d0:	40b7      	lsls	r7, r6
 80001d2:	ea43 0808 	orr.w	r8, r3, r8
 80001d6:	40b4      	lsls	r4, r6
 80001d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80001dc:	fa1f fc87 	uxth.w	ip, r7
 80001e0:	fbb8 f1fe 	udiv	r1, r8, lr
 80001e4:	0c23      	lsrs	r3, r4, #16
 80001e6:	fb0e 8811 	mls	r8, lr, r1, r8
 80001ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001ee:	fb01 f20c 	mul.w	r2, r1, ip
 80001f2:	429a      	cmp	r2, r3
 80001f4:	d909      	bls.n	800020a <__udivmoddi4+0x62>
 80001f6:	18fb      	adds	r3, r7, r3
 80001f8:	f101 30ff 	add.w	r0, r1, #4294967295
 80001fc:	f080 80ea 	bcs.w	80003d4 <__udivmoddi4+0x22c>
 8000200:	429a      	cmp	r2, r3
 8000202:	f240 80e7 	bls.w	80003d4 <__udivmoddi4+0x22c>
 8000206:	3902      	subs	r1, #2
 8000208:	443b      	add	r3, r7
 800020a:	1a9a      	subs	r2, r3, r2
 800020c:	b2a3      	uxth	r3, r4
 800020e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000212:	fb0e 2210 	mls	r2, lr, r0, r2
 8000216:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800021a:	fb00 fc0c 	mul.w	ip, r0, ip
 800021e:	459c      	cmp	ip, r3
 8000220:	d909      	bls.n	8000236 <__udivmoddi4+0x8e>
 8000222:	18fb      	adds	r3, r7, r3
 8000224:	f100 32ff 	add.w	r2, r0, #4294967295
 8000228:	f080 80d6 	bcs.w	80003d8 <__udivmoddi4+0x230>
 800022c:	459c      	cmp	ip, r3
 800022e:	f240 80d3 	bls.w	80003d8 <__udivmoddi4+0x230>
 8000232:	443b      	add	r3, r7
 8000234:	3802      	subs	r0, #2
 8000236:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800023a:	eba3 030c 	sub.w	r3, r3, ip
 800023e:	2100      	movs	r1, #0
 8000240:	b11d      	cbz	r5, 800024a <__udivmoddi4+0xa2>
 8000242:	40f3      	lsrs	r3, r6
 8000244:	2200      	movs	r2, #0
 8000246:	e9c5 3200 	strd	r3, r2, [r5]
 800024a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800024e:	428b      	cmp	r3, r1
 8000250:	d905      	bls.n	800025e <__udivmoddi4+0xb6>
 8000252:	b10d      	cbz	r5, 8000258 <__udivmoddi4+0xb0>
 8000254:	e9c5 0100 	strd	r0, r1, [r5]
 8000258:	2100      	movs	r1, #0
 800025a:	4608      	mov	r0, r1
 800025c:	e7f5      	b.n	800024a <__udivmoddi4+0xa2>
 800025e:	fab3 f183 	clz	r1, r3
 8000262:	2900      	cmp	r1, #0
 8000264:	d146      	bne.n	80002f4 <__udivmoddi4+0x14c>
 8000266:	4573      	cmp	r3, lr
 8000268:	d302      	bcc.n	8000270 <__udivmoddi4+0xc8>
 800026a:	4282      	cmp	r2, r0
 800026c:	f200 8105 	bhi.w	800047a <__udivmoddi4+0x2d2>
 8000270:	1a84      	subs	r4, r0, r2
 8000272:	eb6e 0203 	sbc.w	r2, lr, r3
 8000276:	2001      	movs	r0, #1
 8000278:	4690      	mov	r8, r2
 800027a:	2d00      	cmp	r5, #0
 800027c:	d0e5      	beq.n	800024a <__udivmoddi4+0xa2>
 800027e:	e9c5 4800 	strd	r4, r8, [r5]
 8000282:	e7e2      	b.n	800024a <__udivmoddi4+0xa2>
 8000284:	2a00      	cmp	r2, #0
 8000286:	f000 8090 	beq.w	80003aa <__udivmoddi4+0x202>
 800028a:	fab2 f682 	clz	r6, r2
 800028e:	2e00      	cmp	r6, #0
 8000290:	f040 80a4 	bne.w	80003dc <__udivmoddi4+0x234>
 8000294:	1a8a      	subs	r2, r1, r2
 8000296:	0c03      	lsrs	r3, r0, #16
 8000298:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800029c:	b280      	uxth	r0, r0
 800029e:	b2bc      	uxth	r4, r7
 80002a0:	2101      	movs	r1, #1
 80002a2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002a6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ae:	fb04 f20c 	mul.w	r2, r4, ip
 80002b2:	429a      	cmp	r2, r3
 80002b4:	d907      	bls.n	80002c6 <__udivmoddi4+0x11e>
 80002b6:	18fb      	adds	r3, r7, r3
 80002b8:	f10c 38ff 	add.w	r8, ip, #4294967295
 80002bc:	d202      	bcs.n	80002c4 <__udivmoddi4+0x11c>
 80002be:	429a      	cmp	r2, r3
 80002c0:	f200 80e0 	bhi.w	8000484 <__udivmoddi4+0x2dc>
 80002c4:	46c4      	mov	ip, r8
 80002c6:	1a9b      	subs	r3, r3, r2
 80002c8:	fbb3 f2fe 	udiv	r2, r3, lr
 80002cc:	fb0e 3312 	mls	r3, lr, r2, r3
 80002d0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80002d4:	fb02 f404 	mul.w	r4, r2, r4
 80002d8:	429c      	cmp	r4, r3
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0x144>
 80002dc:	18fb      	adds	r3, r7, r3
 80002de:	f102 30ff 	add.w	r0, r2, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0x142>
 80002e4:	429c      	cmp	r4, r3
 80002e6:	f200 80ca 	bhi.w	800047e <__udivmoddi4+0x2d6>
 80002ea:	4602      	mov	r2, r0
 80002ec:	1b1b      	subs	r3, r3, r4
 80002ee:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80002f2:	e7a5      	b.n	8000240 <__udivmoddi4+0x98>
 80002f4:	f1c1 0620 	rsb	r6, r1, #32
 80002f8:	408b      	lsls	r3, r1
 80002fa:	fa22 f706 	lsr.w	r7, r2, r6
 80002fe:	431f      	orrs	r7, r3
 8000300:	fa0e f401 	lsl.w	r4, lr, r1
 8000304:	fa20 f306 	lsr.w	r3, r0, r6
 8000308:	fa2e fe06 	lsr.w	lr, lr, r6
 800030c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000310:	4323      	orrs	r3, r4
 8000312:	fa00 f801 	lsl.w	r8, r0, r1
 8000316:	fa1f fc87 	uxth.w	ip, r7
 800031a:	fbbe f0f9 	udiv	r0, lr, r9
 800031e:	0c1c      	lsrs	r4, r3, #16
 8000320:	fb09 ee10 	mls	lr, r9, r0, lr
 8000324:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000328:	fb00 fe0c 	mul.w	lr, r0, ip
 800032c:	45a6      	cmp	lr, r4
 800032e:	fa02 f201 	lsl.w	r2, r2, r1
 8000332:	d909      	bls.n	8000348 <__udivmoddi4+0x1a0>
 8000334:	193c      	adds	r4, r7, r4
 8000336:	f100 3aff 	add.w	sl, r0, #4294967295
 800033a:	f080 809c 	bcs.w	8000476 <__udivmoddi4+0x2ce>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f240 8099 	bls.w	8000476 <__udivmoddi4+0x2ce>
 8000344:	3802      	subs	r0, #2
 8000346:	443c      	add	r4, r7
 8000348:	eba4 040e 	sub.w	r4, r4, lr
 800034c:	fa1f fe83 	uxth.w	lr, r3
 8000350:	fbb4 f3f9 	udiv	r3, r4, r9
 8000354:	fb09 4413 	mls	r4, r9, r3, r4
 8000358:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800035c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000360:	45a4      	cmp	ip, r4
 8000362:	d908      	bls.n	8000376 <__udivmoddi4+0x1ce>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f103 3eff 	add.w	lr, r3, #4294967295
 800036a:	f080 8082 	bcs.w	8000472 <__udivmoddi4+0x2ca>
 800036e:	45a4      	cmp	ip, r4
 8000370:	d97f      	bls.n	8000472 <__udivmoddi4+0x2ca>
 8000372:	3b02      	subs	r3, #2
 8000374:	443c      	add	r4, r7
 8000376:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800037a:	eba4 040c 	sub.w	r4, r4, ip
 800037e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000382:	4564      	cmp	r4, ip
 8000384:	4673      	mov	r3, lr
 8000386:	46e1      	mov	r9, ip
 8000388:	d362      	bcc.n	8000450 <__udivmoddi4+0x2a8>
 800038a:	d05f      	beq.n	800044c <__udivmoddi4+0x2a4>
 800038c:	b15d      	cbz	r5, 80003a6 <__udivmoddi4+0x1fe>
 800038e:	ebb8 0203 	subs.w	r2, r8, r3
 8000392:	eb64 0409 	sbc.w	r4, r4, r9
 8000396:	fa04 f606 	lsl.w	r6, r4, r6
 800039a:	fa22 f301 	lsr.w	r3, r2, r1
 800039e:	431e      	orrs	r6, r3
 80003a0:	40cc      	lsrs	r4, r1
 80003a2:	e9c5 6400 	strd	r6, r4, [r5]
 80003a6:	2100      	movs	r1, #0
 80003a8:	e74f      	b.n	800024a <__udivmoddi4+0xa2>
 80003aa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003ae:	0c01      	lsrs	r1, r0, #16
 80003b0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80003ba:	463b      	mov	r3, r7
 80003bc:	4638      	mov	r0, r7
 80003be:	463c      	mov	r4, r7
 80003c0:	46b8      	mov	r8, r7
 80003c2:	46be      	mov	lr, r7
 80003c4:	2620      	movs	r6, #32
 80003c6:	fbb1 f1f7 	udiv	r1, r1, r7
 80003ca:	eba2 0208 	sub.w	r2, r2, r8
 80003ce:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80003d2:	e766      	b.n	80002a2 <__udivmoddi4+0xfa>
 80003d4:	4601      	mov	r1, r0
 80003d6:	e718      	b.n	800020a <__udivmoddi4+0x62>
 80003d8:	4610      	mov	r0, r2
 80003da:	e72c      	b.n	8000236 <__udivmoddi4+0x8e>
 80003dc:	f1c6 0220 	rsb	r2, r6, #32
 80003e0:	fa2e f302 	lsr.w	r3, lr, r2
 80003e4:	40b7      	lsls	r7, r6
 80003e6:	40b1      	lsls	r1, r6
 80003e8:	fa20 f202 	lsr.w	r2, r0, r2
 80003ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f0:	430a      	orrs	r2, r1
 80003f2:	fbb3 f8fe 	udiv	r8, r3, lr
 80003f6:	b2bc      	uxth	r4, r7
 80003f8:	fb0e 3318 	mls	r3, lr, r8, r3
 80003fc:	0c11      	lsrs	r1, r2, #16
 80003fe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000402:	fb08 f904 	mul.w	r9, r8, r4
 8000406:	40b0      	lsls	r0, r6
 8000408:	4589      	cmp	r9, r1
 800040a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800040e:	b280      	uxth	r0, r0
 8000410:	d93e      	bls.n	8000490 <__udivmoddi4+0x2e8>
 8000412:	1879      	adds	r1, r7, r1
 8000414:	f108 3cff 	add.w	ip, r8, #4294967295
 8000418:	d201      	bcs.n	800041e <__udivmoddi4+0x276>
 800041a:	4589      	cmp	r9, r1
 800041c:	d81f      	bhi.n	800045e <__udivmoddi4+0x2b6>
 800041e:	eba1 0109 	sub.w	r1, r1, r9
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fb09 f804 	mul.w	r8, r9, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	b292      	uxth	r2, r2
 8000430:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000434:	4542      	cmp	r2, r8
 8000436:	d229      	bcs.n	800048c <__udivmoddi4+0x2e4>
 8000438:	18ba      	adds	r2, r7, r2
 800043a:	f109 31ff 	add.w	r1, r9, #4294967295
 800043e:	d2c4      	bcs.n	80003ca <__udivmoddi4+0x222>
 8000440:	4542      	cmp	r2, r8
 8000442:	d2c2      	bcs.n	80003ca <__udivmoddi4+0x222>
 8000444:	f1a9 0102 	sub.w	r1, r9, #2
 8000448:	443a      	add	r2, r7
 800044a:	e7be      	b.n	80003ca <__udivmoddi4+0x222>
 800044c:	45f0      	cmp	r8, lr
 800044e:	d29d      	bcs.n	800038c <__udivmoddi4+0x1e4>
 8000450:	ebbe 0302 	subs.w	r3, lr, r2
 8000454:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000458:	3801      	subs	r0, #1
 800045a:	46e1      	mov	r9, ip
 800045c:	e796      	b.n	800038c <__udivmoddi4+0x1e4>
 800045e:	eba7 0909 	sub.w	r9, r7, r9
 8000462:	4449      	add	r1, r9
 8000464:	f1a8 0c02 	sub.w	ip, r8, #2
 8000468:	fbb1 f9fe 	udiv	r9, r1, lr
 800046c:	fb09 f804 	mul.w	r8, r9, r4
 8000470:	e7db      	b.n	800042a <__udivmoddi4+0x282>
 8000472:	4673      	mov	r3, lr
 8000474:	e77f      	b.n	8000376 <__udivmoddi4+0x1ce>
 8000476:	4650      	mov	r0, sl
 8000478:	e766      	b.n	8000348 <__udivmoddi4+0x1a0>
 800047a:	4608      	mov	r0, r1
 800047c:	e6fd      	b.n	800027a <__udivmoddi4+0xd2>
 800047e:	443b      	add	r3, r7
 8000480:	3a02      	subs	r2, #2
 8000482:	e733      	b.n	80002ec <__udivmoddi4+0x144>
 8000484:	f1ac 0c02 	sub.w	ip, ip, #2
 8000488:	443b      	add	r3, r7
 800048a:	e71c      	b.n	80002c6 <__udivmoddi4+0x11e>
 800048c:	4649      	mov	r1, r9
 800048e:	e79c      	b.n	80003ca <__udivmoddi4+0x222>
 8000490:	eba1 0109 	sub.w	r1, r1, r9
 8000494:	46c4      	mov	ip, r8
 8000496:	fbb1 f9fe 	udiv	r9, r1, lr
 800049a:	fb09 f804 	mul.w	r8, r9, r4
 800049e:	e7c4      	b.n	800042a <__udivmoddi4+0x282>

080004a0 <__aeabi_idiv0>:
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop

080004a4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004a4:	b480      	push	{r7}
 80004a6:	b085      	sub	sp, #20
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80004b0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80004b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	4313      	orrs	r3, r2
 80004ba:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80004c0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	4013      	ands	r3, r2
 80004c6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004c8:	68fb      	ldr	r3, [r7, #12]
}
 80004ca:	bf00      	nop
 80004cc:	3714      	adds	r7, #20
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bc80      	pop	{r7}
 80004d2:	4770      	bx	lr

080004d4 <LL_APB1_GRP1_DisableClockSleep>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1

  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClockSleep(uint32_t Periphs)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1SMENR1, Periphs);
 80004dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80004e0:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	43db      	mvns	r3, r3
 80004e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80004ea:	4013      	ands	r3, r2
 80004ec:	678b      	str	r3, [r1, #120]	@ 0x78
}
 80004ee:	bf00      	nop
 80004f0:	370c      	adds	r7, #12
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bc80      	pop	{r7}
 80004f6:	4770      	bx	lr

080004f8 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch){
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, &ch, 1, 1000);
 8000500:	1d39      	adds	r1, r7, #4
 8000502:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000506:	2201      	movs	r2, #1
 8000508:	4803      	ldr	r0, [pc, #12]	@ (8000518 <__io_putchar+0x20>)
 800050a:	f002 f9ae 	bl	800286a <HAL_UART_Transmit>
}
 800050e:	bf00      	nop
 8000510:	4618      	mov	r0, r3
 8000512:	3708      	adds	r7, #8
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	20000084 	.word	0x20000084

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000520:	f000 faa0 	bl	8000a64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000524:	f000 f826 	bl	8000574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000528:	f000 f8d0 	bl	80006cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800052c:	f000 f882 	bl	8000634 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	  printf("\r\n\r\nTest d'une appli mode veille sur STM32\r\n");
 8000530:	480c      	ldr	r0, [pc, #48]	@ (8000564 <main+0x48>)
 8000532:	f003 f86b 	bl	800360c <puts>
  while (1)
  {
	  printf("Exécution de la boucle While\r\n");
 8000536:	480c      	ldr	r0, [pc, #48]	@ (8000568 <main+0x4c>)
 8000538:	f003 f868 	bl	800360c <puts>
	  printf("Le µCU entre en veille normale via WFE - type event\r\n\r\n");
 800053c:	480b      	ldr	r0, [pc, #44]	@ (800056c <main+0x50>)
 800053e:	f003 f865 	bl	800360c <puts>
	  __HAL_RCC_USART2_CLK_SLEEP_DISABLE(); // Clock-gating the USART2 peripheral
 8000542:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000546:	f7ff ffc5 	bl	80004d4 <LL_APB1_GRP1_DisableClockSleep>

	  HAL_SuspendTick();
 800054a:	f000 fb01 	bl	8000b50 <HAL_SuspendTick>
	  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFE);
 800054e:	2102      	movs	r1, #2
 8000550:	2000      	movs	r0, #0
 8000552:	f000 fd81 	bl	8001058 <HAL_PWR_EnterSLEEPMode>

	  HAL_ResumeTick();
 8000556:	f000 fb09 	bl	8000b6c <HAL_ResumeTick>
	  printf("Réveil par pression du Bouton 1\r\n");
 800055a:	4805      	ldr	r0, [pc, #20]	@ (8000570 <main+0x54>)
 800055c:	f003 f856 	bl	800360c <puts>
	  printf("Exécution de la boucle While\r\n");
 8000560:	bf00      	nop
 8000562:	e7e8      	b.n	8000536 <main+0x1a>
 8000564:	08003d44 	.word	0x08003d44
 8000568:	08003d70 	.word	0x08003d70
 800056c:	08003d90 	.word	0x08003d90
 8000570:	08003dc8 	.word	0x08003dc8

08000574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b09a      	sub	sp, #104	@ 0x68
 8000578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057a:	f107 0320 	add.w	r3, r7, #32
 800057e:	2248      	movs	r2, #72	@ 0x48
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f003 f922 	bl	80037cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000588:	1d3b      	adds	r3, r7, #4
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	605a      	str	r2, [r3, #4]
 8000590:	609a      	str	r2, [r3, #8]
 8000592:	60da      	str	r2, [r3, #12]
 8000594:	611a      	str	r2, [r3, #16]
 8000596:	615a      	str	r2, [r3, #20]
 8000598:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800059a:	4b25      	ldr	r3, [pc, #148]	@ (8000630 <SystemClock_Config+0xbc>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80005a2:	4a23      	ldr	r2, [pc, #140]	@ (8000630 <SystemClock_Config+0xbc>)
 80005a4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80005a8:	6013      	str	r3, [r2, #0]
 80005aa:	4b21      	ldr	r3, [pc, #132]	@ (8000630 <SystemClock_Config+0xbc>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80005b2:	603b      	str	r3, [r7, #0]
 80005b4:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005b6:	2320      	movs	r3, #32
 80005b8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005ba:	2301      	movs	r3, #1
 80005bc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80005be:	2300      	movs	r3, #0
 80005c0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005c2:	2360      	movs	r3, #96	@ 0x60
 80005c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c6:	2302      	movs	r3, #2
 80005c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005ca:	2301      	movs	r3, #1
 80005cc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 24;
 80005d2:	2318      	movs	r3, #24
 80005d4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80005da:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005dc:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80005e0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005e2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80005e6:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e8:	f107 0320 	add.w	r3, r7, #32
 80005ec:	4618      	mov	r0, r3
 80005ee:	f001 f86f 	bl	80016d0 <HAL_RCC_OscConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0x88>
  {
    Error_Handler();
 80005f8:	f000 f8b6 	bl	8000768 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80005fc:	234f      	movs	r3, #79	@ 0x4f
 80005fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000600:	2303      	movs	r3, #3
 8000602:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	2102      	movs	r1, #2
 8000618:	4618      	mov	r0, r3
 800061a:	f001 fbdb 	bl	8001dd4 <HAL_RCC_ClockConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000624:	f000 f8a0 	bl	8000768 <Error_Handler>
  }
}
 8000628:	bf00      	nop
 800062a:	3768      	adds	r7, #104	@ 0x68
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	58000400 	.word	0x58000400

08000634 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000638:	4b22      	ldr	r3, [pc, #136]	@ (80006c4 <MX_USART2_UART_Init+0x90>)
 800063a:	4a23      	ldr	r2, [pc, #140]	@ (80006c8 <MX_USART2_UART_Init+0x94>)
 800063c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800063e:	4b21      	ldr	r3, [pc, #132]	@ (80006c4 <MX_USART2_UART_Init+0x90>)
 8000640:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000644:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000646:	4b1f      	ldr	r3, [pc, #124]	@ (80006c4 <MX_USART2_UART_Init+0x90>)
 8000648:	2200      	movs	r2, #0
 800064a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800064c:	4b1d      	ldr	r3, [pc, #116]	@ (80006c4 <MX_USART2_UART_Init+0x90>)
 800064e:	2200      	movs	r2, #0
 8000650:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000652:	4b1c      	ldr	r3, [pc, #112]	@ (80006c4 <MX_USART2_UART_Init+0x90>)
 8000654:	2200      	movs	r2, #0
 8000656:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000658:	4b1a      	ldr	r3, [pc, #104]	@ (80006c4 <MX_USART2_UART_Init+0x90>)
 800065a:	220c      	movs	r2, #12
 800065c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800065e:	4b19      	ldr	r3, [pc, #100]	@ (80006c4 <MX_USART2_UART_Init+0x90>)
 8000660:	2200      	movs	r2, #0
 8000662:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000664:	4b17      	ldr	r3, [pc, #92]	@ (80006c4 <MX_USART2_UART_Init+0x90>)
 8000666:	2200      	movs	r2, #0
 8000668:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800066a:	4b16      	ldr	r3, [pc, #88]	@ (80006c4 <MX_USART2_UART_Init+0x90>)
 800066c:	2200      	movs	r2, #0
 800066e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000670:	4b14      	ldr	r3, [pc, #80]	@ (80006c4 <MX_USART2_UART_Init+0x90>)
 8000672:	2200      	movs	r2, #0
 8000674:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000676:	4b13      	ldr	r3, [pc, #76]	@ (80006c4 <MX_USART2_UART_Init+0x90>)
 8000678:	2200      	movs	r2, #0
 800067a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800067c:	4811      	ldr	r0, [pc, #68]	@ (80006c4 <MX_USART2_UART_Init+0x90>)
 800067e:	f002 f8a4 	bl	80027ca <HAL_UART_Init>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000688:	f000 f86e 	bl	8000768 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800068c:	2100      	movs	r1, #0
 800068e:	480d      	ldr	r0, [pc, #52]	@ (80006c4 <MX_USART2_UART_Init+0x90>)
 8000690:	f002 fddb 	bl	800324a <HAL_UARTEx_SetTxFifoThreshold>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800069a:	f000 f865 	bl	8000768 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800069e:	2100      	movs	r1, #0
 80006a0:	4808      	ldr	r0, [pc, #32]	@ (80006c4 <MX_USART2_UART_Init+0x90>)
 80006a2:	f002 fe10 	bl	80032c6 <HAL_UARTEx_SetRxFifoThreshold>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80006ac:	f000 f85c 	bl	8000768 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80006b0:	4804      	ldr	r0, [pc, #16]	@ (80006c4 <MX_USART2_UART_Init+0x90>)
 80006b2:	f002 fd92 	bl	80031da <HAL_UARTEx_DisableFifoMode>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80006bc:	f000 f854 	bl	8000768 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006c0:	bf00      	nop
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000084 	.word	0x20000084
 80006c8:	40004400 	.word	0x40004400

080006cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b086      	sub	sp, #24
 80006d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e0:	2002      	movs	r0, #2
 80006e2:	f7ff fedf 	bl	80004a4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e6:	2004      	movs	r0, #4
 80006e8:	f7ff fedc 	bl	80004a4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ec:	2001      	movs	r0, #1
 80006ee:	f7ff fed9 	bl	80004a4 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(blue_LED_GPIO_Port, blue_LED_Pin, GPIO_PIN_RESET);
 80006f2:	2200      	movs	r2, #0
 80006f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80006f8:	4819      	ldr	r0, [pc, #100]	@ (8000760 <MX_GPIO_Init+0x94>)
 80006fa:	f000 fc87 	bl	800100c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	2138      	movs	r1, #56	@ 0x38
 8000702:	4818      	ldr	r0, [pc, #96]	@ (8000764 <MX_GPIO_Init+0x98>)
 8000704:	f000 fc82 	bl	800100c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : blue_LED_Pin */
  GPIO_InitStruct.Pin = blue_LED_Pin;
 8000708:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800070c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070e:	2301      	movs	r3, #1
 8000710:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000712:	2300      	movs	r3, #0
 8000714:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000716:	2300      	movs	r3, #0
 8000718:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(blue_LED_GPIO_Port, &GPIO_InitStruct);
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	4619      	mov	r1, r3
 800071e:	4810      	ldr	r0, [pc, #64]	@ (8000760 <MX_GPIO_Init+0x94>)
 8000720:	f000 fb14 	bl	8000d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : FE_CTRL3_Pin FE_CTRL2_Pin FE_CTRL1_Pin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 8000724:	2338      	movs	r3, #56	@ 0x38
 8000726:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000728:	2301      	movs	r3, #1
 800072a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000730:	2303      	movs	r3, #3
 8000732:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000734:	1d3b      	adds	r3, r7, #4
 8000736:	4619      	mov	r1, r3
 8000738:	480a      	ldr	r0, [pc, #40]	@ (8000764 <MX_GPIO_Init+0x98>)
 800073a:	f000 fb07 	bl	8000d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : User_B1_Pin */
  GPIO_InitStruct.Pin = User_B1_Pin;
 800073e:	2301      	movs	r3, #1
 8000740:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_FALLING;
 8000742:	f44f 1308 	mov.w	r3, #2228224	@ 0x220000
 8000746:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000748:	2301      	movs	r3, #1
 800074a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(User_B1_GPIO_Port, &GPIO_InitStruct);
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	4619      	mov	r1, r3
 8000750:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000754:	f000 fafa 	bl	8000d4c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000758:	bf00      	nop
 800075a:	3718      	adds	r7, #24
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	48000400 	.word	0x48000400
 8000764:	48000800 	.word	0x48000800

08000768 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800076c:	b672      	cpsid	i
}
 800076e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000770:	bf00      	nop
 8000772:	e7fd      	b.n	8000770 <Error_Handler+0x8>

08000774 <LL_AHB2_GRP1_EnableClock>:
{
 8000774:	b480      	push	{r7}
 8000776:	b085      	sub	sp, #20
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800077c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000780:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000782:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	4313      	orrs	r3, r2
 800078a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800078c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000790:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	4013      	ands	r3, r2
 8000796:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000798:	68fb      	ldr	r3, [r7, #12]
}
 800079a:	bf00      	nop
 800079c:	3714      	adds	r7, #20
 800079e:	46bd      	mov	sp, r7
 80007a0:	bc80      	pop	{r7}
 80007a2:	4770      	bx	lr

080007a4 <LL_APB1_GRP1_EnableClock>:
{
 80007a4:	b480      	push	{r7}
 80007a6:	b085      	sub	sp, #20
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80007ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80007b0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80007b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	4313      	orrs	r3, r2
 80007ba:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80007bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80007c0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	4013      	ands	r3, r2
 80007c6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007c8:	68fb      	ldr	r3, [r7, #12]
}
 80007ca:	bf00      	nop
 80007cc:	3714      	adds	r7, #20
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bc80      	pop	{r7}
 80007d2:	4770      	bx	lr

080007d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007d8:	bf00      	nop
 80007da:	46bd      	mov	sp, r7
 80007dc:	bc80      	pop	{r7}
 80007de:	4770      	bx	lr

080007e0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b096      	sub	sp, #88	@ 0x58
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
 80007f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007f8:	f107 030c 	add.w	r3, r7, #12
 80007fc:	2238      	movs	r2, #56	@ 0x38
 80007fe:	2100      	movs	r1, #0
 8000800:	4618      	mov	r0, r3
 8000802:	f002 ffe3 	bl	80037cc <memset>
  if(huart->Instance==USART2)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4a17      	ldr	r2, [pc, #92]	@ (8000868 <HAL_UART_MspInit+0x88>)
 800080c:	4293      	cmp	r3, r2
 800080e:	d126      	bne.n	800085e <HAL_UART_MspInit+0x7e>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000810:	2302      	movs	r3, #2
 8000812:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000814:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 8000818:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800081a:	f107 030c 	add.w	r3, r7, #12
 800081e:	4618      	mov	r0, r3
 8000820:	f001 fe98 	bl	8002554 <HAL_RCCEx_PeriphCLKConfig>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800082a:	f7ff ff9d 	bl	8000768 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800082e:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000832:	f7ff ffb7 	bl	80007a4 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000836:	2001      	movs	r0, #1
 8000838:	f7ff ff9c 	bl	8000774 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 800083c:	230c      	movs	r3, #12
 800083e:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000840:	2302      	movs	r3, #2
 8000842:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000848:	2300      	movs	r3, #0
 800084a:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800084c:	2307      	movs	r3, #7
 800084e:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000850:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000854:	4619      	mov	r1, r3
 8000856:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800085a:	f000 fa77 	bl	8000d4c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800085e:	bf00      	nop
 8000860:	3758      	adds	r7, #88	@ 0x58
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40004400 	.word	0x40004400

0800086c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000870:	bf00      	nop
 8000872:	e7fd      	b.n	8000870 <NMI_Handler+0x4>

08000874 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000878:	bf00      	nop
 800087a:	e7fd      	b.n	8000878 <HardFault_Handler+0x4>

0800087c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000880:	bf00      	nop
 8000882:	e7fd      	b.n	8000880 <MemManage_Handler+0x4>

08000884 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000888:	bf00      	nop
 800088a:	e7fd      	b.n	8000888 <BusFault_Handler+0x4>

0800088c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000890:	bf00      	nop
 8000892:	e7fd      	b.n	8000890 <UsageFault_Handler+0x4>

08000894 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000898:	bf00      	nop
 800089a:	46bd      	mov	sp, r7
 800089c:	bc80      	pop	{r7}
 800089e:	4770      	bx	lr

080008a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bc80      	pop	{r7}
 80008aa:	4770      	bx	lr

080008ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bc80      	pop	{r7}
 80008b6:	4770      	bx	lr

080008b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008bc:	f000 f92c 	bl	8000b18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008c0:	bf00      	nop
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b086      	sub	sp, #24
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	60f8      	str	r0, [r7, #12]
 80008cc:	60b9      	str	r1, [r7, #8]
 80008ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008d0:	2300      	movs	r3, #0
 80008d2:	617b      	str	r3, [r7, #20]
 80008d4:	e00a      	b.n	80008ec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008d6:	f3af 8000 	nop.w
 80008da:	4601      	mov	r1, r0
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	1c5a      	adds	r2, r3, #1
 80008e0:	60ba      	str	r2, [r7, #8]
 80008e2:	b2ca      	uxtb	r2, r1
 80008e4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	3301      	adds	r3, #1
 80008ea:	617b      	str	r3, [r7, #20]
 80008ec:	697a      	ldr	r2, [r7, #20]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	429a      	cmp	r2, r3
 80008f2:	dbf0      	blt.n	80008d6 <_read+0x12>
  }

  return len;
 80008f4:	687b      	ldr	r3, [r7, #4]
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3718      	adds	r7, #24
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}

080008fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008fe:	b580      	push	{r7, lr}
 8000900:	b086      	sub	sp, #24
 8000902:	af00      	add	r7, sp, #0
 8000904:	60f8      	str	r0, [r7, #12]
 8000906:	60b9      	str	r1, [r7, #8]
 8000908:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800090a:	2300      	movs	r3, #0
 800090c:	617b      	str	r3, [r7, #20]
 800090e:	e009      	b.n	8000924 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	1c5a      	adds	r2, r3, #1
 8000914:	60ba      	str	r2, [r7, #8]
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	4618      	mov	r0, r3
 800091a:	f7ff fded 	bl	80004f8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	3301      	adds	r3, #1
 8000922:	617b      	str	r3, [r7, #20]
 8000924:	697a      	ldr	r2, [r7, #20]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	429a      	cmp	r2, r3
 800092a:	dbf1      	blt.n	8000910 <_write+0x12>
  }
  return len;
 800092c:	687b      	ldr	r3, [r7, #4]
}
 800092e:	4618      	mov	r0, r3
 8000930:	3718      	adds	r7, #24
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}

08000936 <_close>:

int _close(int file)
{
 8000936:	b480      	push	{r7}
 8000938:	b083      	sub	sp, #12
 800093a:	af00      	add	r7, sp, #0
 800093c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800093e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000942:	4618      	mov	r0, r3
 8000944:	370c      	adds	r7, #12
 8000946:	46bd      	mov	sp, r7
 8000948:	bc80      	pop	{r7}
 800094a:	4770      	bx	lr

0800094c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
 8000954:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800095c:	605a      	str	r2, [r3, #4]
  return 0;
 800095e:	2300      	movs	r3, #0
}
 8000960:	4618      	mov	r0, r3
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	bc80      	pop	{r7}
 8000968:	4770      	bx	lr

0800096a <_isatty>:

int _isatty(int file)
{
 800096a:	b480      	push	{r7}
 800096c:	b083      	sub	sp, #12
 800096e:	af00      	add	r7, sp, #0
 8000970:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000972:	2301      	movs	r3, #1
}
 8000974:	4618      	mov	r0, r3
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	bc80      	pop	{r7}
 800097c:	4770      	bx	lr

0800097e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800097e:	b480      	push	{r7}
 8000980:	b085      	sub	sp, #20
 8000982:	af00      	add	r7, sp, #0
 8000984:	60f8      	str	r0, [r7, #12]
 8000986:	60b9      	str	r1, [r7, #8]
 8000988:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800098a:	2300      	movs	r3, #0
}
 800098c:	4618      	mov	r0, r3
 800098e:	3714      	adds	r7, #20
 8000990:	46bd      	mov	sp, r7
 8000992:	bc80      	pop	{r7}
 8000994:	4770      	bx	lr
	...

08000998 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b086      	sub	sp, #24
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009a0:	4a14      	ldr	r2, [pc, #80]	@ (80009f4 <_sbrk+0x5c>)
 80009a2:	4b15      	ldr	r3, [pc, #84]	@ (80009f8 <_sbrk+0x60>)
 80009a4:	1ad3      	subs	r3, r2, r3
 80009a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009ac:	4b13      	ldr	r3, [pc, #76]	@ (80009fc <_sbrk+0x64>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d102      	bne.n	80009ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009b4:	4b11      	ldr	r3, [pc, #68]	@ (80009fc <_sbrk+0x64>)
 80009b6:	4a12      	ldr	r2, [pc, #72]	@ (8000a00 <_sbrk+0x68>)
 80009b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009ba:	4b10      	ldr	r3, [pc, #64]	@ (80009fc <_sbrk+0x64>)
 80009bc:	681a      	ldr	r2, [r3, #0]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4413      	add	r3, r2
 80009c2:	693a      	ldr	r2, [r7, #16]
 80009c4:	429a      	cmp	r2, r3
 80009c6:	d207      	bcs.n	80009d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009c8:	f002 ff4e 	bl	8003868 <__errno>
 80009cc:	4603      	mov	r3, r0
 80009ce:	220c      	movs	r2, #12
 80009d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009d2:	f04f 33ff 	mov.w	r3, #4294967295
 80009d6:	e009      	b.n	80009ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009d8:	4b08      	ldr	r3, [pc, #32]	@ (80009fc <_sbrk+0x64>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009de:	4b07      	ldr	r3, [pc, #28]	@ (80009fc <_sbrk+0x64>)
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4413      	add	r3, r2
 80009e6:	4a05      	ldr	r2, [pc, #20]	@ (80009fc <_sbrk+0x64>)
 80009e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009ea:	68fb      	ldr	r3, [r7, #12]
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	3718      	adds	r7, #24
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	20010000 	.word	0x20010000
 80009f8:	00000400 	.word	0x00000400
 80009fc:	20000118 	.word	0x20000118
 8000a00:	20000270 	.word	0x20000270

08000a04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bc80      	pop	{r7}
 8000a0e:	4770      	bx	lr

08000a10 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a10:	480d      	ldr	r0, [pc, #52]	@ (8000a48 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a12:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a14:	f7ff fff6 	bl	8000a04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a18:	480c      	ldr	r0, [pc, #48]	@ (8000a4c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a1a:	490d      	ldr	r1, [pc, #52]	@ (8000a50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a54 <LoopForever+0xe>)
  movs r3, #0
 8000a1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a20:	e002      	b.n	8000a28 <LoopCopyDataInit>

08000a22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a26:	3304      	adds	r3, #4

08000a28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a2c:	d3f9      	bcc.n	8000a22 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a30:	4c0a      	ldr	r4, [pc, #40]	@ (8000a5c <LoopForever+0x16>)
  movs r3, #0
 8000a32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a34:	e001      	b.n	8000a3a <LoopFillZerobss>

08000a36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a38:	3204      	adds	r2, #4

08000a3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a3c:	d3fb      	bcc.n	8000a36 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a3e:	f002 ff19 	bl	8003874 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a42:	f7ff fd6b 	bl	800051c <main>

08000a46 <LoopForever>:

LoopForever:
    b LoopForever
 8000a46:	e7fe      	b.n	8000a46 <LoopForever>
  ldr   r0, =_estack
 8000a48:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000a4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a50:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000a54:	08003ee0 	.word	0x08003ee0
  ldr r2, =_sbss
 8000a58:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000a5c:	2000026c 	.word	0x2000026c

08000a60 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a60:	e7fe      	b.n	8000a60 <ADC_IRQHandler>
	...

08000a64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a6e:	2003      	movs	r0, #3
 8000a70:	f000 f93a 	bl	8000ce8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000a74:	f001 fb90 	bl	8002198 <HAL_RCC_GetHCLKFreq>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	4a09      	ldr	r2, [pc, #36]	@ (8000aa0 <HAL_Init+0x3c>)
 8000a7c:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a7e:	2000      	movs	r0, #0
 8000a80:	f000 f810 	bl	8000aa4 <HAL_InitTick>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d002      	beq.n	8000a90 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	71fb      	strb	r3, [r7, #7]
 8000a8e:	e001      	b.n	8000a94 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a90:	f7ff fea0 	bl	80007d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a94:	79fb      	ldrb	r3, [r7, #7]
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000000 	.word	0x20000000

08000aa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000aac:	2300      	movs	r3, #0
 8000aae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ab0:	4b17      	ldr	r3, [pc, #92]	@ (8000b10 <HAL_InitTick+0x6c>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d024      	beq.n	8000b02 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ab8:	f001 fb6e 	bl	8002198 <HAL_RCC_GetHCLKFreq>
 8000abc:	4602      	mov	r2, r0
 8000abe:	4b14      	ldr	r3, [pc, #80]	@ (8000b10 <HAL_InitTick+0x6c>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ac8:	fbb3 f3f1 	udiv	r3, r3, r1
 8000acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f000 f92e 	bl	8000d32 <HAL_SYSTICK_Config>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d10f      	bne.n	8000afc <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2b0f      	cmp	r3, #15
 8000ae0:	d809      	bhi.n	8000af6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	6879      	ldr	r1, [r7, #4]
 8000ae6:	f04f 30ff 	mov.w	r0, #4294967295
 8000aea:	f000 f908 	bl	8000cfe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000aee:	4a09      	ldr	r2, [pc, #36]	@ (8000b14 <HAL_InitTick+0x70>)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	6013      	str	r3, [r2, #0]
 8000af4:	e007      	b.n	8000b06 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000af6:	2301      	movs	r3, #1
 8000af8:	73fb      	strb	r3, [r7, #15]
 8000afa:	e004      	b.n	8000b06 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000afc:	2301      	movs	r3, #1
 8000afe:	73fb      	strb	r3, [r7, #15]
 8000b00:	e001      	b.n	8000b06 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
 8000b04:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3710      	adds	r7, #16
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20000008 	.word	0x20000008
 8000b14:	20000004 	.word	0x20000004

08000b18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b1c:	4b05      	ldr	r3, [pc, #20]	@ (8000b34 <HAL_IncTick+0x1c>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	461a      	mov	r2, r3
 8000b22:	4b05      	ldr	r3, [pc, #20]	@ (8000b38 <HAL_IncTick+0x20>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4413      	add	r3, r2
 8000b28:	4a03      	ldr	r2, [pc, #12]	@ (8000b38 <HAL_IncTick+0x20>)
 8000b2a:	6013      	str	r3, [r2, #0]
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bc80      	pop	{r7}
 8000b32:	4770      	bx	lr
 8000b34:	20000008 	.word	0x20000008
 8000b38:	2000011c 	.word	0x2000011c

08000b3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b40:	4b02      	ldr	r3, [pc, #8]	@ (8000b4c <HAL_GetTick+0x10>)
 8000b42:	681b      	ldr	r3, [r3, #0]
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bc80      	pop	{r7}
 8000b4a:	4770      	bx	lr
 8000b4c:	2000011c 	.word	0x2000011c

08000b50 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000b54:	4b04      	ldr	r3, [pc, #16]	@ (8000b68 <HAL_SuspendTick+0x18>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a03      	ldr	r2, [pc, #12]	@ (8000b68 <HAL_SuspendTick+0x18>)
 8000b5a:	f023 0302 	bic.w	r3, r3, #2
 8000b5e:	6013      	str	r3, [r2, #0]
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bc80      	pop	{r7}
 8000b66:	4770      	bx	lr
 8000b68:	e000e010 	.word	0xe000e010

08000b6c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000b70:	4b04      	ldr	r3, [pc, #16]	@ (8000b84 <HAL_ResumeTick+0x18>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a03      	ldr	r2, [pc, #12]	@ (8000b84 <HAL_ResumeTick+0x18>)
 8000b76:	f043 0302 	orr.w	r3, r3, #2
 8000b7a:	6013      	str	r3, [r2, #0]
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bc80      	pop	{r7}
 8000b82:	4770      	bx	lr
 8000b84:	e000e010 	.word	0xe000e010

08000b88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b085      	sub	sp, #20
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	f003 0307 	and.w	r3, r3, #7
 8000b96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b98:	4b0c      	ldr	r3, [pc, #48]	@ (8000bcc <__NVIC_SetPriorityGrouping+0x44>)
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b9e:	68ba      	ldr	r2, [r7, #8]
 8000ba0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bb0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bba:	4a04      	ldr	r2, [pc, #16]	@ (8000bcc <__NVIC_SetPriorityGrouping+0x44>)
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	60d3      	str	r3, [r2, #12]
}
 8000bc0:	bf00      	nop
 8000bc2:	3714      	adds	r7, #20
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bc80      	pop	{r7}
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bd4:	4b04      	ldr	r3, [pc, #16]	@ (8000be8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	0a1b      	lsrs	r3, r3, #8
 8000bda:	f003 0307 	and.w	r3, r3, #7
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bc80      	pop	{r7}
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	6039      	str	r1, [r7, #0]
 8000bf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	db0a      	blt.n	8000c16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	b2da      	uxtb	r2, r3
 8000c04:	490c      	ldr	r1, [pc, #48]	@ (8000c38 <__NVIC_SetPriority+0x4c>)
 8000c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0a:	0112      	lsls	r2, r2, #4
 8000c0c:	b2d2      	uxtb	r2, r2
 8000c0e:	440b      	add	r3, r1
 8000c10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c14:	e00a      	b.n	8000c2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	b2da      	uxtb	r2, r3
 8000c1a:	4908      	ldr	r1, [pc, #32]	@ (8000c3c <__NVIC_SetPriority+0x50>)
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	f003 030f 	and.w	r3, r3, #15
 8000c22:	3b04      	subs	r3, #4
 8000c24:	0112      	lsls	r2, r2, #4
 8000c26:	b2d2      	uxtb	r2, r2
 8000c28:	440b      	add	r3, r1
 8000c2a:	761a      	strb	r2, [r3, #24]
}
 8000c2c:	bf00      	nop
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bc80      	pop	{r7}
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	e000e100 	.word	0xe000e100
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b089      	sub	sp, #36	@ 0x24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	f003 0307 	and.w	r3, r3, #7
 8000c52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c54:	69fb      	ldr	r3, [r7, #28]
 8000c56:	f1c3 0307 	rsb	r3, r3, #7
 8000c5a:	2b04      	cmp	r3, #4
 8000c5c:	bf28      	it	cs
 8000c5e:	2304      	movcs	r3, #4
 8000c60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	3304      	adds	r3, #4
 8000c66:	2b06      	cmp	r3, #6
 8000c68:	d902      	bls.n	8000c70 <NVIC_EncodePriority+0x30>
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	3b03      	subs	r3, #3
 8000c6e:	e000      	b.n	8000c72 <NVIC_EncodePriority+0x32>
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c74:	f04f 32ff 	mov.w	r2, #4294967295
 8000c78:	69bb      	ldr	r3, [r7, #24]
 8000c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7e:	43da      	mvns	r2, r3
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	401a      	ands	r2, r3
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c88:	f04f 31ff 	mov.w	r1, #4294967295
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c92:	43d9      	mvns	r1, r3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c98:	4313      	orrs	r3, r2
         );
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3724      	adds	r7, #36	@ 0x24
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bc80      	pop	{r7}
 8000ca2:	4770      	bx	lr

08000ca4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	3b01      	subs	r3, #1
 8000cb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000cb4:	d301      	bcc.n	8000cba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e00f      	b.n	8000cda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cba:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce4 <SysTick_Config+0x40>)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cc2:	210f      	movs	r1, #15
 8000cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc8:	f7ff ff90 	bl	8000bec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ccc:	4b05      	ldr	r3, [pc, #20]	@ (8000ce4 <SysTick_Config+0x40>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cd2:	4b04      	ldr	r3, [pc, #16]	@ (8000ce4 <SysTick_Config+0x40>)
 8000cd4:	2207      	movs	r2, #7
 8000cd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	e000e010 	.word	0xe000e010

08000ce8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f7ff ff49 	bl	8000b88 <__NVIC_SetPriorityGrouping>
}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b086      	sub	sp, #24
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	4603      	mov	r3, r0
 8000d06:	60b9      	str	r1, [r7, #8]
 8000d08:	607a      	str	r2, [r7, #4]
 8000d0a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d0c:	f7ff ff60 	bl	8000bd0 <__NVIC_GetPriorityGrouping>
 8000d10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d12:	687a      	ldr	r2, [r7, #4]
 8000d14:	68b9      	ldr	r1, [r7, #8]
 8000d16:	6978      	ldr	r0, [r7, #20]
 8000d18:	f7ff ff92 	bl	8000c40 <NVIC_EncodePriority>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d22:	4611      	mov	r1, r2
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff ff61 	bl	8000bec <__NVIC_SetPriority>
}
 8000d2a:	bf00      	nop
 8000d2c:	3718      	adds	r7, #24
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b082      	sub	sp, #8
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f7ff ffb2 	bl	8000ca4 <SysTick_Config>
 8000d40:	4603      	mov	r3, r0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
	...

08000d4c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b087      	sub	sp, #28
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d56:	2300      	movs	r3, #0
 8000d58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d5a:	e140      	b.n	8000fde <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	2101      	movs	r1, #1
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	fa01 f303 	lsl.w	r3, r1, r3
 8000d68:	4013      	ands	r3, r2
 8000d6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f000 8132 	beq.w	8000fd8 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f003 0303 	and.w	r3, r3, #3
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d005      	beq.n	8000d8c <HAL_GPIO_Init+0x40>
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f003 0303 	and.w	r3, r3, #3
 8000d88:	2b02      	cmp	r3, #2
 8000d8a:	d130      	bne.n	8000dee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	689b      	ldr	r3, [r3, #8]
 8000d90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	2203      	movs	r2, #3
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	4013      	ands	r3, r2
 8000da2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	68da      	ldr	r2, [r3, #12]
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	693a      	ldr	r2, [r7, #16]
 8000dba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	693a      	ldr	r2, [r7, #16]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	091b      	lsrs	r3, r3, #4
 8000dd8:	f003 0201 	and.w	r2, r3, #1
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f003 0303 	and.w	r3, r3, #3
 8000df6:	2b03      	cmp	r3, #3
 8000df8:	d017      	beq.n	8000e2a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	68db      	ldr	r3, [r3, #12]
 8000dfe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	2203      	movs	r2, #3
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	43db      	mvns	r3, r3
 8000e0c:	693a      	ldr	r2, [r7, #16]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	689a      	ldr	r2, [r3, #8]
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	f003 0303 	and.w	r3, r3, #3
 8000e32:	2b02      	cmp	r3, #2
 8000e34:	d123      	bne.n	8000e7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	08da      	lsrs	r2, r3, #3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	3208      	adds	r2, #8
 8000e3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	f003 0307 	and.w	r3, r3, #7
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	220f      	movs	r2, #15
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	43db      	mvns	r3, r3
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	4013      	ands	r3, r2
 8000e58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	691a      	ldr	r2, [r3, #16]
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	f003 0307 	and.w	r3, r3, #7
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	08da      	lsrs	r2, r3, #3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	3208      	adds	r2, #8
 8000e78:	6939      	ldr	r1, [r7, #16]
 8000e7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	2203      	movs	r2, #3
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	43db      	mvns	r3, r3
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	4013      	ands	r3, r2
 8000e94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f003 0203 	and.w	r2, r3, #3
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	f000 808c 	beq.w	8000fd8 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000ec0:	4a4e      	ldr	r2, [pc, #312]	@ (8000ffc <HAL_GPIO_Init+0x2b0>)
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	089b      	lsrs	r3, r3, #2
 8000ec6:	3302      	adds	r3, #2
 8000ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	f003 0303 	and.w	r3, r3, #3
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	2207      	movs	r2, #7
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	43db      	mvns	r3, r3
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000eea:	d00d      	beq.n	8000f08 <HAL_GPIO_Init+0x1bc>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4a44      	ldr	r2, [pc, #272]	@ (8001000 <HAL_GPIO_Init+0x2b4>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d007      	beq.n	8000f04 <HAL_GPIO_Init+0x1b8>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4a43      	ldr	r2, [pc, #268]	@ (8001004 <HAL_GPIO_Init+0x2b8>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d101      	bne.n	8000f00 <HAL_GPIO_Init+0x1b4>
 8000efc:	2302      	movs	r3, #2
 8000efe:	e004      	b.n	8000f0a <HAL_GPIO_Init+0x1be>
 8000f00:	2307      	movs	r3, #7
 8000f02:	e002      	b.n	8000f0a <HAL_GPIO_Init+0x1be>
 8000f04:	2301      	movs	r3, #1
 8000f06:	e000      	b.n	8000f0a <HAL_GPIO_Init+0x1be>
 8000f08:	2300      	movs	r3, #0
 8000f0a:	697a      	ldr	r2, [r7, #20]
 8000f0c:	f002 0203 	and.w	r2, r2, #3
 8000f10:	0092      	lsls	r2, r2, #2
 8000f12:	4093      	lsls	r3, r2
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f1a:	4938      	ldr	r1, [pc, #224]	@ (8000ffc <HAL_GPIO_Init+0x2b0>)
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	089b      	lsrs	r3, r3, #2
 8000f20:	3302      	adds	r3, #2
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f28:	4b37      	ldr	r3, [pc, #220]	@ (8001008 <HAL_GPIO_Init+0x2bc>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	43db      	mvns	r3, r3
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	4013      	ands	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d003      	beq.n	8000f4c <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f4c:	4a2e      	ldr	r2, [pc, #184]	@ (8001008 <HAL_GPIO_Init+0x2bc>)
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000f52:	4b2d      	ldr	r3, [pc, #180]	@ (8001008 <HAL_GPIO_Init+0x2bc>)
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d003      	beq.n	8000f76 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f76:	4a24      	ldr	r2, [pc, #144]	@ (8001008 <HAL_GPIO_Init+0x2bc>)
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8000f7c:	4b22      	ldr	r3, [pc, #136]	@ (8001008 <HAL_GPIO_Init+0x2bc>)
 8000f7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f82:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	43db      	mvns	r3, r3
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d003      	beq.n	8000fa2 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8000fa2:	4a19      	ldr	r2, [pc, #100]	@ (8001008 <HAL_GPIO_Init+0x2bc>)
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8000faa:	4b17      	ldr	r3, [pc, #92]	@ (8001008 <HAL_GPIO_Init+0x2bc>)
 8000fac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000fb0:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d003      	beq.n	8000fd0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8000fd0:	4a0d      	ldr	r2, [pc, #52]	@ (8001008 <HAL_GPIO_Init+0x2bc>)
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	f47f aeb7 	bne.w	8000d5c <HAL_GPIO_Init+0x10>
  }
}
 8000fee:	bf00      	nop
 8000ff0:	bf00      	nop
 8000ff2:	371c      	adds	r7, #28
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bc80      	pop	{r7}
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	40010000 	.word	0x40010000
 8001000:	48000400 	.word	0x48000400
 8001004:	48000800 	.word	0x48000800
 8001008:	58000800 	.word	0x58000800

0800100c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	460b      	mov	r3, r1
 8001016:	807b      	strh	r3, [r7, #2]
 8001018:	4613      	mov	r3, r2
 800101a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800101c:	787b      	ldrb	r3, [r7, #1]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d003      	beq.n	800102a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001022:	887a      	ldrh	r2, [r7, #2]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001028:	e002      	b.n	8001030 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800102a:	887a      	ldrh	r2, [r7, #2]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	bc80      	pop	{r7}
 8001038:	4770      	bx	lr
	...

0800103c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001040:	4b04      	ldr	r3, [pc, #16]	@ (8001054 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a03      	ldr	r2, [pc, #12]	@ (8001054 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001046:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800104a:	6013      	str	r3, [r2, #0]
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr
 8001054:	58000400 	.word	0x58000400

08001058 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	460b      	mov	r3, r1
 8001062:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d10c      	bne.n	8001084 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800106a:	4b13      	ldr	r3, [pc, #76]	@ (80010b8 <HAL_PWR_EnterSLEEPMode+0x60>)
 800106c:	695b      	ldr	r3, [r3, #20]
 800106e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001072:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001076:	d10d      	bne.n	8001094 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8001078:	f000 f83c 	bl	80010f4 <HAL_PWREx_DisableLowPowerRunMode>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d008      	beq.n	8001094 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 8001082:	e015      	b.n	80010b0 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8001084:	4b0c      	ldr	r3, [pc, #48]	@ (80010b8 <HAL_PWR_EnterSLEEPMode+0x60>)
 8001086:	695b      	ldr	r3, [r3, #20]
 8001088:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800108c:	2b00      	cmp	r3, #0
 800108e:	d101      	bne.n	8001094 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8001090:	f000 f822 	bl	80010d8 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001094:	4b09      	ldr	r3, [pc, #36]	@ (80010bc <HAL_PWR_EnterSLEEPMode+0x64>)
 8001096:	691b      	ldr	r3, [r3, #16]
 8001098:	4a08      	ldr	r2, [pc, #32]	@ (80010bc <HAL_PWR_EnterSLEEPMode+0x64>)
 800109a:	f023 0304 	bic.w	r3, r3, #4
 800109e:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80010a0:	78fb      	ldrb	r3, [r7, #3]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d101      	bne.n	80010aa <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80010a6:	bf30      	wfi
 80010a8:	e002      	b.n	80010b0 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80010aa:	bf40      	sev
    __WFE();
 80010ac:	bf20      	wfe
    __WFE();
 80010ae:	bf20      	wfe
  }
}
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	58000400 	.word	0x58000400
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80010c4:	4b03      	ldr	r3, [pc, #12]	@ (80010d4 <HAL_PWREx_GetVoltageRange+0x14>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bc80      	pop	{r7}
 80010d2:	4770      	bx	lr
 80010d4:	58000400 	.word	0x58000400

080010d8 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 80010dc:	4b04      	ldr	r3, [pc, #16]	@ (80010f0 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a03      	ldr	r2, [pc, #12]	@ (80010f0 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80010e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010e6:	6013      	str	r3, [r2, #0]
}
 80010e8:	bf00      	nop
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bc80      	pop	{r7}
 80010ee:	4770      	bx	lr
 80010f0:	58000400 	.word	0x58000400

080010f4 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 80010fa:	4b16      	ldr	r3, [pc, #88]	@ (8001154 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a15      	ldr	r2, [pc, #84]	@ (8001154 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8001100:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001104:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8001106:	4b14      	ldr	r3, [pc, #80]	@ (8001158 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2232      	movs	r2, #50	@ 0x32
 800110c:	fb02 f303 	mul.w	r3, r2, r3
 8001110:	4a12      	ldr	r2, [pc, #72]	@ (800115c <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8001112:	fba2 2303 	umull	r2, r3, r2, r3
 8001116:	0c9b      	lsrs	r3, r3, #18
 8001118:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800111a:	e002      	b.n	8001122 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	3b01      	subs	r3, #1
 8001120:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8001122:	4b0c      	ldr	r3, [pc, #48]	@ (8001154 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8001124:	695b      	ldr	r3, [r3, #20]
 8001126:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800112a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800112e:	d102      	bne.n	8001136 <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d1f2      	bne.n	800111c <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8001136:	4b07      	ldr	r3, [pc, #28]	@ (8001154 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8001138:	695b      	ldr	r3, [r3, #20]
 800113a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800113e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001142:	d101      	bne.n	8001148 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8001144:	2303      	movs	r3, #3
 8001146:	e000      	b.n	800114a <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8001148:	2300      	movs	r3, #0
}
 800114a:	4618      	mov	r0, r3
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	bc80      	pop	{r7}
 8001152:	4770      	bx	lr
 8001154:	58000400 	.word	0x58000400
 8001158:	20000000 	.word	0x20000000
 800115c:	431bde83 	.word	0x431bde83

08001160 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8001164:	4b06      	ldr	r3, [pc, #24]	@ (8001180 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800116c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001170:	d101      	bne.n	8001176 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8001172:	2301      	movs	r3, #1
 8001174:	e000      	b.n	8001178 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8001176:	2300      	movs	r3, #0
}
 8001178:	4618      	mov	r0, r3
 800117a:	46bd      	mov	sp, r7
 800117c:	bc80      	pop	{r7}
 800117e:	4770      	bx	lr
 8001180:	58000400 	.word	0x58000400

08001184 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001188:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001192:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001196:	6013      	str	r3, [r2, #0]
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	bc80      	pop	{r7}
 800119e:	4770      	bx	lr

080011a0 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80011a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80011ae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80011b2:	6013      	str	r3, [r2, #0]
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc80      	pop	{r7}
 80011ba:	4770      	bx	lr

080011bc <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80011c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80011ce:	d101      	bne.n	80011d4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80011d0:	2301      	movs	r3, #1
 80011d2:	e000      	b.n	80011d6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	46bd      	mov	sp, r7
 80011da:	bc80      	pop	{r7}
 80011dc:	4770      	bx	lr

080011de <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80011de:	b480      	push	{r7}
 80011e0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80011e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80011ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011f0:	6013      	str	r3, [r2, #0]
}
 80011f2:	bf00      	nop
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bc80      	pop	{r7}
 80011f8:	4770      	bx	lr

080011fa <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80011fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001208:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800120c:	6013      	str	r3, [r2, #0]
}
 800120e:	bf00      	nop
 8001210:	46bd      	mov	sp, r7
 8001212:	bc80      	pop	{r7}
 8001214:	4770      	bx	lr

08001216 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800121a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001224:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001228:	d101      	bne.n	800122e <LL_RCC_HSE_IsReady+0x18>
 800122a:	2301      	movs	r3, #1
 800122c:	e000      	b.n	8001230 <LL_RCC_HSE_IsReady+0x1a>
 800122e:	2300      	movs	r3, #0
}
 8001230:	4618      	mov	r0, r3
 8001232:	46bd      	mov	sp, r7
 8001234:	bc80      	pop	{r7}
 8001236:	4770      	bx	lr

08001238 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800123c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001246:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800124a:	6013      	str	r3, [r2, #0]
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	bc80      	pop	{r7}
 8001252:	4770      	bx	lr

08001254 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001258:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001262:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001266:	6013      	str	r3, [r2, #0]
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	bc80      	pop	{r7}
 800126e:	4770      	bx	lr

08001270 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001274:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800127e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001282:	d101      	bne.n	8001288 <LL_RCC_HSI_IsReady+0x18>
 8001284:	2301      	movs	r3, #1
 8001286:	e000      	b.n	800128a <LL_RCC_HSI_IsReady+0x1a>
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	46bd      	mov	sp, r7
 800128e:	bc80      	pop	{r7}
 8001290:	4770      	bx	lr

08001292 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001292:	b480      	push	{r7}
 8001294:	b083      	sub	sp, #12
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800129a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	061b      	lsls	r3, r3, #24
 80012a8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80012ac:	4313      	orrs	r3, r2
 80012ae:	604b      	str	r3, [r1, #4]
}
 80012b0:	bf00      	nop
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bc80      	pop	{r7}
 80012b8:	4770      	bx	lr

080012ba <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80012be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d101      	bne.n	80012d2 <LL_RCC_LSE_IsReady+0x18>
 80012ce:	2301      	movs	r3, #1
 80012d0:	e000      	b.n	80012d4 <LL_RCC_LSE_IsReady+0x1a>
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bc80      	pop	{r7}
 80012da:	4770      	bx	lr

080012dc <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80012e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80012e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bc80      	pop	{r7}
 80012fa:	4770      	bx	lr

080012fc <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001300:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001304:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001308:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800130c:	f023 0301 	bic.w	r3, r3, #1
 8001310:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	bc80      	pop	{r7}
 800131a:	4770      	bx	lr

0800131c <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8001320:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001324:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001328:	f003 0302 	and.w	r3, r3, #2
 800132c:	2b02      	cmp	r3, #2
 800132e:	d101      	bne.n	8001334 <LL_RCC_LSI_IsReady+0x18>
 8001330:	2301      	movs	r3, #1
 8001332:	e000      	b.n	8001336 <LL_RCC_LSI_IsReady+0x1a>
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	46bd      	mov	sp, r7
 800133a:	bc80      	pop	{r7}
 800133c:	4770      	bx	lr

0800133e <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800133e:	b480      	push	{r7}
 8001340:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001342:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800134c:	f043 0301 	orr.w	r3, r3, #1
 8001350:	6013      	str	r3, [r2, #0]
}
 8001352:	bf00      	nop
 8001354:	46bd      	mov	sp, r7
 8001356:	bc80      	pop	{r7}
 8001358:	4770      	bx	lr

0800135a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800135a:	b480      	push	{r7}
 800135c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800135e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001368:	f023 0301 	bic.w	r3, r3, #1
 800136c:	6013      	str	r3, [r2, #0]
}
 800136e:	bf00      	nop
 8001370:	46bd      	mov	sp, r7
 8001372:	bc80      	pop	{r7}
 8001374:	4770      	bx	lr

08001376 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001376:	b480      	push	{r7}
 8001378:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800137a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 0302 	and.w	r3, r3, #2
 8001384:	2b02      	cmp	r3, #2
 8001386:	d101      	bne.n	800138c <LL_RCC_MSI_IsReady+0x16>
 8001388:	2301      	movs	r3, #1
 800138a:	e000      	b.n	800138e <LL_RCC_MSI_IsReady+0x18>
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	46bd      	mov	sp, r7
 8001392:	bc80      	pop	{r7}
 8001394:	4770      	bx	lr

08001396 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800139a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 0308 	and.w	r3, r3, #8
 80013a4:	2b08      	cmp	r3, #8
 80013a6:	d101      	bne.n	80013ac <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80013a8:	2301      	movs	r3, #1
 80013aa:	e000      	b.n	80013ae <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bc80      	pop	{r7}
 80013b4:	4770      	bx	lr

080013b6 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80013b6:	b480      	push	{r7}
 80013b8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80013ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr

080013cc <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80013d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013d8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 80013dc:	4618      	mov	r0, r3
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr

080013e4 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80013ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	021b      	lsls	r3, r3, #8
 80013fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013fe:	4313      	orrs	r3, r2
 8001400:	604b      	str	r3, [r1, #4]
}
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr

0800140c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001414:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	f023 0203 	bic.w	r2, r3, #3
 800141e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4313      	orrs	r3, r2
 8001426:	608b      	str	r3, [r1, #8]
}
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	bc80      	pop	{r7}
 8001430:	4770      	bx	lr

08001432 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001436:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	f003 030c 	and.w	r3, r3, #12
}
 8001440:	4618      	mov	r0, r3
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr

08001448 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001450:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800145a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4313      	orrs	r3, r2
 8001462:	608b      	str	r3, [r1, #8]
}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	bc80      	pop	{r7}
 800146c:	4770      	bx	lr

0800146e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800146e:	b480      	push	{r7}
 8001470:	b083      	sub	sp, #12
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001476:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800147a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800147e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001482:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4313      	orrs	r3, r2
 800148a:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr

08001498 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80014a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014a4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80014a8:	f023 020f 	bic.w	r2, r3, #15
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	091b      	lsrs	r3, r3, #4
 80014b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80014b4:	4313      	orrs	r3, r2
 80014b6:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80014ba:	bf00      	nop
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	bc80      	pop	{r7}
 80014c2:	4770      	bx	lr

080014c4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80014cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80014d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4313      	orrs	r3, r2
 80014de:	608b      	str	r3, [r1, #8]
}
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bc80      	pop	{r7}
 80014e8:	4770      	bx	lr

080014ea <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80014ea:	b480      	push	{r7}
 80014ec:	b083      	sub	sp, #12
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80014f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80014fc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	4313      	orrs	r3, r2
 8001504:	608b      	str	r3, [r1, #8]
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	bc80      	pop	{r7}
 800150e:	4770      	bx	lr

08001510 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001514:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800151e:	4618      	mov	r0, r3
 8001520:	46bd      	mov	sp, r7
 8001522:	bc80      	pop	{r7}
 8001524:	4770      	bx	lr

08001526 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8001526:	b480      	push	{r7}
 8001528:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800152a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800152e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001532:	011b      	lsls	r3, r3, #4
 8001534:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001538:	4618      	mov	r0, r3
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr

08001540 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001544:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800154e:	4618      	mov	r0, r3
 8001550:	46bd      	mov	sp, r7
 8001552:	bc80      	pop	{r7}
 8001554:	4770      	bx	lr

08001556 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001556:	b480      	push	{r7}
 8001558:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800155a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8001564:	4618      	mov	r0, r3
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr

0800156c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001570:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800157a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800157e:	6013      	str	r3, [r2, #0]
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	bc80      	pop	{r7}
 8001586:	4770      	bx	lr

08001588 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800158c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001596:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800159a:	6013      	str	r3, [r2, #0]
}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	bc80      	pop	{r7}
 80015a2:	4770      	bx	lr

080015a4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80015a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80015b6:	d101      	bne.n	80015bc <LL_RCC_PLL_IsReady+0x18>
 80015b8:	2301      	movs	r3, #1
 80015ba:	e000      	b.n	80015be <LL_RCC_PLL_IsReady+0x1a>
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bc80      	pop	{r7}
 80015c4:	4770      	bx	lr

080015c6 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80015ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	0a1b      	lsrs	r3, r3, #8
 80015d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	46bd      	mov	sp, r7
 80015da:	bc80      	pop	{r7}
 80015dc:	4770      	bx	lr

080015de <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80015de:	b480      	push	{r7}
 80015e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80015e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bc80      	pop	{r7}
 80015f2:	4770      	bx	lr

080015f4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80015f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015fc:	68db      	ldr	r3, [r3, #12]
 80015fe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8001602:	4618      	mov	r0, r3
 8001604:	46bd      	mov	sp, r7
 8001606:	bc80      	pop	{r7}
 8001608:	4770      	bx	lr

0800160a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800160e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	f003 0303 	and.w	r3, r3, #3
}
 8001618:	4618      	mov	r0, r3
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr

08001620 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001624:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800162e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001632:	d101      	bne.n	8001638 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001634:	2301      	movs	r3, #1
 8001636:	e000      	b.n	800163a <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	46bd      	mov	sp, r7
 800163e:	bc80      	pop	{r7}
 8001640:	4770      	bx	lr

08001642 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001642:	b480      	push	{r7}
 8001644:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001646:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800164a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800164e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001652:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001656:	d101      	bne.n	800165c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001658:	2301      	movs	r3, #1
 800165a:	e000      	b.n	800165e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	46bd      	mov	sp, r7
 8001662:	bc80      	pop	{r7}
 8001664:	4770      	bx	lr

08001666 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001666:	b480      	push	{r7}
 8001668:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800166a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800166e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001672:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001676:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800167a:	d101      	bne.n	8001680 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800167c:	2301      	movs	r3, #1
 800167e:	e000      	b.n	8001682 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	46bd      	mov	sp, r7
 8001686:	bc80      	pop	{r7}
 8001688:	4770      	bx	lr

0800168a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800168a:	b480      	push	{r7}
 800168c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800168e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001698:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800169c:	d101      	bne.n	80016a2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800169e:	2301      	movs	r3, #1
 80016a0:	e000      	b.n	80016a4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80016a2:	2300      	movs	r3, #0
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bc80      	pop	{r7}
 80016aa:	4770      	bx	lr

080016ac <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80016b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80016ba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80016be:	d101      	bne.n	80016c4 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80016c0:	2301      	movs	r3, #1
 80016c2:	e000      	b.n	80016c6 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bc80      	pop	{r7}
 80016cc:	4770      	bx	lr
	...

080016d0 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b088      	sub	sp, #32
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d101      	bne.n	80016e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e36f      	b.n	8001dc2 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016e2:	f7ff fea6 	bl	8001432 <LL_RCC_GetSysClkSource>
 80016e6:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016e8:	f7ff ff8f 	bl	800160a <LL_RCC_PLL_GetMainSource>
 80016ec:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0320 	and.w	r3, r3, #32
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	f000 80c4 	beq.w	8001884 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d005      	beq.n	800170e <HAL_RCC_OscConfig+0x3e>
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	2b0c      	cmp	r3, #12
 8001706:	d176      	bne.n	80017f6 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d173      	bne.n	80017f6 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a1b      	ldr	r3, [r3, #32]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d101      	bne.n	800171a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e353      	b.n	8001dc2 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800171e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0308 	and.w	r3, r3, #8
 8001728:	2b00      	cmp	r3, #0
 800172a:	d005      	beq.n	8001738 <HAL_RCC_OscConfig+0x68>
 800172c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001736:	e006      	b.n	8001746 <HAL_RCC_OscConfig+0x76>
 8001738:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800173c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001740:	091b      	lsrs	r3, r3, #4
 8001742:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001746:	4293      	cmp	r3, r2
 8001748:	d222      	bcs.n	8001790 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800174e:	4618      	mov	r0, r3
 8001750:	f000 fd5a 	bl	8002208 <RCC_SetFlashLatencyFromMSIRange>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e331      	b.n	8001dc2 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800175e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001768:	f043 0308 	orr.w	r3, r3, #8
 800176c:	6013      	str	r3, [r2, #0]
 800176e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800177c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001780:	4313      	orrs	r3, r2
 8001782:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff fe2b 	bl	80013e4 <LL_RCC_MSI_SetCalibTrimming>
 800178e:	e021      	b.n	80017d4 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001790:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800179a:	f043 0308 	orr.w	r3, r3, #8
 800179e:	6013      	str	r3, [r2, #0]
 80017a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80017b2:	4313      	orrs	r3, r2
 80017b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff fe12 	bl	80013e4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017c4:	4618      	mov	r0, r3
 80017c6:	f000 fd1f 	bl	8002208 <RCC_SetFlashLatencyFromMSIRange>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e2f6      	b.n	8001dc2 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80017d4:	f000 fce0 	bl	8002198 <HAL_RCC_GetHCLKFreq>
 80017d8:	4603      	mov	r3, r0
 80017da:	4aa7      	ldr	r2, [pc, #668]	@ (8001a78 <HAL_RCC_OscConfig+0x3a8>)
 80017dc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 80017de:	4ba7      	ldr	r3, [pc, #668]	@ (8001a7c <HAL_RCC_OscConfig+0x3ac>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff f95e 	bl	8000aa4 <HAL_InitTick>
 80017e8:	4603      	mov	r3, r0
 80017ea:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80017ec:	7cfb      	ldrb	r3, [r7, #19]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d047      	beq.n	8001882 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 80017f2:	7cfb      	ldrb	r3, [r7, #19]
 80017f4:	e2e5      	b.n	8001dc2 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a1b      	ldr	r3, [r3, #32]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d02c      	beq.n	8001858 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80017fe:	f7ff fd9e 	bl	800133e <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001802:	f7ff f99b 	bl	8000b3c <HAL_GetTick>
 8001806:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001808:	e008      	b.n	800181c <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800180a:	f7ff f997 	bl	8000b3c <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	2b02      	cmp	r3, #2
 8001816:	d901      	bls.n	800181c <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e2d2      	b.n	8001dc2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 800181c:	f7ff fdab 	bl	8001376 <LL_RCC_MSI_IsReady>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d0f1      	beq.n	800180a <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001826:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001830:	f043 0308 	orr.w	r3, r3, #8
 8001834:	6013      	str	r3, [r2, #0]
 8001836:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001844:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001848:	4313      	orrs	r3, r2
 800184a:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff fdc7 	bl	80013e4 <LL_RCC_MSI_SetCalibTrimming>
 8001856:	e015      	b.n	8001884 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001858:	f7ff fd7f 	bl	800135a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800185c:	f7ff f96e 	bl	8000b3c <HAL_GetTick>
 8001860:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001864:	f7ff f96a 	bl	8000b3c <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e2a5      	b.n	8001dc2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001876:	f7ff fd7e 	bl	8001376 <LL_RCC_MSI_IsReady>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1f1      	bne.n	8001864 <HAL_RCC_OscConfig+0x194>
 8001880:	e000      	b.n	8001884 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001882:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0301 	and.w	r3, r3, #1
 800188c:	2b00      	cmp	r3, #0
 800188e:	d058      	beq.n	8001942 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	2b08      	cmp	r3, #8
 8001894:	d005      	beq.n	80018a2 <HAL_RCC_OscConfig+0x1d2>
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	2b0c      	cmp	r3, #12
 800189a:	d108      	bne.n	80018ae <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	2b03      	cmp	r3, #3
 80018a0:	d105      	bne.n	80018ae <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d14b      	bne.n	8001942 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e289      	b.n	8001dc2 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80018ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80018c0:	4313      	orrs	r3, r2
 80018c2:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018cc:	d102      	bne.n	80018d4 <HAL_RCC_OscConfig+0x204>
 80018ce:	f7ff fc86 	bl	80011de <LL_RCC_HSE_Enable>
 80018d2:	e00d      	b.n	80018f0 <HAL_RCC_OscConfig+0x220>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 80018dc:	d104      	bne.n	80018e8 <HAL_RCC_OscConfig+0x218>
 80018de:	f7ff fc51 	bl	8001184 <LL_RCC_HSE_EnableTcxo>
 80018e2:	f7ff fc7c 	bl	80011de <LL_RCC_HSE_Enable>
 80018e6:	e003      	b.n	80018f0 <HAL_RCC_OscConfig+0x220>
 80018e8:	f7ff fc87 	bl	80011fa <LL_RCC_HSE_Disable>
 80018ec:	f7ff fc58 	bl	80011a0 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d012      	beq.n	800191e <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f8:	f7ff f920 	bl	8000b3c <HAL_GetTick>
 80018fc:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001900:	f7ff f91c 	bl	8000b3c <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b64      	cmp	r3, #100	@ 0x64
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e257      	b.n	8001dc2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001912:	f7ff fc80 	bl	8001216 <LL_RCC_HSE_IsReady>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d0f1      	beq.n	8001900 <HAL_RCC_OscConfig+0x230>
 800191c:	e011      	b.n	8001942 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800191e:	f7ff f90d 	bl	8000b3c <HAL_GetTick>
 8001922:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001924:	e008      	b.n	8001938 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001926:	f7ff f909 	bl	8000b3c <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	2b64      	cmp	r3, #100	@ 0x64
 8001932:	d901      	bls.n	8001938 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e244      	b.n	8001dc2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001938:	f7ff fc6d 	bl	8001216 <LL_RCC_HSE_IsReady>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d1f1      	bne.n	8001926 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d046      	beq.n	80019dc <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	2b04      	cmp	r3, #4
 8001952:	d005      	beq.n	8001960 <HAL_RCC_OscConfig+0x290>
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	2b0c      	cmp	r3, #12
 8001958:	d10e      	bne.n	8001978 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	2b02      	cmp	r3, #2
 800195e:	d10b      	bne.n	8001978 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	691b      	ldr	r3, [r3, #16]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d101      	bne.n	800196c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e22a      	b.n	8001dc2 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	695b      	ldr	r3, [r3, #20]
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff fc8e 	bl	8001292 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001976:	e031      	b.n	80019dc <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	691b      	ldr	r3, [r3, #16]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d019      	beq.n	80019b4 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001980:	f7ff fc5a 	bl	8001238 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001984:	f7ff f8da 	bl	8000b3c <HAL_GetTick>
 8001988:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800198c:	f7ff f8d6 	bl	8000b3c <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e211      	b.n	8001dc2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 800199e:	f7ff fc67 	bl	8001270 <LL_RCC_HSI_IsReady>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d0f1      	beq.n	800198c <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	695b      	ldr	r3, [r3, #20]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff fc70 	bl	8001292 <LL_RCC_HSI_SetCalibTrimming>
 80019b2:	e013      	b.n	80019dc <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019b4:	f7ff fc4e 	bl	8001254 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b8:	f7ff f8c0 	bl	8000b3c <HAL_GetTick>
 80019bc:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019c0:	f7ff f8bc 	bl	8000b3c <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e1f7      	b.n	8001dc2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 80019d2:	f7ff fc4d 	bl	8001270 <LL_RCC_HSI_IsReady>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d1f1      	bne.n	80019c0 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0308 	and.w	r3, r3, #8
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d06e      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d056      	beq.n	8001a9e <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 80019f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019f8:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	69da      	ldr	r2, [r3, #28]
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	f003 0310 	and.w	r3, r3, #16
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d031      	beq.n	8001a6c <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d006      	beq.n	8001a20 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d101      	bne.n	8001a20 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e1d0      	b.n	8001dc2 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d013      	beq.n	8001a52 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8001a2a:	f7ff fc67 	bl	80012fc <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a2e:	f7ff f885 	bl	8000b3c <HAL_GetTick>
 8001a32:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8001a34:	e008      	b.n	8001a48 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a36:	f7ff f881 	bl	8000b3c <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b11      	cmp	r3, #17
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e1bc      	b.n	8001dc2 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8001a48:	f7ff fc68 	bl	800131c <LL_RCC_LSI_IsReady>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1f1      	bne.n	8001a36 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8001a52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a5a:	f023 0210 	bic.w	r2, r3, #16
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	69db      	ldr	r3, [r3, #28]
 8001a62:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a66:	4313      	orrs	r3, r2
 8001a68:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a6c:	f7ff fc36 	bl	80012dc <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a70:	f7ff f864 	bl	8000b3c <HAL_GetTick>
 8001a74:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8001a76:	e00c      	b.n	8001a92 <HAL_RCC_OscConfig+0x3c2>
 8001a78:	20000000 	.word	0x20000000
 8001a7c:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a80:	f7ff f85c 	bl	8000b3c <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b11      	cmp	r3, #17
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e197      	b.n	8001dc2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8001a92:	f7ff fc43 	bl	800131c <LL_RCC_LSI_IsReady>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d0f1      	beq.n	8001a80 <HAL_RCC_OscConfig+0x3b0>
 8001a9c:	e013      	b.n	8001ac6 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a9e:	f7ff fc2d 	bl	80012fc <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aa2:	f7ff f84b 	bl	8000b3c <HAL_GetTick>
 8001aa6:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8001aa8:	e008      	b.n	8001abc <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aaa:	f7ff f847 	bl	8000b3c <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b11      	cmp	r3, #17
 8001ab6:	d901      	bls.n	8001abc <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e182      	b.n	8001dc2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8001abc:	f7ff fc2e 	bl	800131c <LL_RCC_LSI_IsReady>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d1f1      	bne.n	8001aaa <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0304 	and.w	r3, r3, #4
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f000 80d8 	beq.w	8001c84 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001ad4:	f7ff fb44 	bl	8001160 <LL_PWR_IsEnabledBkUpAccess>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d113      	bne.n	8001b06 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001ade:	f7ff faad 	bl	800103c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ae2:	f7ff f82b 	bl	8000b3c <HAL_GetTick>
 8001ae6:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001ae8:	e008      	b.n	8001afc <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aea:	f7ff f827 	bl	8000b3c <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e162      	b.n	8001dc2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001afc:	f7ff fb30 	bl	8001160 <LL_PWR_IsEnabledBkUpAccess>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d0f1      	beq.n	8001aea <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d07b      	beq.n	8001c06 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	2b85      	cmp	r3, #133	@ 0x85
 8001b14:	d003      	beq.n	8001b1e <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	2b05      	cmp	r3, #5
 8001b1c:	d109      	bne.n	8001b32 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001b1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b26:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001b2a:	f043 0304 	orr.w	r3, r3, #4
 8001b2e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b32:	f7ff f803 	bl	8000b3c <HAL_GetTick>
 8001b36:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001b38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b40:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001b44:	f043 0301 	orr.w	r3, r3, #1
 8001b48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001b4c:	e00a      	b.n	8001b64 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b4e:	f7fe fff5 	bl	8000b3c <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d901      	bls.n	8001b64 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e12e      	b.n	8001dc2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001b64:	f7ff fba9 	bl	80012ba <LL_RCC_LSE_IsReady>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d0ef      	beq.n	8001b4e <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	2b81      	cmp	r3, #129	@ 0x81
 8001b74:	d003      	beq.n	8001b7e <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	2b85      	cmp	r3, #133	@ 0x85
 8001b7c:	d121      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7e:	f7fe ffdd 	bl	8000b3c <HAL_GetTick>
 8001b82:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001b84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b8c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001b90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001b98:	e00a      	b.n	8001bb0 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b9a:	f7fe ffcf 	bl	8000b3c <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e108      	b.n	8001dc2 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001bb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d0ec      	beq.n	8001b9a <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001bc0:	e060      	b.n	8001c84 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc2:	f7fe ffbb 	bl	8000b3c <HAL_GetTick>
 8001bc6:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001bc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bd0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001bd4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001bd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001bdc:	e00a      	b.n	8001bf4 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bde:	f7fe ffad 	bl	8000b3c <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d901      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e0e6      	b.n	8001dc2 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001bf4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bfc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d1ec      	bne.n	8001bde <HAL_RCC_OscConfig+0x50e>
 8001c04:	e03e      	b.n	8001c84 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c06:	f7fe ff99 	bl	8000b3c <HAL_GetTick>
 8001c0a:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001c0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c14:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c18:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001c1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001c20:	e00a      	b.n	8001c38 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c22:	f7fe ff8b 	bl	8000b3c <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d901      	bls.n	8001c38 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e0c4      	b.n	8001dc2 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001c38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d1ec      	bne.n	8001c22 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c48:	f7fe ff78 	bl	8000b3c <HAL_GetTick>
 8001c4c:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001c4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c56:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c5a:	f023 0301 	bic.w	r3, r3, #1
 8001c5e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8001c62:	e00a      	b.n	8001c7a <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c64:	f7fe ff6a 	bl	8000b3c <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e0a3      	b.n	8001dc2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8001c7a:	f7ff fb1e 	bl	80012ba <LL_RCC_LSE_IsReady>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d1ef      	bne.n	8001c64 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	f000 8099 	beq.w	8001dc0 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	2b0c      	cmp	r3, #12
 8001c92:	d06c      	beq.n	8001d6e <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d14b      	bne.n	8001d34 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c9c:	f7ff fc74 	bl	8001588 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca0:	f7fe ff4c 	bl	8000b3c <HAL_GetTick>
 8001ca4:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ca8:	f7fe ff48 	bl	8000b3c <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b0a      	cmp	r3, #10
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e083      	b.n	8001dc2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001cba:	f7ff fc73 	bl	80015a4 <LL_RCC_PLL_IsReady>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d1f1      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cc8:	68da      	ldr	r2, [r3, #12]
 8001cca:	4b40      	ldr	r3, [pc, #256]	@ (8001dcc <HAL_RCC_OscConfig+0x6fc>)
 8001ccc:	4013      	ands	r3, r2
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001cd6:	4311      	orrs	r1, r2
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001cdc:	0212      	lsls	r2, r2, #8
 8001cde:	4311      	orrs	r1, r2
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001ce4:	4311      	orrs	r1, r2
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001cea:	4311      	orrs	r1, r2
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cfa:	f7ff fc37 	bl	800156c <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cfe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d0c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0e:	f7fe ff15 	bl	8000b3c <HAL_GetTick>
 8001d12:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8001d14:	e008      	b.n	8001d28 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d16:	f7fe ff11 	bl	8000b3c <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b0a      	cmp	r3, #10
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e04c      	b.n	8001dc2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8001d28:	f7ff fc3c 	bl	80015a4 <LL_RCC_PLL_IsReady>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d0f1      	beq.n	8001d16 <HAL_RCC_OscConfig+0x646>
 8001d32:	e045      	b.n	8001dc0 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d34:	f7ff fc28 	bl	8001588 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d38:	f7fe ff00 	bl	8000b3c <HAL_GetTick>
 8001d3c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d40:	f7fe fefc 	bl	8000b3c <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b0a      	cmp	r3, #10
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e037      	b.n	8001dc2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001d52:	f7ff fc27 	bl	80015a4 <LL_RCC_PLL_IsReady>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d1f1      	bne.n	8001d40 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8001d5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d60:	68da      	ldr	r2, [r3, #12]
 8001d62:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d66:	4b1a      	ldr	r3, [pc, #104]	@ (8001dd0 <HAL_RCC_OscConfig+0x700>)
 8001d68:	4013      	ands	r3, r2
 8001d6a:	60cb      	str	r3, [r1, #12]
 8001d6c:	e028      	b.n	8001dc0 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d101      	bne.n	8001d7a <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e023      	b.n	8001dc2 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	f003 0203 	and.w	r2, r3, #3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d115      	bne.n	8001dbc <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d10e      	bne.n	8001dbc <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001da8:	021b      	lsls	r3, r3, #8
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d106      	bne.n	8001dbc <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d001      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e000      	b.n	8001dc2 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3720      	adds	r7, #32
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	11c1808c 	.word	0x11c1808c
 8001dd0:	eefefffc 	.word	0xeefefffc

08001dd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d101      	bne.n	8001de8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e12c      	b.n	8002042 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001de8:	4b98      	ldr	r3, [pc, #608]	@ (800204c <HAL_RCC_ClockConfig+0x278>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0307 	and.w	r3, r3, #7
 8001df0:	683a      	ldr	r2, [r7, #0]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d91b      	bls.n	8001e2e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001df6:	4b95      	ldr	r3, [pc, #596]	@ (800204c <HAL_RCC_ClockConfig+0x278>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f023 0207 	bic.w	r2, r3, #7
 8001dfe:	4993      	ldr	r1, [pc, #588]	@ (800204c <HAL_RCC_ClockConfig+0x278>)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e06:	f7fe fe99 	bl	8000b3c <HAL_GetTick>
 8001e0a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e0c:	e008      	b.n	8001e20 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001e0e:	f7fe fe95 	bl	8000b3c <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e110      	b.n	8002042 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e20:	4b8a      	ldr	r3, [pc, #552]	@ (800204c <HAL_RCC_ClockConfig+0x278>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0307 	and.w	r3, r3, #7
 8001e28:	683a      	ldr	r2, [r7, #0]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d1ef      	bne.n	8001e0e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d016      	beq.n	8001e68 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff fb02 	bl	8001448 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001e44:	f7fe fe7a 	bl	8000b3c <HAL_GetTick>
 8001e48:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001e4c:	f7fe fe76 	bl	8000b3c <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e0f1      	b.n	8002042 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001e5e:	f7ff fbdf 	bl	8001620 <LL_RCC_IsActiveFlag_HPRE>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d0f1      	beq.n	8001e4c <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0320 	and.w	r3, r3, #32
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d016      	beq.n	8001ea2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	695b      	ldr	r3, [r3, #20]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff faf8 	bl	800146e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001e7e:	f7fe fe5d 	bl	8000b3c <HAL_GetTick>
 8001e82:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001e84:	e008      	b.n	8001e98 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001e86:	f7fe fe59 	bl	8000b3c <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e0d4      	b.n	8002042 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001e98:	f7ff fbd3 	bl	8001642 <LL_RCC_IsActiveFlag_C2HPRE>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d0f1      	beq.n	8001e86 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d016      	beq.n	8001edc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7ff faf0 	bl	8001498 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001eb8:	f7fe fe40 	bl	8000b3c <HAL_GetTick>
 8001ebc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001ec0:	f7fe fe3c 	bl	8000b3c <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e0b7      	b.n	8002042 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001ed2:	f7ff fbc8 	bl	8001666 <LL_RCC_IsActiveFlag_SHDHPRE>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d0f1      	beq.n	8001ec0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0304 	and.w	r3, r3, #4
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d016      	beq.n	8001f16 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff fae9 	bl	80014c4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001ef2:	f7fe fe23 	bl	8000b3c <HAL_GetTick>
 8001ef6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001ef8:	e008      	b.n	8001f0c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001efa:	f7fe fe1f 	bl	8000b3c <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d901      	bls.n	8001f0c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e09a      	b.n	8002042 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001f0c:	f7ff fbbd 	bl	800168a <LL_RCC_IsActiveFlag_PPRE1>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d0f1      	beq.n	8001efa <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0308 	and.w	r3, r3, #8
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d017      	beq.n	8001f52 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff fade 	bl	80014ea <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001f2e:	f7fe fe05 	bl	8000b3c <HAL_GetTick>
 8001f32:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001f34:	e008      	b.n	8001f48 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001f36:	f7fe fe01 	bl	8000b3c <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e07c      	b.n	8002042 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001f48:	f7ff fbb0 	bl	80016ac <LL_RCC_IsActiveFlag_PPRE2>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d0f1      	beq.n	8001f36 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d043      	beq.n	8001fe6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d106      	bne.n	8001f74 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8001f66:	f7ff f956 	bl	8001216 <LL_RCC_HSE_IsReady>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d11e      	bne.n	8001fae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e066      	b.n	8002042 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	2b03      	cmp	r3, #3
 8001f7a:	d106      	bne.n	8001f8a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8001f7c:	f7ff fb12 	bl	80015a4 <LL_RCC_PLL_IsReady>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d113      	bne.n	8001fae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e05b      	b.n	8002042 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d106      	bne.n	8001fa0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8001f92:	f7ff f9f0 	bl	8001376 <LL_RCC_MSI_IsReady>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d108      	bne.n	8001fae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e050      	b.n	8002042 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8001fa0:	f7ff f966 	bl	8001270 <LL_RCC_HSI_IsReady>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e049      	b.n	8002042 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff fa2a 	bl	800140c <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fb8:	f7fe fdc0 	bl	8000b3c <HAL_GetTick>
 8001fbc:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fbe:	e00a      	b.n	8001fd6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fc0:	f7fe fdbc 	bl	8000b3c <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e035      	b.n	8002042 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fd6:	f7ff fa2c 	bl	8001432 <LL_RCC_GetSysClkSource>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d1ec      	bne.n	8001fc0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fe6:	4b19      	ldr	r3, [pc, #100]	@ (800204c <HAL_RCC_ClockConfig+0x278>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0307 	and.w	r3, r3, #7
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d21b      	bcs.n	800202c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff4:	4b15      	ldr	r3, [pc, #84]	@ (800204c <HAL_RCC_ClockConfig+0x278>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f023 0207 	bic.w	r2, r3, #7
 8001ffc:	4913      	ldr	r1, [pc, #76]	@ (800204c <HAL_RCC_ClockConfig+0x278>)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	4313      	orrs	r3, r2
 8002002:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002004:	f7fe fd9a 	bl	8000b3c <HAL_GetTick>
 8002008:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800200a:	e008      	b.n	800201e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800200c:	f7fe fd96 	bl	8000b3c <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d901      	bls.n	800201e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e011      	b.n	8002042 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800201e:	4b0b      	ldr	r3, [pc, #44]	@ (800204c <HAL_RCC_ClockConfig+0x278>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0307 	and.w	r3, r3, #7
 8002026:	683a      	ldr	r2, [r7, #0]
 8002028:	429a      	cmp	r2, r3
 800202a:	d1ef      	bne.n	800200c <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800202c:	f000 f8b4 	bl	8002198 <HAL_RCC_GetHCLKFreq>
 8002030:	4603      	mov	r3, r0
 8002032:	4a07      	ldr	r2, [pc, #28]	@ (8002050 <HAL_RCC_ClockConfig+0x27c>)
 8002034:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8002036:	4b07      	ldr	r3, [pc, #28]	@ (8002054 <HAL_RCC_ClockConfig+0x280>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f7fe fd32 	bl	8000aa4 <HAL_InitTick>
 8002040:	4603      	mov	r3, r0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	58004000 	.word	0x58004000
 8002050:	20000000 	.word	0x20000000
 8002054:	20000004 	.word	0x20000004

08002058 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002058:	b590      	push	{r4, r7, lr}
 800205a:	b087      	sub	sp, #28
 800205c:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800205e:	2300      	movs	r3, #0
 8002060:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8002062:	2300      	movs	r3, #0
 8002064:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002066:	f7ff f9e4 	bl	8001432 <LL_RCC_GetSysClkSource>
 800206a:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800206c:	f7ff facd 	bl	800160a <LL_RCC_PLL_GetMainSource>
 8002070:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d005      	beq.n	8002084 <HAL_RCC_GetSysClockFreq+0x2c>
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	2b0c      	cmp	r3, #12
 800207c:	d139      	bne.n	80020f2 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d136      	bne.n	80020f2 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002084:	f7ff f987 	bl	8001396 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d115      	bne.n	80020ba <HAL_RCC_GetSysClockFreq+0x62>
 800208e:	f7ff f982 	bl	8001396 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002092:	4603      	mov	r3, r0
 8002094:	2b01      	cmp	r3, #1
 8002096:	d106      	bne.n	80020a6 <HAL_RCC_GetSysClockFreq+0x4e>
 8002098:	f7ff f98d 	bl	80013b6 <LL_RCC_MSI_GetRange>
 800209c:	4603      	mov	r3, r0
 800209e:	0a1b      	lsrs	r3, r3, #8
 80020a0:	f003 030f 	and.w	r3, r3, #15
 80020a4:	e005      	b.n	80020b2 <HAL_RCC_GetSysClockFreq+0x5a>
 80020a6:	f7ff f991 	bl	80013cc <LL_RCC_MSI_GetRangeAfterStandby>
 80020aa:	4603      	mov	r3, r0
 80020ac:	0a1b      	lsrs	r3, r3, #8
 80020ae:	f003 030f 	and.w	r3, r3, #15
 80020b2:	4a36      	ldr	r2, [pc, #216]	@ (800218c <HAL_RCC_GetSysClockFreq+0x134>)
 80020b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020b8:	e014      	b.n	80020e4 <HAL_RCC_GetSysClockFreq+0x8c>
 80020ba:	f7ff f96c 	bl	8001396 <LL_RCC_MSI_IsEnabledRangeSelect>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d106      	bne.n	80020d2 <HAL_RCC_GetSysClockFreq+0x7a>
 80020c4:	f7ff f977 	bl	80013b6 <LL_RCC_MSI_GetRange>
 80020c8:	4603      	mov	r3, r0
 80020ca:	091b      	lsrs	r3, r3, #4
 80020cc:	f003 030f 	and.w	r3, r3, #15
 80020d0:	e005      	b.n	80020de <HAL_RCC_GetSysClockFreq+0x86>
 80020d2:	f7ff f97b 	bl	80013cc <LL_RCC_MSI_GetRangeAfterStandby>
 80020d6:	4603      	mov	r3, r0
 80020d8:	091b      	lsrs	r3, r3, #4
 80020da:	f003 030f 	and.w	r3, r3, #15
 80020de:	4a2b      	ldr	r2, [pc, #172]	@ (800218c <HAL_RCC_GetSysClockFreq+0x134>)
 80020e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020e4:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d115      	bne.n	8002118 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80020f0:	e012      	b.n	8002118 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	2b04      	cmp	r3, #4
 80020f6:	d102      	bne.n	80020fe <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80020f8:	4b25      	ldr	r3, [pc, #148]	@ (8002190 <HAL_RCC_GetSysClockFreq+0x138>)
 80020fa:	617b      	str	r3, [r7, #20]
 80020fc:	e00c      	b.n	8002118 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	2b08      	cmp	r3, #8
 8002102:	d109      	bne.n	8002118 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002104:	f7ff f85a 	bl	80011bc <LL_RCC_HSE_IsEnabledDiv2>
 8002108:	4603      	mov	r3, r0
 800210a:	2b01      	cmp	r3, #1
 800210c:	d102      	bne.n	8002114 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800210e:	4b20      	ldr	r3, [pc, #128]	@ (8002190 <HAL_RCC_GetSysClockFreq+0x138>)
 8002110:	617b      	str	r3, [r7, #20]
 8002112:	e001      	b.n	8002118 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002114:	4b1f      	ldr	r3, [pc, #124]	@ (8002194 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002116:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002118:	f7ff f98b 	bl	8001432 <LL_RCC_GetSysClkSource>
 800211c:	4603      	mov	r3, r0
 800211e:	2b0c      	cmp	r3, #12
 8002120:	d12f      	bne.n	8002182 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002122:	f7ff fa72 	bl	800160a <LL_RCC_PLL_GetMainSource>
 8002126:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2b02      	cmp	r3, #2
 800212c:	d003      	beq.n	8002136 <HAL_RCC_GetSysClockFreq+0xde>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2b03      	cmp	r3, #3
 8002132:	d003      	beq.n	800213c <HAL_RCC_GetSysClockFreq+0xe4>
 8002134:	e00d      	b.n	8002152 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002136:	4b16      	ldr	r3, [pc, #88]	@ (8002190 <HAL_RCC_GetSysClockFreq+0x138>)
 8002138:	60fb      	str	r3, [r7, #12]
        break;
 800213a:	e00d      	b.n	8002158 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800213c:	f7ff f83e 	bl	80011bc <LL_RCC_HSE_IsEnabledDiv2>
 8002140:	4603      	mov	r3, r0
 8002142:	2b01      	cmp	r3, #1
 8002144:	d102      	bne.n	800214c <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002146:	4b12      	ldr	r3, [pc, #72]	@ (8002190 <HAL_RCC_GetSysClockFreq+0x138>)
 8002148:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800214a:	e005      	b.n	8002158 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 800214c:	4b11      	ldr	r3, [pc, #68]	@ (8002194 <HAL_RCC_GetSysClockFreq+0x13c>)
 800214e:	60fb      	str	r3, [r7, #12]
        break;
 8002150:	e002      	b.n	8002158 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	60fb      	str	r3, [r7, #12]
        break;
 8002156:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002158:	f7ff fa35 	bl	80015c6 <LL_RCC_PLL_GetN>
 800215c:	4602      	mov	r2, r0
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	fb03 f402 	mul.w	r4, r3, r2
 8002164:	f7ff fa46 	bl	80015f4 <LL_RCC_PLL_GetDivider>
 8002168:	4603      	mov	r3, r0
 800216a:	091b      	lsrs	r3, r3, #4
 800216c:	3301      	adds	r3, #1
 800216e:	fbb4 f4f3 	udiv	r4, r4, r3
 8002172:	f7ff fa34 	bl	80015de <LL_RCC_PLL_GetR>
 8002176:	4603      	mov	r3, r0
 8002178:	0f5b      	lsrs	r3, r3, #29
 800217a:	3301      	adds	r3, #1
 800217c:	fbb4 f3f3 	udiv	r3, r4, r3
 8002180:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002182:	697b      	ldr	r3, [r7, #20]
}
 8002184:	4618      	mov	r0, r3
 8002186:	371c      	adds	r7, #28
 8002188:	46bd      	mov	sp, r7
 800218a:	bd90      	pop	{r4, r7, pc}
 800218c:	08003e68 	.word	0x08003e68
 8002190:	00f42400 	.word	0x00f42400
 8002194:	01e84800 	.word	0x01e84800

08002198 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002198:	b598      	push	{r3, r4, r7, lr}
 800219a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800219c:	f7ff ff5c 	bl	8002058 <HAL_RCC_GetSysClockFreq>
 80021a0:	4604      	mov	r4, r0
 80021a2:	f7ff f9b5 	bl	8001510 <LL_RCC_GetAHBPrescaler>
 80021a6:	4603      	mov	r3, r0
 80021a8:	091b      	lsrs	r3, r3, #4
 80021aa:	f003 030f 	and.w	r3, r3, #15
 80021ae:	4a03      	ldr	r2, [pc, #12]	@ (80021bc <HAL_RCC_GetHCLKFreq+0x24>)
 80021b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021b4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	bd98      	pop	{r3, r4, r7, pc}
 80021bc:	08003e08 	.word	0x08003e08

080021c0 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021c0:	b598      	push	{r3, r4, r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80021c4:	f7ff ffe8 	bl	8002198 <HAL_RCC_GetHCLKFreq>
 80021c8:	4604      	mov	r4, r0
 80021ca:	f7ff f9b9 	bl	8001540 <LL_RCC_GetAPB1Prescaler>
 80021ce:	4603      	mov	r3, r0
 80021d0:	0a1b      	lsrs	r3, r3, #8
 80021d2:	4a03      	ldr	r2, [pc, #12]	@ (80021e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021d8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80021dc:	4618      	mov	r0, r3
 80021de:	bd98      	pop	{r3, r4, r7, pc}
 80021e0:	08003e48 	.word	0x08003e48

080021e4 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021e4:	b598      	push	{r3, r4, r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80021e8:	f7ff ffd6 	bl	8002198 <HAL_RCC_GetHCLKFreq>
 80021ec:	4604      	mov	r4, r0
 80021ee:	f7ff f9b2 	bl	8001556 <LL_RCC_GetAPB2Prescaler>
 80021f2:	4603      	mov	r3, r0
 80021f4:	0adb      	lsrs	r3, r3, #11
 80021f6:	4a03      	ldr	r2, [pc, #12]	@ (8002204 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021fc:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002200:	4618      	mov	r0, r3
 8002202:	bd98      	pop	{r3, r4, r7, pc}
 8002204:	08003e48 	.word	0x08003e48

08002208 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002208:	b590      	push	{r4, r7, lr}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	091b      	lsrs	r3, r3, #4
 8002214:	f003 030f 	and.w	r3, r3, #15
 8002218:	4a10      	ldr	r2, [pc, #64]	@ (800225c <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800221a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800221e:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8002220:	f7ff f981 	bl	8001526 <LL_RCC_GetAHB3Prescaler>
 8002224:	4603      	mov	r3, r0
 8002226:	091b      	lsrs	r3, r3, #4
 8002228:	f003 030f 	and.w	r3, r3, #15
 800222c:	4a0c      	ldr	r2, [pc, #48]	@ (8002260 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800222e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	fbb2 f3f3 	udiv	r3, r2, r3
 8002238:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	4a09      	ldr	r2, [pc, #36]	@ (8002264 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800223e:	fba2 2303 	umull	r2, r3, r2, r3
 8002242:	0c9c      	lsrs	r4, r3, #18
 8002244:	f7fe ff3c 	bl	80010c0 <HAL_PWREx_GetVoltageRange>
 8002248:	4603      	mov	r3, r0
 800224a:	4619      	mov	r1, r3
 800224c:	4620      	mov	r0, r4
 800224e:	f000 f80b 	bl	8002268 <RCC_SetFlashLatency>
 8002252:	4603      	mov	r3, r0
}
 8002254:	4618      	mov	r0, r3
 8002256:	3714      	adds	r7, #20
 8002258:	46bd      	mov	sp, r7
 800225a:	bd90      	pop	{r4, r7, pc}
 800225c:	08003e68 	.word	0x08003e68
 8002260:	08003e08 	.word	0x08003e08
 8002264:	431bde83 	.word	0x431bde83

08002268 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b08e      	sub	sp, #56	@ 0x38
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8002272:	4a3a      	ldr	r2, [pc, #232]	@ (800235c <RCC_SetFlashLatency+0xf4>)
 8002274:	f107 0320 	add.w	r3, r7, #32
 8002278:	e892 0003 	ldmia.w	r2, {r0, r1}
 800227c:	6018      	str	r0, [r3, #0]
 800227e:	3304      	adds	r3, #4
 8002280:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8002282:	4a37      	ldr	r2, [pc, #220]	@ (8002360 <RCC_SetFlashLatency+0xf8>)
 8002284:	f107 0318 	add.w	r3, r7, #24
 8002288:	e892 0003 	ldmia.w	r2, {r0, r1}
 800228c:	6018      	str	r0, [r3, #0]
 800228e:	3304      	adds	r3, #4
 8002290:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8002292:	4a34      	ldr	r2, [pc, #208]	@ (8002364 <RCC_SetFlashLatency+0xfc>)
 8002294:	f107 030c 	add.w	r3, r7, #12
 8002298:	ca07      	ldmia	r2, {r0, r1, r2}
 800229a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800229e:	2300      	movs	r3, #0
 80022a0:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022a8:	d11b      	bne.n	80022e2 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80022aa:	2300      	movs	r3, #0
 80022ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80022ae:	e014      	b.n	80022da <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80022b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	3338      	adds	r3, #56	@ 0x38
 80022b6:	443b      	add	r3, r7
 80022b8:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80022bc:	461a      	mov	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d807      	bhi.n	80022d4 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80022c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	3338      	adds	r3, #56	@ 0x38
 80022ca:	443b      	add	r3, r7
 80022cc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80022d0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80022d2:	e021      	b.n	8002318 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80022d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022d6:	3301      	adds	r3, #1
 80022d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80022da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d9e7      	bls.n	80022b0 <RCC_SetFlashLatency+0x48>
 80022e0:	e01a      	b.n	8002318 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80022e2:	2300      	movs	r3, #0
 80022e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80022e6:	e014      	b.n	8002312 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80022e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	3338      	adds	r3, #56	@ 0x38
 80022ee:	443b      	add	r3, r7
 80022f0:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80022f4:	461a      	mov	r2, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d807      	bhi.n	800230c <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80022fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	3338      	adds	r3, #56	@ 0x38
 8002302:	443b      	add	r3, r7
 8002304:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002308:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800230a:	e005      	b.n	8002318 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800230c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800230e:	3301      	adds	r3, #1
 8002310:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002314:	2b02      	cmp	r3, #2
 8002316:	d9e7      	bls.n	80022e8 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002318:	4b13      	ldr	r3, [pc, #76]	@ (8002368 <RCC_SetFlashLatency+0x100>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f023 0207 	bic.w	r2, r3, #7
 8002320:	4911      	ldr	r1, [pc, #68]	@ (8002368 <RCC_SetFlashLatency+0x100>)
 8002322:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002324:	4313      	orrs	r3, r2
 8002326:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002328:	f7fe fc08 	bl	8000b3c <HAL_GetTick>
 800232c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800232e:	e008      	b.n	8002342 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002330:	f7fe fc04 	bl	8000b3c <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b02      	cmp	r3, #2
 800233c:	d901      	bls.n	8002342 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e007      	b.n	8002352 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002342:	4b09      	ldr	r3, [pc, #36]	@ (8002368 <RCC_SetFlashLatency+0x100>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0307 	and.w	r3, r3, #7
 800234a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800234c:	429a      	cmp	r2, r3
 800234e:	d1ef      	bne.n	8002330 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3738      	adds	r7, #56	@ 0x38
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	08003dec 	.word	0x08003dec
 8002360:	08003df4 	.word	0x08003df4
 8002364:	08003dfc 	.word	0x08003dfc
 8002368:	58004000 	.word	0x58004000

0800236c <LL_RCC_LSE_IsReady>:
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002370:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002374:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	2b02      	cmp	r3, #2
 800237e:	d101      	bne.n	8002384 <LL_RCC_LSE_IsReady+0x18>
 8002380:	2301      	movs	r3, #1
 8002382:	e000      	b.n	8002386 <LL_RCC_LSE_IsReady+0x1a>
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	46bd      	mov	sp, r7
 800238a:	bc80      	pop	{r7}
 800238c:	4770      	bx	lr

0800238e <LL_RCC_SetUSARTClockSource>:
{
 800238e:	b480      	push	{r7}
 8002390:	b083      	sub	sp, #12
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8002396:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800239a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	0c1b      	lsrs	r3, r3, #16
 80023a2:	43db      	mvns	r3, r3
 80023a4:	401a      	ands	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80023ae:	4313      	orrs	r3, r2
 80023b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bc80      	pop	{r7}
 80023bc:	4770      	bx	lr

080023be <LL_RCC_SetI2SClockSource>:
{
 80023be:	b480      	push	{r7}
 80023c0:	b083      	sub	sp, #12
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80023c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023ce:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80023d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4313      	orrs	r3, r2
 80023da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bc80      	pop	{r7}
 80023e6:	4770      	bx	lr

080023e8 <LL_RCC_SetLPUARTClockSource>:
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80023f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023f8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80023fc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4313      	orrs	r3, r2
 8002404:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002408:	bf00      	nop
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	bc80      	pop	{r7}
 8002410:	4770      	bx	lr

08002412 <LL_RCC_SetI2CClockSource>:
{
 8002412:	b480      	push	{r7}
 8002414:	b083      	sub	sp, #12
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800241a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800241e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	091b      	lsrs	r3, r3, #4
 8002426:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800242a:	43db      	mvns	r3, r3
 800242c:	401a      	ands	r2, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	011b      	lsls	r3, r3, #4
 8002432:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8002436:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800243a:	4313      	orrs	r3, r2
 800243c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	bc80      	pop	{r7}
 8002448:	4770      	bx	lr

0800244a <LL_RCC_SetLPTIMClockSource>:
{
 800244a:	b480      	push	{r7}
 800244c:	b083      	sub	sp, #12
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002452:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002456:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	0c1b      	lsrs	r3, r3, #16
 800245e:	041b      	lsls	r3, r3, #16
 8002460:	43db      	mvns	r3, r3
 8002462:	401a      	ands	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	041b      	lsls	r3, r3, #16
 8002468:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800246c:	4313      	orrs	r3, r2
 800246e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002472:	bf00      	nop
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	bc80      	pop	{r7}
 800247a:	4770      	bx	lr

0800247c <LL_RCC_SetRNGClockSource>:
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002484:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002488:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800248c:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002490:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4313      	orrs	r3, r2
 8002498:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bc80      	pop	{r7}
 80024a4:	4770      	bx	lr

080024a6 <LL_RCC_SetADCClockSource>:
{
 80024a6:	b480      	push	{r7}
 80024a8:	b083      	sub	sp, #12
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80024ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024b6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80024ba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80024c6:	bf00      	nop
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bc80      	pop	{r7}
 80024ce:	4770      	bx	lr

080024d0 <LL_RCC_SetRTCClockSource>:
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80024d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80024e4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bc80      	pop	{r7}
 80024f8:	4770      	bx	lr

080024fa <LL_RCC_GetRTCClockSource>:
{
 80024fa:	b480      	push	{r7}
 80024fc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80024fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002502:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002506:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800250a:	4618      	mov	r0, r3
 800250c:	46bd      	mov	sp, r7
 800250e:	bc80      	pop	{r7}
 8002510:	4770      	bx	lr

08002512 <LL_RCC_ForceBackupDomainReset>:
{
 8002512:	b480      	push	{r7}
 8002514:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002516:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800251a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800251e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002522:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002526:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800252a:	bf00      	nop
 800252c:	46bd      	mov	sp, r7
 800252e:	bc80      	pop	{r7}
 8002530:	4770      	bx	lr

08002532 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002532:	b480      	push	{r7}
 8002534:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002536:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800253a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800253e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002542:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002546:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800254a:	bf00      	nop
 800254c:	46bd      	mov	sp, r7
 800254e:	bc80      	pop	{r7}
 8002550:	4770      	bx	lr
	...

08002554 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 800255c:	2300      	movs	r3, #0
 800255e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8002560:	2300      	movs	r3, #0
 8002562:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002564:	2300      	movs	r3, #0
 8002566:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d058      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8002574:	f7fe fd62 	bl	800103c <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002578:	f7fe fae0 	bl	8000b3c <HAL_GetTick>
 800257c:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800257e:	e009      	b.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002580:	f7fe fadc 	bl	8000b3c <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d902      	bls.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	74fb      	strb	r3, [r7, #19]
        break;
 8002592:	e006      	b.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002594:	4b7b      	ldr	r3, [pc, #492]	@ (8002784 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800259c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80025a0:	d1ee      	bne.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80025a2:	7cfb      	ldrb	r3, [r7, #19]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d13c      	bne.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80025a8:	f7ff ffa7 	bl	80024fa <LL_RCC_GetRTCClockSource>
 80025ac:	4602      	mov	r2, r0
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d00f      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80025b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025c2:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80025c4:	f7ff ffa5 	bl	8002512 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80025c8:	f7ff ffb3 	bl	8002532 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80025cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d014      	beq.n	800260a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e0:	f7fe faac 	bl	8000b3c <HAL_GetTick>
 80025e4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80025e6:	e00b      	b.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025e8:	f7fe faa8 	bl	8000b3c <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d902      	bls.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	74fb      	strb	r3, [r7, #19]
            break;
 80025fe:	e004      	b.n	800260a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8002600:	f7ff feb4 	bl	800236c <LL_RCC_LSE_IsReady>
 8002604:	4603      	mov	r3, r0
 8002606:	2b01      	cmp	r3, #1
 8002608:	d1ee      	bne.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 800260a:	7cfb      	ldrb	r3, [r7, #19]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d105      	bne.n	800261c <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002614:	4618      	mov	r0, r3
 8002616:	f7ff ff5b 	bl	80024d0 <LL_RCC_SetRTCClockSource>
 800261a:	e004      	b.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800261c:	7cfb      	ldrb	r3, [r7, #19]
 800261e:	74bb      	strb	r3, [r7, #18]
 8002620:	e001      	b.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002622:	7cfb      	ldrb	r3, [r7, #19]
 8002624:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b00      	cmp	r3, #0
 8002630:	d004      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	4618      	mov	r0, r3
 8002638:	f7ff fea9 	bl	800238e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d004      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff fe9e 	bl	800238e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0320 	and.w	r3, r3, #32
 800265a:	2b00      	cmp	r3, #0
 800265c:	d004      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff fec0 	bl	80023e8 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002670:	2b00      	cmp	r3, #0
 8002672:	d004      	beq.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a1b      	ldr	r3, [r3, #32]
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff fee6 	bl	800244a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002686:	2b00      	cmp	r3, #0
 8002688:	d004      	beq.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800268e:	4618      	mov	r0, r3
 8002690:	f7ff fedb 	bl	800244a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800269c:	2b00      	cmp	r3, #0
 800269e:	d004      	beq.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7ff fed0 	bl	800244a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d004      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	695b      	ldr	r3, [r3, #20]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff fea9 	bl	8002412 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d004      	beq.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff fe9e 	bl	8002412 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d004      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7ff fe93 	bl	8002412 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0310 	and.w	r3, r3, #16
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d011      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff fe5e 	bl	80023be <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800270a:	d107      	bne.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 800270c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002716:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800271a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d010      	beq.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff fea5 	bl	800247c <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002736:	2b00      	cmp	r3, #0
 8002738:	d107      	bne.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800273a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002744:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002748:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d011      	beq.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff fea3 	bl	80024a6 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002764:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002768:	d107      	bne.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800276a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002774:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002778:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800277a:	7cbb      	ldrb	r3, [r7, #18]
}
 800277c:	4618      	mov	r0, r3
 800277e:	3718      	adds	r7, #24
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	58000400 	.word	0x58000400

08002788 <LL_RCC_GetUSARTClockSource>:
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8002790:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002794:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	401a      	ands	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	041b      	lsls	r3, r3, #16
 80027a0:	4313      	orrs	r3, r2
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bc80      	pop	{r7}
 80027aa:	4770      	bx	lr

080027ac <LL_RCC_GetLPUARTClockSource>:
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80027b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027b8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4013      	ands	r3, r2
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bc80      	pop	{r7}
 80027c8:	4770      	bx	lr

080027ca <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b082      	sub	sp, #8
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d101      	bne.n	80027dc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e042      	b.n	8002862 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d106      	bne.n	80027f4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f7fd fff6 	bl	80007e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2224      	movs	r2, #36	@ 0x24
 80027f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f022 0201 	bic.w	r2, r2, #1
 800280a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002810:	2b00      	cmp	r3, #0
 8002812:	d002      	beq.n	800281a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f000 fb23 	bl	8002e60 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f000 f8ac 	bl	8002978 <UART_SetConfig>
 8002820:	4603      	mov	r3, r0
 8002822:	2b01      	cmp	r3, #1
 8002824:	d101      	bne.n	800282a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e01b      	b.n	8002862 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	685a      	ldr	r2, [r3, #4]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002838:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	689a      	ldr	r2, [r3, #8]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002848:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f042 0201 	orr.w	r2, r2, #1
 8002858:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 fba1 	bl	8002fa2 <UART_CheckIdleState>
 8002860:	4603      	mov	r3, r0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800286a:	b580      	push	{r7, lr}
 800286c:	b08a      	sub	sp, #40	@ 0x28
 800286e:	af02      	add	r7, sp, #8
 8002870:	60f8      	str	r0, [r7, #12]
 8002872:	60b9      	str	r1, [r7, #8]
 8002874:	603b      	str	r3, [r7, #0]
 8002876:	4613      	mov	r3, r2
 8002878:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002880:	2b20      	cmp	r3, #32
 8002882:	d173      	bne.n	800296c <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d002      	beq.n	8002890 <HAL_UART_Transmit+0x26>
 800288a:	88fb      	ldrh	r3, [r7, #6]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d101      	bne.n	8002894 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e06c      	b.n	800296e <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2200      	movs	r2, #0
 8002898:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2221      	movs	r2, #33	@ 0x21
 80028a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028a4:	f7fe f94a 	bl	8000b3c <HAL_GetTick>
 80028a8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	88fa      	ldrh	r2, [r7, #6]
 80028ae:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	88fa      	ldrh	r2, [r7, #6]
 80028b6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028c2:	d108      	bne.n	80028d6 <HAL_UART_Transmit+0x6c>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d104      	bne.n	80028d6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80028cc:	2300      	movs	r3, #0
 80028ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	61bb      	str	r3, [r7, #24]
 80028d4:	e003      	b.n	80028de <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028da:	2300      	movs	r3, #0
 80028dc:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80028de:	e02c      	b.n	800293a <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	9300      	str	r3, [sp, #0]
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	2200      	movs	r2, #0
 80028e8:	2180      	movs	r1, #128	@ 0x80
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f000 fba7 	bl	800303e <UART_WaitOnFlagUntilTimeout>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e039      	b.n	800296e <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d10b      	bne.n	8002918 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	881b      	ldrh	r3, [r3, #0]
 8002904:	461a      	mov	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800290e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	3302      	adds	r3, #2
 8002914:	61bb      	str	r3, [r7, #24]
 8002916:	e007      	b.n	8002928 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	781a      	ldrb	r2, [r3, #0]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	3301      	adds	r3, #1
 8002926:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800292e:	b29b      	uxth	r3, r3
 8002930:	3b01      	subs	r3, #1
 8002932:	b29a      	uxth	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002940:	b29b      	uxth	r3, r3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1cc      	bne.n	80028e0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	9300      	str	r3, [sp, #0]
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	2200      	movs	r2, #0
 800294e:	2140      	movs	r1, #64	@ 0x40
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	f000 fb74 	bl	800303e <UART_WaitOnFlagUntilTimeout>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e006      	b.n	800296e <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2220      	movs	r2, #32
 8002964:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8002968:	2300      	movs	r3, #0
 800296a:	e000      	b.n	800296e <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 800296c:	2302      	movs	r3, #2
  }
}
 800296e:	4618      	mov	r0, r3
 8002970:	3720      	adds	r7, #32
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
	...

08002978 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002978:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800297c:	b08c      	sub	sp, #48	@ 0x30
 800297e:	af00      	add	r7, sp, #0
 8002980:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002982:	2300      	movs	r3, #0
 8002984:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	689a      	ldr	r2, [r3, #8]
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	431a      	orrs	r2, r3
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	431a      	orrs	r2, r3
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	69db      	ldr	r3, [r3, #28]
 800299c:	4313      	orrs	r3, r2
 800299e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	4b94      	ldr	r3, [pc, #592]	@ (8002bf8 <UART_SetConfig+0x280>)
 80029a8:	4013      	ands	r3, r2
 80029aa:	697a      	ldr	r2, [r7, #20]
 80029ac:	6812      	ldr	r2, [r2, #0]
 80029ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80029b0:	430b      	orrs	r3, r1
 80029b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	68da      	ldr	r2, [r3, #12]
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	430a      	orrs	r2, r1
 80029c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a89      	ldr	r2, [pc, #548]	@ (8002bfc <UART_SetConfig+0x284>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d004      	beq.n	80029e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	6a1b      	ldr	r3, [r3, #32]
 80029de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80029e0:	4313      	orrs	r3, r2
 80029e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80029ee:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	6812      	ldr	r2, [r2, #0]
 80029f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80029f8:	430b      	orrs	r3, r1
 80029fa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a02:	f023 010f 	bic.w	r1, r3, #15
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a7a      	ldr	r2, [pc, #488]	@ (8002c00 <UART_SetConfig+0x288>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d127      	bne.n	8002a6c <UART_SetConfig+0xf4>
 8002a1c:	2003      	movs	r0, #3
 8002a1e:	f7ff feb3 	bl	8002788 <LL_RCC_GetUSARTClockSource>
 8002a22:	4603      	mov	r3, r0
 8002a24:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8002a28:	2b03      	cmp	r3, #3
 8002a2a:	d81b      	bhi.n	8002a64 <UART_SetConfig+0xec>
 8002a2c:	a201      	add	r2, pc, #4	@ (adr r2, 8002a34 <UART_SetConfig+0xbc>)
 8002a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a32:	bf00      	nop
 8002a34:	08002a45 	.word	0x08002a45
 8002a38:	08002a55 	.word	0x08002a55
 8002a3c:	08002a4d 	.word	0x08002a4d
 8002a40:	08002a5d 	.word	0x08002a5d
 8002a44:	2301      	movs	r3, #1
 8002a46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002a4a:	e080      	b.n	8002b4e <UART_SetConfig+0x1d6>
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002a52:	e07c      	b.n	8002b4e <UART_SetConfig+0x1d6>
 8002a54:	2304      	movs	r3, #4
 8002a56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002a5a:	e078      	b.n	8002b4e <UART_SetConfig+0x1d6>
 8002a5c:	2308      	movs	r3, #8
 8002a5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002a62:	e074      	b.n	8002b4e <UART_SetConfig+0x1d6>
 8002a64:	2310      	movs	r3, #16
 8002a66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002a6a:	e070      	b.n	8002b4e <UART_SetConfig+0x1d6>
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a64      	ldr	r2, [pc, #400]	@ (8002c04 <UART_SetConfig+0x28c>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d138      	bne.n	8002ae8 <UART_SetConfig+0x170>
 8002a76:	200c      	movs	r0, #12
 8002a78:	f7ff fe86 	bl	8002788 <LL_RCC_GetUSARTClockSource>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8002a82:	2b0c      	cmp	r3, #12
 8002a84:	d82c      	bhi.n	8002ae0 <UART_SetConfig+0x168>
 8002a86:	a201      	add	r2, pc, #4	@ (adr r2, 8002a8c <UART_SetConfig+0x114>)
 8002a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a8c:	08002ac1 	.word	0x08002ac1
 8002a90:	08002ae1 	.word	0x08002ae1
 8002a94:	08002ae1 	.word	0x08002ae1
 8002a98:	08002ae1 	.word	0x08002ae1
 8002a9c:	08002ad1 	.word	0x08002ad1
 8002aa0:	08002ae1 	.word	0x08002ae1
 8002aa4:	08002ae1 	.word	0x08002ae1
 8002aa8:	08002ae1 	.word	0x08002ae1
 8002aac:	08002ac9 	.word	0x08002ac9
 8002ab0:	08002ae1 	.word	0x08002ae1
 8002ab4:	08002ae1 	.word	0x08002ae1
 8002ab8:	08002ae1 	.word	0x08002ae1
 8002abc:	08002ad9 	.word	0x08002ad9
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ac6:	e042      	b.n	8002b4e <UART_SetConfig+0x1d6>
 8002ac8:	2302      	movs	r3, #2
 8002aca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ace:	e03e      	b.n	8002b4e <UART_SetConfig+0x1d6>
 8002ad0:	2304      	movs	r3, #4
 8002ad2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ad6:	e03a      	b.n	8002b4e <UART_SetConfig+0x1d6>
 8002ad8:	2308      	movs	r3, #8
 8002ada:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ade:	e036      	b.n	8002b4e <UART_SetConfig+0x1d6>
 8002ae0:	2310      	movs	r3, #16
 8002ae2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ae6:	e032      	b.n	8002b4e <UART_SetConfig+0x1d6>
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a43      	ldr	r2, [pc, #268]	@ (8002bfc <UART_SetConfig+0x284>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d12a      	bne.n	8002b48 <UART_SetConfig+0x1d0>
 8002af2:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8002af6:	f7ff fe59 	bl	80027ac <LL_RCC_GetLPUARTClockSource>
 8002afa:	4603      	mov	r3, r0
 8002afc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002b00:	d01a      	beq.n	8002b38 <UART_SetConfig+0x1c0>
 8002b02:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002b06:	d81b      	bhi.n	8002b40 <UART_SetConfig+0x1c8>
 8002b08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b0c:	d00c      	beq.n	8002b28 <UART_SetConfig+0x1b0>
 8002b0e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b12:	d815      	bhi.n	8002b40 <UART_SetConfig+0x1c8>
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d003      	beq.n	8002b20 <UART_SetConfig+0x1a8>
 8002b18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b1c:	d008      	beq.n	8002b30 <UART_SetConfig+0x1b8>
 8002b1e:	e00f      	b.n	8002b40 <UART_SetConfig+0x1c8>
 8002b20:	2300      	movs	r3, #0
 8002b22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b26:	e012      	b.n	8002b4e <UART_SetConfig+0x1d6>
 8002b28:	2302      	movs	r3, #2
 8002b2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b2e:	e00e      	b.n	8002b4e <UART_SetConfig+0x1d6>
 8002b30:	2304      	movs	r3, #4
 8002b32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b36:	e00a      	b.n	8002b4e <UART_SetConfig+0x1d6>
 8002b38:	2308      	movs	r3, #8
 8002b3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b3e:	e006      	b.n	8002b4e <UART_SetConfig+0x1d6>
 8002b40:	2310      	movs	r3, #16
 8002b42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b46:	e002      	b.n	8002b4e <UART_SetConfig+0x1d6>
 8002b48:	2310      	movs	r3, #16
 8002b4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a2a      	ldr	r2, [pc, #168]	@ (8002bfc <UART_SetConfig+0x284>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	f040 80a4 	bne.w	8002ca2 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002b5a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002b5e:	2b08      	cmp	r3, #8
 8002b60:	d823      	bhi.n	8002baa <UART_SetConfig+0x232>
 8002b62:	a201      	add	r2, pc, #4	@ (adr r2, 8002b68 <UART_SetConfig+0x1f0>)
 8002b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b68:	08002b8d 	.word	0x08002b8d
 8002b6c:	08002bab 	.word	0x08002bab
 8002b70:	08002b95 	.word	0x08002b95
 8002b74:	08002bab 	.word	0x08002bab
 8002b78:	08002b9b 	.word	0x08002b9b
 8002b7c:	08002bab 	.word	0x08002bab
 8002b80:	08002bab 	.word	0x08002bab
 8002b84:	08002bab 	.word	0x08002bab
 8002b88:	08002ba3 	.word	0x08002ba3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b8c:	f7ff fb18 	bl	80021c0 <HAL_RCC_GetPCLK1Freq>
 8002b90:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002b92:	e010      	b.n	8002bb6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b94:	4b1c      	ldr	r3, [pc, #112]	@ (8002c08 <UART_SetConfig+0x290>)
 8002b96:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002b98:	e00d      	b.n	8002bb6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b9a:	f7ff fa5d 	bl	8002058 <HAL_RCC_GetSysClockFreq>
 8002b9e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002ba0:	e009      	b.n	8002bb6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ba2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ba6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002ba8:	e005      	b.n	8002bb6 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8002baa:	2300      	movs	r3, #0
 8002bac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002bb4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f000 8137 	beq.w	8002e2c <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc2:	4a12      	ldr	r2, [pc, #72]	@ (8002c0c <UART_SetConfig+0x294>)
 8002bc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002bc8:	461a      	mov	r2, r3
 8002bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bcc:	fbb3 f3f2 	udiv	r3, r3, r2
 8002bd0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	685a      	ldr	r2, [r3, #4]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	4413      	add	r3, r2
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d305      	bcc.n	8002bee <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d910      	bls.n	8002c10 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002bf4:	e11a      	b.n	8002e2c <UART_SetConfig+0x4b4>
 8002bf6:	bf00      	nop
 8002bf8:	cfff69f3 	.word	0xcfff69f3
 8002bfc:	40008000 	.word	0x40008000
 8002c00:	40013800 	.word	0x40013800
 8002c04:	40004400 	.word	0x40004400
 8002c08:	00f42400 	.word	0x00f42400
 8002c0c:	08003ea8 	.word	0x08003ea8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c12:	2200      	movs	r2, #0
 8002c14:	60bb      	str	r3, [r7, #8]
 8002c16:	60fa      	str	r2, [r7, #12]
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c1c:	4a8e      	ldr	r2, [pc, #568]	@ (8002e58 <UART_SetConfig+0x4e0>)
 8002c1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	2200      	movs	r2, #0
 8002c26:	603b      	str	r3, [r7, #0]
 8002c28:	607a      	str	r2, [r7, #4]
 8002c2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c2e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c32:	f7fd faa1 	bl	8000178 <__aeabi_uldivmod>
 8002c36:	4602      	mov	r2, r0
 8002c38:	460b      	mov	r3, r1
 8002c3a:	4610      	mov	r0, r2
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	f04f 0200 	mov.w	r2, #0
 8002c42:	f04f 0300 	mov.w	r3, #0
 8002c46:	020b      	lsls	r3, r1, #8
 8002c48:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002c4c:	0202      	lsls	r2, r0, #8
 8002c4e:	6979      	ldr	r1, [r7, #20]
 8002c50:	6849      	ldr	r1, [r1, #4]
 8002c52:	0849      	lsrs	r1, r1, #1
 8002c54:	2000      	movs	r0, #0
 8002c56:	460c      	mov	r4, r1
 8002c58:	4605      	mov	r5, r0
 8002c5a:	eb12 0804 	adds.w	r8, r2, r4
 8002c5e:	eb43 0905 	adc.w	r9, r3, r5
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	469a      	mov	sl, r3
 8002c6a:	4693      	mov	fp, r2
 8002c6c:	4652      	mov	r2, sl
 8002c6e:	465b      	mov	r3, fp
 8002c70:	4640      	mov	r0, r8
 8002c72:	4649      	mov	r1, r9
 8002c74:	f7fd fa80 	bl	8000178 <__aeabi_uldivmod>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002c80:	6a3b      	ldr	r3, [r7, #32]
 8002c82:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c86:	d308      	bcc.n	8002c9a <UART_SetConfig+0x322>
 8002c88:	6a3b      	ldr	r3, [r7, #32]
 8002c8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c8e:	d204      	bcs.n	8002c9a <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6a3a      	ldr	r2, [r7, #32]
 8002c96:	60da      	str	r2, [r3, #12]
 8002c98:	e0c8      	b.n	8002e2c <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002ca0:	e0c4      	b.n	8002e2c <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	69db      	ldr	r3, [r3, #28]
 8002ca6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002caa:	d167      	bne.n	8002d7c <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8002cac:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002cb0:	2b08      	cmp	r3, #8
 8002cb2:	d828      	bhi.n	8002d06 <UART_SetConfig+0x38e>
 8002cb4:	a201      	add	r2, pc, #4	@ (adr r2, 8002cbc <UART_SetConfig+0x344>)
 8002cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cba:	bf00      	nop
 8002cbc:	08002ce1 	.word	0x08002ce1
 8002cc0:	08002ce9 	.word	0x08002ce9
 8002cc4:	08002cf1 	.word	0x08002cf1
 8002cc8:	08002d07 	.word	0x08002d07
 8002ccc:	08002cf7 	.word	0x08002cf7
 8002cd0:	08002d07 	.word	0x08002d07
 8002cd4:	08002d07 	.word	0x08002d07
 8002cd8:	08002d07 	.word	0x08002d07
 8002cdc:	08002cff 	.word	0x08002cff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ce0:	f7ff fa6e 	bl	80021c0 <HAL_RCC_GetPCLK1Freq>
 8002ce4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002ce6:	e014      	b.n	8002d12 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ce8:	f7ff fa7c 	bl	80021e4 <HAL_RCC_GetPCLK2Freq>
 8002cec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002cee:	e010      	b.n	8002d12 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002cf0:	4b5a      	ldr	r3, [pc, #360]	@ (8002e5c <UART_SetConfig+0x4e4>)
 8002cf2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002cf4:	e00d      	b.n	8002d12 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cf6:	f7ff f9af 	bl	8002058 <HAL_RCC_GetSysClockFreq>
 8002cfa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002cfc:	e009      	b.n	8002d12 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002cfe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d02:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002d04:	e005      	b.n	8002d12 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8002d06:	2300      	movs	r3, #0
 8002d08:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002d10:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f000 8089 	beq.w	8002e2c <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d1e:	4a4e      	ldr	r2, [pc, #312]	@ (8002e58 <UART_SetConfig+0x4e0>)
 8002d20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d24:	461a      	mov	r2, r3
 8002d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d28:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d2c:	005a      	lsls	r2, r3, #1
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	085b      	lsrs	r3, r3, #1
 8002d34:	441a      	add	r2, r3
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d3e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d40:	6a3b      	ldr	r3, [r7, #32]
 8002d42:	2b0f      	cmp	r3, #15
 8002d44:	d916      	bls.n	8002d74 <UART_SetConfig+0x3fc>
 8002d46:	6a3b      	ldr	r3, [r7, #32]
 8002d48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d4c:	d212      	bcs.n	8002d74 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d4e:	6a3b      	ldr	r3, [r7, #32]
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	f023 030f 	bic.w	r3, r3, #15
 8002d56:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d58:	6a3b      	ldr	r3, [r7, #32]
 8002d5a:	085b      	lsrs	r3, r3, #1
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	f003 0307 	and.w	r3, r3, #7
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	8bfb      	ldrh	r3, [r7, #30]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	8bfa      	ldrh	r2, [r7, #30]
 8002d70:	60da      	str	r2, [r3, #12]
 8002d72:	e05b      	b.n	8002e2c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002d7a:	e057      	b.n	8002e2c <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d7c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002d80:	2b08      	cmp	r3, #8
 8002d82:	d828      	bhi.n	8002dd6 <UART_SetConfig+0x45e>
 8002d84:	a201      	add	r2, pc, #4	@ (adr r2, 8002d8c <UART_SetConfig+0x414>)
 8002d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d8a:	bf00      	nop
 8002d8c:	08002db1 	.word	0x08002db1
 8002d90:	08002db9 	.word	0x08002db9
 8002d94:	08002dc1 	.word	0x08002dc1
 8002d98:	08002dd7 	.word	0x08002dd7
 8002d9c:	08002dc7 	.word	0x08002dc7
 8002da0:	08002dd7 	.word	0x08002dd7
 8002da4:	08002dd7 	.word	0x08002dd7
 8002da8:	08002dd7 	.word	0x08002dd7
 8002dac:	08002dcf 	.word	0x08002dcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002db0:	f7ff fa06 	bl	80021c0 <HAL_RCC_GetPCLK1Freq>
 8002db4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002db6:	e014      	b.n	8002de2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002db8:	f7ff fa14 	bl	80021e4 <HAL_RCC_GetPCLK2Freq>
 8002dbc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002dbe:	e010      	b.n	8002de2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002dc0:	4b26      	ldr	r3, [pc, #152]	@ (8002e5c <UART_SetConfig+0x4e4>)
 8002dc2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002dc4:	e00d      	b.n	8002de2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002dc6:	f7ff f947 	bl	8002058 <HAL_RCC_GetSysClockFreq>
 8002dca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002dcc:	e009      	b.n	8002de2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002dce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002dd2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002dd4:	e005      	b.n	8002de2 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002de0:	bf00      	nop
    }

    if (pclk != 0U)
 8002de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d021      	beq.n	8002e2c <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dec:	4a1a      	ldr	r2, [pc, #104]	@ (8002e58 <UART_SetConfig+0x4e0>)
 8002dee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002df2:	461a      	mov	r2, r3
 8002df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df6:	fbb3 f2f2 	udiv	r2, r3, r2
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	085b      	lsrs	r3, r3, #1
 8002e00:	441a      	add	r2, r3
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e0a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e0c:	6a3b      	ldr	r3, [r7, #32]
 8002e0e:	2b0f      	cmp	r3, #15
 8002e10:	d909      	bls.n	8002e26 <UART_SetConfig+0x4ae>
 8002e12:	6a3b      	ldr	r3, [r7, #32]
 8002e14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e18:	d205      	bcs.n	8002e26 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002e1a:	6a3b      	ldr	r3, [r7, #32]
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	60da      	str	r2, [r3, #12]
 8002e24:	e002      	b.n	8002e2c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	2200      	movs	r2, #0
 8002e46:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002e48:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3730      	adds	r7, #48	@ 0x30
 8002e50:	46bd      	mov	sp, r7
 8002e52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e56:	bf00      	nop
 8002e58:	08003ea8 	.word	0x08003ea8
 8002e5c:	00f42400 	.word	0x00f42400

08002e60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e6c:	f003 0308 	and.w	r3, r3, #8
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00a      	beq.n	8002e8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	430a      	orrs	r2, r1
 8002e88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00a      	beq.n	8002eac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eb0:	f003 0302 	and.w	r3, r3, #2
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00a      	beq.n	8002ece <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ed2:	f003 0304 	and.w	r3, r3, #4
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00a      	beq.n	8002ef0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	430a      	orrs	r2, r1
 8002eee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ef4:	f003 0310 	and.w	r3, r3, #16
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00a      	beq.n	8002f12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f16:	f003 0320 	and.w	r3, r3, #32
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00a      	beq.n	8002f34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	430a      	orrs	r2, r1
 8002f32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d01a      	beq.n	8002f76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	430a      	orrs	r2, r1
 8002f54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f5e:	d10a      	bne.n	8002f76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	430a      	orrs	r2, r1
 8002f74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00a      	beq.n	8002f98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	430a      	orrs	r2, r1
 8002f96:	605a      	str	r2, [r3, #4]
  }
}
 8002f98:	bf00      	nop
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bc80      	pop	{r7}
 8002fa0:	4770      	bx	lr

08002fa2 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b086      	sub	sp, #24
 8002fa6:	af02      	add	r7, sp, #8
 8002fa8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002fb2:	f7fd fdc3 	bl	8000b3c <HAL_GetTick>
 8002fb6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0308 	and.w	r3, r3, #8
 8002fc2:	2b08      	cmp	r3, #8
 8002fc4:	d10e      	bne.n	8002fe4 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fc6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002fca:	9300      	str	r3, [sp, #0]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f000 f832 	bl	800303e <UART_WaitOnFlagUntilTimeout>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d001      	beq.n	8002fe4 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e028      	b.n	8003036 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0304 	and.w	r3, r3, #4
 8002fee:	2b04      	cmp	r3, #4
 8002ff0:	d10e      	bne.n	8003010 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ff2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002ff6:	9300      	str	r3, [sp, #0]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f000 f81c 	bl	800303e <UART_WaitOnFlagUntilTimeout>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d001      	beq.n	8003010 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e012      	b.n	8003036 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2220      	movs	r2, #32
 8003014:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2220      	movs	r2, #32
 800301c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3710      	adds	r7, #16
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b09c      	sub	sp, #112	@ 0x70
 8003042:	af00      	add	r7, sp, #0
 8003044:	60f8      	str	r0, [r7, #12]
 8003046:	60b9      	str	r1, [r7, #8]
 8003048:	603b      	str	r3, [r7, #0]
 800304a:	4613      	mov	r3, r2
 800304c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800304e:	e0af      	b.n	80031b0 <UART_WaitOnFlagUntilTimeout+0x172>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003050:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003056:	f000 80ab 	beq.w	80031b0 <UART_WaitOnFlagUntilTimeout+0x172>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800305a:	f7fd fd6f 	bl	8000b3c <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8003066:	429a      	cmp	r2, r3
 8003068:	d302      	bcc.n	8003070 <UART_WaitOnFlagUntilTimeout+0x32>
 800306a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800306c:	2b00      	cmp	r3, #0
 800306e:	d140      	bne.n	80030f2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003076:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003078:	e853 3f00 	ldrex	r3, [r3]
 800307c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800307e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003080:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003084:	667b      	str	r3, [r7, #100]	@ 0x64
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	461a      	mov	r2, r3
 800308c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800308e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003090:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003092:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003094:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003096:	e841 2300 	strex	r3, r2, [r1]
 800309a:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800309c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1e6      	bne.n	8003070 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	3308      	adds	r3, #8
 80030a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030ac:	e853 3f00 	ldrex	r3, [r3]
 80030b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80030b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030b4:	f023 0301 	bic.w	r3, r3, #1
 80030b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	3308      	adds	r3, #8
 80030c0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80030c2:	64ba      	str	r2, [r7, #72]	@ 0x48
 80030c4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030c6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80030c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80030ca:	e841 2300 	strex	r3, r2, [r1]
 80030ce:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80030d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1e5      	bne.n	80030a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2220      	movs	r2, #32
 80030da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2220      	movs	r2, #32
 80030e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e06f      	b.n	80031d2 <UART_WaitOnFlagUntilTimeout+0x194>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0304 	and.w	r3, r3, #4
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d057      	beq.n	80031b0 <UART_WaitOnFlagUntilTimeout+0x172>
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	2b80      	cmp	r3, #128	@ 0x80
 8003104:	d054      	beq.n	80031b0 <UART_WaitOnFlagUntilTimeout+0x172>
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	2b40      	cmp	r3, #64	@ 0x40
 800310a:	d051      	beq.n	80031b0 <UART_WaitOnFlagUntilTimeout+0x172>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	69db      	ldr	r3, [r3, #28]
 8003112:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003116:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800311a:	d149      	bne.n	80031b0 <UART_WaitOnFlagUntilTimeout+0x172>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003124:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800312c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800312e:	e853 3f00 	ldrex	r3, [r3]
 8003132:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003136:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800313a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	461a      	mov	r2, r3
 8003142:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003144:	637b      	str	r3, [r7, #52]	@ 0x34
 8003146:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003148:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800314a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800314c:	e841 2300 	strex	r3, r2, [r1]
 8003150:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003154:	2b00      	cmp	r3, #0
 8003156:	d1e6      	bne.n	8003126 <UART_WaitOnFlagUntilTimeout+0xe8>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	3308      	adds	r3, #8
 800315e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	e853 3f00 	ldrex	r3, [r3]
 8003166:	613b      	str	r3, [r7, #16]
   return(result);
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	f023 0301 	bic.w	r3, r3, #1
 800316e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	3308      	adds	r3, #8
 8003176:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003178:	623a      	str	r2, [r7, #32]
 800317a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800317c:	69f9      	ldr	r1, [r7, #28]
 800317e:	6a3a      	ldr	r2, [r7, #32]
 8003180:	e841 2300 	strex	r3, r2, [r1]
 8003184:	61bb      	str	r3, [r7, #24]
   return(result);
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d1e5      	bne.n	8003158 <UART_WaitOnFlagUntilTimeout+0x11a>

          huart->gState = HAL_UART_STATE_READY;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2220      	movs	r2, #32
 8003190:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2220      	movs	r2, #32
 8003198:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2220      	movs	r2, #32
 80031a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e010      	b.n	80031d2 <UART_WaitOnFlagUntilTimeout+0x194>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	69da      	ldr	r2, [r3, #28]
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	4013      	ands	r3, r2
 80031ba:	68ba      	ldr	r2, [r7, #8]
 80031bc:	429a      	cmp	r2, r3
 80031be:	bf0c      	ite	eq
 80031c0:	2301      	moveq	r3, #1
 80031c2:	2300      	movne	r3, #0
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	461a      	mov	r2, r3
 80031c8:	79fb      	ldrb	r3, [r7, #7]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	f43f af40 	beq.w	8003050 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3770      	adds	r7, #112	@ 0x70
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80031da:	b480      	push	{r7}
 80031dc:	b085      	sub	sp, #20
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d101      	bne.n	80031f0 <HAL_UARTEx_DisableFifoMode+0x16>
 80031ec:	2302      	movs	r3, #2
 80031ee:	e027      	b.n	8003240 <HAL_UARTEx_DisableFifoMode+0x66>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2224      	movs	r2, #36	@ 0x24
 80031fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 0201 	bic.w	r2, r2, #1
 8003216:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800321e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2220      	movs	r2, #32
 8003232:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	3714      	adds	r7, #20
 8003244:	46bd      	mov	sp, r7
 8003246:	bc80      	pop	{r7}
 8003248:	4770      	bx	lr

0800324a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800324a:	b580      	push	{r7, lr}
 800324c:	b084      	sub	sp, #16
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
 8003252:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800325a:	2b01      	cmp	r3, #1
 800325c:	d101      	bne.n	8003262 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800325e:	2302      	movs	r3, #2
 8003260:	e02d      	b.n	80032be <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2201      	movs	r2, #1
 8003266:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2224      	movs	r2, #36	@ 0x24
 800326e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 0201 	bic.w	r2, r2, #1
 8003288:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	683a      	ldr	r2, [r7, #0]
 800329a:	430a      	orrs	r2, r1
 800329c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 f850 	bl	8003344 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2220      	movs	r2, #32
 80032b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3710      	adds	r7, #16
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b084      	sub	sp, #16
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
 80032ce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d101      	bne.n	80032de <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80032da:	2302      	movs	r3, #2
 80032dc:	e02d      	b.n	800333a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2201      	movs	r2, #1
 80032e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2224      	movs	r2, #36	@ 0x24
 80032ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f022 0201 	bic.w	r2, r2, #1
 8003304:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	683a      	ldr	r2, [r7, #0]
 8003316:	430a      	orrs	r2, r1
 8003318:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f000 f812 	bl	8003344 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2220      	movs	r2, #32
 800332c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
	...

08003344 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003350:	2b00      	cmp	r3, #0
 8003352:	d108      	bne.n	8003366 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003364:	e031      	b.n	80033ca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003366:	2308      	movs	r3, #8
 8003368:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800336a:	2308      	movs	r3, #8
 800336c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	0e5b      	lsrs	r3, r3, #25
 8003376:	b2db      	uxtb	r3, r3
 8003378:	f003 0307 	and.w	r3, r3, #7
 800337c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	0f5b      	lsrs	r3, r3, #29
 8003386:	b2db      	uxtb	r3, r3
 8003388:	f003 0307 	and.w	r3, r3, #7
 800338c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800338e:	7bbb      	ldrb	r3, [r7, #14]
 8003390:	7b3a      	ldrb	r2, [r7, #12]
 8003392:	4910      	ldr	r1, [pc, #64]	@ (80033d4 <UARTEx_SetNbDataToProcess+0x90>)
 8003394:	5c8a      	ldrb	r2, [r1, r2]
 8003396:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800339a:	7b3a      	ldrb	r2, [r7, #12]
 800339c:	490e      	ldr	r1, [pc, #56]	@ (80033d8 <UARTEx_SetNbDataToProcess+0x94>)
 800339e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80033a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80033a4:	b29a      	uxth	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80033ac:	7bfb      	ldrb	r3, [r7, #15]
 80033ae:	7b7a      	ldrb	r2, [r7, #13]
 80033b0:	4908      	ldr	r1, [pc, #32]	@ (80033d4 <UARTEx_SetNbDataToProcess+0x90>)
 80033b2:	5c8a      	ldrb	r2, [r1, r2]
 80033b4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80033b8:	7b7a      	ldrb	r2, [r7, #13]
 80033ba:	4907      	ldr	r1, [pc, #28]	@ (80033d8 <UARTEx_SetNbDataToProcess+0x94>)
 80033bc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80033be:	fb93 f3f2 	sdiv	r3, r3, r2
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80033ca:	bf00      	nop
 80033cc:	3714      	adds	r7, #20
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bc80      	pop	{r7}
 80033d2:	4770      	bx	lr
 80033d4:	08003ec0 	.word	0x08003ec0
 80033d8:	08003ec8 	.word	0x08003ec8

080033dc <std>:
 80033dc:	2300      	movs	r3, #0
 80033de:	b510      	push	{r4, lr}
 80033e0:	4604      	mov	r4, r0
 80033e2:	e9c0 3300 	strd	r3, r3, [r0]
 80033e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80033ea:	6083      	str	r3, [r0, #8]
 80033ec:	8181      	strh	r1, [r0, #12]
 80033ee:	6643      	str	r3, [r0, #100]	@ 0x64
 80033f0:	81c2      	strh	r2, [r0, #14]
 80033f2:	6183      	str	r3, [r0, #24]
 80033f4:	4619      	mov	r1, r3
 80033f6:	2208      	movs	r2, #8
 80033f8:	305c      	adds	r0, #92	@ 0x5c
 80033fa:	f000 f9e7 	bl	80037cc <memset>
 80033fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003434 <std+0x58>)
 8003400:	6263      	str	r3, [r4, #36]	@ 0x24
 8003402:	4b0d      	ldr	r3, [pc, #52]	@ (8003438 <std+0x5c>)
 8003404:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003406:	4b0d      	ldr	r3, [pc, #52]	@ (800343c <std+0x60>)
 8003408:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800340a:	4b0d      	ldr	r3, [pc, #52]	@ (8003440 <std+0x64>)
 800340c:	6323      	str	r3, [r4, #48]	@ 0x30
 800340e:	4b0d      	ldr	r3, [pc, #52]	@ (8003444 <std+0x68>)
 8003410:	6224      	str	r4, [r4, #32]
 8003412:	429c      	cmp	r4, r3
 8003414:	d006      	beq.n	8003424 <std+0x48>
 8003416:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800341a:	4294      	cmp	r4, r2
 800341c:	d002      	beq.n	8003424 <std+0x48>
 800341e:	33d0      	adds	r3, #208	@ 0xd0
 8003420:	429c      	cmp	r4, r3
 8003422:	d105      	bne.n	8003430 <std+0x54>
 8003424:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800342c:	f000 ba46 	b.w	80038bc <__retarget_lock_init_recursive>
 8003430:	bd10      	pop	{r4, pc}
 8003432:	bf00      	nop
 8003434:	0800361d 	.word	0x0800361d
 8003438:	0800363f 	.word	0x0800363f
 800343c:	08003677 	.word	0x08003677
 8003440:	0800369b 	.word	0x0800369b
 8003444:	20000120 	.word	0x20000120

08003448 <stdio_exit_handler>:
 8003448:	4a02      	ldr	r2, [pc, #8]	@ (8003454 <stdio_exit_handler+0xc>)
 800344a:	4903      	ldr	r1, [pc, #12]	@ (8003458 <stdio_exit_handler+0x10>)
 800344c:	4803      	ldr	r0, [pc, #12]	@ (800345c <stdio_exit_handler+0x14>)
 800344e:	f000 b869 	b.w	8003524 <_fwalk_sglue>
 8003452:	bf00      	nop
 8003454:	2000000c 	.word	0x2000000c
 8003458:	08003bb5 	.word	0x08003bb5
 800345c:	2000001c 	.word	0x2000001c

08003460 <cleanup_stdio>:
 8003460:	6841      	ldr	r1, [r0, #4]
 8003462:	4b0c      	ldr	r3, [pc, #48]	@ (8003494 <cleanup_stdio+0x34>)
 8003464:	4299      	cmp	r1, r3
 8003466:	b510      	push	{r4, lr}
 8003468:	4604      	mov	r4, r0
 800346a:	d001      	beq.n	8003470 <cleanup_stdio+0x10>
 800346c:	f000 fba2 	bl	8003bb4 <_fflush_r>
 8003470:	68a1      	ldr	r1, [r4, #8]
 8003472:	4b09      	ldr	r3, [pc, #36]	@ (8003498 <cleanup_stdio+0x38>)
 8003474:	4299      	cmp	r1, r3
 8003476:	d002      	beq.n	800347e <cleanup_stdio+0x1e>
 8003478:	4620      	mov	r0, r4
 800347a:	f000 fb9b 	bl	8003bb4 <_fflush_r>
 800347e:	68e1      	ldr	r1, [r4, #12]
 8003480:	4b06      	ldr	r3, [pc, #24]	@ (800349c <cleanup_stdio+0x3c>)
 8003482:	4299      	cmp	r1, r3
 8003484:	d004      	beq.n	8003490 <cleanup_stdio+0x30>
 8003486:	4620      	mov	r0, r4
 8003488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800348c:	f000 bb92 	b.w	8003bb4 <_fflush_r>
 8003490:	bd10      	pop	{r4, pc}
 8003492:	bf00      	nop
 8003494:	20000120 	.word	0x20000120
 8003498:	20000188 	.word	0x20000188
 800349c:	200001f0 	.word	0x200001f0

080034a0 <global_stdio_init.part.0>:
 80034a0:	b510      	push	{r4, lr}
 80034a2:	4b0b      	ldr	r3, [pc, #44]	@ (80034d0 <global_stdio_init.part.0+0x30>)
 80034a4:	4c0b      	ldr	r4, [pc, #44]	@ (80034d4 <global_stdio_init.part.0+0x34>)
 80034a6:	4a0c      	ldr	r2, [pc, #48]	@ (80034d8 <global_stdio_init.part.0+0x38>)
 80034a8:	601a      	str	r2, [r3, #0]
 80034aa:	4620      	mov	r0, r4
 80034ac:	2200      	movs	r2, #0
 80034ae:	2104      	movs	r1, #4
 80034b0:	f7ff ff94 	bl	80033dc <std>
 80034b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80034b8:	2201      	movs	r2, #1
 80034ba:	2109      	movs	r1, #9
 80034bc:	f7ff ff8e 	bl	80033dc <std>
 80034c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80034c4:	2202      	movs	r2, #2
 80034c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034ca:	2112      	movs	r1, #18
 80034cc:	f7ff bf86 	b.w	80033dc <std>
 80034d0:	20000258 	.word	0x20000258
 80034d4:	20000120 	.word	0x20000120
 80034d8:	08003449 	.word	0x08003449

080034dc <__sfp_lock_acquire>:
 80034dc:	4801      	ldr	r0, [pc, #4]	@ (80034e4 <__sfp_lock_acquire+0x8>)
 80034de:	f000 b9ee 	b.w	80038be <__retarget_lock_acquire_recursive>
 80034e2:	bf00      	nop
 80034e4:	20000261 	.word	0x20000261

080034e8 <__sfp_lock_release>:
 80034e8:	4801      	ldr	r0, [pc, #4]	@ (80034f0 <__sfp_lock_release+0x8>)
 80034ea:	f000 b9e9 	b.w	80038c0 <__retarget_lock_release_recursive>
 80034ee:	bf00      	nop
 80034f0:	20000261 	.word	0x20000261

080034f4 <__sinit>:
 80034f4:	b510      	push	{r4, lr}
 80034f6:	4604      	mov	r4, r0
 80034f8:	f7ff fff0 	bl	80034dc <__sfp_lock_acquire>
 80034fc:	6a23      	ldr	r3, [r4, #32]
 80034fe:	b11b      	cbz	r3, 8003508 <__sinit+0x14>
 8003500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003504:	f7ff bff0 	b.w	80034e8 <__sfp_lock_release>
 8003508:	4b04      	ldr	r3, [pc, #16]	@ (800351c <__sinit+0x28>)
 800350a:	6223      	str	r3, [r4, #32]
 800350c:	4b04      	ldr	r3, [pc, #16]	@ (8003520 <__sinit+0x2c>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d1f5      	bne.n	8003500 <__sinit+0xc>
 8003514:	f7ff ffc4 	bl	80034a0 <global_stdio_init.part.0>
 8003518:	e7f2      	b.n	8003500 <__sinit+0xc>
 800351a:	bf00      	nop
 800351c:	08003461 	.word	0x08003461
 8003520:	20000258 	.word	0x20000258

08003524 <_fwalk_sglue>:
 8003524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003528:	4607      	mov	r7, r0
 800352a:	4688      	mov	r8, r1
 800352c:	4614      	mov	r4, r2
 800352e:	2600      	movs	r6, #0
 8003530:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003534:	f1b9 0901 	subs.w	r9, r9, #1
 8003538:	d505      	bpl.n	8003546 <_fwalk_sglue+0x22>
 800353a:	6824      	ldr	r4, [r4, #0]
 800353c:	2c00      	cmp	r4, #0
 800353e:	d1f7      	bne.n	8003530 <_fwalk_sglue+0xc>
 8003540:	4630      	mov	r0, r6
 8003542:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003546:	89ab      	ldrh	r3, [r5, #12]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d907      	bls.n	800355c <_fwalk_sglue+0x38>
 800354c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003550:	3301      	adds	r3, #1
 8003552:	d003      	beq.n	800355c <_fwalk_sglue+0x38>
 8003554:	4629      	mov	r1, r5
 8003556:	4638      	mov	r0, r7
 8003558:	47c0      	blx	r8
 800355a:	4306      	orrs	r6, r0
 800355c:	3568      	adds	r5, #104	@ 0x68
 800355e:	e7e9      	b.n	8003534 <_fwalk_sglue+0x10>

08003560 <_puts_r>:
 8003560:	6a03      	ldr	r3, [r0, #32]
 8003562:	b570      	push	{r4, r5, r6, lr}
 8003564:	6884      	ldr	r4, [r0, #8]
 8003566:	4605      	mov	r5, r0
 8003568:	460e      	mov	r6, r1
 800356a:	b90b      	cbnz	r3, 8003570 <_puts_r+0x10>
 800356c:	f7ff ffc2 	bl	80034f4 <__sinit>
 8003570:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003572:	07db      	lsls	r3, r3, #31
 8003574:	d405      	bmi.n	8003582 <_puts_r+0x22>
 8003576:	89a3      	ldrh	r3, [r4, #12]
 8003578:	0598      	lsls	r0, r3, #22
 800357a:	d402      	bmi.n	8003582 <_puts_r+0x22>
 800357c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800357e:	f000 f99e 	bl	80038be <__retarget_lock_acquire_recursive>
 8003582:	89a3      	ldrh	r3, [r4, #12]
 8003584:	0719      	lsls	r1, r3, #28
 8003586:	d502      	bpl.n	800358e <_puts_r+0x2e>
 8003588:	6923      	ldr	r3, [r4, #16]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d135      	bne.n	80035fa <_puts_r+0x9a>
 800358e:	4621      	mov	r1, r4
 8003590:	4628      	mov	r0, r5
 8003592:	f000 f8c5 	bl	8003720 <__swsetup_r>
 8003596:	b380      	cbz	r0, 80035fa <_puts_r+0x9a>
 8003598:	f04f 35ff 	mov.w	r5, #4294967295
 800359c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800359e:	07da      	lsls	r2, r3, #31
 80035a0:	d405      	bmi.n	80035ae <_puts_r+0x4e>
 80035a2:	89a3      	ldrh	r3, [r4, #12]
 80035a4:	059b      	lsls	r3, r3, #22
 80035a6:	d402      	bmi.n	80035ae <_puts_r+0x4e>
 80035a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80035aa:	f000 f989 	bl	80038c0 <__retarget_lock_release_recursive>
 80035ae:	4628      	mov	r0, r5
 80035b0:	bd70      	pop	{r4, r5, r6, pc}
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	da04      	bge.n	80035c0 <_puts_r+0x60>
 80035b6:	69a2      	ldr	r2, [r4, #24]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	dc17      	bgt.n	80035ec <_puts_r+0x8c>
 80035bc:	290a      	cmp	r1, #10
 80035be:	d015      	beq.n	80035ec <_puts_r+0x8c>
 80035c0:	6823      	ldr	r3, [r4, #0]
 80035c2:	1c5a      	adds	r2, r3, #1
 80035c4:	6022      	str	r2, [r4, #0]
 80035c6:	7019      	strb	r1, [r3, #0]
 80035c8:	68a3      	ldr	r3, [r4, #8]
 80035ca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80035ce:	3b01      	subs	r3, #1
 80035d0:	60a3      	str	r3, [r4, #8]
 80035d2:	2900      	cmp	r1, #0
 80035d4:	d1ed      	bne.n	80035b2 <_puts_r+0x52>
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	da11      	bge.n	80035fe <_puts_r+0x9e>
 80035da:	4622      	mov	r2, r4
 80035dc:	210a      	movs	r1, #10
 80035de:	4628      	mov	r0, r5
 80035e0:	f000 f85f 	bl	80036a2 <__swbuf_r>
 80035e4:	3001      	adds	r0, #1
 80035e6:	d0d7      	beq.n	8003598 <_puts_r+0x38>
 80035e8:	250a      	movs	r5, #10
 80035ea:	e7d7      	b.n	800359c <_puts_r+0x3c>
 80035ec:	4622      	mov	r2, r4
 80035ee:	4628      	mov	r0, r5
 80035f0:	f000 f857 	bl	80036a2 <__swbuf_r>
 80035f4:	3001      	adds	r0, #1
 80035f6:	d1e7      	bne.n	80035c8 <_puts_r+0x68>
 80035f8:	e7ce      	b.n	8003598 <_puts_r+0x38>
 80035fa:	3e01      	subs	r6, #1
 80035fc:	e7e4      	b.n	80035c8 <_puts_r+0x68>
 80035fe:	6823      	ldr	r3, [r4, #0]
 8003600:	1c5a      	adds	r2, r3, #1
 8003602:	6022      	str	r2, [r4, #0]
 8003604:	220a      	movs	r2, #10
 8003606:	701a      	strb	r2, [r3, #0]
 8003608:	e7ee      	b.n	80035e8 <_puts_r+0x88>
	...

0800360c <puts>:
 800360c:	4b02      	ldr	r3, [pc, #8]	@ (8003618 <puts+0xc>)
 800360e:	4601      	mov	r1, r0
 8003610:	6818      	ldr	r0, [r3, #0]
 8003612:	f7ff bfa5 	b.w	8003560 <_puts_r>
 8003616:	bf00      	nop
 8003618:	20000018 	.word	0x20000018

0800361c <__sread>:
 800361c:	b510      	push	{r4, lr}
 800361e:	460c      	mov	r4, r1
 8003620:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003624:	f000 f8fc 	bl	8003820 <_read_r>
 8003628:	2800      	cmp	r0, #0
 800362a:	bfab      	itete	ge
 800362c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800362e:	89a3      	ldrhlt	r3, [r4, #12]
 8003630:	181b      	addge	r3, r3, r0
 8003632:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003636:	bfac      	ite	ge
 8003638:	6563      	strge	r3, [r4, #84]	@ 0x54
 800363a:	81a3      	strhlt	r3, [r4, #12]
 800363c:	bd10      	pop	{r4, pc}

0800363e <__swrite>:
 800363e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003642:	461f      	mov	r7, r3
 8003644:	898b      	ldrh	r3, [r1, #12]
 8003646:	05db      	lsls	r3, r3, #23
 8003648:	4605      	mov	r5, r0
 800364a:	460c      	mov	r4, r1
 800364c:	4616      	mov	r6, r2
 800364e:	d505      	bpl.n	800365c <__swrite+0x1e>
 8003650:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003654:	2302      	movs	r3, #2
 8003656:	2200      	movs	r2, #0
 8003658:	f000 f8d0 	bl	80037fc <_lseek_r>
 800365c:	89a3      	ldrh	r3, [r4, #12]
 800365e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003662:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003666:	81a3      	strh	r3, [r4, #12]
 8003668:	4632      	mov	r2, r6
 800366a:	463b      	mov	r3, r7
 800366c:	4628      	mov	r0, r5
 800366e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003672:	f000 b8e7 	b.w	8003844 <_write_r>

08003676 <__sseek>:
 8003676:	b510      	push	{r4, lr}
 8003678:	460c      	mov	r4, r1
 800367a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800367e:	f000 f8bd 	bl	80037fc <_lseek_r>
 8003682:	1c43      	adds	r3, r0, #1
 8003684:	89a3      	ldrh	r3, [r4, #12]
 8003686:	bf15      	itete	ne
 8003688:	6560      	strne	r0, [r4, #84]	@ 0x54
 800368a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800368e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003692:	81a3      	strheq	r3, [r4, #12]
 8003694:	bf18      	it	ne
 8003696:	81a3      	strhne	r3, [r4, #12]
 8003698:	bd10      	pop	{r4, pc}

0800369a <__sclose>:
 800369a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800369e:	f000 b89d 	b.w	80037dc <_close_r>

080036a2 <__swbuf_r>:
 80036a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036a4:	460e      	mov	r6, r1
 80036a6:	4614      	mov	r4, r2
 80036a8:	4605      	mov	r5, r0
 80036aa:	b118      	cbz	r0, 80036b4 <__swbuf_r+0x12>
 80036ac:	6a03      	ldr	r3, [r0, #32]
 80036ae:	b90b      	cbnz	r3, 80036b4 <__swbuf_r+0x12>
 80036b0:	f7ff ff20 	bl	80034f4 <__sinit>
 80036b4:	69a3      	ldr	r3, [r4, #24]
 80036b6:	60a3      	str	r3, [r4, #8]
 80036b8:	89a3      	ldrh	r3, [r4, #12]
 80036ba:	071a      	lsls	r2, r3, #28
 80036bc:	d501      	bpl.n	80036c2 <__swbuf_r+0x20>
 80036be:	6923      	ldr	r3, [r4, #16]
 80036c0:	b943      	cbnz	r3, 80036d4 <__swbuf_r+0x32>
 80036c2:	4621      	mov	r1, r4
 80036c4:	4628      	mov	r0, r5
 80036c6:	f000 f82b 	bl	8003720 <__swsetup_r>
 80036ca:	b118      	cbz	r0, 80036d4 <__swbuf_r+0x32>
 80036cc:	f04f 37ff 	mov.w	r7, #4294967295
 80036d0:	4638      	mov	r0, r7
 80036d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036d4:	6823      	ldr	r3, [r4, #0]
 80036d6:	6922      	ldr	r2, [r4, #16]
 80036d8:	1a98      	subs	r0, r3, r2
 80036da:	6963      	ldr	r3, [r4, #20]
 80036dc:	b2f6      	uxtb	r6, r6
 80036de:	4283      	cmp	r3, r0
 80036e0:	4637      	mov	r7, r6
 80036e2:	dc05      	bgt.n	80036f0 <__swbuf_r+0x4e>
 80036e4:	4621      	mov	r1, r4
 80036e6:	4628      	mov	r0, r5
 80036e8:	f000 fa64 	bl	8003bb4 <_fflush_r>
 80036ec:	2800      	cmp	r0, #0
 80036ee:	d1ed      	bne.n	80036cc <__swbuf_r+0x2a>
 80036f0:	68a3      	ldr	r3, [r4, #8]
 80036f2:	3b01      	subs	r3, #1
 80036f4:	60a3      	str	r3, [r4, #8]
 80036f6:	6823      	ldr	r3, [r4, #0]
 80036f8:	1c5a      	adds	r2, r3, #1
 80036fa:	6022      	str	r2, [r4, #0]
 80036fc:	701e      	strb	r6, [r3, #0]
 80036fe:	6962      	ldr	r2, [r4, #20]
 8003700:	1c43      	adds	r3, r0, #1
 8003702:	429a      	cmp	r2, r3
 8003704:	d004      	beq.n	8003710 <__swbuf_r+0x6e>
 8003706:	89a3      	ldrh	r3, [r4, #12]
 8003708:	07db      	lsls	r3, r3, #31
 800370a:	d5e1      	bpl.n	80036d0 <__swbuf_r+0x2e>
 800370c:	2e0a      	cmp	r6, #10
 800370e:	d1df      	bne.n	80036d0 <__swbuf_r+0x2e>
 8003710:	4621      	mov	r1, r4
 8003712:	4628      	mov	r0, r5
 8003714:	f000 fa4e 	bl	8003bb4 <_fflush_r>
 8003718:	2800      	cmp	r0, #0
 800371a:	d0d9      	beq.n	80036d0 <__swbuf_r+0x2e>
 800371c:	e7d6      	b.n	80036cc <__swbuf_r+0x2a>
	...

08003720 <__swsetup_r>:
 8003720:	b538      	push	{r3, r4, r5, lr}
 8003722:	4b29      	ldr	r3, [pc, #164]	@ (80037c8 <__swsetup_r+0xa8>)
 8003724:	4605      	mov	r5, r0
 8003726:	6818      	ldr	r0, [r3, #0]
 8003728:	460c      	mov	r4, r1
 800372a:	b118      	cbz	r0, 8003734 <__swsetup_r+0x14>
 800372c:	6a03      	ldr	r3, [r0, #32]
 800372e:	b90b      	cbnz	r3, 8003734 <__swsetup_r+0x14>
 8003730:	f7ff fee0 	bl	80034f4 <__sinit>
 8003734:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003738:	0719      	lsls	r1, r3, #28
 800373a:	d422      	bmi.n	8003782 <__swsetup_r+0x62>
 800373c:	06da      	lsls	r2, r3, #27
 800373e:	d407      	bmi.n	8003750 <__swsetup_r+0x30>
 8003740:	2209      	movs	r2, #9
 8003742:	602a      	str	r2, [r5, #0]
 8003744:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003748:	81a3      	strh	r3, [r4, #12]
 800374a:	f04f 30ff 	mov.w	r0, #4294967295
 800374e:	e033      	b.n	80037b8 <__swsetup_r+0x98>
 8003750:	0758      	lsls	r0, r3, #29
 8003752:	d512      	bpl.n	800377a <__swsetup_r+0x5a>
 8003754:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003756:	b141      	cbz	r1, 800376a <__swsetup_r+0x4a>
 8003758:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800375c:	4299      	cmp	r1, r3
 800375e:	d002      	beq.n	8003766 <__swsetup_r+0x46>
 8003760:	4628      	mov	r0, r5
 8003762:	f000 f8af 	bl	80038c4 <_free_r>
 8003766:	2300      	movs	r3, #0
 8003768:	6363      	str	r3, [r4, #52]	@ 0x34
 800376a:	89a3      	ldrh	r3, [r4, #12]
 800376c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003770:	81a3      	strh	r3, [r4, #12]
 8003772:	2300      	movs	r3, #0
 8003774:	6063      	str	r3, [r4, #4]
 8003776:	6923      	ldr	r3, [r4, #16]
 8003778:	6023      	str	r3, [r4, #0]
 800377a:	89a3      	ldrh	r3, [r4, #12]
 800377c:	f043 0308 	orr.w	r3, r3, #8
 8003780:	81a3      	strh	r3, [r4, #12]
 8003782:	6923      	ldr	r3, [r4, #16]
 8003784:	b94b      	cbnz	r3, 800379a <__swsetup_r+0x7a>
 8003786:	89a3      	ldrh	r3, [r4, #12]
 8003788:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800378c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003790:	d003      	beq.n	800379a <__swsetup_r+0x7a>
 8003792:	4621      	mov	r1, r4
 8003794:	4628      	mov	r0, r5
 8003796:	f000 fa5b 	bl	8003c50 <__smakebuf_r>
 800379a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800379e:	f013 0201 	ands.w	r2, r3, #1
 80037a2:	d00a      	beq.n	80037ba <__swsetup_r+0x9a>
 80037a4:	2200      	movs	r2, #0
 80037a6:	60a2      	str	r2, [r4, #8]
 80037a8:	6962      	ldr	r2, [r4, #20]
 80037aa:	4252      	negs	r2, r2
 80037ac:	61a2      	str	r2, [r4, #24]
 80037ae:	6922      	ldr	r2, [r4, #16]
 80037b0:	b942      	cbnz	r2, 80037c4 <__swsetup_r+0xa4>
 80037b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80037b6:	d1c5      	bne.n	8003744 <__swsetup_r+0x24>
 80037b8:	bd38      	pop	{r3, r4, r5, pc}
 80037ba:	0799      	lsls	r1, r3, #30
 80037bc:	bf58      	it	pl
 80037be:	6962      	ldrpl	r2, [r4, #20]
 80037c0:	60a2      	str	r2, [r4, #8]
 80037c2:	e7f4      	b.n	80037ae <__swsetup_r+0x8e>
 80037c4:	2000      	movs	r0, #0
 80037c6:	e7f7      	b.n	80037b8 <__swsetup_r+0x98>
 80037c8:	20000018 	.word	0x20000018

080037cc <memset>:
 80037cc:	4402      	add	r2, r0
 80037ce:	4603      	mov	r3, r0
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d100      	bne.n	80037d6 <memset+0xa>
 80037d4:	4770      	bx	lr
 80037d6:	f803 1b01 	strb.w	r1, [r3], #1
 80037da:	e7f9      	b.n	80037d0 <memset+0x4>

080037dc <_close_r>:
 80037dc:	b538      	push	{r3, r4, r5, lr}
 80037de:	4d06      	ldr	r5, [pc, #24]	@ (80037f8 <_close_r+0x1c>)
 80037e0:	2300      	movs	r3, #0
 80037e2:	4604      	mov	r4, r0
 80037e4:	4608      	mov	r0, r1
 80037e6:	602b      	str	r3, [r5, #0]
 80037e8:	f7fd f8a5 	bl	8000936 <_close>
 80037ec:	1c43      	adds	r3, r0, #1
 80037ee:	d102      	bne.n	80037f6 <_close_r+0x1a>
 80037f0:	682b      	ldr	r3, [r5, #0]
 80037f2:	b103      	cbz	r3, 80037f6 <_close_r+0x1a>
 80037f4:	6023      	str	r3, [r4, #0]
 80037f6:	bd38      	pop	{r3, r4, r5, pc}
 80037f8:	2000025c 	.word	0x2000025c

080037fc <_lseek_r>:
 80037fc:	b538      	push	{r3, r4, r5, lr}
 80037fe:	4d07      	ldr	r5, [pc, #28]	@ (800381c <_lseek_r+0x20>)
 8003800:	4604      	mov	r4, r0
 8003802:	4608      	mov	r0, r1
 8003804:	4611      	mov	r1, r2
 8003806:	2200      	movs	r2, #0
 8003808:	602a      	str	r2, [r5, #0]
 800380a:	461a      	mov	r2, r3
 800380c:	f7fd f8b7 	bl	800097e <_lseek>
 8003810:	1c43      	adds	r3, r0, #1
 8003812:	d102      	bne.n	800381a <_lseek_r+0x1e>
 8003814:	682b      	ldr	r3, [r5, #0]
 8003816:	b103      	cbz	r3, 800381a <_lseek_r+0x1e>
 8003818:	6023      	str	r3, [r4, #0]
 800381a:	bd38      	pop	{r3, r4, r5, pc}
 800381c:	2000025c 	.word	0x2000025c

08003820 <_read_r>:
 8003820:	b538      	push	{r3, r4, r5, lr}
 8003822:	4d07      	ldr	r5, [pc, #28]	@ (8003840 <_read_r+0x20>)
 8003824:	4604      	mov	r4, r0
 8003826:	4608      	mov	r0, r1
 8003828:	4611      	mov	r1, r2
 800382a:	2200      	movs	r2, #0
 800382c:	602a      	str	r2, [r5, #0]
 800382e:	461a      	mov	r2, r3
 8003830:	f7fd f848 	bl	80008c4 <_read>
 8003834:	1c43      	adds	r3, r0, #1
 8003836:	d102      	bne.n	800383e <_read_r+0x1e>
 8003838:	682b      	ldr	r3, [r5, #0]
 800383a:	b103      	cbz	r3, 800383e <_read_r+0x1e>
 800383c:	6023      	str	r3, [r4, #0]
 800383e:	bd38      	pop	{r3, r4, r5, pc}
 8003840:	2000025c 	.word	0x2000025c

08003844 <_write_r>:
 8003844:	b538      	push	{r3, r4, r5, lr}
 8003846:	4d07      	ldr	r5, [pc, #28]	@ (8003864 <_write_r+0x20>)
 8003848:	4604      	mov	r4, r0
 800384a:	4608      	mov	r0, r1
 800384c:	4611      	mov	r1, r2
 800384e:	2200      	movs	r2, #0
 8003850:	602a      	str	r2, [r5, #0]
 8003852:	461a      	mov	r2, r3
 8003854:	f7fd f853 	bl	80008fe <_write>
 8003858:	1c43      	adds	r3, r0, #1
 800385a:	d102      	bne.n	8003862 <_write_r+0x1e>
 800385c:	682b      	ldr	r3, [r5, #0]
 800385e:	b103      	cbz	r3, 8003862 <_write_r+0x1e>
 8003860:	6023      	str	r3, [r4, #0]
 8003862:	bd38      	pop	{r3, r4, r5, pc}
 8003864:	2000025c 	.word	0x2000025c

08003868 <__errno>:
 8003868:	4b01      	ldr	r3, [pc, #4]	@ (8003870 <__errno+0x8>)
 800386a:	6818      	ldr	r0, [r3, #0]
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	20000018 	.word	0x20000018

08003874 <__libc_init_array>:
 8003874:	b570      	push	{r4, r5, r6, lr}
 8003876:	4d0d      	ldr	r5, [pc, #52]	@ (80038ac <__libc_init_array+0x38>)
 8003878:	4c0d      	ldr	r4, [pc, #52]	@ (80038b0 <__libc_init_array+0x3c>)
 800387a:	1b64      	subs	r4, r4, r5
 800387c:	10a4      	asrs	r4, r4, #2
 800387e:	2600      	movs	r6, #0
 8003880:	42a6      	cmp	r6, r4
 8003882:	d109      	bne.n	8003898 <__libc_init_array+0x24>
 8003884:	4d0b      	ldr	r5, [pc, #44]	@ (80038b4 <__libc_init_array+0x40>)
 8003886:	4c0c      	ldr	r4, [pc, #48]	@ (80038b8 <__libc_init_array+0x44>)
 8003888:	f000 fa50 	bl	8003d2c <_init>
 800388c:	1b64      	subs	r4, r4, r5
 800388e:	10a4      	asrs	r4, r4, #2
 8003890:	2600      	movs	r6, #0
 8003892:	42a6      	cmp	r6, r4
 8003894:	d105      	bne.n	80038a2 <__libc_init_array+0x2e>
 8003896:	bd70      	pop	{r4, r5, r6, pc}
 8003898:	f855 3b04 	ldr.w	r3, [r5], #4
 800389c:	4798      	blx	r3
 800389e:	3601      	adds	r6, #1
 80038a0:	e7ee      	b.n	8003880 <__libc_init_array+0xc>
 80038a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80038a6:	4798      	blx	r3
 80038a8:	3601      	adds	r6, #1
 80038aa:	e7f2      	b.n	8003892 <__libc_init_array+0x1e>
 80038ac:	08003ed8 	.word	0x08003ed8
 80038b0:	08003ed8 	.word	0x08003ed8
 80038b4:	08003ed8 	.word	0x08003ed8
 80038b8:	08003edc 	.word	0x08003edc

080038bc <__retarget_lock_init_recursive>:
 80038bc:	4770      	bx	lr

080038be <__retarget_lock_acquire_recursive>:
 80038be:	4770      	bx	lr

080038c0 <__retarget_lock_release_recursive>:
 80038c0:	4770      	bx	lr
	...

080038c4 <_free_r>:
 80038c4:	b538      	push	{r3, r4, r5, lr}
 80038c6:	4605      	mov	r5, r0
 80038c8:	2900      	cmp	r1, #0
 80038ca:	d041      	beq.n	8003950 <_free_r+0x8c>
 80038cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038d0:	1f0c      	subs	r4, r1, #4
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	bfb8      	it	lt
 80038d6:	18e4      	addlt	r4, r4, r3
 80038d8:	f000 f8e0 	bl	8003a9c <__malloc_lock>
 80038dc:	4a1d      	ldr	r2, [pc, #116]	@ (8003954 <_free_r+0x90>)
 80038de:	6813      	ldr	r3, [r2, #0]
 80038e0:	b933      	cbnz	r3, 80038f0 <_free_r+0x2c>
 80038e2:	6063      	str	r3, [r4, #4]
 80038e4:	6014      	str	r4, [r2, #0]
 80038e6:	4628      	mov	r0, r5
 80038e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038ec:	f000 b8dc 	b.w	8003aa8 <__malloc_unlock>
 80038f0:	42a3      	cmp	r3, r4
 80038f2:	d908      	bls.n	8003906 <_free_r+0x42>
 80038f4:	6820      	ldr	r0, [r4, #0]
 80038f6:	1821      	adds	r1, r4, r0
 80038f8:	428b      	cmp	r3, r1
 80038fa:	bf01      	itttt	eq
 80038fc:	6819      	ldreq	r1, [r3, #0]
 80038fe:	685b      	ldreq	r3, [r3, #4]
 8003900:	1809      	addeq	r1, r1, r0
 8003902:	6021      	streq	r1, [r4, #0]
 8003904:	e7ed      	b.n	80038e2 <_free_r+0x1e>
 8003906:	461a      	mov	r2, r3
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	b10b      	cbz	r3, 8003910 <_free_r+0x4c>
 800390c:	42a3      	cmp	r3, r4
 800390e:	d9fa      	bls.n	8003906 <_free_r+0x42>
 8003910:	6811      	ldr	r1, [r2, #0]
 8003912:	1850      	adds	r0, r2, r1
 8003914:	42a0      	cmp	r0, r4
 8003916:	d10b      	bne.n	8003930 <_free_r+0x6c>
 8003918:	6820      	ldr	r0, [r4, #0]
 800391a:	4401      	add	r1, r0
 800391c:	1850      	adds	r0, r2, r1
 800391e:	4283      	cmp	r3, r0
 8003920:	6011      	str	r1, [r2, #0]
 8003922:	d1e0      	bne.n	80038e6 <_free_r+0x22>
 8003924:	6818      	ldr	r0, [r3, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	6053      	str	r3, [r2, #4]
 800392a:	4408      	add	r0, r1
 800392c:	6010      	str	r0, [r2, #0]
 800392e:	e7da      	b.n	80038e6 <_free_r+0x22>
 8003930:	d902      	bls.n	8003938 <_free_r+0x74>
 8003932:	230c      	movs	r3, #12
 8003934:	602b      	str	r3, [r5, #0]
 8003936:	e7d6      	b.n	80038e6 <_free_r+0x22>
 8003938:	6820      	ldr	r0, [r4, #0]
 800393a:	1821      	adds	r1, r4, r0
 800393c:	428b      	cmp	r3, r1
 800393e:	bf04      	itt	eq
 8003940:	6819      	ldreq	r1, [r3, #0]
 8003942:	685b      	ldreq	r3, [r3, #4]
 8003944:	6063      	str	r3, [r4, #4]
 8003946:	bf04      	itt	eq
 8003948:	1809      	addeq	r1, r1, r0
 800394a:	6021      	streq	r1, [r4, #0]
 800394c:	6054      	str	r4, [r2, #4]
 800394e:	e7ca      	b.n	80038e6 <_free_r+0x22>
 8003950:	bd38      	pop	{r3, r4, r5, pc}
 8003952:	bf00      	nop
 8003954:	20000268 	.word	0x20000268

08003958 <sbrk_aligned>:
 8003958:	b570      	push	{r4, r5, r6, lr}
 800395a:	4e0f      	ldr	r6, [pc, #60]	@ (8003998 <sbrk_aligned+0x40>)
 800395c:	460c      	mov	r4, r1
 800395e:	6831      	ldr	r1, [r6, #0]
 8003960:	4605      	mov	r5, r0
 8003962:	b911      	cbnz	r1, 800396a <sbrk_aligned+0x12>
 8003964:	f000 f9d2 	bl	8003d0c <_sbrk_r>
 8003968:	6030      	str	r0, [r6, #0]
 800396a:	4621      	mov	r1, r4
 800396c:	4628      	mov	r0, r5
 800396e:	f000 f9cd 	bl	8003d0c <_sbrk_r>
 8003972:	1c43      	adds	r3, r0, #1
 8003974:	d103      	bne.n	800397e <sbrk_aligned+0x26>
 8003976:	f04f 34ff 	mov.w	r4, #4294967295
 800397a:	4620      	mov	r0, r4
 800397c:	bd70      	pop	{r4, r5, r6, pc}
 800397e:	1cc4      	adds	r4, r0, #3
 8003980:	f024 0403 	bic.w	r4, r4, #3
 8003984:	42a0      	cmp	r0, r4
 8003986:	d0f8      	beq.n	800397a <sbrk_aligned+0x22>
 8003988:	1a21      	subs	r1, r4, r0
 800398a:	4628      	mov	r0, r5
 800398c:	f000 f9be 	bl	8003d0c <_sbrk_r>
 8003990:	3001      	adds	r0, #1
 8003992:	d1f2      	bne.n	800397a <sbrk_aligned+0x22>
 8003994:	e7ef      	b.n	8003976 <sbrk_aligned+0x1e>
 8003996:	bf00      	nop
 8003998:	20000264 	.word	0x20000264

0800399c <_malloc_r>:
 800399c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039a0:	1ccd      	adds	r5, r1, #3
 80039a2:	f025 0503 	bic.w	r5, r5, #3
 80039a6:	3508      	adds	r5, #8
 80039a8:	2d0c      	cmp	r5, #12
 80039aa:	bf38      	it	cc
 80039ac:	250c      	movcc	r5, #12
 80039ae:	2d00      	cmp	r5, #0
 80039b0:	4606      	mov	r6, r0
 80039b2:	db01      	blt.n	80039b8 <_malloc_r+0x1c>
 80039b4:	42a9      	cmp	r1, r5
 80039b6:	d904      	bls.n	80039c2 <_malloc_r+0x26>
 80039b8:	230c      	movs	r3, #12
 80039ba:	6033      	str	r3, [r6, #0]
 80039bc:	2000      	movs	r0, #0
 80039be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003a98 <_malloc_r+0xfc>
 80039c6:	f000 f869 	bl	8003a9c <__malloc_lock>
 80039ca:	f8d8 3000 	ldr.w	r3, [r8]
 80039ce:	461c      	mov	r4, r3
 80039d0:	bb44      	cbnz	r4, 8003a24 <_malloc_r+0x88>
 80039d2:	4629      	mov	r1, r5
 80039d4:	4630      	mov	r0, r6
 80039d6:	f7ff ffbf 	bl	8003958 <sbrk_aligned>
 80039da:	1c43      	adds	r3, r0, #1
 80039dc:	4604      	mov	r4, r0
 80039de:	d158      	bne.n	8003a92 <_malloc_r+0xf6>
 80039e0:	f8d8 4000 	ldr.w	r4, [r8]
 80039e4:	4627      	mov	r7, r4
 80039e6:	2f00      	cmp	r7, #0
 80039e8:	d143      	bne.n	8003a72 <_malloc_r+0xd6>
 80039ea:	2c00      	cmp	r4, #0
 80039ec:	d04b      	beq.n	8003a86 <_malloc_r+0xea>
 80039ee:	6823      	ldr	r3, [r4, #0]
 80039f0:	4639      	mov	r1, r7
 80039f2:	4630      	mov	r0, r6
 80039f4:	eb04 0903 	add.w	r9, r4, r3
 80039f8:	f000 f988 	bl	8003d0c <_sbrk_r>
 80039fc:	4581      	cmp	r9, r0
 80039fe:	d142      	bne.n	8003a86 <_malloc_r+0xea>
 8003a00:	6821      	ldr	r1, [r4, #0]
 8003a02:	1a6d      	subs	r5, r5, r1
 8003a04:	4629      	mov	r1, r5
 8003a06:	4630      	mov	r0, r6
 8003a08:	f7ff ffa6 	bl	8003958 <sbrk_aligned>
 8003a0c:	3001      	adds	r0, #1
 8003a0e:	d03a      	beq.n	8003a86 <_malloc_r+0xea>
 8003a10:	6823      	ldr	r3, [r4, #0]
 8003a12:	442b      	add	r3, r5
 8003a14:	6023      	str	r3, [r4, #0]
 8003a16:	f8d8 3000 	ldr.w	r3, [r8]
 8003a1a:	685a      	ldr	r2, [r3, #4]
 8003a1c:	bb62      	cbnz	r2, 8003a78 <_malloc_r+0xdc>
 8003a1e:	f8c8 7000 	str.w	r7, [r8]
 8003a22:	e00f      	b.n	8003a44 <_malloc_r+0xa8>
 8003a24:	6822      	ldr	r2, [r4, #0]
 8003a26:	1b52      	subs	r2, r2, r5
 8003a28:	d420      	bmi.n	8003a6c <_malloc_r+0xd0>
 8003a2a:	2a0b      	cmp	r2, #11
 8003a2c:	d917      	bls.n	8003a5e <_malloc_r+0xc2>
 8003a2e:	1961      	adds	r1, r4, r5
 8003a30:	42a3      	cmp	r3, r4
 8003a32:	6025      	str	r5, [r4, #0]
 8003a34:	bf18      	it	ne
 8003a36:	6059      	strne	r1, [r3, #4]
 8003a38:	6863      	ldr	r3, [r4, #4]
 8003a3a:	bf08      	it	eq
 8003a3c:	f8c8 1000 	streq.w	r1, [r8]
 8003a40:	5162      	str	r2, [r4, r5]
 8003a42:	604b      	str	r3, [r1, #4]
 8003a44:	4630      	mov	r0, r6
 8003a46:	f000 f82f 	bl	8003aa8 <__malloc_unlock>
 8003a4a:	f104 000b 	add.w	r0, r4, #11
 8003a4e:	1d23      	adds	r3, r4, #4
 8003a50:	f020 0007 	bic.w	r0, r0, #7
 8003a54:	1ac2      	subs	r2, r0, r3
 8003a56:	bf1c      	itt	ne
 8003a58:	1a1b      	subne	r3, r3, r0
 8003a5a:	50a3      	strne	r3, [r4, r2]
 8003a5c:	e7af      	b.n	80039be <_malloc_r+0x22>
 8003a5e:	6862      	ldr	r2, [r4, #4]
 8003a60:	42a3      	cmp	r3, r4
 8003a62:	bf0c      	ite	eq
 8003a64:	f8c8 2000 	streq.w	r2, [r8]
 8003a68:	605a      	strne	r2, [r3, #4]
 8003a6a:	e7eb      	b.n	8003a44 <_malloc_r+0xa8>
 8003a6c:	4623      	mov	r3, r4
 8003a6e:	6864      	ldr	r4, [r4, #4]
 8003a70:	e7ae      	b.n	80039d0 <_malloc_r+0x34>
 8003a72:	463c      	mov	r4, r7
 8003a74:	687f      	ldr	r7, [r7, #4]
 8003a76:	e7b6      	b.n	80039e6 <_malloc_r+0x4a>
 8003a78:	461a      	mov	r2, r3
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	42a3      	cmp	r3, r4
 8003a7e:	d1fb      	bne.n	8003a78 <_malloc_r+0xdc>
 8003a80:	2300      	movs	r3, #0
 8003a82:	6053      	str	r3, [r2, #4]
 8003a84:	e7de      	b.n	8003a44 <_malloc_r+0xa8>
 8003a86:	230c      	movs	r3, #12
 8003a88:	6033      	str	r3, [r6, #0]
 8003a8a:	4630      	mov	r0, r6
 8003a8c:	f000 f80c 	bl	8003aa8 <__malloc_unlock>
 8003a90:	e794      	b.n	80039bc <_malloc_r+0x20>
 8003a92:	6005      	str	r5, [r0, #0]
 8003a94:	e7d6      	b.n	8003a44 <_malloc_r+0xa8>
 8003a96:	bf00      	nop
 8003a98:	20000268 	.word	0x20000268

08003a9c <__malloc_lock>:
 8003a9c:	4801      	ldr	r0, [pc, #4]	@ (8003aa4 <__malloc_lock+0x8>)
 8003a9e:	f7ff bf0e 	b.w	80038be <__retarget_lock_acquire_recursive>
 8003aa2:	bf00      	nop
 8003aa4:	20000260 	.word	0x20000260

08003aa8 <__malloc_unlock>:
 8003aa8:	4801      	ldr	r0, [pc, #4]	@ (8003ab0 <__malloc_unlock+0x8>)
 8003aaa:	f7ff bf09 	b.w	80038c0 <__retarget_lock_release_recursive>
 8003aae:	bf00      	nop
 8003ab0:	20000260 	.word	0x20000260

08003ab4 <__sflush_r>:
 8003ab4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aba:	0716      	lsls	r6, r2, #28
 8003abc:	4605      	mov	r5, r0
 8003abe:	460c      	mov	r4, r1
 8003ac0:	d454      	bmi.n	8003b6c <__sflush_r+0xb8>
 8003ac2:	684b      	ldr	r3, [r1, #4]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	dc02      	bgt.n	8003ace <__sflush_r+0x1a>
 8003ac8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	dd48      	ble.n	8003b60 <__sflush_r+0xac>
 8003ace:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003ad0:	2e00      	cmp	r6, #0
 8003ad2:	d045      	beq.n	8003b60 <__sflush_r+0xac>
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003ada:	682f      	ldr	r7, [r5, #0]
 8003adc:	6a21      	ldr	r1, [r4, #32]
 8003ade:	602b      	str	r3, [r5, #0]
 8003ae0:	d030      	beq.n	8003b44 <__sflush_r+0x90>
 8003ae2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003ae4:	89a3      	ldrh	r3, [r4, #12]
 8003ae6:	0759      	lsls	r1, r3, #29
 8003ae8:	d505      	bpl.n	8003af6 <__sflush_r+0x42>
 8003aea:	6863      	ldr	r3, [r4, #4]
 8003aec:	1ad2      	subs	r2, r2, r3
 8003aee:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003af0:	b10b      	cbz	r3, 8003af6 <__sflush_r+0x42>
 8003af2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003af4:	1ad2      	subs	r2, r2, r3
 8003af6:	2300      	movs	r3, #0
 8003af8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003afa:	6a21      	ldr	r1, [r4, #32]
 8003afc:	4628      	mov	r0, r5
 8003afe:	47b0      	blx	r6
 8003b00:	1c43      	adds	r3, r0, #1
 8003b02:	89a3      	ldrh	r3, [r4, #12]
 8003b04:	d106      	bne.n	8003b14 <__sflush_r+0x60>
 8003b06:	6829      	ldr	r1, [r5, #0]
 8003b08:	291d      	cmp	r1, #29
 8003b0a:	d82b      	bhi.n	8003b64 <__sflush_r+0xb0>
 8003b0c:	4a28      	ldr	r2, [pc, #160]	@ (8003bb0 <__sflush_r+0xfc>)
 8003b0e:	40ca      	lsrs	r2, r1
 8003b10:	07d6      	lsls	r6, r2, #31
 8003b12:	d527      	bpl.n	8003b64 <__sflush_r+0xb0>
 8003b14:	2200      	movs	r2, #0
 8003b16:	6062      	str	r2, [r4, #4]
 8003b18:	04d9      	lsls	r1, r3, #19
 8003b1a:	6922      	ldr	r2, [r4, #16]
 8003b1c:	6022      	str	r2, [r4, #0]
 8003b1e:	d504      	bpl.n	8003b2a <__sflush_r+0x76>
 8003b20:	1c42      	adds	r2, r0, #1
 8003b22:	d101      	bne.n	8003b28 <__sflush_r+0x74>
 8003b24:	682b      	ldr	r3, [r5, #0]
 8003b26:	b903      	cbnz	r3, 8003b2a <__sflush_r+0x76>
 8003b28:	6560      	str	r0, [r4, #84]	@ 0x54
 8003b2a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003b2c:	602f      	str	r7, [r5, #0]
 8003b2e:	b1b9      	cbz	r1, 8003b60 <__sflush_r+0xac>
 8003b30:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003b34:	4299      	cmp	r1, r3
 8003b36:	d002      	beq.n	8003b3e <__sflush_r+0x8a>
 8003b38:	4628      	mov	r0, r5
 8003b3a:	f7ff fec3 	bl	80038c4 <_free_r>
 8003b3e:	2300      	movs	r3, #0
 8003b40:	6363      	str	r3, [r4, #52]	@ 0x34
 8003b42:	e00d      	b.n	8003b60 <__sflush_r+0xac>
 8003b44:	2301      	movs	r3, #1
 8003b46:	4628      	mov	r0, r5
 8003b48:	47b0      	blx	r6
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	1c50      	adds	r0, r2, #1
 8003b4e:	d1c9      	bne.n	8003ae4 <__sflush_r+0x30>
 8003b50:	682b      	ldr	r3, [r5, #0]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d0c6      	beq.n	8003ae4 <__sflush_r+0x30>
 8003b56:	2b1d      	cmp	r3, #29
 8003b58:	d001      	beq.n	8003b5e <__sflush_r+0xaa>
 8003b5a:	2b16      	cmp	r3, #22
 8003b5c:	d11d      	bne.n	8003b9a <__sflush_r+0xe6>
 8003b5e:	602f      	str	r7, [r5, #0]
 8003b60:	2000      	movs	r0, #0
 8003b62:	e021      	b.n	8003ba8 <__sflush_r+0xf4>
 8003b64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b68:	b21b      	sxth	r3, r3
 8003b6a:	e01a      	b.n	8003ba2 <__sflush_r+0xee>
 8003b6c:	690f      	ldr	r7, [r1, #16]
 8003b6e:	2f00      	cmp	r7, #0
 8003b70:	d0f6      	beq.n	8003b60 <__sflush_r+0xac>
 8003b72:	0793      	lsls	r3, r2, #30
 8003b74:	680e      	ldr	r6, [r1, #0]
 8003b76:	bf08      	it	eq
 8003b78:	694b      	ldreq	r3, [r1, #20]
 8003b7a:	600f      	str	r7, [r1, #0]
 8003b7c:	bf18      	it	ne
 8003b7e:	2300      	movne	r3, #0
 8003b80:	1bf6      	subs	r6, r6, r7
 8003b82:	608b      	str	r3, [r1, #8]
 8003b84:	2e00      	cmp	r6, #0
 8003b86:	ddeb      	ble.n	8003b60 <__sflush_r+0xac>
 8003b88:	6a21      	ldr	r1, [r4, #32]
 8003b8a:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8003b8e:	4633      	mov	r3, r6
 8003b90:	463a      	mov	r2, r7
 8003b92:	4628      	mov	r0, r5
 8003b94:	47e0      	blx	ip
 8003b96:	2800      	cmp	r0, #0
 8003b98:	dc07      	bgt.n	8003baa <__sflush_r+0xf6>
 8003b9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ba2:	81a3      	strh	r3, [r4, #12]
 8003ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003baa:	4407      	add	r7, r0
 8003bac:	1a36      	subs	r6, r6, r0
 8003bae:	e7e9      	b.n	8003b84 <__sflush_r+0xd0>
 8003bb0:	20400001 	.word	0x20400001

08003bb4 <_fflush_r>:
 8003bb4:	b538      	push	{r3, r4, r5, lr}
 8003bb6:	690b      	ldr	r3, [r1, #16]
 8003bb8:	4605      	mov	r5, r0
 8003bba:	460c      	mov	r4, r1
 8003bbc:	b913      	cbnz	r3, 8003bc4 <_fflush_r+0x10>
 8003bbe:	2500      	movs	r5, #0
 8003bc0:	4628      	mov	r0, r5
 8003bc2:	bd38      	pop	{r3, r4, r5, pc}
 8003bc4:	b118      	cbz	r0, 8003bce <_fflush_r+0x1a>
 8003bc6:	6a03      	ldr	r3, [r0, #32]
 8003bc8:	b90b      	cbnz	r3, 8003bce <_fflush_r+0x1a>
 8003bca:	f7ff fc93 	bl	80034f4 <__sinit>
 8003bce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d0f3      	beq.n	8003bbe <_fflush_r+0xa>
 8003bd6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003bd8:	07d0      	lsls	r0, r2, #31
 8003bda:	d404      	bmi.n	8003be6 <_fflush_r+0x32>
 8003bdc:	0599      	lsls	r1, r3, #22
 8003bde:	d402      	bmi.n	8003be6 <_fflush_r+0x32>
 8003be0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003be2:	f7ff fe6c 	bl	80038be <__retarget_lock_acquire_recursive>
 8003be6:	4628      	mov	r0, r5
 8003be8:	4621      	mov	r1, r4
 8003bea:	f7ff ff63 	bl	8003ab4 <__sflush_r>
 8003bee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003bf0:	07da      	lsls	r2, r3, #31
 8003bf2:	4605      	mov	r5, r0
 8003bf4:	d4e4      	bmi.n	8003bc0 <_fflush_r+0xc>
 8003bf6:	89a3      	ldrh	r3, [r4, #12]
 8003bf8:	059b      	lsls	r3, r3, #22
 8003bfa:	d4e1      	bmi.n	8003bc0 <_fflush_r+0xc>
 8003bfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003bfe:	f7ff fe5f 	bl	80038c0 <__retarget_lock_release_recursive>
 8003c02:	e7dd      	b.n	8003bc0 <_fflush_r+0xc>

08003c04 <__swhatbuf_r>:
 8003c04:	b570      	push	{r4, r5, r6, lr}
 8003c06:	460c      	mov	r4, r1
 8003c08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c0c:	2900      	cmp	r1, #0
 8003c0e:	b096      	sub	sp, #88	@ 0x58
 8003c10:	4615      	mov	r5, r2
 8003c12:	461e      	mov	r6, r3
 8003c14:	da0d      	bge.n	8003c32 <__swhatbuf_r+0x2e>
 8003c16:	89a3      	ldrh	r3, [r4, #12]
 8003c18:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003c1c:	f04f 0100 	mov.w	r1, #0
 8003c20:	bf14      	ite	ne
 8003c22:	2340      	movne	r3, #64	@ 0x40
 8003c24:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003c28:	2000      	movs	r0, #0
 8003c2a:	6031      	str	r1, [r6, #0]
 8003c2c:	602b      	str	r3, [r5, #0]
 8003c2e:	b016      	add	sp, #88	@ 0x58
 8003c30:	bd70      	pop	{r4, r5, r6, pc}
 8003c32:	466a      	mov	r2, sp
 8003c34:	f000 f848 	bl	8003cc8 <_fstat_r>
 8003c38:	2800      	cmp	r0, #0
 8003c3a:	dbec      	blt.n	8003c16 <__swhatbuf_r+0x12>
 8003c3c:	9901      	ldr	r1, [sp, #4]
 8003c3e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003c42:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003c46:	4259      	negs	r1, r3
 8003c48:	4159      	adcs	r1, r3
 8003c4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003c4e:	e7eb      	b.n	8003c28 <__swhatbuf_r+0x24>

08003c50 <__smakebuf_r>:
 8003c50:	898b      	ldrh	r3, [r1, #12]
 8003c52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c54:	079d      	lsls	r5, r3, #30
 8003c56:	4606      	mov	r6, r0
 8003c58:	460c      	mov	r4, r1
 8003c5a:	d507      	bpl.n	8003c6c <__smakebuf_r+0x1c>
 8003c5c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003c60:	6023      	str	r3, [r4, #0]
 8003c62:	6123      	str	r3, [r4, #16]
 8003c64:	2301      	movs	r3, #1
 8003c66:	6163      	str	r3, [r4, #20]
 8003c68:	b003      	add	sp, #12
 8003c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c6c:	ab01      	add	r3, sp, #4
 8003c6e:	466a      	mov	r2, sp
 8003c70:	f7ff ffc8 	bl	8003c04 <__swhatbuf_r>
 8003c74:	9f00      	ldr	r7, [sp, #0]
 8003c76:	4605      	mov	r5, r0
 8003c78:	4639      	mov	r1, r7
 8003c7a:	4630      	mov	r0, r6
 8003c7c:	f7ff fe8e 	bl	800399c <_malloc_r>
 8003c80:	b948      	cbnz	r0, 8003c96 <__smakebuf_r+0x46>
 8003c82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c86:	059a      	lsls	r2, r3, #22
 8003c88:	d4ee      	bmi.n	8003c68 <__smakebuf_r+0x18>
 8003c8a:	f023 0303 	bic.w	r3, r3, #3
 8003c8e:	f043 0302 	orr.w	r3, r3, #2
 8003c92:	81a3      	strh	r3, [r4, #12]
 8003c94:	e7e2      	b.n	8003c5c <__smakebuf_r+0xc>
 8003c96:	89a3      	ldrh	r3, [r4, #12]
 8003c98:	6020      	str	r0, [r4, #0]
 8003c9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c9e:	81a3      	strh	r3, [r4, #12]
 8003ca0:	9b01      	ldr	r3, [sp, #4]
 8003ca2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003ca6:	b15b      	cbz	r3, 8003cc0 <__smakebuf_r+0x70>
 8003ca8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003cac:	4630      	mov	r0, r6
 8003cae:	f000 f81d 	bl	8003cec <_isatty_r>
 8003cb2:	b128      	cbz	r0, 8003cc0 <__smakebuf_r+0x70>
 8003cb4:	89a3      	ldrh	r3, [r4, #12]
 8003cb6:	f023 0303 	bic.w	r3, r3, #3
 8003cba:	f043 0301 	orr.w	r3, r3, #1
 8003cbe:	81a3      	strh	r3, [r4, #12]
 8003cc0:	89a3      	ldrh	r3, [r4, #12]
 8003cc2:	431d      	orrs	r5, r3
 8003cc4:	81a5      	strh	r5, [r4, #12]
 8003cc6:	e7cf      	b.n	8003c68 <__smakebuf_r+0x18>

08003cc8 <_fstat_r>:
 8003cc8:	b538      	push	{r3, r4, r5, lr}
 8003cca:	4d07      	ldr	r5, [pc, #28]	@ (8003ce8 <_fstat_r+0x20>)
 8003ccc:	2300      	movs	r3, #0
 8003cce:	4604      	mov	r4, r0
 8003cd0:	4608      	mov	r0, r1
 8003cd2:	4611      	mov	r1, r2
 8003cd4:	602b      	str	r3, [r5, #0]
 8003cd6:	f7fc fe39 	bl	800094c <_fstat>
 8003cda:	1c43      	adds	r3, r0, #1
 8003cdc:	d102      	bne.n	8003ce4 <_fstat_r+0x1c>
 8003cde:	682b      	ldr	r3, [r5, #0]
 8003ce0:	b103      	cbz	r3, 8003ce4 <_fstat_r+0x1c>
 8003ce2:	6023      	str	r3, [r4, #0]
 8003ce4:	bd38      	pop	{r3, r4, r5, pc}
 8003ce6:	bf00      	nop
 8003ce8:	2000025c 	.word	0x2000025c

08003cec <_isatty_r>:
 8003cec:	b538      	push	{r3, r4, r5, lr}
 8003cee:	4d06      	ldr	r5, [pc, #24]	@ (8003d08 <_isatty_r+0x1c>)
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	4604      	mov	r4, r0
 8003cf4:	4608      	mov	r0, r1
 8003cf6:	602b      	str	r3, [r5, #0]
 8003cf8:	f7fc fe37 	bl	800096a <_isatty>
 8003cfc:	1c43      	adds	r3, r0, #1
 8003cfe:	d102      	bne.n	8003d06 <_isatty_r+0x1a>
 8003d00:	682b      	ldr	r3, [r5, #0]
 8003d02:	b103      	cbz	r3, 8003d06 <_isatty_r+0x1a>
 8003d04:	6023      	str	r3, [r4, #0]
 8003d06:	bd38      	pop	{r3, r4, r5, pc}
 8003d08:	2000025c 	.word	0x2000025c

08003d0c <_sbrk_r>:
 8003d0c:	b538      	push	{r3, r4, r5, lr}
 8003d0e:	4d06      	ldr	r5, [pc, #24]	@ (8003d28 <_sbrk_r+0x1c>)
 8003d10:	2300      	movs	r3, #0
 8003d12:	4604      	mov	r4, r0
 8003d14:	4608      	mov	r0, r1
 8003d16:	602b      	str	r3, [r5, #0]
 8003d18:	f7fc fe3e 	bl	8000998 <_sbrk>
 8003d1c:	1c43      	adds	r3, r0, #1
 8003d1e:	d102      	bne.n	8003d26 <_sbrk_r+0x1a>
 8003d20:	682b      	ldr	r3, [r5, #0]
 8003d22:	b103      	cbz	r3, 8003d26 <_sbrk_r+0x1a>
 8003d24:	6023      	str	r3, [r4, #0]
 8003d26:	bd38      	pop	{r3, r4, r5, pc}
 8003d28:	2000025c 	.word	0x2000025c

08003d2c <_init>:
 8003d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d2e:	bf00      	nop
 8003d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d32:	bc08      	pop	{r3}
 8003d34:	469e      	mov	lr, r3
 8003d36:	4770      	bx	lr

08003d38 <_fini>:
 8003d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d3a:	bf00      	nop
 8003d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d3e:	bc08      	pop	{r3}
 8003d40:	469e      	mov	lr, r3
 8003d42:	4770      	bx	lr
