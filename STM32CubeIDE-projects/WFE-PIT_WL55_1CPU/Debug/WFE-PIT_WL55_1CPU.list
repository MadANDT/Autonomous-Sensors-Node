
WFE-PIT_WL55_1CPU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c94  08000138  08000138  00001138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  08003dcc  08003dcc  00004dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f80  08003f80  00005068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003f80  08003f80  00004f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f88  08003f88  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f88  08003f88  00004f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003f8c  08003f8c  00004f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003f90  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  20000068  08003ff8  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  08003ff8  0000526c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ecd3  00000000  00000000  00005092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022e3  00000000  00000000  00013d65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc0  00000000  00000000  00016048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000be7  00000000  00000000  00017008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cdf4  00000000  00000000  00017bef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e646  00000000  00000000  000349e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b20f6  00000000  00000000  00043029  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f511f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004724  00000000  00000000  000f5164  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000f9888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	@ (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	@ (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000068 	.word	0x20000068
 8000154:	00000000 	.word	0x00000000
 8000158:	08003db4 	.word	0x08003db4

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	@ (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	@ (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	@ (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	2000006c 	.word	0x2000006c
 8000174:	08003db4 	.word	0x08003db4

08000178 <__aeabi_uldivmod>:
 8000178:	b953      	cbnz	r3, 8000190 <__aeabi_uldivmod+0x18>
 800017a:	b94a      	cbnz	r2, 8000190 <__aeabi_uldivmod+0x18>
 800017c:	2900      	cmp	r1, #0
 800017e:	bf08      	it	eq
 8000180:	2800      	cmpeq	r0, #0
 8000182:	bf1c      	itt	ne
 8000184:	f04f 31ff 	movne.w	r1, #4294967295
 8000188:	f04f 30ff 	movne.w	r0, #4294967295
 800018c:	f000 b988 	b.w	80004a0 <__aeabi_idiv0>
 8000190:	f1ad 0c08 	sub.w	ip, sp, #8
 8000194:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000198:	f000 f806 	bl	80001a8 <__udivmoddi4>
 800019c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a4:	b004      	add	sp, #16
 80001a6:	4770      	bx	lr

080001a8 <__udivmoddi4>:
 80001a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001ac:	9d08      	ldr	r5, [sp, #32]
 80001ae:	468e      	mov	lr, r1
 80001b0:	4604      	mov	r4, r0
 80001b2:	4688      	mov	r8, r1
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d14a      	bne.n	800024e <__udivmoddi4+0xa6>
 80001b8:	428a      	cmp	r2, r1
 80001ba:	4617      	mov	r7, r2
 80001bc:	d962      	bls.n	8000284 <__udivmoddi4+0xdc>
 80001be:	fab2 f682 	clz	r6, r2
 80001c2:	b14e      	cbz	r6, 80001d8 <__udivmoddi4+0x30>
 80001c4:	f1c6 0320 	rsb	r3, r6, #32
 80001c8:	fa01 f806 	lsl.w	r8, r1, r6
 80001cc:	fa20 f303 	lsr.w	r3, r0, r3
 80001d0:	40b7      	lsls	r7, r6
 80001d2:	ea43 0808 	orr.w	r8, r3, r8
 80001d6:	40b4      	lsls	r4, r6
 80001d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80001dc:	fa1f fc87 	uxth.w	ip, r7
 80001e0:	fbb8 f1fe 	udiv	r1, r8, lr
 80001e4:	0c23      	lsrs	r3, r4, #16
 80001e6:	fb0e 8811 	mls	r8, lr, r1, r8
 80001ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001ee:	fb01 f20c 	mul.w	r2, r1, ip
 80001f2:	429a      	cmp	r2, r3
 80001f4:	d909      	bls.n	800020a <__udivmoddi4+0x62>
 80001f6:	18fb      	adds	r3, r7, r3
 80001f8:	f101 30ff 	add.w	r0, r1, #4294967295
 80001fc:	f080 80ea 	bcs.w	80003d4 <__udivmoddi4+0x22c>
 8000200:	429a      	cmp	r2, r3
 8000202:	f240 80e7 	bls.w	80003d4 <__udivmoddi4+0x22c>
 8000206:	3902      	subs	r1, #2
 8000208:	443b      	add	r3, r7
 800020a:	1a9a      	subs	r2, r3, r2
 800020c:	b2a3      	uxth	r3, r4
 800020e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000212:	fb0e 2210 	mls	r2, lr, r0, r2
 8000216:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800021a:	fb00 fc0c 	mul.w	ip, r0, ip
 800021e:	459c      	cmp	ip, r3
 8000220:	d909      	bls.n	8000236 <__udivmoddi4+0x8e>
 8000222:	18fb      	adds	r3, r7, r3
 8000224:	f100 32ff 	add.w	r2, r0, #4294967295
 8000228:	f080 80d6 	bcs.w	80003d8 <__udivmoddi4+0x230>
 800022c:	459c      	cmp	ip, r3
 800022e:	f240 80d3 	bls.w	80003d8 <__udivmoddi4+0x230>
 8000232:	443b      	add	r3, r7
 8000234:	3802      	subs	r0, #2
 8000236:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800023a:	eba3 030c 	sub.w	r3, r3, ip
 800023e:	2100      	movs	r1, #0
 8000240:	b11d      	cbz	r5, 800024a <__udivmoddi4+0xa2>
 8000242:	40f3      	lsrs	r3, r6
 8000244:	2200      	movs	r2, #0
 8000246:	e9c5 3200 	strd	r3, r2, [r5]
 800024a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800024e:	428b      	cmp	r3, r1
 8000250:	d905      	bls.n	800025e <__udivmoddi4+0xb6>
 8000252:	b10d      	cbz	r5, 8000258 <__udivmoddi4+0xb0>
 8000254:	e9c5 0100 	strd	r0, r1, [r5]
 8000258:	2100      	movs	r1, #0
 800025a:	4608      	mov	r0, r1
 800025c:	e7f5      	b.n	800024a <__udivmoddi4+0xa2>
 800025e:	fab3 f183 	clz	r1, r3
 8000262:	2900      	cmp	r1, #0
 8000264:	d146      	bne.n	80002f4 <__udivmoddi4+0x14c>
 8000266:	4573      	cmp	r3, lr
 8000268:	d302      	bcc.n	8000270 <__udivmoddi4+0xc8>
 800026a:	4282      	cmp	r2, r0
 800026c:	f200 8105 	bhi.w	800047a <__udivmoddi4+0x2d2>
 8000270:	1a84      	subs	r4, r0, r2
 8000272:	eb6e 0203 	sbc.w	r2, lr, r3
 8000276:	2001      	movs	r0, #1
 8000278:	4690      	mov	r8, r2
 800027a:	2d00      	cmp	r5, #0
 800027c:	d0e5      	beq.n	800024a <__udivmoddi4+0xa2>
 800027e:	e9c5 4800 	strd	r4, r8, [r5]
 8000282:	e7e2      	b.n	800024a <__udivmoddi4+0xa2>
 8000284:	2a00      	cmp	r2, #0
 8000286:	f000 8090 	beq.w	80003aa <__udivmoddi4+0x202>
 800028a:	fab2 f682 	clz	r6, r2
 800028e:	2e00      	cmp	r6, #0
 8000290:	f040 80a4 	bne.w	80003dc <__udivmoddi4+0x234>
 8000294:	1a8a      	subs	r2, r1, r2
 8000296:	0c03      	lsrs	r3, r0, #16
 8000298:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800029c:	b280      	uxth	r0, r0
 800029e:	b2bc      	uxth	r4, r7
 80002a0:	2101      	movs	r1, #1
 80002a2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002a6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ae:	fb04 f20c 	mul.w	r2, r4, ip
 80002b2:	429a      	cmp	r2, r3
 80002b4:	d907      	bls.n	80002c6 <__udivmoddi4+0x11e>
 80002b6:	18fb      	adds	r3, r7, r3
 80002b8:	f10c 38ff 	add.w	r8, ip, #4294967295
 80002bc:	d202      	bcs.n	80002c4 <__udivmoddi4+0x11c>
 80002be:	429a      	cmp	r2, r3
 80002c0:	f200 80e0 	bhi.w	8000484 <__udivmoddi4+0x2dc>
 80002c4:	46c4      	mov	ip, r8
 80002c6:	1a9b      	subs	r3, r3, r2
 80002c8:	fbb3 f2fe 	udiv	r2, r3, lr
 80002cc:	fb0e 3312 	mls	r3, lr, r2, r3
 80002d0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80002d4:	fb02 f404 	mul.w	r4, r2, r4
 80002d8:	429c      	cmp	r4, r3
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0x144>
 80002dc:	18fb      	adds	r3, r7, r3
 80002de:	f102 30ff 	add.w	r0, r2, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0x142>
 80002e4:	429c      	cmp	r4, r3
 80002e6:	f200 80ca 	bhi.w	800047e <__udivmoddi4+0x2d6>
 80002ea:	4602      	mov	r2, r0
 80002ec:	1b1b      	subs	r3, r3, r4
 80002ee:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80002f2:	e7a5      	b.n	8000240 <__udivmoddi4+0x98>
 80002f4:	f1c1 0620 	rsb	r6, r1, #32
 80002f8:	408b      	lsls	r3, r1
 80002fa:	fa22 f706 	lsr.w	r7, r2, r6
 80002fe:	431f      	orrs	r7, r3
 8000300:	fa0e f401 	lsl.w	r4, lr, r1
 8000304:	fa20 f306 	lsr.w	r3, r0, r6
 8000308:	fa2e fe06 	lsr.w	lr, lr, r6
 800030c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000310:	4323      	orrs	r3, r4
 8000312:	fa00 f801 	lsl.w	r8, r0, r1
 8000316:	fa1f fc87 	uxth.w	ip, r7
 800031a:	fbbe f0f9 	udiv	r0, lr, r9
 800031e:	0c1c      	lsrs	r4, r3, #16
 8000320:	fb09 ee10 	mls	lr, r9, r0, lr
 8000324:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000328:	fb00 fe0c 	mul.w	lr, r0, ip
 800032c:	45a6      	cmp	lr, r4
 800032e:	fa02 f201 	lsl.w	r2, r2, r1
 8000332:	d909      	bls.n	8000348 <__udivmoddi4+0x1a0>
 8000334:	193c      	adds	r4, r7, r4
 8000336:	f100 3aff 	add.w	sl, r0, #4294967295
 800033a:	f080 809c 	bcs.w	8000476 <__udivmoddi4+0x2ce>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f240 8099 	bls.w	8000476 <__udivmoddi4+0x2ce>
 8000344:	3802      	subs	r0, #2
 8000346:	443c      	add	r4, r7
 8000348:	eba4 040e 	sub.w	r4, r4, lr
 800034c:	fa1f fe83 	uxth.w	lr, r3
 8000350:	fbb4 f3f9 	udiv	r3, r4, r9
 8000354:	fb09 4413 	mls	r4, r9, r3, r4
 8000358:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800035c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000360:	45a4      	cmp	ip, r4
 8000362:	d908      	bls.n	8000376 <__udivmoddi4+0x1ce>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f103 3eff 	add.w	lr, r3, #4294967295
 800036a:	f080 8082 	bcs.w	8000472 <__udivmoddi4+0x2ca>
 800036e:	45a4      	cmp	ip, r4
 8000370:	d97f      	bls.n	8000472 <__udivmoddi4+0x2ca>
 8000372:	3b02      	subs	r3, #2
 8000374:	443c      	add	r4, r7
 8000376:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800037a:	eba4 040c 	sub.w	r4, r4, ip
 800037e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000382:	4564      	cmp	r4, ip
 8000384:	4673      	mov	r3, lr
 8000386:	46e1      	mov	r9, ip
 8000388:	d362      	bcc.n	8000450 <__udivmoddi4+0x2a8>
 800038a:	d05f      	beq.n	800044c <__udivmoddi4+0x2a4>
 800038c:	b15d      	cbz	r5, 80003a6 <__udivmoddi4+0x1fe>
 800038e:	ebb8 0203 	subs.w	r2, r8, r3
 8000392:	eb64 0409 	sbc.w	r4, r4, r9
 8000396:	fa04 f606 	lsl.w	r6, r4, r6
 800039a:	fa22 f301 	lsr.w	r3, r2, r1
 800039e:	431e      	orrs	r6, r3
 80003a0:	40cc      	lsrs	r4, r1
 80003a2:	e9c5 6400 	strd	r6, r4, [r5]
 80003a6:	2100      	movs	r1, #0
 80003a8:	e74f      	b.n	800024a <__udivmoddi4+0xa2>
 80003aa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003ae:	0c01      	lsrs	r1, r0, #16
 80003b0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80003ba:	463b      	mov	r3, r7
 80003bc:	4638      	mov	r0, r7
 80003be:	463c      	mov	r4, r7
 80003c0:	46b8      	mov	r8, r7
 80003c2:	46be      	mov	lr, r7
 80003c4:	2620      	movs	r6, #32
 80003c6:	fbb1 f1f7 	udiv	r1, r1, r7
 80003ca:	eba2 0208 	sub.w	r2, r2, r8
 80003ce:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80003d2:	e766      	b.n	80002a2 <__udivmoddi4+0xfa>
 80003d4:	4601      	mov	r1, r0
 80003d6:	e718      	b.n	800020a <__udivmoddi4+0x62>
 80003d8:	4610      	mov	r0, r2
 80003da:	e72c      	b.n	8000236 <__udivmoddi4+0x8e>
 80003dc:	f1c6 0220 	rsb	r2, r6, #32
 80003e0:	fa2e f302 	lsr.w	r3, lr, r2
 80003e4:	40b7      	lsls	r7, r6
 80003e6:	40b1      	lsls	r1, r6
 80003e8:	fa20 f202 	lsr.w	r2, r0, r2
 80003ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f0:	430a      	orrs	r2, r1
 80003f2:	fbb3 f8fe 	udiv	r8, r3, lr
 80003f6:	b2bc      	uxth	r4, r7
 80003f8:	fb0e 3318 	mls	r3, lr, r8, r3
 80003fc:	0c11      	lsrs	r1, r2, #16
 80003fe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000402:	fb08 f904 	mul.w	r9, r8, r4
 8000406:	40b0      	lsls	r0, r6
 8000408:	4589      	cmp	r9, r1
 800040a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800040e:	b280      	uxth	r0, r0
 8000410:	d93e      	bls.n	8000490 <__udivmoddi4+0x2e8>
 8000412:	1879      	adds	r1, r7, r1
 8000414:	f108 3cff 	add.w	ip, r8, #4294967295
 8000418:	d201      	bcs.n	800041e <__udivmoddi4+0x276>
 800041a:	4589      	cmp	r9, r1
 800041c:	d81f      	bhi.n	800045e <__udivmoddi4+0x2b6>
 800041e:	eba1 0109 	sub.w	r1, r1, r9
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fb09 f804 	mul.w	r8, r9, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	b292      	uxth	r2, r2
 8000430:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000434:	4542      	cmp	r2, r8
 8000436:	d229      	bcs.n	800048c <__udivmoddi4+0x2e4>
 8000438:	18ba      	adds	r2, r7, r2
 800043a:	f109 31ff 	add.w	r1, r9, #4294967295
 800043e:	d2c4      	bcs.n	80003ca <__udivmoddi4+0x222>
 8000440:	4542      	cmp	r2, r8
 8000442:	d2c2      	bcs.n	80003ca <__udivmoddi4+0x222>
 8000444:	f1a9 0102 	sub.w	r1, r9, #2
 8000448:	443a      	add	r2, r7
 800044a:	e7be      	b.n	80003ca <__udivmoddi4+0x222>
 800044c:	45f0      	cmp	r8, lr
 800044e:	d29d      	bcs.n	800038c <__udivmoddi4+0x1e4>
 8000450:	ebbe 0302 	subs.w	r3, lr, r2
 8000454:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000458:	3801      	subs	r0, #1
 800045a:	46e1      	mov	r9, ip
 800045c:	e796      	b.n	800038c <__udivmoddi4+0x1e4>
 800045e:	eba7 0909 	sub.w	r9, r7, r9
 8000462:	4449      	add	r1, r9
 8000464:	f1a8 0c02 	sub.w	ip, r8, #2
 8000468:	fbb1 f9fe 	udiv	r9, r1, lr
 800046c:	fb09 f804 	mul.w	r8, r9, r4
 8000470:	e7db      	b.n	800042a <__udivmoddi4+0x282>
 8000472:	4673      	mov	r3, lr
 8000474:	e77f      	b.n	8000376 <__udivmoddi4+0x1ce>
 8000476:	4650      	mov	r0, sl
 8000478:	e766      	b.n	8000348 <__udivmoddi4+0x1a0>
 800047a:	4608      	mov	r0, r1
 800047c:	e6fd      	b.n	800027a <__udivmoddi4+0xd2>
 800047e:	443b      	add	r3, r7
 8000480:	3a02      	subs	r2, #2
 8000482:	e733      	b.n	80002ec <__udivmoddi4+0x144>
 8000484:	f1ac 0c02 	sub.w	ip, ip, #2
 8000488:	443b      	add	r3, r7
 800048a:	e71c      	b.n	80002c6 <__udivmoddi4+0x11e>
 800048c:	4649      	mov	r1, r9
 800048e:	e79c      	b.n	80003ca <__udivmoddi4+0x222>
 8000490:	eba1 0109 	sub.w	r1, r1, r9
 8000494:	46c4      	mov	ip, r8
 8000496:	fbb1 f9fe 	udiv	r9, r1, lr
 800049a:	fb09 f804 	mul.w	r8, r9, r4
 800049e:	e7c4      	b.n	800042a <__udivmoddi4+0x282>

080004a0 <__aeabi_idiv0>:
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop

080004a4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004a4:	b480      	push	{r7}
 80004a6:	b085      	sub	sp, #20
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80004b0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80004b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	4313      	orrs	r3, r2
 80004ba:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80004c0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	4013      	ands	r3, r2
 80004c6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004c8:	68fb      	ldr	r3, [r7, #12]
}
 80004ca:	bf00      	nop
 80004cc:	3714      	adds	r7, #20
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bc80      	pop	{r7}
 80004d2:	4770      	bx	lr

080004d4 <LL_APB1_GRP1_DisableClockSleep>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1

  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClockSleep(uint32_t Periphs)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1SMENR1, Periphs);
 80004dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80004e0:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	43db      	mvns	r3, r3
 80004e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80004ea:	4013      	ands	r3, r2
 80004ec:	678b      	str	r3, [r1, #120]	@ 0x78
}
 80004ee:	bf00      	nop
 80004f0:	370c      	adds	r7, #12
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bc80      	pop	{r7}
 80004f6:	4770      	bx	lr

080004f8 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch){
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, &ch, 1, 1000);
 8000500:	1d39      	adds	r1, r7, #4
 8000502:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000506:	2201      	movs	r2, #1
 8000508:	4803      	ldr	r0, [pc, #12]	@ (8000518 <__io_putchar+0x20>)
 800050a:	f002 f9f2 	bl	80028f2 <HAL_UART_Transmit>
}
 800050e:	bf00      	nop
 8000510:	4618      	mov	r0, r3
 8000512:	3708      	adds	r7, #8
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	20000084 	.word	0x20000084

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000520:	f000 faaa 	bl	8000a78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000524:	f000 f830 	bl	8000588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000528:	f000 f8da 	bl	80006e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800052c:	f000 f88c 	bl	8000648 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // we want the peripheral to send an event to the MCU, but the peripheral can't do it itself;
  // enabling the special bit called "Send EVent ON PENDing" allows it to do so
  	  HAL_PWR_EnableSEVOnPend();
 8000530:	f000 fdfc 	bl	800112c <HAL_PWR_EnableSEVOnPend>
  	  printf("\r\n\r\nTest d'une appli mode veille sur STM32\r\n");
 8000534:	480f      	ldr	r0, [pc, #60]	@ (8000574 <main+0x58>)
 8000536:	f003 f8ad 	bl	8003694 <puts>

  while (1)
  {
	  printf("Exécution de la boucle While\r\n");
 800053a:	480f      	ldr	r0, [pc, #60]	@ (8000578 <main+0x5c>)
 800053c:	f003 f8aa 	bl	8003694 <puts>
	  printf("Le µCU entre en veille normale via WFE - type Pending InTerrupt\r\n\r\n");
 8000540:	480e      	ldr	r0, [pc, #56]	@ (800057c <main+0x60>)
 8000542:	f003 f8a7 	bl	8003694 <puts>
	  __HAL_RCC_USART2_CLK_SLEEP_DISABLE(); // Clock-gating the USART2 peripheral
 8000546:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800054a:	f7ff ffc3 	bl	80004d4 <LL_APB1_GRP1_DisableClockSleep>

	  HAL_SuspendTick();
 800054e:	f000 fb09 	bl	8000b64 <HAL_SuspendTick>
	  /* The documentation states that when the MCU wakes up, "the peripheral interrupt
	   * pending bit (1) and the NVIC peripheral IRQ pendant bit (2) have to be cleared"
	   */
	  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);	//(1): peripheral is GPIO, and we use the user button on pin PA0
 8000552:	4b0b      	ldr	r3, [pc, #44]	@ (8000580 <main+0x64>)
 8000554:	2201      	movs	r2, #1
 8000556:	60da      	str	r2, [r3, #12]
	  HAL_NVIC_ClearPendingIRQ(EXTI0_IRQn); //(2)
 8000558:	2006      	movs	r0, #6
 800055a:	f000 fc1e 	bl	8000d9a <HAL_NVIC_ClearPendingIRQ>
	  /* (1) & (2) must be called before entering sleep mode;
	   * otherwise the MCU won't wake-up if either one of these flasg is ON
	   */
	  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFE); // Entering normal sleep mode
 800055e:	2102      	movs	r1, #2
 8000560:	2000      	movs	r0, #0
 8000562:	f000 fdaf 	bl	80010c4 <HAL_PWR_EnterSLEEPMode>
	  /* ####----####
	   * MCU is asleep
	   * ####----####
	   */

	  HAL_ResumeTick();
 8000566:	f000 fb0b 	bl	8000b80 <HAL_ResumeTick>
	  printf("Réveil par pression du Bouton 1 et son interruption pendante\r\n");
 800056a:	4806      	ldr	r0, [pc, #24]	@ (8000584 <main+0x68>)
 800056c:	f003 f892 	bl	8003694 <puts>
	  printf("Exécution de la boucle While\r\n");
 8000570:	bf00      	nop
 8000572:	e7e2      	b.n	800053a <main+0x1e>
 8000574:	08003dcc 	.word	0x08003dcc
 8000578:	08003df8 	.word	0x08003df8
 800057c:	08003e18 	.word	0x08003e18
 8000580:	58000800 	.word	0x58000800
 8000584:	08003e5c 	.word	0x08003e5c

08000588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b09a      	sub	sp, #104	@ 0x68
 800058c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	f107 0320 	add.w	r3, r7, #32
 8000592:	2248      	movs	r2, #72	@ 0x48
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f003 f95c 	bl	8003854 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059c:	1d3b      	adds	r3, r7, #4
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
 80005a6:	60da      	str	r2, [r3, #12]
 80005a8:	611a      	str	r2, [r3, #16]
 80005aa:	615a      	str	r2, [r3, #20]
 80005ac:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ae:	4b25      	ldr	r3, [pc, #148]	@ (8000644 <SystemClock_Config+0xbc>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80005b6:	4a23      	ldr	r2, [pc, #140]	@ (8000644 <SystemClock_Config+0xbc>)
 80005b8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80005bc:	6013      	str	r3, [r2, #0]
 80005be:	4b21      	ldr	r3, [pc, #132]	@ (8000644 <SystemClock_Config+0xbc>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80005c6:	603b      	str	r3, [r7, #0]
 80005c8:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005ca:	2320      	movs	r3, #32
 80005cc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005ce:	2301      	movs	r3, #1
 80005d0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80005d2:	2300      	movs	r3, #0
 80005d4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005d6:	2360      	movs	r3, #96	@ 0x60
 80005d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005da:	2302      	movs	r3, #2
 80005dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005de:	2301      	movs	r3, #1
 80005e0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 24;
 80005e6:	2318      	movs	r3, #24
 80005e8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ea:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80005ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005f0:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80005f4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80005fa:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fc:	f107 0320 	add.w	r3, r7, #32
 8000600:	4618      	mov	r0, r3
 8000602:	f001 f8a9 	bl	8001758 <HAL_RCC_OscConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800060c:	f000 f8b6 	bl	800077c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8000610:	234f      	movs	r3, #79	@ 0x4f
 8000612:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000614:	2303      	movs	r3, #3
 8000616:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000624:	2300      	movs	r3, #0
 8000626:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	2102      	movs	r1, #2
 800062c:	4618      	mov	r0, r3
 800062e:	f001 fc15 	bl	8001e5c <HAL_RCC_ClockConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000638:	f000 f8a0 	bl	800077c <Error_Handler>
  }
}
 800063c:	bf00      	nop
 800063e:	3768      	adds	r7, #104	@ 0x68
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	58000400 	.word	0x58000400

08000648 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800064c:	4b22      	ldr	r3, [pc, #136]	@ (80006d8 <MX_USART2_UART_Init+0x90>)
 800064e:	4a23      	ldr	r2, [pc, #140]	@ (80006dc <MX_USART2_UART_Init+0x94>)
 8000650:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000652:	4b21      	ldr	r3, [pc, #132]	@ (80006d8 <MX_USART2_UART_Init+0x90>)
 8000654:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000658:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800065a:	4b1f      	ldr	r3, [pc, #124]	@ (80006d8 <MX_USART2_UART_Init+0x90>)
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000660:	4b1d      	ldr	r3, [pc, #116]	@ (80006d8 <MX_USART2_UART_Init+0x90>)
 8000662:	2200      	movs	r2, #0
 8000664:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000666:	4b1c      	ldr	r3, [pc, #112]	@ (80006d8 <MX_USART2_UART_Init+0x90>)
 8000668:	2200      	movs	r2, #0
 800066a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800066c:	4b1a      	ldr	r3, [pc, #104]	@ (80006d8 <MX_USART2_UART_Init+0x90>)
 800066e:	220c      	movs	r2, #12
 8000670:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000672:	4b19      	ldr	r3, [pc, #100]	@ (80006d8 <MX_USART2_UART_Init+0x90>)
 8000674:	2200      	movs	r2, #0
 8000676:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000678:	4b17      	ldr	r3, [pc, #92]	@ (80006d8 <MX_USART2_UART_Init+0x90>)
 800067a:	2200      	movs	r2, #0
 800067c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800067e:	4b16      	ldr	r3, [pc, #88]	@ (80006d8 <MX_USART2_UART_Init+0x90>)
 8000680:	2200      	movs	r2, #0
 8000682:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000684:	4b14      	ldr	r3, [pc, #80]	@ (80006d8 <MX_USART2_UART_Init+0x90>)
 8000686:	2200      	movs	r2, #0
 8000688:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800068a:	4b13      	ldr	r3, [pc, #76]	@ (80006d8 <MX_USART2_UART_Init+0x90>)
 800068c:	2200      	movs	r2, #0
 800068e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000690:	4811      	ldr	r0, [pc, #68]	@ (80006d8 <MX_USART2_UART_Init+0x90>)
 8000692:	f002 f8de 	bl	8002852 <HAL_UART_Init>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800069c:	f000 f86e 	bl	800077c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006a0:	2100      	movs	r1, #0
 80006a2:	480d      	ldr	r0, [pc, #52]	@ (80006d8 <MX_USART2_UART_Init+0x90>)
 80006a4:	f002 fe15 	bl	80032d2 <HAL_UARTEx_SetTxFifoThreshold>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80006ae:	f000 f865 	bl	800077c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006b2:	2100      	movs	r1, #0
 80006b4:	4808      	ldr	r0, [pc, #32]	@ (80006d8 <MX_USART2_UART_Init+0x90>)
 80006b6:	f002 fe4a 	bl	800334e <HAL_UARTEx_SetRxFifoThreshold>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80006c0:	f000 f85c 	bl	800077c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80006c4:	4804      	ldr	r0, [pc, #16]	@ (80006d8 <MX_USART2_UART_Init+0x90>)
 80006c6:	f002 fdcc 	bl	8003262 <HAL_UARTEx_DisableFifoMode>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80006d0:	f000 f854 	bl	800077c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20000084 	.word	0x20000084
 80006dc:	40004400 	.word	0x40004400

080006e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b086      	sub	sp, #24
 80006e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f4:	2002      	movs	r0, #2
 80006f6:	f7ff fed5 	bl	80004a4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006fa:	2004      	movs	r0, #4
 80006fc:	f7ff fed2 	bl	80004a4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000700:	2001      	movs	r0, #1
 8000702:	f7ff fecf 	bl	80004a4 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(blue_LED_GPIO_Port, blue_LED_Pin, GPIO_PIN_RESET);
 8000706:	2200      	movs	r2, #0
 8000708:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800070c:	4819      	ldr	r0, [pc, #100]	@ (8000774 <MX_GPIO_Init+0x94>)
 800070e:	f000 fcb3 	bl	8001078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 8000712:	2200      	movs	r2, #0
 8000714:	2138      	movs	r1, #56	@ 0x38
 8000716:	4818      	ldr	r0, [pc, #96]	@ (8000778 <MX_GPIO_Init+0x98>)
 8000718:	f000 fcae 	bl	8001078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : blue_LED_Pin */
  GPIO_InitStruct.Pin = blue_LED_Pin;
 800071c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000720:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000722:	2301      	movs	r3, #1
 8000724:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000726:	2300      	movs	r3, #0
 8000728:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072a:	2300      	movs	r3, #0
 800072c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(blue_LED_GPIO_Port, &GPIO_InitStruct);
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	4619      	mov	r1, r3
 8000732:	4810      	ldr	r0, [pc, #64]	@ (8000774 <MX_GPIO_Init+0x94>)
 8000734:	f000 fb40 	bl	8000db8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FE_CTRL3_Pin FE_CTRL2_Pin FE_CTRL1_Pin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 8000738:	2338      	movs	r3, #56	@ 0x38
 800073a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073c:	2301      	movs	r3, #1
 800073e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	2300      	movs	r3, #0
 8000742:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000744:	2303      	movs	r3, #3
 8000746:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000748:	1d3b      	adds	r3, r7, #4
 800074a:	4619      	mov	r1, r3
 800074c:	480a      	ldr	r0, [pc, #40]	@ (8000778 <MX_GPIO_Init+0x98>)
 800074e:	f000 fb33 	bl	8000db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : UB1_Pin */
  GPIO_InitStruct.Pin = UB1_Pin;
 8000752:	2301      	movs	r3, #1
 8000754:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000756:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800075a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800075c:	2301      	movs	r3, #1
 800075e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(UB1_GPIO_Port, &GPIO_InitStruct);
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	4619      	mov	r1, r3
 8000764:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000768:	f000 fb26 	bl	8000db8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800076c:	bf00      	nop
 800076e:	3718      	adds	r7, #24
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	48000400 	.word	0x48000400
 8000778:	48000800 	.word	0x48000800

0800077c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000780:	b672      	cpsid	i
}
 8000782:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000784:	bf00      	nop
 8000786:	e7fd      	b.n	8000784 <Error_Handler+0x8>

08000788 <LL_AHB2_GRP1_EnableClock>:
{
 8000788:	b480      	push	{r7}
 800078a:	b085      	sub	sp, #20
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000790:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000794:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000796:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	4313      	orrs	r3, r2
 800079e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80007a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80007a4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	4013      	ands	r3, r2
 80007aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007ac:	68fb      	ldr	r3, [r7, #12]
}
 80007ae:	bf00      	nop
 80007b0:	3714      	adds	r7, #20
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bc80      	pop	{r7}
 80007b6:	4770      	bx	lr

080007b8 <LL_APB1_GRP1_EnableClock>:
{
 80007b8:	b480      	push	{r7}
 80007ba:	b085      	sub	sp, #20
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80007c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80007c4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80007c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	4313      	orrs	r3, r2
 80007ce:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80007d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80007d4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4013      	ands	r3, r2
 80007da:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007dc:	68fb      	ldr	r3, [r7, #12]
}
 80007de:	bf00      	nop
 80007e0:	3714      	adds	r7, #20
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bc80      	pop	{r7}
 80007e6:	4770      	bx	lr

080007e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bc80      	pop	{r7}
 80007f2:	4770      	bx	lr

080007f4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b096      	sub	sp, #88	@ 0x58
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	609a      	str	r2, [r3, #8]
 8000808:	60da      	str	r2, [r3, #12]
 800080a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800080c:	f107 030c 	add.w	r3, r7, #12
 8000810:	2238      	movs	r2, #56	@ 0x38
 8000812:	2100      	movs	r1, #0
 8000814:	4618      	mov	r0, r3
 8000816:	f003 f81d 	bl	8003854 <memset>
  if(huart->Instance==USART2)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4a17      	ldr	r2, [pc, #92]	@ (800087c <HAL_UART_MspInit+0x88>)
 8000820:	4293      	cmp	r3, r2
 8000822:	d126      	bne.n	8000872 <HAL_UART_MspInit+0x7e>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000824:	2302      	movs	r3, #2
 8000826:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000828:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 800082c:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800082e:	f107 030c 	add.w	r3, r7, #12
 8000832:	4618      	mov	r0, r3
 8000834:	f001 fed2 	bl	80025dc <HAL_RCCEx_PeriphCLKConfig>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800083e:	f7ff ff9d 	bl	800077c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000842:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000846:	f7ff ffb7 	bl	80007b8 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800084a:	2001      	movs	r0, #1
 800084c:	f7ff ff9c 	bl	8000788 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8000850:	230c      	movs	r3, #12
 8000852:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000854:	2302      	movs	r3, #2
 8000856:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085c:	2300      	movs	r3, #0
 800085e:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000860:	2307      	movs	r3, #7
 8000862:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000864:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000868:	4619      	mov	r1, r3
 800086a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800086e:	f000 faa3 	bl	8000db8 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000872:	bf00      	nop
 8000874:	3758      	adds	r7, #88	@ 0x58
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40004400 	.word	0x40004400

08000880 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000884:	bf00      	nop
 8000886:	e7fd      	b.n	8000884 <NMI_Handler+0x4>

08000888 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800088c:	bf00      	nop
 800088e:	e7fd      	b.n	800088c <HardFault_Handler+0x4>

08000890 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000894:	bf00      	nop
 8000896:	e7fd      	b.n	8000894 <MemManage_Handler+0x4>

08000898 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800089c:	bf00      	nop
 800089e:	e7fd      	b.n	800089c <BusFault_Handler+0x4>

080008a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008a4:	bf00      	nop
 80008a6:	e7fd      	b.n	80008a4 <UsageFault_Handler+0x4>

080008a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ac:	bf00      	nop
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bc80      	pop	{r7}
 80008b2:	4770      	bx	lr

080008b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bc80      	pop	{r7}
 80008be:	4770      	bx	lr

080008c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008c4:	bf00      	nop
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bc80      	pop	{r7}
 80008ca:	4770      	bx	lr

080008cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008d0:	f000 f92c 	bl	8000b2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b086      	sub	sp, #24
 80008dc:	af00      	add	r7, sp, #0
 80008de:	60f8      	str	r0, [r7, #12]
 80008e0:	60b9      	str	r1, [r7, #8]
 80008e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008e4:	2300      	movs	r3, #0
 80008e6:	617b      	str	r3, [r7, #20]
 80008e8:	e00a      	b.n	8000900 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008ea:	f3af 8000 	nop.w
 80008ee:	4601      	mov	r1, r0
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	1c5a      	adds	r2, r3, #1
 80008f4:	60ba      	str	r2, [r7, #8]
 80008f6:	b2ca      	uxtb	r2, r1
 80008f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	3301      	adds	r3, #1
 80008fe:	617b      	str	r3, [r7, #20]
 8000900:	697a      	ldr	r2, [r7, #20]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	429a      	cmp	r2, r3
 8000906:	dbf0      	blt.n	80008ea <_read+0x12>
  }

  return len;
 8000908:	687b      	ldr	r3, [r7, #4]
}
 800090a:	4618      	mov	r0, r3
 800090c:	3718      	adds	r7, #24
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}

08000912 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	b086      	sub	sp, #24
 8000916:	af00      	add	r7, sp, #0
 8000918:	60f8      	str	r0, [r7, #12]
 800091a:	60b9      	str	r1, [r7, #8]
 800091c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800091e:	2300      	movs	r3, #0
 8000920:	617b      	str	r3, [r7, #20]
 8000922:	e009      	b.n	8000938 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	1c5a      	adds	r2, r3, #1
 8000928:	60ba      	str	r2, [r7, #8]
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff fde3 	bl	80004f8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	3301      	adds	r3, #1
 8000936:	617b      	str	r3, [r7, #20]
 8000938:	697a      	ldr	r2, [r7, #20]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	429a      	cmp	r2, r3
 800093e:	dbf1      	blt.n	8000924 <_write+0x12>
  }
  return len;
 8000940:	687b      	ldr	r3, [r7, #4]
}
 8000942:	4618      	mov	r0, r3
 8000944:	3718      	adds	r7, #24
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <_close>:

int _close(int file)
{
 800094a:	b480      	push	{r7}
 800094c:	b083      	sub	sp, #12
 800094e:	af00      	add	r7, sp, #0
 8000950:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000952:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000956:	4618      	mov	r0, r3
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	bc80      	pop	{r7}
 800095e:	4770      	bx	lr

08000960 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000970:	605a      	str	r2, [r3, #4]
  return 0;
 8000972:	2300      	movs	r3, #0
}
 8000974:	4618      	mov	r0, r3
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	bc80      	pop	{r7}
 800097c:	4770      	bx	lr

0800097e <_isatty>:

int _isatty(int file)
{
 800097e:	b480      	push	{r7}
 8000980:	b083      	sub	sp, #12
 8000982:	af00      	add	r7, sp, #0
 8000984:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000986:	2301      	movs	r3, #1
}
 8000988:	4618      	mov	r0, r3
 800098a:	370c      	adds	r7, #12
 800098c:	46bd      	mov	sp, r7
 800098e:	bc80      	pop	{r7}
 8000990:	4770      	bx	lr

08000992 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000992:	b480      	push	{r7}
 8000994:	b085      	sub	sp, #20
 8000996:	af00      	add	r7, sp, #0
 8000998:	60f8      	str	r0, [r7, #12]
 800099a:	60b9      	str	r1, [r7, #8]
 800099c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800099e:	2300      	movs	r3, #0
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	3714      	adds	r7, #20
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bc80      	pop	{r7}
 80009a8:	4770      	bx	lr
	...

080009ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b086      	sub	sp, #24
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009b4:	4a14      	ldr	r2, [pc, #80]	@ (8000a08 <_sbrk+0x5c>)
 80009b6:	4b15      	ldr	r3, [pc, #84]	@ (8000a0c <_sbrk+0x60>)
 80009b8:	1ad3      	subs	r3, r2, r3
 80009ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009c0:	4b13      	ldr	r3, [pc, #76]	@ (8000a10 <_sbrk+0x64>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d102      	bne.n	80009ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009c8:	4b11      	ldr	r3, [pc, #68]	@ (8000a10 <_sbrk+0x64>)
 80009ca:	4a12      	ldr	r2, [pc, #72]	@ (8000a14 <_sbrk+0x68>)
 80009cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009ce:	4b10      	ldr	r3, [pc, #64]	@ (8000a10 <_sbrk+0x64>)
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4413      	add	r3, r2
 80009d6:	693a      	ldr	r2, [r7, #16]
 80009d8:	429a      	cmp	r2, r3
 80009da:	d207      	bcs.n	80009ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009dc:	f002 ff88 	bl	80038f0 <__errno>
 80009e0:	4603      	mov	r3, r0
 80009e2:	220c      	movs	r2, #12
 80009e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009e6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ea:	e009      	b.n	8000a00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009ec:	4b08      	ldr	r3, [pc, #32]	@ (8000a10 <_sbrk+0x64>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009f2:	4b07      	ldr	r3, [pc, #28]	@ (8000a10 <_sbrk+0x64>)
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4413      	add	r3, r2
 80009fa:	4a05      	ldr	r2, [pc, #20]	@ (8000a10 <_sbrk+0x64>)
 80009fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009fe:	68fb      	ldr	r3, [r7, #12]
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3718      	adds	r7, #24
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20010000 	.word	0x20010000
 8000a0c:	00000400 	.word	0x00000400
 8000a10:	20000118 	.word	0x20000118
 8000a14:	20000270 	.word	0x20000270

08000a18 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bc80      	pop	{r7}
 8000a22:	4770      	bx	lr

08000a24 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a24:	480d      	ldr	r0, [pc, #52]	@ (8000a5c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a26:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a28:	f7ff fff6 	bl	8000a18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a2c:	480c      	ldr	r0, [pc, #48]	@ (8000a60 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a2e:	490d      	ldr	r1, [pc, #52]	@ (8000a64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a30:	4a0d      	ldr	r2, [pc, #52]	@ (8000a68 <LoopForever+0xe>)
  movs r3, #0
 8000a32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a34:	e002      	b.n	8000a3c <LoopCopyDataInit>

08000a36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a3a:	3304      	adds	r3, #4

08000a3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a40:	d3f9      	bcc.n	8000a36 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a42:	4a0a      	ldr	r2, [pc, #40]	@ (8000a6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a44:	4c0a      	ldr	r4, [pc, #40]	@ (8000a70 <LoopForever+0x16>)
  movs r3, #0
 8000a46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a48:	e001      	b.n	8000a4e <LoopFillZerobss>

08000a4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a4c:	3204      	adds	r2, #4

08000a4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a50:	d3fb      	bcc.n	8000a4a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a52:	f002 ff53 	bl	80038fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a56:	f7ff fd61 	bl	800051c <main>

08000a5a <LoopForever>:

LoopForever:
    b LoopForever
 8000a5a:	e7fe      	b.n	8000a5a <LoopForever>
  ldr   r0, =_estack
 8000a5c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000a60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a64:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000a68:	08003f90 	.word	0x08003f90
  ldr r2, =_sbss
 8000a6c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000a70:	2000026c 	.word	0x2000026c

08000a74 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a74:	e7fe      	b.n	8000a74 <ADC_IRQHandler>
	...

08000a78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a82:	2003      	movs	r0, #3
 8000a84:	f000 f958 	bl	8000d38 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000a88:	f001 fbca 	bl	8002220 <HAL_RCC_GetHCLKFreq>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	4a09      	ldr	r2, [pc, #36]	@ (8000ab4 <HAL_Init+0x3c>)
 8000a90:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a92:	2000      	movs	r0, #0
 8000a94:	f000 f810 	bl	8000ab8 <HAL_InitTick>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d002      	beq.n	8000aa4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	71fb      	strb	r3, [r7, #7]
 8000aa2:	e001      	b.n	8000aa8 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000aa4:	f7ff fea0 	bl	80007e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000aa8:	79fb      	ldrb	r3, [r7, #7]
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20000000 	.word	0x20000000

08000ab8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ac4:	4b17      	ldr	r3, [pc, #92]	@ (8000b24 <HAL_InitTick+0x6c>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d024      	beq.n	8000b16 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000acc:	f001 fba8 	bl	8002220 <HAL_RCC_GetHCLKFreq>
 8000ad0:	4602      	mov	r2, r0
 8000ad2:	4b14      	ldr	r3, [pc, #80]	@ (8000b24 <HAL_InitTick+0x6c>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000adc:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f000 f94c 	bl	8000d82 <HAL_SYSTICK_Config>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d10f      	bne.n	8000b10 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2b0f      	cmp	r3, #15
 8000af4:	d809      	bhi.n	8000b0a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000af6:	2200      	movs	r2, #0
 8000af8:	6879      	ldr	r1, [r7, #4]
 8000afa:	f04f 30ff 	mov.w	r0, #4294967295
 8000afe:	f000 f926 	bl	8000d4e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b02:	4a09      	ldr	r2, [pc, #36]	@ (8000b28 <HAL_InitTick+0x70>)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	6013      	str	r3, [r2, #0]
 8000b08:	e007      	b.n	8000b1a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	73fb      	strb	r3, [r7, #15]
 8000b0e:	e004      	b.n	8000b1a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b10:	2301      	movs	r3, #1
 8000b12:	73fb      	strb	r3, [r7, #15]
 8000b14:	e001      	b.n	8000b1a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
 8000b18:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3710      	adds	r7, #16
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	20000008 	.word	0x20000008
 8000b28:	20000004 	.word	0x20000004

08000b2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b30:	4b05      	ldr	r3, [pc, #20]	@ (8000b48 <HAL_IncTick+0x1c>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	461a      	mov	r2, r3
 8000b36:	4b05      	ldr	r3, [pc, #20]	@ (8000b4c <HAL_IncTick+0x20>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	4a03      	ldr	r2, [pc, #12]	@ (8000b4c <HAL_IncTick+0x20>)
 8000b3e:	6013      	str	r3, [r2, #0]
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bc80      	pop	{r7}
 8000b46:	4770      	bx	lr
 8000b48:	20000008 	.word	0x20000008
 8000b4c:	2000011c 	.word	0x2000011c

08000b50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  return uwTick;
 8000b54:	4b02      	ldr	r3, [pc, #8]	@ (8000b60 <HAL_GetTick+0x10>)
 8000b56:	681b      	ldr	r3, [r3, #0]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bc80      	pop	{r7}
 8000b5e:	4770      	bx	lr
 8000b60:	2000011c 	.word	0x2000011c

08000b64 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000b68:	4b04      	ldr	r3, [pc, #16]	@ (8000b7c <HAL_SuspendTick+0x18>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a03      	ldr	r2, [pc, #12]	@ (8000b7c <HAL_SuspendTick+0x18>)
 8000b6e:	f023 0302 	bic.w	r3, r3, #2
 8000b72:	6013      	str	r3, [r2, #0]
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bc80      	pop	{r7}
 8000b7a:	4770      	bx	lr
 8000b7c:	e000e010 	.word	0xe000e010

08000b80 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000b84:	4b04      	ldr	r3, [pc, #16]	@ (8000b98 <HAL_ResumeTick+0x18>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a03      	ldr	r2, [pc, #12]	@ (8000b98 <HAL_ResumeTick+0x18>)
 8000b8a:	f043 0302 	orr.w	r3, r3, #2
 8000b8e:	6013      	str	r3, [r2, #0]
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bc80      	pop	{r7}
 8000b96:	4770      	bx	lr
 8000b98:	e000e010 	.word	0xe000e010

08000b9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	f003 0307 	and.w	r3, r3, #7
 8000baa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bac:	4b0c      	ldr	r3, [pc, #48]	@ (8000be0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bb2:	68ba      	ldr	r2, [r7, #8]
 8000bb4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bb8:	4013      	ands	r3, r2
 8000bba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bc4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bce:	4a04      	ldr	r2, [pc, #16]	@ (8000be0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	60d3      	str	r3, [r2, #12]
}
 8000bd4:	bf00      	nop
 8000bd6:	3714      	adds	r7, #20
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bc80      	pop	{r7}
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000be8:	4b04      	ldr	r3, [pc, #16]	@ (8000bfc <__NVIC_GetPriorityGrouping+0x18>)
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	0a1b      	lsrs	r3, r3, #8
 8000bee:	f003 0307 	and.w	r3, r3, #7
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bc80      	pop	{r7}
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	db0c      	blt.n	8000c2c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c12:	79fb      	ldrb	r3, [r7, #7]
 8000c14:	f003 021f 	and.w	r2, r3, #31
 8000c18:	4907      	ldr	r1, [pc, #28]	@ (8000c38 <__NVIC_ClearPendingIRQ+0x38>)
 8000c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1e:	095b      	lsrs	r3, r3, #5
 8000c20:	2001      	movs	r0, #1
 8000c22:	fa00 f202 	lsl.w	r2, r0, r2
 8000c26:	3360      	adds	r3, #96	@ 0x60
 8000c28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c2c:	bf00      	nop
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bc80      	pop	{r7}
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	e000e100 	.word	0xe000e100

08000c3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	6039      	str	r1, [r7, #0]
 8000c46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	db0a      	blt.n	8000c66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	b2da      	uxtb	r2, r3
 8000c54:	490c      	ldr	r1, [pc, #48]	@ (8000c88 <__NVIC_SetPriority+0x4c>)
 8000c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5a:	0112      	lsls	r2, r2, #4
 8000c5c:	b2d2      	uxtb	r2, r2
 8000c5e:	440b      	add	r3, r1
 8000c60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c64:	e00a      	b.n	8000c7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	b2da      	uxtb	r2, r3
 8000c6a:	4908      	ldr	r1, [pc, #32]	@ (8000c8c <__NVIC_SetPriority+0x50>)
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	f003 030f 	and.w	r3, r3, #15
 8000c72:	3b04      	subs	r3, #4
 8000c74:	0112      	lsls	r2, r2, #4
 8000c76:	b2d2      	uxtb	r2, r2
 8000c78:	440b      	add	r3, r1
 8000c7a:	761a      	strb	r2, [r3, #24]
}
 8000c7c:	bf00      	nop
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bc80      	pop	{r7}
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	e000e100 	.word	0xe000e100
 8000c8c:	e000ed00 	.word	0xe000ed00

08000c90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b089      	sub	sp, #36	@ 0x24
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	60f8      	str	r0, [r7, #12]
 8000c98:	60b9      	str	r1, [r7, #8]
 8000c9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	f003 0307 	and.w	r3, r3, #7
 8000ca2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ca4:	69fb      	ldr	r3, [r7, #28]
 8000ca6:	f1c3 0307 	rsb	r3, r3, #7
 8000caa:	2b04      	cmp	r3, #4
 8000cac:	bf28      	it	cs
 8000cae:	2304      	movcs	r3, #4
 8000cb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	3304      	adds	r3, #4
 8000cb6:	2b06      	cmp	r3, #6
 8000cb8:	d902      	bls.n	8000cc0 <NVIC_EncodePriority+0x30>
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	3b03      	subs	r3, #3
 8000cbe:	e000      	b.n	8000cc2 <NVIC_EncodePriority+0x32>
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000cc8:	69bb      	ldr	r3, [r7, #24]
 8000cca:	fa02 f303 	lsl.w	r3, r2, r3
 8000cce:	43da      	mvns	r2, r3
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	401a      	ands	r2, r3
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce2:	43d9      	mvns	r1, r3
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce8:	4313      	orrs	r3, r2
         );
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3724      	adds	r7, #36	@ 0x24
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bc80      	pop	{r7}
 8000cf2:	4770      	bx	lr

08000cf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	3b01      	subs	r3, #1
 8000d00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d04:	d301      	bcc.n	8000d0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d06:	2301      	movs	r3, #1
 8000d08:	e00f      	b.n	8000d2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d34 <SysTick_Config+0x40>)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	3b01      	subs	r3, #1
 8000d10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d12:	210f      	movs	r1, #15
 8000d14:	f04f 30ff 	mov.w	r0, #4294967295
 8000d18:	f7ff ff90 	bl	8000c3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d1c:	4b05      	ldr	r3, [pc, #20]	@ (8000d34 <SysTick_Config+0x40>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d22:	4b04      	ldr	r3, [pc, #16]	@ (8000d34 <SysTick_Config+0x40>)
 8000d24:	2207      	movs	r2, #7
 8000d26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d28:	2300      	movs	r3, #0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	e000e010 	.word	0xe000e010

08000d38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d40:	6878      	ldr	r0, [r7, #4]
 8000d42:	f7ff ff2b 	bl	8000b9c <__NVIC_SetPriorityGrouping>
}
 8000d46:	bf00      	nop
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b086      	sub	sp, #24
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	4603      	mov	r3, r0
 8000d56:	60b9      	str	r1, [r7, #8]
 8000d58:	607a      	str	r2, [r7, #4]
 8000d5a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d5c:	f7ff ff42 	bl	8000be4 <__NVIC_GetPriorityGrouping>
 8000d60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	68b9      	ldr	r1, [r7, #8]
 8000d66:	6978      	ldr	r0, [r7, #20]
 8000d68:	f7ff ff92 	bl	8000c90 <NVIC_EncodePriority>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d72:	4611      	mov	r1, r2
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff ff61 	bl	8000c3c <__NVIC_SetPriority>
}
 8000d7a:	bf00      	nop
 8000d7c:	3718      	adds	r7, #24
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f7ff ffb2 	bl	8000cf4 <SysTick_Config>
 8000d90:	4603      	mov	r3, r0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <HAL_NVIC_ClearPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b082      	sub	sp, #8
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	4603      	mov	r3, r0
 8000da2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8000da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff ff29 	bl	8000c00 <__NVIC_ClearPendingIRQ>
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b087      	sub	sp, #28
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dc6:	e140      	b.n	800104a <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	2101      	movs	r1, #1
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	f000 8132 	beq.w	8001044 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f003 0303 	and.w	r3, r3, #3
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d005      	beq.n	8000df8 <HAL_GPIO_Init+0x40>
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f003 0303 	and.w	r3, r3, #3
 8000df4:	2b02      	cmp	r3, #2
 8000df6:	d130      	bne.n	8000e5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	689b      	ldr	r3, [r3, #8]
 8000dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	2203      	movs	r2, #3
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	68da      	ldr	r2, [r3, #12]
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e2e:	2201      	movs	r2, #1
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	43db      	mvns	r3, r3
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	091b      	lsrs	r3, r3, #4
 8000e44:	f003 0201 	and.w	r2, r3, #1
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f003 0303 	and.w	r3, r3, #3
 8000e62:	2b03      	cmp	r3, #3
 8000e64:	d017      	beq.n	8000e96 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	68db      	ldr	r3, [r3, #12]
 8000e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	2203      	movs	r2, #3
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43db      	mvns	r3, r3
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	689a      	ldr	r2, [r3, #8]
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f003 0303 	and.w	r3, r3, #3
 8000e9e:	2b02      	cmp	r3, #2
 8000ea0:	d123      	bne.n	8000eea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	08da      	lsrs	r2, r3, #3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	3208      	adds	r2, #8
 8000eaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	f003 0307 	and.w	r3, r3, #7
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	220f      	movs	r2, #15
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	691a      	ldr	r2, [r3, #16]
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	f003 0307 	and.w	r3, r3, #7
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	08da      	lsrs	r2, r3, #3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	3208      	adds	r2, #8
 8000ee4:	6939      	ldr	r1, [r7, #16]
 8000ee6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	2203      	movs	r2, #3
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43db      	mvns	r3, r3
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	4013      	ands	r3, r2
 8000f00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f003 0203 	and.w	r2, r3, #3
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	f000 808c 	beq.w	8001044 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000f2c:	4a4e      	ldr	r2, [pc, #312]	@ (8001068 <HAL_GPIO_Init+0x2b0>)
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	089b      	lsrs	r3, r3, #2
 8000f32:	3302      	adds	r3, #2
 8000f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	f003 0303 	and.w	r3, r3, #3
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	2207      	movs	r2, #7
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000f56:	d00d      	beq.n	8000f74 <HAL_GPIO_Init+0x1bc>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4a44      	ldr	r2, [pc, #272]	@ (800106c <HAL_GPIO_Init+0x2b4>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d007      	beq.n	8000f70 <HAL_GPIO_Init+0x1b8>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	4a43      	ldr	r2, [pc, #268]	@ (8001070 <HAL_GPIO_Init+0x2b8>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d101      	bne.n	8000f6c <HAL_GPIO_Init+0x1b4>
 8000f68:	2302      	movs	r3, #2
 8000f6a:	e004      	b.n	8000f76 <HAL_GPIO_Init+0x1be>
 8000f6c:	2307      	movs	r3, #7
 8000f6e:	e002      	b.n	8000f76 <HAL_GPIO_Init+0x1be>
 8000f70:	2301      	movs	r3, #1
 8000f72:	e000      	b.n	8000f76 <HAL_GPIO_Init+0x1be>
 8000f74:	2300      	movs	r3, #0
 8000f76:	697a      	ldr	r2, [r7, #20]
 8000f78:	f002 0203 	and.w	r2, r2, #3
 8000f7c:	0092      	lsls	r2, r2, #2
 8000f7e:	4093      	lsls	r3, r2
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f86:	4938      	ldr	r1, [pc, #224]	@ (8001068 <HAL_GPIO_Init+0x2b0>)
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	089b      	lsrs	r3, r3, #2
 8000f8c:	3302      	adds	r3, #2
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f94:	4b37      	ldr	r3, [pc, #220]	@ (8001074 <HAL_GPIO_Init+0x2bc>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d003      	beq.n	8000fb8 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fb8:	4a2e      	ldr	r2, [pc, #184]	@ (8001074 <HAL_GPIO_Init+0x2bc>)
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000fbe:	4b2d      	ldr	r3, [pc, #180]	@ (8001074 <HAL_GPIO_Init+0x2bc>)
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d003      	beq.n	8000fe2 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000fe2:	4a24      	ldr	r2, [pc, #144]	@ (8001074 <HAL_GPIO_Init+0x2bc>)
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8000fe8:	4b22      	ldr	r3, [pc, #136]	@ (8001074 <HAL_GPIO_Init+0x2bc>)
 8000fea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fee:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001002:	2b00      	cmp	r3, #0
 8001004:	d003      	beq.n	800100e <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	4313      	orrs	r3, r2
 800100c:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800100e:	4a19      	ldr	r2, [pc, #100]	@ (8001074 <HAL_GPIO_Init+0x2bc>)
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8001016:	4b17      	ldr	r3, [pc, #92]	@ (8001074 <HAL_GPIO_Init+0x2bc>)
 8001018:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800101c:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	43db      	mvns	r3, r3
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	4013      	ands	r3, r2
 8001026:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001030:	2b00      	cmp	r3, #0
 8001032:	d003      	beq.n	800103c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	4313      	orrs	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 800103c:	4a0d      	ldr	r2, [pc, #52]	@ (8001074 <HAL_GPIO_Init+0x2bc>)
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	3301      	adds	r3, #1
 8001048:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	fa22 f303 	lsr.w	r3, r2, r3
 8001054:	2b00      	cmp	r3, #0
 8001056:	f47f aeb7 	bne.w	8000dc8 <HAL_GPIO_Init+0x10>
  }
}
 800105a:	bf00      	nop
 800105c:	bf00      	nop
 800105e:	371c      	adds	r7, #28
 8001060:	46bd      	mov	sp, r7
 8001062:	bc80      	pop	{r7}
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	40010000 	.word	0x40010000
 800106c:	48000400 	.word	0x48000400
 8001070:	48000800 	.word	0x48000800
 8001074:	58000800 	.word	0x58000800

08001078 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	460b      	mov	r3, r1
 8001082:	807b      	strh	r3, [r7, #2]
 8001084:	4613      	mov	r3, r2
 8001086:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001088:	787b      	ldrb	r3, [r7, #1]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d003      	beq.n	8001096 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800108e:	887a      	ldrh	r2, [r7, #2]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001094:	e002      	b.n	800109c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001096:	887a      	ldrh	r2, [r7, #2]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bc80      	pop	{r7}
 80010a4:	4770      	bx	lr
	...

080010a8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80010ac:	4b04      	ldr	r3, [pc, #16]	@ (80010c0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a03      	ldr	r2, [pc, #12]	@ (80010c0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80010b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010b6:	6013      	str	r3, [r2, #0]
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr
 80010c0:	58000400 	.word	0x58000400

080010c4 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	460b      	mov	r3, r1
 80010ce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d10c      	bne.n	80010f0 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80010d6:	4b13      	ldr	r3, [pc, #76]	@ (8001124 <HAL_PWR_EnterSLEEPMode+0x60>)
 80010d8:	695b      	ldr	r3, [r3, #20]
 80010da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80010de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80010e2:	d10d      	bne.n	8001100 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 80010e4:	f000 f84a 	bl	800117c <HAL_PWREx_DisableLowPowerRunMode>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d008      	beq.n	8001100 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 80010ee:	e015      	b.n	800111c <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 80010f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001124 <HAL_PWR_EnterSLEEPMode+0x60>)
 80010f2:	695b      	ldr	r3, [r3, #20]
 80010f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d101      	bne.n	8001100 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 80010fc:	f000 f830 	bl	8001160 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001100:	4b09      	ldr	r3, [pc, #36]	@ (8001128 <HAL_PWR_EnterSLEEPMode+0x64>)
 8001102:	691b      	ldr	r3, [r3, #16]
 8001104:	4a08      	ldr	r2, [pc, #32]	@ (8001128 <HAL_PWR_EnterSLEEPMode+0x64>)
 8001106:	f023 0304 	bic.w	r3, r3, #4
 800110a:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800110c:	78fb      	ldrb	r3, [r7, #3]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d101      	bne.n	8001116 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001112:	bf30      	wfi
 8001114:	e002      	b.n	800111c <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8001116:	bf40      	sev
    __WFE();
 8001118:	bf20      	wfe
    __WFE();
 800111a:	bf20      	wfe
  }
}
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	58000400 	.word	0x58000400
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <HAL_PWR_EnableSEVOnPend>:
  * @note Set SEVONPEND bit of SCR register. When this bit is set, this causes
  *       WFE to wake up when an interrupt moves from inactive to pended.
  * @retval None
  */
void HAL_PWR_EnableSEVOnPend(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* Set SEVONPEND bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 8001130:	4b04      	ldr	r3, [pc, #16]	@ (8001144 <HAL_PWR_EnableSEVOnPend+0x18>)
 8001132:	691b      	ldr	r3, [r3, #16]
 8001134:	4a03      	ldr	r2, [pc, #12]	@ (8001144 <HAL_PWR_EnableSEVOnPend+0x18>)
 8001136:	f043 0310 	orr.w	r3, r3, #16
 800113a:	6113      	str	r3, [r2, #16]
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr
 8001144:	e000ed00 	.word	0xe000ed00

08001148 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800114c:	4b03      	ldr	r3, [pc, #12]	@ (800115c <HAL_PWREx_GetVoltageRange+0x14>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8001154:	4618      	mov	r0, r3
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr
 800115c:	58000400 	.word	0x58000400

08001160 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8001164:	4b04      	ldr	r3, [pc, #16]	@ (8001178 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a03      	ldr	r2, [pc, #12]	@ (8001178 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 800116a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800116e:	6013      	str	r3, [r2, #0]
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	bc80      	pop	{r7}
 8001176:	4770      	bx	lr
 8001178:	58000400 	.word	0x58000400

0800117c <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8001182:	4b16      	ldr	r3, [pc, #88]	@ (80011dc <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a15      	ldr	r2, [pc, #84]	@ (80011dc <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8001188:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800118c:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 800118e:	4b14      	ldr	r3, [pc, #80]	@ (80011e0 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2232      	movs	r2, #50	@ 0x32
 8001194:	fb02 f303 	mul.w	r3, r2, r3
 8001198:	4a12      	ldr	r2, [pc, #72]	@ (80011e4 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 800119a:	fba2 2303 	umull	r2, r3, r2, r3
 800119e:	0c9b      	lsrs	r3, r3, #18
 80011a0:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80011a2:	e002      	b.n	80011aa <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80011aa:	4b0c      	ldr	r3, [pc, #48]	@ (80011dc <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80011ac:	695b      	ldr	r3, [r3, #20]
 80011ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80011b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80011b6:	d102      	bne.n	80011be <HAL_PWREx_DisableLowPowerRunMode+0x42>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d1f2      	bne.n	80011a4 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80011be:	4b07      	ldr	r3, [pc, #28]	@ (80011dc <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80011c0:	695b      	ldr	r3, [r3, #20]
 80011c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80011c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80011ca:	d101      	bne.n	80011d0 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 80011cc:	2303      	movs	r3, #3
 80011ce:	e000      	b.n	80011d2 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bc80      	pop	{r7}
 80011da:	4770      	bx	lr
 80011dc:	58000400 	.word	0x58000400
 80011e0:	20000000 	.word	0x20000000
 80011e4:	431bde83 	.word	0x431bde83

080011e8 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80011ec:	4b06      	ldr	r3, [pc, #24]	@ (8001208 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80011f8:	d101      	bne.n	80011fe <LL_PWR_IsEnabledBkUpAccess+0x16>
 80011fa:	2301      	movs	r3, #1
 80011fc:	e000      	b.n	8001200 <LL_PWR_IsEnabledBkUpAccess+0x18>
 80011fe:	2300      	movs	r3, #0
}
 8001200:	4618      	mov	r0, r3
 8001202:	46bd      	mov	sp, r7
 8001204:	bc80      	pop	{r7}
 8001206:	4770      	bx	lr
 8001208:	58000400 	.word	0x58000400

0800120c <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001210:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800121a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800121e:	6013      	str	r3, [r2, #0]
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr

08001228 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800122c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001236:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800123a:	6013      	str	r3, [r2, #0]
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	bc80      	pop	{r7}
 8001242:	4770      	bx	lr

08001244 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001248:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001252:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001256:	d101      	bne.n	800125c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001258:	2301      	movs	r3, #1
 800125a:	e000      	b.n	800125e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	46bd      	mov	sp, r7
 8001262:	bc80      	pop	{r7}
 8001264:	4770      	bx	lr

08001266 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800126a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001274:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001278:	6013      	str	r3, [r2, #0]
}
 800127a:	bf00      	nop
 800127c:	46bd      	mov	sp, r7
 800127e:	bc80      	pop	{r7}
 8001280:	4770      	bx	lr

08001282 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001286:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001290:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001294:	6013      	str	r3, [r2, #0]
}
 8001296:	bf00      	nop
 8001298:	46bd      	mov	sp, r7
 800129a:	bc80      	pop	{r7}
 800129c:	4770      	bx	lr

0800129e <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800129e:	b480      	push	{r7}
 80012a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80012a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80012b0:	d101      	bne.n	80012b6 <LL_RCC_HSE_IsReady+0x18>
 80012b2:	2301      	movs	r3, #1
 80012b4:	e000      	b.n	80012b8 <LL_RCC_HSE_IsReady+0x1a>
 80012b6:	2300      	movs	r3, #0
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr

080012c0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80012c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80012ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012d2:	6013      	str	r3, [r2, #0]
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bc80      	pop	{r7}
 80012da:	4770      	bx	lr

080012dc <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80012e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80012ea:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80012ee:	6013      	str	r3, [r2, #0]
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr

080012f8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80012fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001306:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800130a:	d101      	bne.n	8001310 <LL_RCC_HSI_IsReady+0x18>
 800130c:	2301      	movs	r3, #1
 800130e:	e000      	b.n	8001312 <LL_RCC_HSI_IsReady+0x1a>
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	46bd      	mov	sp, r7
 8001316:	bc80      	pop	{r7}
 8001318:	4770      	bx	lr

0800131a <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800131a:	b480      	push	{r7}
 800131c:	b083      	sub	sp, #12
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001322:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	061b      	lsls	r3, r3, #24
 8001330:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001334:	4313      	orrs	r3, r2
 8001336:	604b      	str	r3, [r1, #4]
}
 8001338:	bf00      	nop
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	bc80      	pop	{r7}
 8001340:	4770      	bx	lr

08001342 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001342:	b480      	push	{r7}
 8001344:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001346:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800134a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	2b02      	cmp	r3, #2
 8001354:	d101      	bne.n	800135a <LL_RCC_LSE_IsReady+0x18>
 8001356:	2301      	movs	r3, #1
 8001358:	e000      	b.n	800135c <LL_RCC_LSE_IsReady+0x1a>
 800135a:	2300      	movs	r3, #0
}
 800135c:	4618      	mov	r0, r3
 800135e:	46bd      	mov	sp, r7
 8001360:	bc80      	pop	{r7}
 8001362:	4770      	bx	lr

08001364 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001368:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800136c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001370:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr

08001384 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001388:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800138c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001390:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001394:	f023 0301 	bic.w	r3, r3, #1
 8001398:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	bc80      	pop	{r7}
 80013a2:	4770      	bx	lr

080013a4 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80013a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013b0:	f003 0302 	and.w	r3, r3, #2
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d101      	bne.n	80013bc <LL_RCC_LSI_IsReady+0x18>
 80013b8:	2301      	movs	r3, #1
 80013ba:	e000      	b.n	80013be <LL_RCC_LSI_IsReady+0x1a>
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bc80      	pop	{r7}
 80013c4:	4770      	bx	lr

080013c6 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80013ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	6013      	str	r3, [r2, #0]
}
 80013da:	bf00      	nop
 80013dc:	46bd      	mov	sp, r7
 80013de:	bc80      	pop	{r7}
 80013e0:	4770      	bx	lr

080013e2 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80013e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80013f0:	f023 0301 	bic.w	r3, r3, #1
 80013f4:	6013      	str	r3, [r2, #0]
}
 80013f6:	bf00      	nop
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bc80      	pop	{r7}
 80013fc:	4770      	bx	lr

080013fe <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80013fe:	b480      	push	{r7}
 8001400:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001402:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0302 	and.w	r3, r3, #2
 800140c:	2b02      	cmp	r3, #2
 800140e:	d101      	bne.n	8001414 <LL_RCC_MSI_IsReady+0x16>
 8001410:	2301      	movs	r3, #1
 8001412:	e000      	b.n	8001416 <LL_RCC_MSI_IsReady+0x18>
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	46bd      	mov	sp, r7
 800141a:	bc80      	pop	{r7}
 800141c:	4770      	bx	lr

0800141e <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8001422:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0308 	and.w	r3, r3, #8
 800142c:	2b08      	cmp	r3, #8
 800142e:	d101      	bne.n	8001434 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001430:	2301      	movs	r3, #1
 8001432:	e000      	b.n	8001436 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	46bd      	mov	sp, r7
 800143a:	bc80      	pop	{r7}
 800143c:	4770      	bx	lr

0800143e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8001442:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800144c:	4618      	mov	r0, r3
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr

08001454 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001458:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800145c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001460:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8001464:	4618      	mov	r0, r3
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr

0800146c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001474:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	021b      	lsls	r3, r3, #8
 8001482:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001486:	4313      	orrs	r3, r2
 8001488:	604b      	str	r3, [r1, #4]
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr

08001494 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800149c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	f023 0203 	bic.w	r2, r3, #3
 80014a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	608b      	str	r3, [r1, #8]
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc80      	pop	{r7}
 80014b8:	4770      	bx	lr

080014ba <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80014be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	f003 030c 	and.w	r3, r3, #12
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr

080014d0 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80014d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014e2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	608b      	str	r3, [r1, #8]
}
 80014ec:	bf00      	nop
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bc80      	pop	{r7}
 80014f4:	4770      	bx	lr

080014f6 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80014f6:	b480      	push	{r7}
 80014f8:	b083      	sub	sp, #12
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80014fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001502:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001506:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800150a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4313      	orrs	r3, r2
 8001512:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr

08001520 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001528:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800152c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001530:	f023 020f 	bic.w	r2, r3, #15
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	091b      	lsrs	r3, r3, #4
 8001538:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800153c:	4313      	orrs	r3, r2
 800153e:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8001542:	bf00      	nop
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	bc80      	pop	{r7}
 800154a:	4770      	bx	lr

0800154c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001554:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800155e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4313      	orrs	r3, r2
 8001566:	608b      	str	r3, [r1, #8]
}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	bc80      	pop	{r7}
 8001570:	4770      	bx	lr

08001572 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001572:	b480      	push	{r7}
 8001574:	b083      	sub	sp, #12
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800157a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001584:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4313      	orrs	r3, r2
 800158c:	608b      	str	r3, [r1, #8]
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	bc80      	pop	{r7}
 8001596:	4770      	bx	lr

08001598 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800159c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bc80      	pop	{r7}
 80015ac:	4770      	bx	lr

080015ae <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 80015ae:	b480      	push	{r7}
 80015b0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80015b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015b6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80015ba:	011b      	lsls	r3, r3, #4
 80015bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bc80      	pop	{r7}
 80015c6:	4770      	bx	lr

080015c8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80015cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	46bd      	mov	sp, r7
 80015da:	bc80      	pop	{r7}
 80015dc:	4770      	bx	lr

080015de <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80015de:	b480      	push	{r7}
 80015e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80015e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bc80      	pop	{r7}
 80015f2:	4770      	bx	lr

080015f4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80015f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001602:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001606:	6013      	str	r3, [r2, #0]
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	bc80      	pop	{r7}
 800160e:	4770      	bx	lr

08001610 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001614:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800161e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001622:	6013      	str	r3, [r2, #0]
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	bc80      	pop	{r7}
 800162a:	4770      	bx	lr

0800162c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001630:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800163a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800163e:	d101      	bne.n	8001644 <LL_RCC_PLL_IsReady+0x18>
 8001640:	2301      	movs	r3, #1
 8001642:	e000      	b.n	8001646 <LL_RCC_PLL_IsReady+0x1a>
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	46bd      	mov	sp, r7
 800164a:	bc80      	pop	{r7}
 800164c:	4770      	bx	lr

0800164e <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800164e:	b480      	push	{r7}
 8001650:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001652:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	0a1b      	lsrs	r3, r3, #8
 800165a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800165e:	4618      	mov	r0, r3
 8001660:	46bd      	mov	sp, r7
 8001662:	bc80      	pop	{r7}
 8001664:	4770      	bx	lr

08001666 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001666:	b480      	push	{r7}
 8001668:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800166a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8001674:	4618      	mov	r0, r3
 8001676:	46bd      	mov	sp, r7
 8001678:	bc80      	pop	{r7}
 800167a:	4770      	bx	lr

0800167c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001680:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800168a:	4618      	mov	r0, r3
 800168c:	46bd      	mov	sp, r7
 800168e:	bc80      	pop	{r7}
 8001690:	4770      	bx	lr

08001692 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001696:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	f003 0303 	and.w	r3, r3, #3
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bc80      	pop	{r7}
 80016a6:	4770      	bx	lr

080016a8 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80016ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016ba:	d101      	bne.n	80016c0 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80016bc:	2301      	movs	r3, #1
 80016be:	e000      	b.n	80016c2 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr

080016ca <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80016ca:	b480      	push	{r7}
 80016cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80016ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016d2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80016d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80016de:	d101      	bne.n	80016e4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80016e0:	2301      	movs	r3, #1
 80016e2:	e000      	b.n	80016e6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bc80      	pop	{r7}
 80016ec:	4770      	bx	lr

080016ee <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80016ee:	b480      	push	{r7}
 80016f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80016f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016f6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80016fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001702:	d101      	bne.n	8001708 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001704:	2301      	movs	r3, #1
 8001706:	e000      	b.n	800170a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	46bd      	mov	sp, r7
 800170e:	bc80      	pop	{r7}
 8001710:	4770      	bx	lr

08001712 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001712:	b480      	push	{r7}
 8001714:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001716:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001720:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001724:	d101      	bne.n	800172a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001726:	2301      	movs	r3, #1
 8001728:	e000      	b.n	800172c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800172a:	2300      	movs	r3, #0
}
 800172c:	4618      	mov	r0, r3
 800172e:	46bd      	mov	sp, r7
 8001730:	bc80      	pop	{r7}
 8001732:	4770      	bx	lr

08001734 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001738:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001742:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001746:	d101      	bne.n	800174c <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001748:	2301      	movs	r3, #1
 800174a:	e000      	b.n	800174e <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	46bd      	mov	sp, r7
 8001752:	bc80      	pop	{r7}
 8001754:	4770      	bx	lr
	...

08001758 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b088      	sub	sp, #32
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d101      	bne.n	800176a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e36f      	b.n	8001e4a <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800176a:	f7ff fea6 	bl	80014ba <LL_RCC_GetSysClkSource>
 800176e:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001770:	f7ff ff8f 	bl	8001692 <LL_RCC_PLL_GetMainSource>
 8001774:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0320 	and.w	r3, r3, #32
 800177e:	2b00      	cmp	r3, #0
 8001780:	f000 80c4 	beq.w	800190c <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d005      	beq.n	8001796 <HAL_RCC_OscConfig+0x3e>
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	2b0c      	cmp	r3, #12
 800178e:	d176      	bne.n	800187e <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d173      	bne.n	800187e <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6a1b      	ldr	r3, [r3, #32]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d101      	bne.n	80017a2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e353      	b.n	8001e4a <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80017a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0308 	and.w	r3, r3, #8
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d005      	beq.n	80017c0 <HAL_RCC_OscConfig+0x68>
 80017b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80017be:	e006      	b.n	80017ce <HAL_RCC_OscConfig+0x76>
 80017c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017c8:	091b      	lsrs	r3, r3, #4
 80017ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d222      	bcs.n	8001818 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017d6:	4618      	mov	r0, r3
 80017d8:	f000 fd5a 	bl	8002290 <RCC_SetFlashLatencyFromMSIRange>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e331      	b.n	8001e4a <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80017f0:	f043 0308 	orr.w	r3, r3, #8
 80017f4:	6013      	str	r3, [r2, #0]
 80017f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001804:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001808:	4313      	orrs	r3, r2
 800180a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff fe2b 	bl	800146c <LL_RCC_MSI_SetCalibTrimming>
 8001816:	e021      	b.n	800185c <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001818:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001822:	f043 0308 	orr.w	r3, r3, #8
 8001826:	6013      	str	r3, [r2, #0]
 8001828:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001836:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800183a:	4313      	orrs	r3, r2
 800183c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff fe12 	bl	800146c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800184c:	4618      	mov	r0, r3
 800184e:	f000 fd1f 	bl	8002290 <RCC_SetFlashLatencyFromMSIRange>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e2f6      	b.n	8001e4a <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800185c:	f000 fce0 	bl	8002220 <HAL_RCC_GetHCLKFreq>
 8001860:	4603      	mov	r3, r0
 8001862:	4aa7      	ldr	r2, [pc, #668]	@ (8001b00 <HAL_RCC_OscConfig+0x3a8>)
 8001864:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8001866:	4ba7      	ldr	r3, [pc, #668]	@ (8001b04 <HAL_RCC_OscConfig+0x3ac>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff f924 	bl	8000ab8 <HAL_InitTick>
 8001870:	4603      	mov	r3, r0
 8001872:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8001874:	7cfb      	ldrb	r3, [r7, #19]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d047      	beq.n	800190a <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 800187a:	7cfb      	ldrb	r3, [r7, #19]
 800187c:	e2e5      	b.n	8001e4a <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a1b      	ldr	r3, [r3, #32]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d02c      	beq.n	80018e0 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001886:	f7ff fd9e 	bl	80013c6 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800188a:	f7ff f961 	bl	8000b50 <HAL_GetTick>
 800188e:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001890:	e008      	b.n	80018a4 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001892:	f7ff f95d 	bl	8000b50 <HAL_GetTick>
 8001896:	4602      	mov	r2, r0
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	2b02      	cmp	r3, #2
 800189e:	d901      	bls.n	80018a4 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	e2d2      	b.n	8001e4a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 80018a4:	f7ff fdab 	bl	80013fe <LL_RCC_MSI_IsReady>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d0f1      	beq.n	8001892 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80018b8:	f043 0308 	orr.w	r3, r3, #8
 80018bc:	6013      	str	r3, [r2, #0]
 80018be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018cc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80018d0:	4313      	orrs	r3, r2
 80018d2:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff fdc7 	bl	800146c <LL_RCC_MSI_SetCalibTrimming>
 80018de:	e015      	b.n	800190c <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80018e0:	f7ff fd7f 	bl	80013e2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018e4:	f7ff f934 	bl	8000b50 <HAL_GetTick>
 80018e8:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80018ea:	e008      	b.n	80018fe <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018ec:	f7ff f930 	bl	8000b50 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e2a5      	b.n	8001e4a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 80018fe:	f7ff fd7e 	bl	80013fe <LL_RCC_MSI_IsReady>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d1f1      	bne.n	80018ec <HAL_RCC_OscConfig+0x194>
 8001908:	e000      	b.n	800190c <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800190a:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	2b00      	cmp	r3, #0
 8001916:	d058      	beq.n	80019ca <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	2b08      	cmp	r3, #8
 800191c:	d005      	beq.n	800192a <HAL_RCC_OscConfig+0x1d2>
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	2b0c      	cmp	r3, #12
 8001922:	d108      	bne.n	8001936 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	2b03      	cmp	r3, #3
 8001928:	d105      	bne.n	8001936 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d14b      	bne.n	80019ca <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e289      	b.n	8001e4a <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8001936:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001948:	4313      	orrs	r3, r2
 800194a:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001954:	d102      	bne.n	800195c <HAL_RCC_OscConfig+0x204>
 8001956:	f7ff fc86 	bl	8001266 <LL_RCC_HSE_Enable>
 800195a:	e00d      	b.n	8001978 <HAL_RCC_OscConfig+0x220>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8001964:	d104      	bne.n	8001970 <HAL_RCC_OscConfig+0x218>
 8001966:	f7ff fc51 	bl	800120c <LL_RCC_HSE_EnableTcxo>
 800196a:	f7ff fc7c 	bl	8001266 <LL_RCC_HSE_Enable>
 800196e:	e003      	b.n	8001978 <HAL_RCC_OscConfig+0x220>
 8001970:	f7ff fc87 	bl	8001282 <LL_RCC_HSE_Disable>
 8001974:	f7ff fc58 	bl	8001228 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d012      	beq.n	80019a6 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001980:	f7ff f8e6 	bl	8000b50 <HAL_GetTick>
 8001984:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001988:	f7ff f8e2 	bl	8000b50 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b64      	cmp	r3, #100	@ 0x64
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e257      	b.n	8001e4a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 800199a:	f7ff fc80 	bl	800129e <LL_RCC_HSE_IsReady>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d0f1      	beq.n	8001988 <HAL_RCC_OscConfig+0x230>
 80019a4:	e011      	b.n	80019ca <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a6:	f7ff f8d3 	bl	8000b50 <HAL_GetTick>
 80019aa:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80019ac:	e008      	b.n	80019c0 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019ae:	f7ff f8cf 	bl	8000b50 <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	2b64      	cmp	r3, #100	@ 0x64
 80019ba:	d901      	bls.n	80019c0 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e244      	b.n	8001e4a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 80019c0:	f7ff fc6d 	bl	800129e <LL_RCC_HSE_IsReady>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d1f1      	bne.n	80019ae <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d046      	beq.n	8001a64 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	2b04      	cmp	r3, #4
 80019da:	d005      	beq.n	80019e8 <HAL_RCC_OscConfig+0x290>
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	2b0c      	cmp	r3, #12
 80019e0:	d10e      	bne.n	8001a00 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d10b      	bne.n	8001a00 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	691b      	ldr	r3, [r3, #16]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d101      	bne.n	80019f4 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e22a      	b.n	8001e4a <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	695b      	ldr	r3, [r3, #20]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff fc8e 	bl	800131a <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80019fe:	e031      	b.n	8001a64 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	691b      	ldr	r3, [r3, #16]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d019      	beq.n	8001a3c <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a08:	f7ff fc5a 	bl	80012c0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0c:	f7ff f8a0 	bl	8000b50 <HAL_GetTick>
 8001a10:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a14:	f7ff f89c 	bl	8000b50 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e211      	b.n	8001e4a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001a26:	f7ff fc67 	bl	80012f8 <LL_RCC_HSI_IsReady>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d0f1      	beq.n	8001a14 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	695b      	ldr	r3, [r3, #20]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff fc70 	bl	800131a <LL_RCC_HSI_SetCalibTrimming>
 8001a3a:	e013      	b.n	8001a64 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a3c:	f7ff fc4e 	bl	80012dc <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a40:	f7ff f886 	bl	8000b50 <HAL_GetTick>
 8001a44:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001a46:	e008      	b.n	8001a5a <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a48:	f7ff f882 	bl	8000b50 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e1f7      	b.n	8001e4a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001a5a:	f7ff fc4d 	bl	80012f8 <LL_RCC_HSI_IsReady>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d1f1      	bne.n	8001a48 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0308 	and.w	r3, r3, #8
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d06e      	beq.n	8001b4e <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d056      	beq.n	8001b26 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8001a78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a80:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	69da      	ldr	r2, [r3, #28]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	f003 0310 	and.w	r3, r3, #16
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d031      	beq.n	8001af4 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d006      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d101      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e1d0      	b.n	8001e4a <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d013      	beq.n	8001ada <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8001ab2:	f7ff fc67 	bl	8001384 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ab6:	f7ff f84b 	bl	8000b50 <HAL_GetTick>
 8001aba:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8001abc:	e008      	b.n	8001ad0 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001abe:	f7ff f847 	bl	8000b50 <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	2b11      	cmp	r3, #17
 8001aca:	d901      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e1bc      	b.n	8001e4a <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8001ad0:	f7ff fc68 	bl	80013a4 <LL_RCC_LSI_IsReady>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1f1      	bne.n	8001abe <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8001ada:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ade:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ae2:	f023 0210 	bic.w	r2, r3, #16
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	69db      	ldr	r3, [r3, #28]
 8001aea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001aee:	4313      	orrs	r3, r2
 8001af0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001af4:	f7ff fc36 	bl	8001364 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001af8:	f7ff f82a 	bl	8000b50 <HAL_GetTick>
 8001afc:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8001afe:	e00c      	b.n	8001b1a <HAL_RCC_OscConfig+0x3c2>
 8001b00:	20000000 	.word	0x20000000
 8001b04:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b08:	f7ff f822 	bl	8000b50 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b11      	cmp	r3, #17
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e197      	b.n	8001e4a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8001b1a:	f7ff fc43 	bl	80013a4 <LL_RCC_LSI_IsReady>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d0f1      	beq.n	8001b08 <HAL_RCC_OscConfig+0x3b0>
 8001b24:	e013      	b.n	8001b4e <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b26:	f7ff fc2d 	bl	8001384 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b2a:	f7ff f811 	bl	8000b50 <HAL_GetTick>
 8001b2e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8001b30:	e008      	b.n	8001b44 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b32:	f7ff f80d 	bl	8000b50 <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b11      	cmp	r3, #17
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e182      	b.n	8001e4a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8001b44:	f7ff fc2e 	bl	80013a4 <LL_RCC_LSI_IsReady>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d1f1      	bne.n	8001b32 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0304 	and.w	r3, r3, #4
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f000 80d8 	beq.w	8001d0c <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001b5c:	f7ff fb44 	bl	80011e8 <LL_PWR_IsEnabledBkUpAccess>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d113      	bne.n	8001b8e <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001b66:	f7ff fa9f 	bl	80010a8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b6a:	f7fe fff1 	bl	8000b50 <HAL_GetTick>
 8001b6e:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001b70:	e008      	b.n	8001b84 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b72:	f7fe ffed 	bl	8000b50 <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e162      	b.n	8001e4a <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001b84:	f7ff fb30 	bl	80011e8 <LL_PWR_IsEnabledBkUpAccess>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d0f1      	beq.n	8001b72 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	68db      	ldr	r3, [r3, #12]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d07b      	beq.n	8001c8e <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	2b85      	cmp	r3, #133	@ 0x85
 8001b9c:	d003      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	2b05      	cmp	r3, #5
 8001ba4:	d109      	bne.n	8001bba <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001ba6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001bb2:	f043 0304 	orr.w	r3, r3, #4
 8001bb6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bba:	f7fe ffc9 	bl	8000b50 <HAL_GetTick>
 8001bbe:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001bc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bc8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001bcc:	f043 0301 	orr.w	r3, r3, #1
 8001bd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001bd4:	e00a      	b.n	8001bec <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bd6:	f7fe ffbb 	bl	8000b50 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e12e      	b.n	8001e4a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001bec:	f7ff fba9 	bl	8001342 <LL_RCC_LSE_IsReady>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d0ef      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	2b81      	cmp	r3, #129	@ 0x81
 8001bfc:	d003      	beq.n	8001c06 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	2b85      	cmp	r3, #133	@ 0x85
 8001c04:	d121      	bne.n	8001c4a <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c06:	f7fe ffa3 	bl	8000b50 <HAL_GetTick>
 8001c0a:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001c0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c14:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001c20:	e00a      	b.n	8001c38 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c22:	f7fe ff95 	bl	8000b50 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d901      	bls.n	8001c38 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e108      	b.n	8001e4a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001c38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d0ec      	beq.n	8001c22 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001c48:	e060      	b.n	8001d0c <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c4a:	f7fe ff81 	bl	8000b50 <HAL_GetTick>
 8001c4e:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001c50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c58:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c5c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001c60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001c64:	e00a      	b.n	8001c7c <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c66:	f7fe ff73 	bl	8000b50 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e0e6      	b.n	8001e4a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001c7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d1ec      	bne.n	8001c66 <HAL_RCC_OscConfig+0x50e>
 8001c8c:	e03e      	b.n	8001d0c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c8e:	f7fe ff5f 	bl	8000b50 <HAL_GetTick>
 8001c92:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001c94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c9c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ca0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001ca4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001ca8:	e00a      	b.n	8001cc0 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001caa:	f7fe ff51 	bl	8000b50 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d901      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e0c4      	b.n	8001e4a <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001cc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d1ec      	bne.n	8001caa <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cd0:	f7fe ff3e 	bl	8000b50 <HAL_GetTick>
 8001cd4:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001cd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cde:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ce2:	f023 0301 	bic.w	r3, r3, #1
 8001ce6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8001cea:	e00a      	b.n	8001d02 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cec:	f7fe ff30 	bl	8000b50 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e0a3      	b.n	8001e4a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8001d02:	f7ff fb1e 	bl	8001342 <LL_RCC_LSE_IsReady>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d1ef      	bne.n	8001cec <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	f000 8099 	beq.w	8001e48 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	2b0c      	cmp	r3, #12
 8001d1a:	d06c      	beq.n	8001df6 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d14b      	bne.n	8001dbc <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d24:	f7ff fc74 	bl	8001610 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d28:	f7fe ff12 	bl	8000b50 <HAL_GetTick>
 8001d2c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d30:	f7fe ff0e 	bl	8000b50 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b0a      	cmp	r3, #10
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e083      	b.n	8001e4a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001d42:	f7ff fc73 	bl	800162c <LL_RCC_PLL_IsReady>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d1f1      	bne.n	8001d30 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d50:	68da      	ldr	r2, [r3, #12]
 8001d52:	4b40      	ldr	r3, [pc, #256]	@ (8001e54 <HAL_RCC_OscConfig+0x6fc>)
 8001d54:	4013      	ands	r3, r2
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001d5e:	4311      	orrs	r1, r2
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001d64:	0212      	lsls	r2, r2, #8
 8001d66:	4311      	orrs	r1, r2
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001d6c:	4311      	orrs	r1, r2
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001d72:	4311      	orrs	r1, r2
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d82:	f7ff fc37 	bl	80015f4 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d94:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d96:	f7fe fedb 	bl	8000b50 <HAL_GetTick>
 8001d9a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8001d9c:	e008      	b.n	8001db0 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d9e:	f7fe fed7 	bl	8000b50 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b0a      	cmp	r3, #10
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e04c      	b.n	8001e4a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8001db0:	f7ff fc3c 	bl	800162c <LL_RCC_PLL_IsReady>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d0f1      	beq.n	8001d9e <HAL_RCC_OscConfig+0x646>
 8001dba:	e045      	b.n	8001e48 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dbc:	f7ff fc28 	bl	8001610 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc0:	f7fe fec6 	bl	8000b50 <HAL_GetTick>
 8001dc4:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc8:	f7fe fec2 	bl	8000b50 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b0a      	cmp	r3, #10
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e037      	b.n	8001e4a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001dda:	f7ff fc27 	bl	800162c <LL_RCC_PLL_IsReady>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d1f1      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8001de4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001de8:	68da      	ldr	r2, [r3, #12]
 8001dea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001dee:	4b1a      	ldr	r3, [pc, #104]	@ (8001e58 <HAL_RCC_OscConfig+0x700>)
 8001df0:	4013      	ands	r3, r2
 8001df2:	60cb      	str	r3, [r1, #12]
 8001df4:	e028      	b.n	8001e48 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d101      	bne.n	8001e02 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e023      	b.n	8001e4a <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	f003 0203 	and.w	r2, r3, #3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d115      	bne.n	8001e44 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d10e      	bne.n	8001e44 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e30:	021b      	lsls	r3, r3, #8
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d106      	bne.n	8001e44 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d001      	beq.n	8001e48 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e000      	b.n	8001e4a <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3720      	adds	r7, #32
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	11c1808c 	.word	0x11c1808c
 8001e58:	eefefffc 	.word	0xeefefffc

08001e5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d101      	bne.n	8001e70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e12c      	b.n	80020ca <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e70:	4b98      	ldr	r3, [pc, #608]	@ (80020d4 <HAL_RCC_ClockConfig+0x278>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0307 	and.w	r3, r3, #7
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d91b      	bls.n	8001eb6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e7e:	4b95      	ldr	r3, [pc, #596]	@ (80020d4 <HAL_RCC_ClockConfig+0x278>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f023 0207 	bic.w	r2, r3, #7
 8001e86:	4993      	ldr	r1, [pc, #588]	@ (80020d4 <HAL_RCC_ClockConfig+0x278>)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e8e:	f7fe fe5f 	bl	8000b50 <HAL_GetTick>
 8001e92:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e94:	e008      	b.n	8001ea8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001e96:	f7fe fe5b 	bl	8000b50 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d901      	bls.n	8001ea8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e110      	b.n	80020ca <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ea8:	4b8a      	ldr	r3, [pc, #552]	@ (80020d4 <HAL_RCC_ClockConfig+0x278>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0307 	and.w	r3, r3, #7
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d1ef      	bne.n	8001e96 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d016      	beq.n	8001ef0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7ff fb02 	bl	80014d0 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001ecc:	f7fe fe40 	bl	8000b50 <HAL_GetTick>
 8001ed0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001ed4:	f7fe fe3c 	bl	8000b50 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e0f1      	b.n	80020ca <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001ee6:	f7ff fbdf 	bl	80016a8 <LL_RCC_IsActiveFlag_HPRE>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d0f1      	beq.n	8001ed4 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0320 	and.w	r3, r3, #32
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d016      	beq.n	8001f2a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	695b      	ldr	r3, [r3, #20]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff faf8 	bl	80014f6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001f06:	f7fe fe23 	bl	8000b50 <HAL_GetTick>
 8001f0a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001f0c:	e008      	b.n	8001f20 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001f0e:	f7fe fe1f 	bl	8000b50 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e0d4      	b.n	80020ca <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001f20:	f7ff fbd3 	bl	80016ca <LL_RCC_IsActiveFlag_C2HPRE>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d0f1      	beq.n	8001f0e <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d016      	beq.n	8001f64 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7ff faf0 	bl	8001520 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001f40:	f7fe fe06 	bl	8000b50 <HAL_GetTick>
 8001f44:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001f48:	f7fe fe02 	bl	8000b50 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e0b7      	b.n	80020ca <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001f5a:	f7ff fbc8 	bl	80016ee <LL_RCC_IsActiveFlag_SHDHPRE>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d0f1      	beq.n	8001f48 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0304 	and.w	r3, r3, #4
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d016      	beq.n	8001f9e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff fae9 	bl	800154c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001f7a:	f7fe fde9 	bl	8000b50 <HAL_GetTick>
 8001f7e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001f80:	e008      	b.n	8001f94 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001f82:	f7fe fde5 	bl	8000b50 <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d901      	bls.n	8001f94 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e09a      	b.n	80020ca <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001f94:	f7ff fbbd 	bl	8001712 <LL_RCC_IsActiveFlag_PPRE1>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d0f1      	beq.n	8001f82 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0308 	and.w	r3, r3, #8
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d017      	beq.n	8001fda <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff fade 	bl	8001572 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001fb6:	f7fe fdcb 	bl	8000b50 <HAL_GetTick>
 8001fba:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001fbc:	e008      	b.n	8001fd0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001fbe:	f7fe fdc7 	bl	8000b50 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e07c      	b.n	80020ca <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001fd0:	f7ff fbb0 	bl	8001734 <LL_RCC_IsActiveFlag_PPRE2>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d0f1      	beq.n	8001fbe <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d043      	beq.n	800206e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d106      	bne.n	8001ffc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8001fee:	f7ff f956 	bl	800129e <LL_RCC_HSE_IsReady>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d11e      	bne.n	8002036 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e066      	b.n	80020ca <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	2b03      	cmp	r3, #3
 8002002:	d106      	bne.n	8002012 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002004:	f7ff fb12 	bl	800162c <LL_RCC_PLL_IsReady>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d113      	bne.n	8002036 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e05b      	b.n	80020ca <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d106      	bne.n	8002028 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800201a:	f7ff f9f0 	bl	80013fe <LL_RCC_MSI_IsReady>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d108      	bne.n	8002036 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e050      	b.n	80020ca <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002028:	f7ff f966 	bl	80012f8 <LL_RCC_HSI_IsReady>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e049      	b.n	80020ca <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff fa2a 	bl	8001494 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002040:	f7fe fd86 	bl	8000b50 <HAL_GetTick>
 8002044:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002046:	e00a      	b.n	800205e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002048:	f7fe fd82 	bl	8000b50 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002056:	4293      	cmp	r3, r2
 8002058:	d901      	bls.n	800205e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e035      	b.n	80020ca <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800205e:	f7ff fa2c 	bl	80014ba <LL_RCC_GetSysClkSource>
 8002062:	4602      	mov	r2, r0
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	429a      	cmp	r2, r3
 800206c:	d1ec      	bne.n	8002048 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800206e:	4b19      	ldr	r3, [pc, #100]	@ (80020d4 <HAL_RCC_ClockConfig+0x278>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0307 	and.w	r3, r3, #7
 8002076:	683a      	ldr	r2, [r7, #0]
 8002078:	429a      	cmp	r2, r3
 800207a:	d21b      	bcs.n	80020b4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800207c:	4b15      	ldr	r3, [pc, #84]	@ (80020d4 <HAL_RCC_ClockConfig+0x278>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f023 0207 	bic.w	r2, r3, #7
 8002084:	4913      	ldr	r1, [pc, #76]	@ (80020d4 <HAL_RCC_ClockConfig+0x278>)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	4313      	orrs	r3, r2
 800208a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800208c:	f7fe fd60 	bl	8000b50 <HAL_GetTick>
 8002090:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002092:	e008      	b.n	80020a6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002094:	f7fe fd5c 	bl	8000b50 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e011      	b.n	80020ca <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a6:	4b0b      	ldr	r3, [pc, #44]	@ (80020d4 <HAL_RCC_ClockConfig+0x278>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d1ef      	bne.n	8002094 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80020b4:	f000 f8b4 	bl	8002220 <HAL_RCC_GetHCLKFreq>
 80020b8:	4603      	mov	r3, r0
 80020ba:	4a07      	ldr	r2, [pc, #28]	@ (80020d8 <HAL_RCC_ClockConfig+0x27c>)
 80020bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 80020be:	4b07      	ldr	r3, [pc, #28]	@ (80020dc <HAL_RCC_ClockConfig+0x280>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7fe fcf8 	bl	8000ab8 <HAL_InitTick>
 80020c8:	4603      	mov	r3, r0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	58004000 	.word	0x58004000
 80020d8:	20000000 	.word	0x20000000
 80020dc:	20000004 	.word	0x20000004

080020e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020e0:	b590      	push	{r4, r7, lr}
 80020e2:	b087      	sub	sp, #28
 80020e4:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80020e6:	2300      	movs	r3, #0
 80020e8:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80020ea:	2300      	movs	r3, #0
 80020ec:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020ee:	f7ff f9e4 	bl	80014ba <LL_RCC_GetSysClkSource>
 80020f2:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020f4:	f7ff facd 	bl	8001692 <LL_RCC_PLL_GetMainSource>
 80020f8:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d005      	beq.n	800210c <HAL_RCC_GetSysClockFreq+0x2c>
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	2b0c      	cmp	r3, #12
 8002104:	d139      	bne.n	800217a <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d136      	bne.n	800217a <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800210c:	f7ff f987 	bl	800141e <LL_RCC_MSI_IsEnabledRangeSelect>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d115      	bne.n	8002142 <HAL_RCC_GetSysClockFreq+0x62>
 8002116:	f7ff f982 	bl	800141e <LL_RCC_MSI_IsEnabledRangeSelect>
 800211a:	4603      	mov	r3, r0
 800211c:	2b01      	cmp	r3, #1
 800211e:	d106      	bne.n	800212e <HAL_RCC_GetSysClockFreq+0x4e>
 8002120:	f7ff f98d 	bl	800143e <LL_RCC_MSI_GetRange>
 8002124:	4603      	mov	r3, r0
 8002126:	0a1b      	lsrs	r3, r3, #8
 8002128:	f003 030f 	and.w	r3, r3, #15
 800212c:	e005      	b.n	800213a <HAL_RCC_GetSysClockFreq+0x5a>
 800212e:	f7ff f991 	bl	8001454 <LL_RCC_MSI_GetRangeAfterStandby>
 8002132:	4603      	mov	r3, r0
 8002134:	0a1b      	lsrs	r3, r3, #8
 8002136:	f003 030f 	and.w	r3, r3, #15
 800213a:	4a36      	ldr	r2, [pc, #216]	@ (8002214 <HAL_RCC_GetSysClockFreq+0x134>)
 800213c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002140:	e014      	b.n	800216c <HAL_RCC_GetSysClockFreq+0x8c>
 8002142:	f7ff f96c 	bl	800141e <LL_RCC_MSI_IsEnabledRangeSelect>
 8002146:	4603      	mov	r3, r0
 8002148:	2b01      	cmp	r3, #1
 800214a:	d106      	bne.n	800215a <HAL_RCC_GetSysClockFreq+0x7a>
 800214c:	f7ff f977 	bl	800143e <LL_RCC_MSI_GetRange>
 8002150:	4603      	mov	r3, r0
 8002152:	091b      	lsrs	r3, r3, #4
 8002154:	f003 030f 	and.w	r3, r3, #15
 8002158:	e005      	b.n	8002166 <HAL_RCC_GetSysClockFreq+0x86>
 800215a:	f7ff f97b 	bl	8001454 <LL_RCC_MSI_GetRangeAfterStandby>
 800215e:	4603      	mov	r3, r0
 8002160:	091b      	lsrs	r3, r3, #4
 8002162:	f003 030f 	and.w	r3, r3, #15
 8002166:	4a2b      	ldr	r2, [pc, #172]	@ (8002214 <HAL_RCC_GetSysClockFreq+0x134>)
 8002168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800216c:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d115      	bne.n	80021a0 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002178:	e012      	b.n	80021a0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	2b04      	cmp	r3, #4
 800217e:	d102      	bne.n	8002186 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002180:	4b25      	ldr	r3, [pc, #148]	@ (8002218 <HAL_RCC_GetSysClockFreq+0x138>)
 8002182:	617b      	str	r3, [r7, #20]
 8002184:	e00c      	b.n	80021a0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	2b08      	cmp	r3, #8
 800218a:	d109      	bne.n	80021a0 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800218c:	f7ff f85a 	bl	8001244 <LL_RCC_HSE_IsEnabledDiv2>
 8002190:	4603      	mov	r3, r0
 8002192:	2b01      	cmp	r3, #1
 8002194:	d102      	bne.n	800219c <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002196:	4b20      	ldr	r3, [pc, #128]	@ (8002218 <HAL_RCC_GetSysClockFreq+0x138>)
 8002198:	617b      	str	r3, [r7, #20]
 800219a:	e001      	b.n	80021a0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800219c:	4b1f      	ldr	r3, [pc, #124]	@ (800221c <HAL_RCC_GetSysClockFreq+0x13c>)
 800219e:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021a0:	f7ff f98b 	bl	80014ba <LL_RCC_GetSysClkSource>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b0c      	cmp	r3, #12
 80021a8:	d12f      	bne.n	800220a <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80021aa:	f7ff fa72 	bl	8001692 <LL_RCC_PLL_GetMainSource>
 80021ae:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d003      	beq.n	80021be <HAL_RCC_GetSysClockFreq+0xde>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2b03      	cmp	r3, #3
 80021ba:	d003      	beq.n	80021c4 <HAL_RCC_GetSysClockFreq+0xe4>
 80021bc:	e00d      	b.n	80021da <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80021be:	4b16      	ldr	r3, [pc, #88]	@ (8002218 <HAL_RCC_GetSysClockFreq+0x138>)
 80021c0:	60fb      	str	r3, [r7, #12]
        break;
 80021c2:	e00d      	b.n	80021e0 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80021c4:	f7ff f83e 	bl	8001244 <LL_RCC_HSE_IsEnabledDiv2>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d102      	bne.n	80021d4 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80021ce:	4b12      	ldr	r3, [pc, #72]	@ (8002218 <HAL_RCC_GetSysClockFreq+0x138>)
 80021d0:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80021d2:	e005      	b.n	80021e0 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80021d4:	4b11      	ldr	r3, [pc, #68]	@ (800221c <HAL_RCC_GetSysClockFreq+0x13c>)
 80021d6:	60fb      	str	r3, [r7, #12]
        break;
 80021d8:	e002      	b.n	80021e0 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	60fb      	str	r3, [r7, #12]
        break;
 80021de:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80021e0:	f7ff fa35 	bl	800164e <LL_RCC_PLL_GetN>
 80021e4:	4602      	mov	r2, r0
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	fb03 f402 	mul.w	r4, r3, r2
 80021ec:	f7ff fa46 	bl	800167c <LL_RCC_PLL_GetDivider>
 80021f0:	4603      	mov	r3, r0
 80021f2:	091b      	lsrs	r3, r3, #4
 80021f4:	3301      	adds	r3, #1
 80021f6:	fbb4 f4f3 	udiv	r4, r4, r3
 80021fa:	f7ff fa34 	bl	8001666 <LL_RCC_PLL_GetR>
 80021fe:	4603      	mov	r3, r0
 8002200:	0f5b      	lsrs	r3, r3, #29
 8002202:	3301      	adds	r3, #1
 8002204:	fbb4 f3f3 	udiv	r3, r4, r3
 8002208:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800220a:	697b      	ldr	r3, [r7, #20]
}
 800220c:	4618      	mov	r0, r3
 800220e:	371c      	adds	r7, #28
 8002210:	46bd      	mov	sp, r7
 8002212:	bd90      	pop	{r4, r7, pc}
 8002214:	08003f18 	.word	0x08003f18
 8002218:	00f42400 	.word	0x00f42400
 800221c:	01e84800 	.word	0x01e84800

08002220 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002220:	b598      	push	{r3, r4, r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002224:	f7ff ff5c 	bl	80020e0 <HAL_RCC_GetSysClockFreq>
 8002228:	4604      	mov	r4, r0
 800222a:	f7ff f9b5 	bl	8001598 <LL_RCC_GetAHBPrescaler>
 800222e:	4603      	mov	r3, r0
 8002230:	091b      	lsrs	r3, r3, #4
 8002232:	f003 030f 	and.w	r3, r3, #15
 8002236:	4a03      	ldr	r2, [pc, #12]	@ (8002244 <HAL_RCC_GetHCLKFreq+0x24>)
 8002238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800223c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002240:	4618      	mov	r0, r3
 8002242:	bd98      	pop	{r3, r4, r7, pc}
 8002244:	08003eb8 	.word	0x08003eb8

08002248 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002248:	b598      	push	{r3, r4, r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800224c:	f7ff ffe8 	bl	8002220 <HAL_RCC_GetHCLKFreq>
 8002250:	4604      	mov	r4, r0
 8002252:	f7ff f9b9 	bl	80015c8 <LL_RCC_GetAPB1Prescaler>
 8002256:	4603      	mov	r3, r0
 8002258:	0a1b      	lsrs	r3, r3, #8
 800225a:	4a03      	ldr	r2, [pc, #12]	@ (8002268 <HAL_RCC_GetPCLK1Freq+0x20>)
 800225c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002260:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002264:	4618      	mov	r0, r3
 8002266:	bd98      	pop	{r3, r4, r7, pc}
 8002268:	08003ef8 	.word	0x08003ef8

0800226c <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800226c:	b598      	push	{r3, r4, r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002270:	f7ff ffd6 	bl	8002220 <HAL_RCC_GetHCLKFreq>
 8002274:	4604      	mov	r4, r0
 8002276:	f7ff f9b2 	bl	80015de <LL_RCC_GetAPB2Prescaler>
 800227a:	4603      	mov	r3, r0
 800227c:	0adb      	lsrs	r3, r3, #11
 800227e:	4a03      	ldr	r2, [pc, #12]	@ (800228c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002284:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002288:	4618      	mov	r0, r3
 800228a:	bd98      	pop	{r3, r4, r7, pc}
 800228c:	08003ef8 	.word	0x08003ef8

08002290 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002290:	b590      	push	{r4, r7, lr}
 8002292:	b085      	sub	sp, #20
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	091b      	lsrs	r3, r3, #4
 800229c:	f003 030f 	and.w	r3, r3, #15
 80022a0:	4a10      	ldr	r2, [pc, #64]	@ (80022e4 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80022a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022a6:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80022a8:	f7ff f981 	bl	80015ae <LL_RCC_GetAHB3Prescaler>
 80022ac:	4603      	mov	r3, r0
 80022ae:	091b      	lsrs	r3, r3, #4
 80022b0:	f003 030f 	and.w	r3, r3, #15
 80022b4:	4a0c      	ldr	r2, [pc, #48]	@ (80022e8 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80022b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80022c0:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	4a09      	ldr	r2, [pc, #36]	@ (80022ec <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80022c6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ca:	0c9c      	lsrs	r4, r3, #18
 80022cc:	f7fe ff3c 	bl	8001148 <HAL_PWREx_GetVoltageRange>
 80022d0:	4603      	mov	r3, r0
 80022d2:	4619      	mov	r1, r3
 80022d4:	4620      	mov	r0, r4
 80022d6:	f000 f80b 	bl	80022f0 <RCC_SetFlashLatency>
 80022da:	4603      	mov	r3, r0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3714      	adds	r7, #20
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd90      	pop	{r4, r7, pc}
 80022e4:	08003f18 	.word	0x08003f18
 80022e8:	08003eb8 	.word	0x08003eb8
 80022ec:	431bde83 	.word	0x431bde83

080022f0 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b08e      	sub	sp, #56	@ 0x38
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80022fa:	4a3a      	ldr	r2, [pc, #232]	@ (80023e4 <RCC_SetFlashLatency+0xf4>)
 80022fc:	f107 0320 	add.w	r3, r7, #32
 8002300:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002304:	6018      	str	r0, [r3, #0]
 8002306:	3304      	adds	r3, #4
 8002308:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800230a:	4a37      	ldr	r2, [pc, #220]	@ (80023e8 <RCC_SetFlashLatency+0xf8>)
 800230c:	f107 0318 	add.w	r3, r7, #24
 8002310:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002314:	6018      	str	r0, [r3, #0]
 8002316:	3304      	adds	r3, #4
 8002318:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800231a:	4a34      	ldr	r2, [pc, #208]	@ (80023ec <RCC_SetFlashLatency+0xfc>)
 800231c:	f107 030c 	add.w	r3, r7, #12
 8002320:	ca07      	ldmia	r2, {r0, r1, r2}
 8002322:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002326:	2300      	movs	r3, #0
 8002328:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002330:	d11b      	bne.n	800236a <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002332:	2300      	movs	r3, #0
 8002334:	633b      	str	r3, [r7, #48]	@ 0x30
 8002336:	e014      	b.n	8002362 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	3338      	adds	r3, #56	@ 0x38
 800233e:	443b      	add	r3, r7
 8002340:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002344:	461a      	mov	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4293      	cmp	r3, r2
 800234a:	d807      	bhi.n	800235c <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800234c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	3338      	adds	r3, #56	@ 0x38
 8002352:	443b      	add	r3, r7
 8002354:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002358:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800235a:	e021      	b.n	80023a0 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800235c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800235e:	3301      	adds	r3, #1
 8002360:	633b      	str	r3, [r7, #48]	@ 0x30
 8002362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002364:	2b02      	cmp	r3, #2
 8002366:	d9e7      	bls.n	8002338 <RCC_SetFlashLatency+0x48>
 8002368:	e01a      	b.n	80023a0 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800236a:	2300      	movs	r3, #0
 800236c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800236e:	e014      	b.n	800239a <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	3338      	adds	r3, #56	@ 0x38
 8002376:	443b      	add	r3, r7
 8002378:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 800237c:	461a      	mov	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4293      	cmp	r3, r2
 8002382:	d807      	bhi.n	8002394 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	3338      	adds	r3, #56	@ 0x38
 800238a:	443b      	add	r3, r7
 800238c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002390:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002392:	e005      	b.n	80023a0 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002396:	3301      	adds	r3, #1
 8002398:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800239a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800239c:	2b02      	cmp	r3, #2
 800239e:	d9e7      	bls.n	8002370 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80023a0:	4b13      	ldr	r3, [pc, #76]	@ (80023f0 <RCC_SetFlashLatency+0x100>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f023 0207 	bic.w	r2, r3, #7
 80023a8:	4911      	ldr	r1, [pc, #68]	@ (80023f0 <RCC_SetFlashLatency+0x100>)
 80023aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023ac:	4313      	orrs	r3, r2
 80023ae:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80023b0:	f7fe fbce 	bl	8000b50 <HAL_GetTick>
 80023b4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80023b6:	e008      	b.n	80023ca <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80023b8:	f7fe fbca 	bl	8000b50 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d901      	bls.n	80023ca <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e007      	b.n	80023da <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80023ca:	4b09      	ldr	r3, [pc, #36]	@ (80023f0 <RCC_SetFlashLatency+0x100>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0307 	and.w	r3, r3, #7
 80023d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d1ef      	bne.n	80023b8 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3738      	adds	r7, #56	@ 0x38
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	08003e9c 	.word	0x08003e9c
 80023e8:	08003ea4 	.word	0x08003ea4
 80023ec:	08003eac 	.word	0x08003eac
 80023f0:	58004000 	.word	0x58004000

080023f4 <LL_RCC_LSE_IsReady>:
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80023f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b02      	cmp	r3, #2
 8002406:	d101      	bne.n	800240c <LL_RCC_LSE_IsReady+0x18>
 8002408:	2301      	movs	r3, #1
 800240a:	e000      	b.n	800240e <LL_RCC_LSE_IsReady+0x1a>
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	46bd      	mov	sp, r7
 8002412:	bc80      	pop	{r7}
 8002414:	4770      	bx	lr

08002416 <LL_RCC_SetUSARTClockSource>:
{
 8002416:	b480      	push	{r7}
 8002418:	b083      	sub	sp, #12
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800241e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002422:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	0c1b      	lsrs	r3, r3, #16
 800242a:	43db      	mvns	r3, r3
 800242c:	401a      	ands	r2, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	b29b      	uxth	r3, r3
 8002432:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002436:	4313      	orrs	r3, r2
 8002438:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	bc80      	pop	{r7}
 8002444:	4770      	bx	lr

08002446 <LL_RCC_SetI2SClockSource>:
{
 8002446:	b480      	push	{r7}
 8002448:	b083      	sub	sp, #12
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800244e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002452:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002456:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800245a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4313      	orrs	r3, r2
 8002462:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002466:	bf00      	nop
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	bc80      	pop	{r7}
 800246e:	4770      	bx	lr

08002470 <LL_RCC_SetLPUARTClockSource>:
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002478:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800247c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002480:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002484:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4313      	orrs	r3, r2
 800248c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002490:	bf00      	nop
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	bc80      	pop	{r7}
 8002498:	4770      	bx	lr

0800249a <LL_RCC_SetI2CClockSource>:
{
 800249a:	b480      	push	{r7}
 800249c:	b083      	sub	sp, #12
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80024a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024a6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	091b      	lsrs	r3, r3, #4
 80024ae:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80024b2:	43db      	mvns	r3, r3
 80024b4:	401a      	ands	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	011b      	lsls	r3, r3, #4
 80024ba:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80024be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80024c2:	4313      	orrs	r3, r2
 80024c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bc80      	pop	{r7}
 80024d0:	4770      	bx	lr

080024d2 <LL_RCC_SetLPTIMClockSource>:
{
 80024d2:	b480      	push	{r7}
 80024d4:	b083      	sub	sp, #12
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80024da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024de:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	0c1b      	lsrs	r3, r3, #16
 80024e6:	041b      	lsls	r3, r3, #16
 80024e8:	43db      	mvns	r3, r3
 80024ea:	401a      	ands	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	041b      	lsls	r3, r3, #16
 80024f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80024f4:	4313      	orrs	r3, r2
 80024f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80024fa:	bf00      	nop
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	bc80      	pop	{r7}
 8002502:	4770      	bx	lr

08002504 <LL_RCC_SetRNGClockSource>:
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800250c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002510:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002514:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002518:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	4313      	orrs	r3, r2
 8002520:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	bc80      	pop	{r7}
 800252c:	4770      	bx	lr

0800252e <LL_RCC_SetADCClockSource>:
{
 800252e:	b480      	push	{r7}
 8002530:	b083      	sub	sp, #12
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002536:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800253a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800253e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002542:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4313      	orrs	r3, r2
 800254a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800254e:	bf00      	nop
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	bc80      	pop	{r7}
 8002556:	4770      	bx	lr

08002558 <LL_RCC_SetRTCClockSource>:
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002560:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002564:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002568:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800256c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4313      	orrs	r3, r2
 8002574:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	bc80      	pop	{r7}
 8002580:	4770      	bx	lr

08002582 <LL_RCC_GetRTCClockSource>:
{
 8002582:	b480      	push	{r7}
 8002584:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002586:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800258a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800258e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8002592:	4618      	mov	r0, r3
 8002594:	46bd      	mov	sp, r7
 8002596:	bc80      	pop	{r7}
 8002598:	4770      	bx	lr

0800259a <LL_RCC_ForceBackupDomainReset>:
{
 800259a:	b480      	push	{r7}
 800259c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800259e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025a6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80025aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80025b2:	bf00      	nop
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bc80      	pop	{r7}
 80025b8:	4770      	bx	lr

080025ba <LL_RCC_ReleaseBackupDomainReset>:
{
 80025ba:	b480      	push	{r7}
 80025bc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80025be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025c6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80025ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80025d2:	bf00      	nop
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bc80      	pop	{r7}
 80025d8:	4770      	bx	lr
	...

080025dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80025e4:	2300      	movs	r3, #0
 80025e6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80025e8:	2300      	movs	r3, #0
 80025ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80025ec:	2300      	movs	r3, #0
 80025ee:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d058      	beq.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80025fc:	f7fe fd54 	bl	80010a8 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002600:	f7fe faa6 	bl	8000b50 <HAL_GetTick>
 8002604:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002606:	e009      	b.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002608:	f7fe faa2 	bl	8000b50 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d902      	bls.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	74fb      	strb	r3, [r7, #19]
        break;
 800261a:	e006      	b.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800261c:	4b7b      	ldr	r3, [pc, #492]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002624:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002628:	d1ee      	bne.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 800262a:	7cfb      	ldrb	r3, [r7, #19]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d13c      	bne.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002630:	f7ff ffa7 	bl	8002582 <LL_RCC_GetRTCClockSource>
 8002634:	4602      	mov	r2, r0
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800263a:	429a      	cmp	r2, r3
 800263c:	d00f      	beq.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800263e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002642:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002646:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800264a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800264c:	f7ff ffa5 	bl	800259a <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002650:	f7ff ffb3 	bl	80025ba <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002654:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d014      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002668:	f7fe fa72 	bl	8000b50 <HAL_GetTick>
 800266c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800266e:	e00b      	b.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002670:	f7fe fa6e 	bl	8000b50 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800267e:	4293      	cmp	r3, r2
 8002680:	d902      	bls.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	74fb      	strb	r3, [r7, #19]
            break;
 8002686:	e004      	b.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8002688:	f7ff feb4 	bl	80023f4 <LL_RCC_LSE_IsReady>
 800268c:	4603      	mov	r3, r0
 800268e:	2b01      	cmp	r3, #1
 8002690:	d1ee      	bne.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8002692:	7cfb      	ldrb	r3, [r7, #19]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d105      	bne.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800269c:	4618      	mov	r0, r3
 800269e:	f7ff ff5b 	bl	8002558 <LL_RCC_SetRTCClockSource>
 80026a2:	e004      	b.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80026a4:	7cfb      	ldrb	r3, [r7, #19]
 80026a6:	74bb      	strb	r3, [r7, #18]
 80026a8:	e001      	b.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026aa:	7cfb      	ldrb	r3, [r7, #19]
 80026ac:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d004      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff fea9 	bl	8002416 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d004      	beq.n	80026da <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7ff fe9e 	bl	8002416 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0320 	and.w	r3, r3, #32
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d004      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7ff fec0 	bl	8002470 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d004      	beq.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a1b      	ldr	r3, [r3, #32]
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff fee6 	bl	80024d2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800270e:	2b00      	cmp	r3, #0
 8002710:	d004      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002716:	4618      	mov	r0, r3
 8002718:	f7ff fedb 	bl	80024d2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002724:	2b00      	cmp	r3, #0
 8002726:	d004      	beq.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff fed0 	bl	80024d2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800273a:	2b00      	cmp	r3, #0
 800273c:	d004      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff fea9 	bl	800249a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002750:	2b00      	cmp	r3, #0
 8002752:	d004      	beq.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	4618      	mov	r0, r3
 800275a:	f7ff fe9e 	bl	800249a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002766:	2b00      	cmp	r3, #0
 8002768:	d004      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	69db      	ldr	r3, [r3, #28]
 800276e:	4618      	mov	r0, r3
 8002770:	f7ff fe93 	bl	800249a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0310 	and.w	r3, r3, #16
 800277c:	2b00      	cmp	r3, #0
 800277e:	d011      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff fe5e 	bl	8002446 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002792:	d107      	bne.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8002794:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800279e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027a2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d010      	beq.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff fea5 	bl	8002504 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d107      	bne.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80027c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80027cc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027d0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d011      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7ff fea3 	bl	800252e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80027f0:	d107      	bne.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80027f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80027fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002800:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8002802:	7cbb      	ldrb	r3, [r7, #18]
}
 8002804:	4618      	mov	r0, r3
 8002806:	3718      	adds	r7, #24
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	58000400 	.word	0x58000400

08002810 <LL_RCC_GetUSARTClockSource>:
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8002818:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800281c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	401a      	ands	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	041b      	lsls	r3, r3, #16
 8002828:	4313      	orrs	r3, r2
}
 800282a:	4618      	mov	r0, r3
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	bc80      	pop	{r7}
 8002832:	4770      	bx	lr

08002834 <LL_RCC_GetLPUARTClockSource>:
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800283c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002840:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4013      	ands	r3, r2
}
 8002848:	4618      	mov	r0, r3
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	bc80      	pop	{r7}
 8002850:	4770      	bx	lr

08002852 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b082      	sub	sp, #8
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d101      	bne.n	8002864 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e042      	b.n	80028ea <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800286a:	2b00      	cmp	r3, #0
 800286c:	d106      	bne.n	800287c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7fd ffbc 	bl	80007f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2224      	movs	r2, #36	@ 0x24
 8002880:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f022 0201 	bic.w	r2, r2, #1
 8002892:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002898:	2b00      	cmp	r3, #0
 800289a:	d002      	beq.n	80028a2 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f000 fb23 	bl	8002ee8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 f8ac 	bl	8002a00 <UART_SetConfig>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d101      	bne.n	80028b2 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e01b      	b.n	80028ea <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	685a      	ldr	r2, [r3, #4]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80028c0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	689a      	ldr	r2, [r3, #8]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80028d0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f042 0201 	orr.w	r2, r2, #1
 80028e0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 fba1 	bl	800302a <UART_CheckIdleState>
 80028e8:	4603      	mov	r3, r0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b08a      	sub	sp, #40	@ 0x28
 80028f6:	af02      	add	r7, sp, #8
 80028f8:	60f8      	str	r0, [r7, #12]
 80028fa:	60b9      	str	r1, [r7, #8]
 80028fc:	603b      	str	r3, [r7, #0]
 80028fe:	4613      	mov	r3, r2
 8002900:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002908:	2b20      	cmp	r3, #32
 800290a:	d173      	bne.n	80029f4 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d002      	beq.n	8002918 <HAL_UART_Transmit+0x26>
 8002912:	88fb      	ldrh	r3, [r7, #6]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d101      	bne.n	800291c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e06c      	b.n	80029f6 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2200      	movs	r2, #0
 8002920:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2221      	movs	r2, #33	@ 0x21
 8002928:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800292c:	f7fe f910 	bl	8000b50 <HAL_GetTick>
 8002930:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	88fa      	ldrh	r2, [r7, #6]
 8002936:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	88fa      	ldrh	r2, [r7, #6]
 800293e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800294a:	d108      	bne.n	800295e <HAL_UART_Transmit+0x6c>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d104      	bne.n	800295e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002954:	2300      	movs	r3, #0
 8002956:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	61bb      	str	r3, [r7, #24]
 800295c:	e003      	b.n	8002966 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002962:	2300      	movs	r3, #0
 8002964:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002966:	e02c      	b.n	80029c2 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	9300      	str	r3, [sp, #0]
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	2200      	movs	r2, #0
 8002970:	2180      	movs	r1, #128	@ 0x80
 8002972:	68f8      	ldr	r0, [r7, #12]
 8002974:	f000 fba7 	bl	80030c6 <UART_WaitOnFlagUntilTimeout>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e039      	b.n	80029f6 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d10b      	bne.n	80029a0 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	881b      	ldrh	r3, [r3, #0]
 800298c:	461a      	mov	r2, r3
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002996:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	3302      	adds	r3, #2
 800299c:	61bb      	str	r3, [r7, #24]
 800299e:	e007      	b.n	80029b0 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	781a      	ldrb	r2, [r3, #0]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	3301      	adds	r3, #1
 80029ae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	3b01      	subs	r3, #1
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1cc      	bne.n	8002968 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	9300      	str	r3, [sp, #0]
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	2200      	movs	r2, #0
 80029d6:	2140      	movs	r1, #64	@ 0x40
 80029d8:	68f8      	ldr	r0, [r7, #12]
 80029da:	f000 fb74 	bl	80030c6 <UART_WaitOnFlagUntilTimeout>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d001      	beq.n	80029e8 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e006      	b.n	80029f6 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2220      	movs	r2, #32
 80029ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80029f0:	2300      	movs	r3, #0
 80029f2:	e000      	b.n	80029f6 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 80029f4:	2302      	movs	r3, #2
  }
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3720      	adds	r7, #32
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
	...

08002a00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a04:	b08c      	sub	sp, #48	@ 0x30
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	689a      	ldr	r2, [r3, #8]
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	691b      	ldr	r3, [r3, #16]
 8002a18:	431a      	orrs	r2, r3
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	431a      	orrs	r2, r3
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	69db      	ldr	r3, [r3, #28]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	4b94      	ldr	r3, [pc, #592]	@ (8002c80 <UART_SetConfig+0x280>)
 8002a30:	4013      	ands	r3, r2
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	6812      	ldr	r2, [r2, #0]
 8002a36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002a38:	430b      	orrs	r3, r1
 8002a3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	68da      	ldr	r2, [r3, #12]
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a89      	ldr	r2, [pc, #548]	@ (8002c84 <UART_SetConfig+0x284>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d004      	beq.n	8002a6c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002a76:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002a7a:	697a      	ldr	r2, [r7, #20]
 8002a7c:	6812      	ldr	r2, [r2, #0]
 8002a7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002a80:	430b      	orrs	r3, r1
 8002a82:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a8a:	f023 010f 	bic.w	r1, r3, #15
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	430a      	orrs	r2, r1
 8002a98:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a7a      	ldr	r2, [pc, #488]	@ (8002c88 <UART_SetConfig+0x288>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d127      	bne.n	8002af4 <UART_SetConfig+0xf4>
 8002aa4:	2003      	movs	r0, #3
 8002aa6:	f7ff feb3 	bl	8002810 <LL_RCC_GetUSARTClockSource>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8002ab0:	2b03      	cmp	r3, #3
 8002ab2:	d81b      	bhi.n	8002aec <UART_SetConfig+0xec>
 8002ab4:	a201      	add	r2, pc, #4	@ (adr r2, 8002abc <UART_SetConfig+0xbc>)
 8002ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aba:	bf00      	nop
 8002abc:	08002acd 	.word	0x08002acd
 8002ac0:	08002add 	.word	0x08002add
 8002ac4:	08002ad5 	.word	0x08002ad5
 8002ac8:	08002ae5 	.word	0x08002ae5
 8002acc:	2301      	movs	r3, #1
 8002ace:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ad2:	e080      	b.n	8002bd6 <UART_SetConfig+0x1d6>
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ada:	e07c      	b.n	8002bd6 <UART_SetConfig+0x1d6>
 8002adc:	2304      	movs	r3, #4
 8002ade:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ae2:	e078      	b.n	8002bd6 <UART_SetConfig+0x1d6>
 8002ae4:	2308      	movs	r3, #8
 8002ae6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002aea:	e074      	b.n	8002bd6 <UART_SetConfig+0x1d6>
 8002aec:	2310      	movs	r3, #16
 8002aee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002af2:	e070      	b.n	8002bd6 <UART_SetConfig+0x1d6>
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a64      	ldr	r2, [pc, #400]	@ (8002c8c <UART_SetConfig+0x28c>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d138      	bne.n	8002b70 <UART_SetConfig+0x170>
 8002afe:	200c      	movs	r0, #12
 8002b00:	f7ff fe86 	bl	8002810 <LL_RCC_GetUSARTClockSource>
 8002b04:	4603      	mov	r3, r0
 8002b06:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8002b0a:	2b0c      	cmp	r3, #12
 8002b0c:	d82c      	bhi.n	8002b68 <UART_SetConfig+0x168>
 8002b0e:	a201      	add	r2, pc, #4	@ (adr r2, 8002b14 <UART_SetConfig+0x114>)
 8002b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b14:	08002b49 	.word	0x08002b49
 8002b18:	08002b69 	.word	0x08002b69
 8002b1c:	08002b69 	.word	0x08002b69
 8002b20:	08002b69 	.word	0x08002b69
 8002b24:	08002b59 	.word	0x08002b59
 8002b28:	08002b69 	.word	0x08002b69
 8002b2c:	08002b69 	.word	0x08002b69
 8002b30:	08002b69 	.word	0x08002b69
 8002b34:	08002b51 	.word	0x08002b51
 8002b38:	08002b69 	.word	0x08002b69
 8002b3c:	08002b69 	.word	0x08002b69
 8002b40:	08002b69 	.word	0x08002b69
 8002b44:	08002b61 	.word	0x08002b61
 8002b48:	2300      	movs	r3, #0
 8002b4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b4e:	e042      	b.n	8002bd6 <UART_SetConfig+0x1d6>
 8002b50:	2302      	movs	r3, #2
 8002b52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b56:	e03e      	b.n	8002bd6 <UART_SetConfig+0x1d6>
 8002b58:	2304      	movs	r3, #4
 8002b5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b5e:	e03a      	b.n	8002bd6 <UART_SetConfig+0x1d6>
 8002b60:	2308      	movs	r3, #8
 8002b62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b66:	e036      	b.n	8002bd6 <UART_SetConfig+0x1d6>
 8002b68:	2310      	movs	r3, #16
 8002b6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b6e:	e032      	b.n	8002bd6 <UART_SetConfig+0x1d6>
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a43      	ldr	r2, [pc, #268]	@ (8002c84 <UART_SetConfig+0x284>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d12a      	bne.n	8002bd0 <UART_SetConfig+0x1d0>
 8002b7a:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8002b7e:	f7ff fe59 	bl	8002834 <LL_RCC_GetLPUARTClockSource>
 8002b82:	4603      	mov	r3, r0
 8002b84:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002b88:	d01a      	beq.n	8002bc0 <UART_SetConfig+0x1c0>
 8002b8a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002b8e:	d81b      	bhi.n	8002bc8 <UART_SetConfig+0x1c8>
 8002b90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b94:	d00c      	beq.n	8002bb0 <UART_SetConfig+0x1b0>
 8002b96:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b9a:	d815      	bhi.n	8002bc8 <UART_SetConfig+0x1c8>
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d003      	beq.n	8002ba8 <UART_SetConfig+0x1a8>
 8002ba0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ba4:	d008      	beq.n	8002bb8 <UART_SetConfig+0x1b8>
 8002ba6:	e00f      	b.n	8002bc8 <UART_SetConfig+0x1c8>
 8002ba8:	2300      	movs	r3, #0
 8002baa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002bae:	e012      	b.n	8002bd6 <UART_SetConfig+0x1d6>
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002bb6:	e00e      	b.n	8002bd6 <UART_SetConfig+0x1d6>
 8002bb8:	2304      	movs	r3, #4
 8002bba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002bbe:	e00a      	b.n	8002bd6 <UART_SetConfig+0x1d6>
 8002bc0:	2308      	movs	r3, #8
 8002bc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002bc6:	e006      	b.n	8002bd6 <UART_SetConfig+0x1d6>
 8002bc8:	2310      	movs	r3, #16
 8002bca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002bce:	e002      	b.n	8002bd6 <UART_SetConfig+0x1d6>
 8002bd0:	2310      	movs	r3, #16
 8002bd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a2a      	ldr	r2, [pc, #168]	@ (8002c84 <UART_SetConfig+0x284>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	f040 80a4 	bne.w	8002d2a <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002be2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002be6:	2b08      	cmp	r3, #8
 8002be8:	d823      	bhi.n	8002c32 <UART_SetConfig+0x232>
 8002bea:	a201      	add	r2, pc, #4	@ (adr r2, 8002bf0 <UART_SetConfig+0x1f0>)
 8002bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf0:	08002c15 	.word	0x08002c15
 8002bf4:	08002c33 	.word	0x08002c33
 8002bf8:	08002c1d 	.word	0x08002c1d
 8002bfc:	08002c33 	.word	0x08002c33
 8002c00:	08002c23 	.word	0x08002c23
 8002c04:	08002c33 	.word	0x08002c33
 8002c08:	08002c33 	.word	0x08002c33
 8002c0c:	08002c33 	.word	0x08002c33
 8002c10:	08002c2b 	.word	0x08002c2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c14:	f7ff fb18 	bl	8002248 <HAL_RCC_GetPCLK1Freq>
 8002c18:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002c1a:	e010      	b.n	8002c3e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c1c:	4b1c      	ldr	r3, [pc, #112]	@ (8002c90 <UART_SetConfig+0x290>)
 8002c1e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002c20:	e00d      	b.n	8002c3e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c22:	f7ff fa5d 	bl	80020e0 <HAL_RCC_GetSysClockFreq>
 8002c26:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002c28:	e009      	b.n	8002c3e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c2e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002c30:	e005      	b.n	8002c3e <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8002c32:	2300      	movs	r3, #0
 8002c34:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002c3c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f000 8137 	beq.w	8002eb4 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c4a:	4a12      	ldr	r2, [pc, #72]	@ (8002c94 <UART_SetConfig+0x294>)
 8002c4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c50:	461a      	mov	r2, r3
 8002c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c54:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c58:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	685a      	ldr	r2, [r3, #4]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	005b      	lsls	r3, r3, #1
 8002c62:	4413      	add	r3, r2
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d305      	bcc.n	8002c76 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d910      	bls.n	8002c98 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002c7c:	e11a      	b.n	8002eb4 <UART_SetConfig+0x4b4>
 8002c7e:	bf00      	nop
 8002c80:	cfff69f3 	.word	0xcfff69f3
 8002c84:	40008000 	.word	0x40008000
 8002c88:	40013800 	.word	0x40013800
 8002c8c:	40004400 	.word	0x40004400
 8002c90:	00f42400 	.word	0x00f42400
 8002c94:	08003f58 	.word	0x08003f58
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	60bb      	str	r3, [r7, #8]
 8002c9e:	60fa      	str	r2, [r7, #12]
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca4:	4a8e      	ldr	r2, [pc, #568]	@ (8002ee0 <UART_SetConfig+0x4e0>)
 8002ca6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	2200      	movs	r2, #0
 8002cae:	603b      	str	r3, [r7, #0]
 8002cb0:	607a      	str	r2, [r7, #4]
 8002cb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002cb6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002cba:	f7fd fa5d 	bl	8000178 <__aeabi_uldivmod>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	4610      	mov	r0, r2
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	f04f 0200 	mov.w	r2, #0
 8002cca:	f04f 0300 	mov.w	r3, #0
 8002cce:	020b      	lsls	r3, r1, #8
 8002cd0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002cd4:	0202      	lsls	r2, r0, #8
 8002cd6:	6979      	ldr	r1, [r7, #20]
 8002cd8:	6849      	ldr	r1, [r1, #4]
 8002cda:	0849      	lsrs	r1, r1, #1
 8002cdc:	2000      	movs	r0, #0
 8002cde:	460c      	mov	r4, r1
 8002ce0:	4605      	mov	r5, r0
 8002ce2:	eb12 0804 	adds.w	r8, r2, r4
 8002ce6:	eb43 0905 	adc.w	r9, r3, r5
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	469a      	mov	sl, r3
 8002cf2:	4693      	mov	fp, r2
 8002cf4:	4652      	mov	r2, sl
 8002cf6:	465b      	mov	r3, fp
 8002cf8:	4640      	mov	r0, r8
 8002cfa:	4649      	mov	r1, r9
 8002cfc:	f7fd fa3c 	bl	8000178 <__aeabi_uldivmod>
 8002d00:	4602      	mov	r2, r0
 8002d02:	460b      	mov	r3, r1
 8002d04:	4613      	mov	r3, r2
 8002d06:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002d08:	6a3b      	ldr	r3, [r7, #32]
 8002d0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002d0e:	d308      	bcc.n	8002d22 <UART_SetConfig+0x322>
 8002d10:	6a3b      	ldr	r3, [r7, #32]
 8002d12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d16:	d204      	bcs.n	8002d22 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	6a3a      	ldr	r2, [r7, #32]
 8002d1e:	60da      	str	r2, [r3, #12]
 8002d20:	e0c8      	b.n	8002eb4 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002d28:	e0c4      	b.n	8002eb4 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	69db      	ldr	r3, [r3, #28]
 8002d2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d32:	d167      	bne.n	8002e04 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8002d34:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002d38:	2b08      	cmp	r3, #8
 8002d3a:	d828      	bhi.n	8002d8e <UART_SetConfig+0x38e>
 8002d3c:	a201      	add	r2, pc, #4	@ (adr r2, 8002d44 <UART_SetConfig+0x344>)
 8002d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d42:	bf00      	nop
 8002d44:	08002d69 	.word	0x08002d69
 8002d48:	08002d71 	.word	0x08002d71
 8002d4c:	08002d79 	.word	0x08002d79
 8002d50:	08002d8f 	.word	0x08002d8f
 8002d54:	08002d7f 	.word	0x08002d7f
 8002d58:	08002d8f 	.word	0x08002d8f
 8002d5c:	08002d8f 	.word	0x08002d8f
 8002d60:	08002d8f 	.word	0x08002d8f
 8002d64:	08002d87 	.word	0x08002d87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d68:	f7ff fa6e 	bl	8002248 <HAL_RCC_GetPCLK1Freq>
 8002d6c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002d6e:	e014      	b.n	8002d9a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d70:	f7ff fa7c 	bl	800226c <HAL_RCC_GetPCLK2Freq>
 8002d74:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002d76:	e010      	b.n	8002d9a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d78:	4b5a      	ldr	r3, [pc, #360]	@ (8002ee4 <UART_SetConfig+0x4e4>)
 8002d7a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002d7c:	e00d      	b.n	8002d9a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d7e:	f7ff f9af 	bl	80020e0 <HAL_RCC_GetSysClockFreq>
 8002d82:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002d84:	e009      	b.n	8002d9a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d8a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002d8c:	e005      	b.n	8002d9a <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002d98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	f000 8089 	beq.w	8002eb4 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da6:	4a4e      	ldr	r2, [pc, #312]	@ (8002ee0 <UART_SetConfig+0x4e0>)
 8002da8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002dac:	461a      	mov	r2, r3
 8002dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db0:	fbb3 f3f2 	udiv	r3, r3, r2
 8002db4:	005a      	lsls	r2, r3, #1
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	085b      	lsrs	r3, r3, #1
 8002dbc:	441a      	add	r2, r3
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002dc8:	6a3b      	ldr	r3, [r7, #32]
 8002dca:	2b0f      	cmp	r3, #15
 8002dcc:	d916      	bls.n	8002dfc <UART_SetConfig+0x3fc>
 8002dce:	6a3b      	ldr	r3, [r7, #32]
 8002dd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dd4:	d212      	bcs.n	8002dfc <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002dd6:	6a3b      	ldr	r3, [r7, #32]
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	f023 030f 	bic.w	r3, r3, #15
 8002dde:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002de0:	6a3b      	ldr	r3, [r7, #32]
 8002de2:	085b      	lsrs	r3, r3, #1
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	f003 0307 	and.w	r3, r3, #7
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	8bfb      	ldrh	r3, [r7, #30]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	8bfa      	ldrh	r2, [r7, #30]
 8002df8:	60da      	str	r2, [r3, #12]
 8002dfa:	e05b      	b.n	8002eb4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002e02:	e057      	b.n	8002eb4 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002e04:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002e08:	2b08      	cmp	r3, #8
 8002e0a:	d828      	bhi.n	8002e5e <UART_SetConfig+0x45e>
 8002e0c:	a201      	add	r2, pc, #4	@ (adr r2, 8002e14 <UART_SetConfig+0x414>)
 8002e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e12:	bf00      	nop
 8002e14:	08002e39 	.word	0x08002e39
 8002e18:	08002e41 	.word	0x08002e41
 8002e1c:	08002e49 	.word	0x08002e49
 8002e20:	08002e5f 	.word	0x08002e5f
 8002e24:	08002e4f 	.word	0x08002e4f
 8002e28:	08002e5f 	.word	0x08002e5f
 8002e2c:	08002e5f 	.word	0x08002e5f
 8002e30:	08002e5f 	.word	0x08002e5f
 8002e34:	08002e57 	.word	0x08002e57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e38:	f7ff fa06 	bl	8002248 <HAL_RCC_GetPCLK1Freq>
 8002e3c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002e3e:	e014      	b.n	8002e6a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e40:	f7ff fa14 	bl	800226c <HAL_RCC_GetPCLK2Freq>
 8002e44:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002e46:	e010      	b.n	8002e6a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e48:	4b26      	ldr	r3, [pc, #152]	@ (8002ee4 <UART_SetConfig+0x4e4>)
 8002e4a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002e4c:	e00d      	b.n	8002e6a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e4e:	f7ff f947 	bl	80020e0 <HAL_RCC_GetSysClockFreq>
 8002e52:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002e54:	e009      	b.n	8002e6a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e5a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002e5c:	e005      	b.n	8002e6a <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002e68:	bf00      	nop
    }

    if (pclk != 0U)
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d021      	beq.n	8002eb4 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e74:	4a1a      	ldr	r2, [pc, #104]	@ (8002ee0 <UART_SetConfig+0x4e0>)
 8002e76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e7e:	fbb3 f2f2 	udiv	r2, r3, r2
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	085b      	lsrs	r3, r3, #1
 8002e88:	441a      	add	r2, r3
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e92:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e94:	6a3b      	ldr	r3, [r7, #32]
 8002e96:	2b0f      	cmp	r3, #15
 8002e98:	d909      	bls.n	8002eae <UART_SetConfig+0x4ae>
 8002e9a:	6a3b      	ldr	r3, [r7, #32]
 8002e9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ea0:	d205      	bcs.n	8002eae <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002ea2:	6a3b      	ldr	r3, [r7, #32]
 8002ea4:	b29a      	uxth	r2, r3
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	60da      	str	r2, [r3, #12]
 8002eac:	e002      	b.n	8002eb4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002ed0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3730      	adds	r7, #48	@ 0x30
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ede:	bf00      	nop
 8002ee0:	08003f58 	.word	0x08003f58
 8002ee4:	00f42400 	.word	0x00f42400

08002ee8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ef4:	f003 0308 	and.w	r3, r3, #8
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00a      	beq.n	8002f12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00a      	beq.n	8002f34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	430a      	orrs	r2, r1
 8002f32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00a      	beq.n	8002f56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	430a      	orrs	r2, r1
 8002f54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f5a:	f003 0304 	and.w	r3, r3, #4
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00a      	beq.n	8002f78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	430a      	orrs	r2, r1
 8002f76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f7c:	f003 0310 	and.w	r3, r3, #16
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d00a      	beq.n	8002f9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	430a      	orrs	r2, r1
 8002f98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f9e:	f003 0320 	and.w	r3, r3, #32
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00a      	beq.n	8002fbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d01a      	beq.n	8002ffe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fe2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002fe6:	d10a      	bne.n	8002ffe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003002:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00a      	beq.n	8003020 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	430a      	orrs	r2, r1
 800301e:	605a      	str	r2, [r3, #4]
  }
}
 8003020:	bf00      	nop
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	bc80      	pop	{r7}
 8003028:	4770      	bx	lr

0800302a <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800302a:	b580      	push	{r7, lr}
 800302c:	b086      	sub	sp, #24
 800302e:	af02      	add	r7, sp, #8
 8003030:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800303a:	f7fd fd89 	bl	8000b50 <HAL_GetTick>
 800303e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0308 	and.w	r3, r3, #8
 800304a:	2b08      	cmp	r3, #8
 800304c:	d10e      	bne.n	800306c <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800304e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003052:	9300      	str	r3, [sp, #0]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f000 f832 	bl	80030c6 <UART_WaitOnFlagUntilTimeout>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d001      	beq.n	800306c <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e028      	b.n	80030be <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0304 	and.w	r3, r3, #4
 8003076:	2b04      	cmp	r3, #4
 8003078:	d10e      	bne.n	8003098 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800307a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800307e:	9300      	str	r3, [sp, #0]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f000 f81c 	bl	80030c6 <UART_WaitOnFlagUntilTimeout>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d001      	beq.n	8003098 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e012      	b.n	80030be <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2220      	movs	r2, #32
 800309c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2220      	movs	r2, #32
 80030a4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b09c      	sub	sp, #112	@ 0x70
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	60f8      	str	r0, [r7, #12]
 80030ce:	60b9      	str	r1, [r7, #8]
 80030d0:	603b      	str	r3, [r7, #0]
 80030d2:	4613      	mov	r3, r2
 80030d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030d6:	e0af      	b.n	8003238 <UART_WaitOnFlagUntilTimeout+0x172>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80030da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030de:	f000 80ab 	beq.w	8003238 <UART_WaitOnFlagUntilTimeout+0x172>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030e2:	f7fd fd35 	bl	8000b50 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d302      	bcc.n	80030f8 <UART_WaitOnFlagUntilTimeout+0x32>
 80030f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d140      	bne.n	800317a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003100:	e853 3f00 	ldrex	r3, [r3]
 8003104:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003106:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003108:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800310c:	667b      	str	r3, [r7, #100]	@ 0x64
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	461a      	mov	r2, r3
 8003114:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003116:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003118:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800311a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800311c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800311e:	e841 2300 	strex	r3, r2, [r1]
 8003122:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8003124:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003126:	2b00      	cmp	r3, #0
 8003128:	d1e6      	bne.n	80030f8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	3308      	adds	r3, #8
 8003130:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003132:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003134:	e853 3f00 	ldrex	r3, [r3]
 8003138:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800313a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800313c:	f023 0301 	bic.w	r3, r3, #1
 8003140:	663b      	str	r3, [r7, #96]	@ 0x60
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	3308      	adds	r3, #8
 8003148:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800314a:	64ba      	str	r2, [r7, #72]	@ 0x48
 800314c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800314e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003150:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003152:	e841 2300 	strex	r3, r2, [r1]
 8003156:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003158:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1e5      	bne.n	800312a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2220      	movs	r2, #32
 8003162:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2220      	movs	r2, #32
 800316a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e06f      	b.n	800325a <UART_WaitOnFlagUntilTimeout+0x194>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0304 	and.w	r3, r3, #4
 8003184:	2b00      	cmp	r3, #0
 8003186:	d057      	beq.n	8003238 <UART_WaitOnFlagUntilTimeout+0x172>
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	2b80      	cmp	r3, #128	@ 0x80
 800318c:	d054      	beq.n	8003238 <UART_WaitOnFlagUntilTimeout+0x172>
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	2b40      	cmp	r3, #64	@ 0x40
 8003192:	d051      	beq.n	8003238 <UART_WaitOnFlagUntilTimeout+0x172>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800319e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80031a2:	d149      	bne.n	8003238 <UART_WaitOnFlagUntilTimeout+0x172>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80031ac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031b6:	e853 3f00 	ldrex	r3, [r3]
 80031ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80031bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031be:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80031c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	461a      	mov	r2, r3
 80031ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80031ce:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80031d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80031d4:	e841 2300 	strex	r3, r2, [r1]
 80031d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80031da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1e6      	bne.n	80031ae <UART_WaitOnFlagUntilTimeout+0xe8>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	3308      	adds	r3, #8
 80031e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	e853 3f00 	ldrex	r3, [r3]
 80031ee:	613b      	str	r3, [r7, #16]
   return(result);
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	f023 0301 	bic.w	r3, r3, #1
 80031f6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	3308      	adds	r3, #8
 80031fe:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003200:	623a      	str	r2, [r7, #32]
 8003202:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003204:	69f9      	ldr	r1, [r7, #28]
 8003206:	6a3a      	ldr	r2, [r7, #32]
 8003208:	e841 2300 	strex	r3, r2, [r1]
 800320c:	61bb      	str	r3, [r7, #24]
   return(result);
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d1e5      	bne.n	80031e0 <UART_WaitOnFlagUntilTimeout+0x11a>

          huart->gState = HAL_UART_STATE_READY;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2220      	movs	r2, #32
 8003218:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2220      	movs	r2, #32
 8003220:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2220      	movs	r2, #32
 8003228:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e010      	b.n	800325a <UART_WaitOnFlagUntilTimeout+0x194>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	69da      	ldr	r2, [r3, #28]
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	4013      	ands	r3, r2
 8003242:	68ba      	ldr	r2, [r7, #8]
 8003244:	429a      	cmp	r2, r3
 8003246:	bf0c      	ite	eq
 8003248:	2301      	moveq	r3, #1
 800324a:	2300      	movne	r3, #0
 800324c:	b2db      	uxtb	r3, r3
 800324e:	461a      	mov	r2, r3
 8003250:	79fb      	ldrb	r3, [r7, #7]
 8003252:	429a      	cmp	r2, r3
 8003254:	f43f af40 	beq.w	80030d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3770      	adds	r7, #112	@ 0x70
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}

08003262 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003262:	b480      	push	{r7}
 8003264:	b085      	sub	sp, #20
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003270:	2b01      	cmp	r3, #1
 8003272:	d101      	bne.n	8003278 <HAL_UARTEx_DisableFifoMode+0x16>
 8003274:	2302      	movs	r3, #2
 8003276:	e027      	b.n	80032c8 <HAL_UARTEx_DisableFifoMode+0x66>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2224      	movs	r2, #36	@ 0x24
 8003284:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f022 0201 	bic.w	r2, r2, #1
 800329e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80032a6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2220      	movs	r2, #32
 80032ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3714      	adds	r7, #20
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bc80      	pop	{r7}
 80032d0:	4770      	bx	lr

080032d2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b084      	sub	sp, #16
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
 80032da:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d101      	bne.n	80032ea <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80032e6:	2302      	movs	r3, #2
 80032e8:	e02d      	b.n	8003346 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2224      	movs	r2, #36	@ 0x24
 80032f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f022 0201 	bic.w	r2, r2, #1
 8003310:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	430a      	orrs	r2, r1
 8003324:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 f850 	bl	80033cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2220      	movs	r2, #32
 8003338:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800334e:	b580      	push	{r7, lr}
 8003350:	b084      	sub	sp, #16
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
 8003356:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800335e:	2b01      	cmp	r3, #1
 8003360:	d101      	bne.n	8003366 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003362:	2302      	movs	r3, #2
 8003364:	e02d      	b.n	80033c2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2224      	movs	r2, #36	@ 0x24
 8003372:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f022 0201 	bic.w	r2, r2, #1
 800338c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	683a      	ldr	r2, [r7, #0]
 800339e:	430a      	orrs	r2, r1
 80033a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 f812 	bl	80033cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2220      	movs	r2, #32
 80033b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3710      	adds	r7, #16
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
	...

080033cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b085      	sub	sp, #20
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d108      	bne.n	80033ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80033ec:	e031      	b.n	8003452 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80033ee:	2308      	movs	r3, #8
 80033f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80033f2:	2308      	movs	r3, #8
 80033f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	0e5b      	lsrs	r3, r3, #25
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	f003 0307 	and.w	r3, r3, #7
 8003404:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	0f5b      	lsrs	r3, r3, #29
 800340e:	b2db      	uxtb	r3, r3
 8003410:	f003 0307 	and.w	r3, r3, #7
 8003414:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003416:	7bbb      	ldrb	r3, [r7, #14]
 8003418:	7b3a      	ldrb	r2, [r7, #12]
 800341a:	4910      	ldr	r1, [pc, #64]	@ (800345c <UARTEx_SetNbDataToProcess+0x90>)
 800341c:	5c8a      	ldrb	r2, [r1, r2]
 800341e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003422:	7b3a      	ldrb	r2, [r7, #12]
 8003424:	490e      	ldr	r1, [pc, #56]	@ (8003460 <UARTEx_SetNbDataToProcess+0x94>)
 8003426:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003428:	fb93 f3f2 	sdiv	r3, r3, r2
 800342c:	b29a      	uxth	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003434:	7bfb      	ldrb	r3, [r7, #15]
 8003436:	7b7a      	ldrb	r2, [r7, #13]
 8003438:	4908      	ldr	r1, [pc, #32]	@ (800345c <UARTEx_SetNbDataToProcess+0x90>)
 800343a:	5c8a      	ldrb	r2, [r1, r2]
 800343c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003440:	7b7a      	ldrb	r2, [r7, #13]
 8003442:	4907      	ldr	r1, [pc, #28]	@ (8003460 <UARTEx_SetNbDataToProcess+0x94>)
 8003444:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003446:	fb93 f3f2 	sdiv	r3, r3, r2
 800344a:	b29a      	uxth	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8003452:	bf00      	nop
 8003454:	3714      	adds	r7, #20
 8003456:	46bd      	mov	sp, r7
 8003458:	bc80      	pop	{r7}
 800345a:	4770      	bx	lr
 800345c:	08003f70 	.word	0x08003f70
 8003460:	08003f78 	.word	0x08003f78

08003464 <std>:
 8003464:	2300      	movs	r3, #0
 8003466:	b510      	push	{r4, lr}
 8003468:	4604      	mov	r4, r0
 800346a:	e9c0 3300 	strd	r3, r3, [r0]
 800346e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003472:	6083      	str	r3, [r0, #8]
 8003474:	8181      	strh	r1, [r0, #12]
 8003476:	6643      	str	r3, [r0, #100]	@ 0x64
 8003478:	81c2      	strh	r2, [r0, #14]
 800347a:	6183      	str	r3, [r0, #24]
 800347c:	4619      	mov	r1, r3
 800347e:	2208      	movs	r2, #8
 8003480:	305c      	adds	r0, #92	@ 0x5c
 8003482:	f000 f9e7 	bl	8003854 <memset>
 8003486:	4b0d      	ldr	r3, [pc, #52]	@ (80034bc <std+0x58>)
 8003488:	6263      	str	r3, [r4, #36]	@ 0x24
 800348a:	4b0d      	ldr	r3, [pc, #52]	@ (80034c0 <std+0x5c>)
 800348c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800348e:	4b0d      	ldr	r3, [pc, #52]	@ (80034c4 <std+0x60>)
 8003490:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003492:	4b0d      	ldr	r3, [pc, #52]	@ (80034c8 <std+0x64>)
 8003494:	6323      	str	r3, [r4, #48]	@ 0x30
 8003496:	4b0d      	ldr	r3, [pc, #52]	@ (80034cc <std+0x68>)
 8003498:	6224      	str	r4, [r4, #32]
 800349a:	429c      	cmp	r4, r3
 800349c:	d006      	beq.n	80034ac <std+0x48>
 800349e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80034a2:	4294      	cmp	r4, r2
 80034a4:	d002      	beq.n	80034ac <std+0x48>
 80034a6:	33d0      	adds	r3, #208	@ 0xd0
 80034a8:	429c      	cmp	r4, r3
 80034aa:	d105      	bne.n	80034b8 <std+0x54>
 80034ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80034b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034b4:	f000 ba46 	b.w	8003944 <__retarget_lock_init_recursive>
 80034b8:	bd10      	pop	{r4, pc}
 80034ba:	bf00      	nop
 80034bc:	080036a5 	.word	0x080036a5
 80034c0:	080036c7 	.word	0x080036c7
 80034c4:	080036ff 	.word	0x080036ff
 80034c8:	08003723 	.word	0x08003723
 80034cc:	20000120 	.word	0x20000120

080034d0 <stdio_exit_handler>:
 80034d0:	4a02      	ldr	r2, [pc, #8]	@ (80034dc <stdio_exit_handler+0xc>)
 80034d2:	4903      	ldr	r1, [pc, #12]	@ (80034e0 <stdio_exit_handler+0x10>)
 80034d4:	4803      	ldr	r0, [pc, #12]	@ (80034e4 <stdio_exit_handler+0x14>)
 80034d6:	f000 b869 	b.w	80035ac <_fwalk_sglue>
 80034da:	bf00      	nop
 80034dc:	2000000c 	.word	0x2000000c
 80034e0:	08003c3d 	.word	0x08003c3d
 80034e4:	2000001c 	.word	0x2000001c

080034e8 <cleanup_stdio>:
 80034e8:	6841      	ldr	r1, [r0, #4]
 80034ea:	4b0c      	ldr	r3, [pc, #48]	@ (800351c <cleanup_stdio+0x34>)
 80034ec:	4299      	cmp	r1, r3
 80034ee:	b510      	push	{r4, lr}
 80034f0:	4604      	mov	r4, r0
 80034f2:	d001      	beq.n	80034f8 <cleanup_stdio+0x10>
 80034f4:	f000 fba2 	bl	8003c3c <_fflush_r>
 80034f8:	68a1      	ldr	r1, [r4, #8]
 80034fa:	4b09      	ldr	r3, [pc, #36]	@ (8003520 <cleanup_stdio+0x38>)
 80034fc:	4299      	cmp	r1, r3
 80034fe:	d002      	beq.n	8003506 <cleanup_stdio+0x1e>
 8003500:	4620      	mov	r0, r4
 8003502:	f000 fb9b 	bl	8003c3c <_fflush_r>
 8003506:	68e1      	ldr	r1, [r4, #12]
 8003508:	4b06      	ldr	r3, [pc, #24]	@ (8003524 <cleanup_stdio+0x3c>)
 800350a:	4299      	cmp	r1, r3
 800350c:	d004      	beq.n	8003518 <cleanup_stdio+0x30>
 800350e:	4620      	mov	r0, r4
 8003510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003514:	f000 bb92 	b.w	8003c3c <_fflush_r>
 8003518:	bd10      	pop	{r4, pc}
 800351a:	bf00      	nop
 800351c:	20000120 	.word	0x20000120
 8003520:	20000188 	.word	0x20000188
 8003524:	200001f0 	.word	0x200001f0

08003528 <global_stdio_init.part.0>:
 8003528:	b510      	push	{r4, lr}
 800352a:	4b0b      	ldr	r3, [pc, #44]	@ (8003558 <global_stdio_init.part.0+0x30>)
 800352c:	4c0b      	ldr	r4, [pc, #44]	@ (800355c <global_stdio_init.part.0+0x34>)
 800352e:	4a0c      	ldr	r2, [pc, #48]	@ (8003560 <global_stdio_init.part.0+0x38>)
 8003530:	601a      	str	r2, [r3, #0]
 8003532:	4620      	mov	r0, r4
 8003534:	2200      	movs	r2, #0
 8003536:	2104      	movs	r1, #4
 8003538:	f7ff ff94 	bl	8003464 <std>
 800353c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003540:	2201      	movs	r2, #1
 8003542:	2109      	movs	r1, #9
 8003544:	f7ff ff8e 	bl	8003464 <std>
 8003548:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800354c:	2202      	movs	r2, #2
 800354e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003552:	2112      	movs	r1, #18
 8003554:	f7ff bf86 	b.w	8003464 <std>
 8003558:	20000258 	.word	0x20000258
 800355c:	20000120 	.word	0x20000120
 8003560:	080034d1 	.word	0x080034d1

08003564 <__sfp_lock_acquire>:
 8003564:	4801      	ldr	r0, [pc, #4]	@ (800356c <__sfp_lock_acquire+0x8>)
 8003566:	f000 b9ee 	b.w	8003946 <__retarget_lock_acquire_recursive>
 800356a:	bf00      	nop
 800356c:	20000261 	.word	0x20000261

08003570 <__sfp_lock_release>:
 8003570:	4801      	ldr	r0, [pc, #4]	@ (8003578 <__sfp_lock_release+0x8>)
 8003572:	f000 b9e9 	b.w	8003948 <__retarget_lock_release_recursive>
 8003576:	bf00      	nop
 8003578:	20000261 	.word	0x20000261

0800357c <__sinit>:
 800357c:	b510      	push	{r4, lr}
 800357e:	4604      	mov	r4, r0
 8003580:	f7ff fff0 	bl	8003564 <__sfp_lock_acquire>
 8003584:	6a23      	ldr	r3, [r4, #32]
 8003586:	b11b      	cbz	r3, 8003590 <__sinit+0x14>
 8003588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800358c:	f7ff bff0 	b.w	8003570 <__sfp_lock_release>
 8003590:	4b04      	ldr	r3, [pc, #16]	@ (80035a4 <__sinit+0x28>)
 8003592:	6223      	str	r3, [r4, #32]
 8003594:	4b04      	ldr	r3, [pc, #16]	@ (80035a8 <__sinit+0x2c>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d1f5      	bne.n	8003588 <__sinit+0xc>
 800359c:	f7ff ffc4 	bl	8003528 <global_stdio_init.part.0>
 80035a0:	e7f2      	b.n	8003588 <__sinit+0xc>
 80035a2:	bf00      	nop
 80035a4:	080034e9 	.word	0x080034e9
 80035a8:	20000258 	.word	0x20000258

080035ac <_fwalk_sglue>:
 80035ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80035b0:	4607      	mov	r7, r0
 80035b2:	4688      	mov	r8, r1
 80035b4:	4614      	mov	r4, r2
 80035b6:	2600      	movs	r6, #0
 80035b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80035bc:	f1b9 0901 	subs.w	r9, r9, #1
 80035c0:	d505      	bpl.n	80035ce <_fwalk_sglue+0x22>
 80035c2:	6824      	ldr	r4, [r4, #0]
 80035c4:	2c00      	cmp	r4, #0
 80035c6:	d1f7      	bne.n	80035b8 <_fwalk_sglue+0xc>
 80035c8:	4630      	mov	r0, r6
 80035ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035ce:	89ab      	ldrh	r3, [r5, #12]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d907      	bls.n	80035e4 <_fwalk_sglue+0x38>
 80035d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80035d8:	3301      	adds	r3, #1
 80035da:	d003      	beq.n	80035e4 <_fwalk_sglue+0x38>
 80035dc:	4629      	mov	r1, r5
 80035de:	4638      	mov	r0, r7
 80035e0:	47c0      	blx	r8
 80035e2:	4306      	orrs	r6, r0
 80035e4:	3568      	adds	r5, #104	@ 0x68
 80035e6:	e7e9      	b.n	80035bc <_fwalk_sglue+0x10>

080035e8 <_puts_r>:
 80035e8:	6a03      	ldr	r3, [r0, #32]
 80035ea:	b570      	push	{r4, r5, r6, lr}
 80035ec:	6884      	ldr	r4, [r0, #8]
 80035ee:	4605      	mov	r5, r0
 80035f0:	460e      	mov	r6, r1
 80035f2:	b90b      	cbnz	r3, 80035f8 <_puts_r+0x10>
 80035f4:	f7ff ffc2 	bl	800357c <__sinit>
 80035f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80035fa:	07db      	lsls	r3, r3, #31
 80035fc:	d405      	bmi.n	800360a <_puts_r+0x22>
 80035fe:	89a3      	ldrh	r3, [r4, #12]
 8003600:	0598      	lsls	r0, r3, #22
 8003602:	d402      	bmi.n	800360a <_puts_r+0x22>
 8003604:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003606:	f000 f99e 	bl	8003946 <__retarget_lock_acquire_recursive>
 800360a:	89a3      	ldrh	r3, [r4, #12]
 800360c:	0719      	lsls	r1, r3, #28
 800360e:	d502      	bpl.n	8003616 <_puts_r+0x2e>
 8003610:	6923      	ldr	r3, [r4, #16]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d135      	bne.n	8003682 <_puts_r+0x9a>
 8003616:	4621      	mov	r1, r4
 8003618:	4628      	mov	r0, r5
 800361a:	f000 f8c5 	bl	80037a8 <__swsetup_r>
 800361e:	b380      	cbz	r0, 8003682 <_puts_r+0x9a>
 8003620:	f04f 35ff 	mov.w	r5, #4294967295
 8003624:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003626:	07da      	lsls	r2, r3, #31
 8003628:	d405      	bmi.n	8003636 <_puts_r+0x4e>
 800362a:	89a3      	ldrh	r3, [r4, #12]
 800362c:	059b      	lsls	r3, r3, #22
 800362e:	d402      	bmi.n	8003636 <_puts_r+0x4e>
 8003630:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003632:	f000 f989 	bl	8003948 <__retarget_lock_release_recursive>
 8003636:	4628      	mov	r0, r5
 8003638:	bd70      	pop	{r4, r5, r6, pc}
 800363a:	2b00      	cmp	r3, #0
 800363c:	da04      	bge.n	8003648 <_puts_r+0x60>
 800363e:	69a2      	ldr	r2, [r4, #24]
 8003640:	429a      	cmp	r2, r3
 8003642:	dc17      	bgt.n	8003674 <_puts_r+0x8c>
 8003644:	290a      	cmp	r1, #10
 8003646:	d015      	beq.n	8003674 <_puts_r+0x8c>
 8003648:	6823      	ldr	r3, [r4, #0]
 800364a:	1c5a      	adds	r2, r3, #1
 800364c:	6022      	str	r2, [r4, #0]
 800364e:	7019      	strb	r1, [r3, #0]
 8003650:	68a3      	ldr	r3, [r4, #8]
 8003652:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003656:	3b01      	subs	r3, #1
 8003658:	60a3      	str	r3, [r4, #8]
 800365a:	2900      	cmp	r1, #0
 800365c:	d1ed      	bne.n	800363a <_puts_r+0x52>
 800365e:	2b00      	cmp	r3, #0
 8003660:	da11      	bge.n	8003686 <_puts_r+0x9e>
 8003662:	4622      	mov	r2, r4
 8003664:	210a      	movs	r1, #10
 8003666:	4628      	mov	r0, r5
 8003668:	f000 f85f 	bl	800372a <__swbuf_r>
 800366c:	3001      	adds	r0, #1
 800366e:	d0d7      	beq.n	8003620 <_puts_r+0x38>
 8003670:	250a      	movs	r5, #10
 8003672:	e7d7      	b.n	8003624 <_puts_r+0x3c>
 8003674:	4622      	mov	r2, r4
 8003676:	4628      	mov	r0, r5
 8003678:	f000 f857 	bl	800372a <__swbuf_r>
 800367c:	3001      	adds	r0, #1
 800367e:	d1e7      	bne.n	8003650 <_puts_r+0x68>
 8003680:	e7ce      	b.n	8003620 <_puts_r+0x38>
 8003682:	3e01      	subs	r6, #1
 8003684:	e7e4      	b.n	8003650 <_puts_r+0x68>
 8003686:	6823      	ldr	r3, [r4, #0]
 8003688:	1c5a      	adds	r2, r3, #1
 800368a:	6022      	str	r2, [r4, #0]
 800368c:	220a      	movs	r2, #10
 800368e:	701a      	strb	r2, [r3, #0]
 8003690:	e7ee      	b.n	8003670 <_puts_r+0x88>
	...

08003694 <puts>:
 8003694:	4b02      	ldr	r3, [pc, #8]	@ (80036a0 <puts+0xc>)
 8003696:	4601      	mov	r1, r0
 8003698:	6818      	ldr	r0, [r3, #0]
 800369a:	f7ff bfa5 	b.w	80035e8 <_puts_r>
 800369e:	bf00      	nop
 80036a0:	20000018 	.word	0x20000018

080036a4 <__sread>:
 80036a4:	b510      	push	{r4, lr}
 80036a6:	460c      	mov	r4, r1
 80036a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036ac:	f000 f8fc 	bl	80038a8 <_read_r>
 80036b0:	2800      	cmp	r0, #0
 80036b2:	bfab      	itete	ge
 80036b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80036b6:	89a3      	ldrhlt	r3, [r4, #12]
 80036b8:	181b      	addge	r3, r3, r0
 80036ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80036be:	bfac      	ite	ge
 80036c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80036c2:	81a3      	strhlt	r3, [r4, #12]
 80036c4:	bd10      	pop	{r4, pc}

080036c6 <__swrite>:
 80036c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036ca:	461f      	mov	r7, r3
 80036cc:	898b      	ldrh	r3, [r1, #12]
 80036ce:	05db      	lsls	r3, r3, #23
 80036d0:	4605      	mov	r5, r0
 80036d2:	460c      	mov	r4, r1
 80036d4:	4616      	mov	r6, r2
 80036d6:	d505      	bpl.n	80036e4 <__swrite+0x1e>
 80036d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036dc:	2302      	movs	r3, #2
 80036de:	2200      	movs	r2, #0
 80036e0:	f000 f8d0 	bl	8003884 <_lseek_r>
 80036e4:	89a3      	ldrh	r3, [r4, #12]
 80036e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80036ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80036ee:	81a3      	strh	r3, [r4, #12]
 80036f0:	4632      	mov	r2, r6
 80036f2:	463b      	mov	r3, r7
 80036f4:	4628      	mov	r0, r5
 80036f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80036fa:	f000 b8e7 	b.w	80038cc <_write_r>

080036fe <__sseek>:
 80036fe:	b510      	push	{r4, lr}
 8003700:	460c      	mov	r4, r1
 8003702:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003706:	f000 f8bd 	bl	8003884 <_lseek_r>
 800370a:	1c43      	adds	r3, r0, #1
 800370c:	89a3      	ldrh	r3, [r4, #12]
 800370e:	bf15      	itete	ne
 8003710:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003712:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003716:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800371a:	81a3      	strheq	r3, [r4, #12]
 800371c:	bf18      	it	ne
 800371e:	81a3      	strhne	r3, [r4, #12]
 8003720:	bd10      	pop	{r4, pc}

08003722 <__sclose>:
 8003722:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003726:	f000 b89d 	b.w	8003864 <_close_r>

0800372a <__swbuf_r>:
 800372a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800372c:	460e      	mov	r6, r1
 800372e:	4614      	mov	r4, r2
 8003730:	4605      	mov	r5, r0
 8003732:	b118      	cbz	r0, 800373c <__swbuf_r+0x12>
 8003734:	6a03      	ldr	r3, [r0, #32]
 8003736:	b90b      	cbnz	r3, 800373c <__swbuf_r+0x12>
 8003738:	f7ff ff20 	bl	800357c <__sinit>
 800373c:	69a3      	ldr	r3, [r4, #24]
 800373e:	60a3      	str	r3, [r4, #8]
 8003740:	89a3      	ldrh	r3, [r4, #12]
 8003742:	071a      	lsls	r2, r3, #28
 8003744:	d501      	bpl.n	800374a <__swbuf_r+0x20>
 8003746:	6923      	ldr	r3, [r4, #16]
 8003748:	b943      	cbnz	r3, 800375c <__swbuf_r+0x32>
 800374a:	4621      	mov	r1, r4
 800374c:	4628      	mov	r0, r5
 800374e:	f000 f82b 	bl	80037a8 <__swsetup_r>
 8003752:	b118      	cbz	r0, 800375c <__swbuf_r+0x32>
 8003754:	f04f 37ff 	mov.w	r7, #4294967295
 8003758:	4638      	mov	r0, r7
 800375a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800375c:	6823      	ldr	r3, [r4, #0]
 800375e:	6922      	ldr	r2, [r4, #16]
 8003760:	1a98      	subs	r0, r3, r2
 8003762:	6963      	ldr	r3, [r4, #20]
 8003764:	b2f6      	uxtb	r6, r6
 8003766:	4283      	cmp	r3, r0
 8003768:	4637      	mov	r7, r6
 800376a:	dc05      	bgt.n	8003778 <__swbuf_r+0x4e>
 800376c:	4621      	mov	r1, r4
 800376e:	4628      	mov	r0, r5
 8003770:	f000 fa64 	bl	8003c3c <_fflush_r>
 8003774:	2800      	cmp	r0, #0
 8003776:	d1ed      	bne.n	8003754 <__swbuf_r+0x2a>
 8003778:	68a3      	ldr	r3, [r4, #8]
 800377a:	3b01      	subs	r3, #1
 800377c:	60a3      	str	r3, [r4, #8]
 800377e:	6823      	ldr	r3, [r4, #0]
 8003780:	1c5a      	adds	r2, r3, #1
 8003782:	6022      	str	r2, [r4, #0]
 8003784:	701e      	strb	r6, [r3, #0]
 8003786:	6962      	ldr	r2, [r4, #20]
 8003788:	1c43      	adds	r3, r0, #1
 800378a:	429a      	cmp	r2, r3
 800378c:	d004      	beq.n	8003798 <__swbuf_r+0x6e>
 800378e:	89a3      	ldrh	r3, [r4, #12]
 8003790:	07db      	lsls	r3, r3, #31
 8003792:	d5e1      	bpl.n	8003758 <__swbuf_r+0x2e>
 8003794:	2e0a      	cmp	r6, #10
 8003796:	d1df      	bne.n	8003758 <__swbuf_r+0x2e>
 8003798:	4621      	mov	r1, r4
 800379a:	4628      	mov	r0, r5
 800379c:	f000 fa4e 	bl	8003c3c <_fflush_r>
 80037a0:	2800      	cmp	r0, #0
 80037a2:	d0d9      	beq.n	8003758 <__swbuf_r+0x2e>
 80037a4:	e7d6      	b.n	8003754 <__swbuf_r+0x2a>
	...

080037a8 <__swsetup_r>:
 80037a8:	b538      	push	{r3, r4, r5, lr}
 80037aa:	4b29      	ldr	r3, [pc, #164]	@ (8003850 <__swsetup_r+0xa8>)
 80037ac:	4605      	mov	r5, r0
 80037ae:	6818      	ldr	r0, [r3, #0]
 80037b0:	460c      	mov	r4, r1
 80037b2:	b118      	cbz	r0, 80037bc <__swsetup_r+0x14>
 80037b4:	6a03      	ldr	r3, [r0, #32]
 80037b6:	b90b      	cbnz	r3, 80037bc <__swsetup_r+0x14>
 80037b8:	f7ff fee0 	bl	800357c <__sinit>
 80037bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037c0:	0719      	lsls	r1, r3, #28
 80037c2:	d422      	bmi.n	800380a <__swsetup_r+0x62>
 80037c4:	06da      	lsls	r2, r3, #27
 80037c6:	d407      	bmi.n	80037d8 <__swsetup_r+0x30>
 80037c8:	2209      	movs	r2, #9
 80037ca:	602a      	str	r2, [r5, #0]
 80037cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80037d0:	81a3      	strh	r3, [r4, #12]
 80037d2:	f04f 30ff 	mov.w	r0, #4294967295
 80037d6:	e033      	b.n	8003840 <__swsetup_r+0x98>
 80037d8:	0758      	lsls	r0, r3, #29
 80037da:	d512      	bpl.n	8003802 <__swsetup_r+0x5a>
 80037dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80037de:	b141      	cbz	r1, 80037f2 <__swsetup_r+0x4a>
 80037e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80037e4:	4299      	cmp	r1, r3
 80037e6:	d002      	beq.n	80037ee <__swsetup_r+0x46>
 80037e8:	4628      	mov	r0, r5
 80037ea:	f000 f8af 	bl	800394c <_free_r>
 80037ee:	2300      	movs	r3, #0
 80037f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80037f2:	89a3      	ldrh	r3, [r4, #12]
 80037f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80037f8:	81a3      	strh	r3, [r4, #12]
 80037fa:	2300      	movs	r3, #0
 80037fc:	6063      	str	r3, [r4, #4]
 80037fe:	6923      	ldr	r3, [r4, #16]
 8003800:	6023      	str	r3, [r4, #0]
 8003802:	89a3      	ldrh	r3, [r4, #12]
 8003804:	f043 0308 	orr.w	r3, r3, #8
 8003808:	81a3      	strh	r3, [r4, #12]
 800380a:	6923      	ldr	r3, [r4, #16]
 800380c:	b94b      	cbnz	r3, 8003822 <__swsetup_r+0x7a>
 800380e:	89a3      	ldrh	r3, [r4, #12]
 8003810:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003814:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003818:	d003      	beq.n	8003822 <__swsetup_r+0x7a>
 800381a:	4621      	mov	r1, r4
 800381c:	4628      	mov	r0, r5
 800381e:	f000 fa5b 	bl	8003cd8 <__smakebuf_r>
 8003822:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003826:	f013 0201 	ands.w	r2, r3, #1
 800382a:	d00a      	beq.n	8003842 <__swsetup_r+0x9a>
 800382c:	2200      	movs	r2, #0
 800382e:	60a2      	str	r2, [r4, #8]
 8003830:	6962      	ldr	r2, [r4, #20]
 8003832:	4252      	negs	r2, r2
 8003834:	61a2      	str	r2, [r4, #24]
 8003836:	6922      	ldr	r2, [r4, #16]
 8003838:	b942      	cbnz	r2, 800384c <__swsetup_r+0xa4>
 800383a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800383e:	d1c5      	bne.n	80037cc <__swsetup_r+0x24>
 8003840:	bd38      	pop	{r3, r4, r5, pc}
 8003842:	0799      	lsls	r1, r3, #30
 8003844:	bf58      	it	pl
 8003846:	6962      	ldrpl	r2, [r4, #20]
 8003848:	60a2      	str	r2, [r4, #8]
 800384a:	e7f4      	b.n	8003836 <__swsetup_r+0x8e>
 800384c:	2000      	movs	r0, #0
 800384e:	e7f7      	b.n	8003840 <__swsetup_r+0x98>
 8003850:	20000018 	.word	0x20000018

08003854 <memset>:
 8003854:	4402      	add	r2, r0
 8003856:	4603      	mov	r3, r0
 8003858:	4293      	cmp	r3, r2
 800385a:	d100      	bne.n	800385e <memset+0xa>
 800385c:	4770      	bx	lr
 800385e:	f803 1b01 	strb.w	r1, [r3], #1
 8003862:	e7f9      	b.n	8003858 <memset+0x4>

08003864 <_close_r>:
 8003864:	b538      	push	{r3, r4, r5, lr}
 8003866:	4d06      	ldr	r5, [pc, #24]	@ (8003880 <_close_r+0x1c>)
 8003868:	2300      	movs	r3, #0
 800386a:	4604      	mov	r4, r0
 800386c:	4608      	mov	r0, r1
 800386e:	602b      	str	r3, [r5, #0]
 8003870:	f7fd f86b 	bl	800094a <_close>
 8003874:	1c43      	adds	r3, r0, #1
 8003876:	d102      	bne.n	800387e <_close_r+0x1a>
 8003878:	682b      	ldr	r3, [r5, #0]
 800387a:	b103      	cbz	r3, 800387e <_close_r+0x1a>
 800387c:	6023      	str	r3, [r4, #0]
 800387e:	bd38      	pop	{r3, r4, r5, pc}
 8003880:	2000025c 	.word	0x2000025c

08003884 <_lseek_r>:
 8003884:	b538      	push	{r3, r4, r5, lr}
 8003886:	4d07      	ldr	r5, [pc, #28]	@ (80038a4 <_lseek_r+0x20>)
 8003888:	4604      	mov	r4, r0
 800388a:	4608      	mov	r0, r1
 800388c:	4611      	mov	r1, r2
 800388e:	2200      	movs	r2, #0
 8003890:	602a      	str	r2, [r5, #0]
 8003892:	461a      	mov	r2, r3
 8003894:	f7fd f87d 	bl	8000992 <_lseek>
 8003898:	1c43      	adds	r3, r0, #1
 800389a:	d102      	bne.n	80038a2 <_lseek_r+0x1e>
 800389c:	682b      	ldr	r3, [r5, #0]
 800389e:	b103      	cbz	r3, 80038a2 <_lseek_r+0x1e>
 80038a0:	6023      	str	r3, [r4, #0]
 80038a2:	bd38      	pop	{r3, r4, r5, pc}
 80038a4:	2000025c 	.word	0x2000025c

080038a8 <_read_r>:
 80038a8:	b538      	push	{r3, r4, r5, lr}
 80038aa:	4d07      	ldr	r5, [pc, #28]	@ (80038c8 <_read_r+0x20>)
 80038ac:	4604      	mov	r4, r0
 80038ae:	4608      	mov	r0, r1
 80038b0:	4611      	mov	r1, r2
 80038b2:	2200      	movs	r2, #0
 80038b4:	602a      	str	r2, [r5, #0]
 80038b6:	461a      	mov	r2, r3
 80038b8:	f7fd f80e 	bl	80008d8 <_read>
 80038bc:	1c43      	adds	r3, r0, #1
 80038be:	d102      	bne.n	80038c6 <_read_r+0x1e>
 80038c0:	682b      	ldr	r3, [r5, #0]
 80038c2:	b103      	cbz	r3, 80038c6 <_read_r+0x1e>
 80038c4:	6023      	str	r3, [r4, #0]
 80038c6:	bd38      	pop	{r3, r4, r5, pc}
 80038c8:	2000025c 	.word	0x2000025c

080038cc <_write_r>:
 80038cc:	b538      	push	{r3, r4, r5, lr}
 80038ce:	4d07      	ldr	r5, [pc, #28]	@ (80038ec <_write_r+0x20>)
 80038d0:	4604      	mov	r4, r0
 80038d2:	4608      	mov	r0, r1
 80038d4:	4611      	mov	r1, r2
 80038d6:	2200      	movs	r2, #0
 80038d8:	602a      	str	r2, [r5, #0]
 80038da:	461a      	mov	r2, r3
 80038dc:	f7fd f819 	bl	8000912 <_write>
 80038e0:	1c43      	adds	r3, r0, #1
 80038e2:	d102      	bne.n	80038ea <_write_r+0x1e>
 80038e4:	682b      	ldr	r3, [r5, #0]
 80038e6:	b103      	cbz	r3, 80038ea <_write_r+0x1e>
 80038e8:	6023      	str	r3, [r4, #0]
 80038ea:	bd38      	pop	{r3, r4, r5, pc}
 80038ec:	2000025c 	.word	0x2000025c

080038f0 <__errno>:
 80038f0:	4b01      	ldr	r3, [pc, #4]	@ (80038f8 <__errno+0x8>)
 80038f2:	6818      	ldr	r0, [r3, #0]
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	20000018 	.word	0x20000018

080038fc <__libc_init_array>:
 80038fc:	b570      	push	{r4, r5, r6, lr}
 80038fe:	4d0d      	ldr	r5, [pc, #52]	@ (8003934 <__libc_init_array+0x38>)
 8003900:	4c0d      	ldr	r4, [pc, #52]	@ (8003938 <__libc_init_array+0x3c>)
 8003902:	1b64      	subs	r4, r4, r5
 8003904:	10a4      	asrs	r4, r4, #2
 8003906:	2600      	movs	r6, #0
 8003908:	42a6      	cmp	r6, r4
 800390a:	d109      	bne.n	8003920 <__libc_init_array+0x24>
 800390c:	4d0b      	ldr	r5, [pc, #44]	@ (800393c <__libc_init_array+0x40>)
 800390e:	4c0c      	ldr	r4, [pc, #48]	@ (8003940 <__libc_init_array+0x44>)
 8003910:	f000 fa50 	bl	8003db4 <_init>
 8003914:	1b64      	subs	r4, r4, r5
 8003916:	10a4      	asrs	r4, r4, #2
 8003918:	2600      	movs	r6, #0
 800391a:	42a6      	cmp	r6, r4
 800391c:	d105      	bne.n	800392a <__libc_init_array+0x2e>
 800391e:	bd70      	pop	{r4, r5, r6, pc}
 8003920:	f855 3b04 	ldr.w	r3, [r5], #4
 8003924:	4798      	blx	r3
 8003926:	3601      	adds	r6, #1
 8003928:	e7ee      	b.n	8003908 <__libc_init_array+0xc>
 800392a:	f855 3b04 	ldr.w	r3, [r5], #4
 800392e:	4798      	blx	r3
 8003930:	3601      	adds	r6, #1
 8003932:	e7f2      	b.n	800391a <__libc_init_array+0x1e>
 8003934:	08003f88 	.word	0x08003f88
 8003938:	08003f88 	.word	0x08003f88
 800393c:	08003f88 	.word	0x08003f88
 8003940:	08003f8c 	.word	0x08003f8c

08003944 <__retarget_lock_init_recursive>:
 8003944:	4770      	bx	lr

08003946 <__retarget_lock_acquire_recursive>:
 8003946:	4770      	bx	lr

08003948 <__retarget_lock_release_recursive>:
 8003948:	4770      	bx	lr
	...

0800394c <_free_r>:
 800394c:	b538      	push	{r3, r4, r5, lr}
 800394e:	4605      	mov	r5, r0
 8003950:	2900      	cmp	r1, #0
 8003952:	d041      	beq.n	80039d8 <_free_r+0x8c>
 8003954:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003958:	1f0c      	subs	r4, r1, #4
 800395a:	2b00      	cmp	r3, #0
 800395c:	bfb8      	it	lt
 800395e:	18e4      	addlt	r4, r4, r3
 8003960:	f000 f8e0 	bl	8003b24 <__malloc_lock>
 8003964:	4a1d      	ldr	r2, [pc, #116]	@ (80039dc <_free_r+0x90>)
 8003966:	6813      	ldr	r3, [r2, #0]
 8003968:	b933      	cbnz	r3, 8003978 <_free_r+0x2c>
 800396a:	6063      	str	r3, [r4, #4]
 800396c:	6014      	str	r4, [r2, #0]
 800396e:	4628      	mov	r0, r5
 8003970:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003974:	f000 b8dc 	b.w	8003b30 <__malloc_unlock>
 8003978:	42a3      	cmp	r3, r4
 800397a:	d908      	bls.n	800398e <_free_r+0x42>
 800397c:	6820      	ldr	r0, [r4, #0]
 800397e:	1821      	adds	r1, r4, r0
 8003980:	428b      	cmp	r3, r1
 8003982:	bf01      	itttt	eq
 8003984:	6819      	ldreq	r1, [r3, #0]
 8003986:	685b      	ldreq	r3, [r3, #4]
 8003988:	1809      	addeq	r1, r1, r0
 800398a:	6021      	streq	r1, [r4, #0]
 800398c:	e7ed      	b.n	800396a <_free_r+0x1e>
 800398e:	461a      	mov	r2, r3
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	b10b      	cbz	r3, 8003998 <_free_r+0x4c>
 8003994:	42a3      	cmp	r3, r4
 8003996:	d9fa      	bls.n	800398e <_free_r+0x42>
 8003998:	6811      	ldr	r1, [r2, #0]
 800399a:	1850      	adds	r0, r2, r1
 800399c:	42a0      	cmp	r0, r4
 800399e:	d10b      	bne.n	80039b8 <_free_r+0x6c>
 80039a0:	6820      	ldr	r0, [r4, #0]
 80039a2:	4401      	add	r1, r0
 80039a4:	1850      	adds	r0, r2, r1
 80039a6:	4283      	cmp	r3, r0
 80039a8:	6011      	str	r1, [r2, #0]
 80039aa:	d1e0      	bne.n	800396e <_free_r+0x22>
 80039ac:	6818      	ldr	r0, [r3, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	6053      	str	r3, [r2, #4]
 80039b2:	4408      	add	r0, r1
 80039b4:	6010      	str	r0, [r2, #0]
 80039b6:	e7da      	b.n	800396e <_free_r+0x22>
 80039b8:	d902      	bls.n	80039c0 <_free_r+0x74>
 80039ba:	230c      	movs	r3, #12
 80039bc:	602b      	str	r3, [r5, #0]
 80039be:	e7d6      	b.n	800396e <_free_r+0x22>
 80039c0:	6820      	ldr	r0, [r4, #0]
 80039c2:	1821      	adds	r1, r4, r0
 80039c4:	428b      	cmp	r3, r1
 80039c6:	bf04      	itt	eq
 80039c8:	6819      	ldreq	r1, [r3, #0]
 80039ca:	685b      	ldreq	r3, [r3, #4]
 80039cc:	6063      	str	r3, [r4, #4]
 80039ce:	bf04      	itt	eq
 80039d0:	1809      	addeq	r1, r1, r0
 80039d2:	6021      	streq	r1, [r4, #0]
 80039d4:	6054      	str	r4, [r2, #4]
 80039d6:	e7ca      	b.n	800396e <_free_r+0x22>
 80039d8:	bd38      	pop	{r3, r4, r5, pc}
 80039da:	bf00      	nop
 80039dc:	20000268 	.word	0x20000268

080039e0 <sbrk_aligned>:
 80039e0:	b570      	push	{r4, r5, r6, lr}
 80039e2:	4e0f      	ldr	r6, [pc, #60]	@ (8003a20 <sbrk_aligned+0x40>)
 80039e4:	460c      	mov	r4, r1
 80039e6:	6831      	ldr	r1, [r6, #0]
 80039e8:	4605      	mov	r5, r0
 80039ea:	b911      	cbnz	r1, 80039f2 <sbrk_aligned+0x12>
 80039ec:	f000 f9d2 	bl	8003d94 <_sbrk_r>
 80039f0:	6030      	str	r0, [r6, #0]
 80039f2:	4621      	mov	r1, r4
 80039f4:	4628      	mov	r0, r5
 80039f6:	f000 f9cd 	bl	8003d94 <_sbrk_r>
 80039fa:	1c43      	adds	r3, r0, #1
 80039fc:	d103      	bne.n	8003a06 <sbrk_aligned+0x26>
 80039fe:	f04f 34ff 	mov.w	r4, #4294967295
 8003a02:	4620      	mov	r0, r4
 8003a04:	bd70      	pop	{r4, r5, r6, pc}
 8003a06:	1cc4      	adds	r4, r0, #3
 8003a08:	f024 0403 	bic.w	r4, r4, #3
 8003a0c:	42a0      	cmp	r0, r4
 8003a0e:	d0f8      	beq.n	8003a02 <sbrk_aligned+0x22>
 8003a10:	1a21      	subs	r1, r4, r0
 8003a12:	4628      	mov	r0, r5
 8003a14:	f000 f9be 	bl	8003d94 <_sbrk_r>
 8003a18:	3001      	adds	r0, #1
 8003a1a:	d1f2      	bne.n	8003a02 <sbrk_aligned+0x22>
 8003a1c:	e7ef      	b.n	80039fe <sbrk_aligned+0x1e>
 8003a1e:	bf00      	nop
 8003a20:	20000264 	.word	0x20000264

08003a24 <_malloc_r>:
 8003a24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a28:	1ccd      	adds	r5, r1, #3
 8003a2a:	f025 0503 	bic.w	r5, r5, #3
 8003a2e:	3508      	adds	r5, #8
 8003a30:	2d0c      	cmp	r5, #12
 8003a32:	bf38      	it	cc
 8003a34:	250c      	movcc	r5, #12
 8003a36:	2d00      	cmp	r5, #0
 8003a38:	4606      	mov	r6, r0
 8003a3a:	db01      	blt.n	8003a40 <_malloc_r+0x1c>
 8003a3c:	42a9      	cmp	r1, r5
 8003a3e:	d904      	bls.n	8003a4a <_malloc_r+0x26>
 8003a40:	230c      	movs	r3, #12
 8003a42:	6033      	str	r3, [r6, #0]
 8003a44:	2000      	movs	r0, #0
 8003a46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a4a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003b20 <_malloc_r+0xfc>
 8003a4e:	f000 f869 	bl	8003b24 <__malloc_lock>
 8003a52:	f8d8 3000 	ldr.w	r3, [r8]
 8003a56:	461c      	mov	r4, r3
 8003a58:	bb44      	cbnz	r4, 8003aac <_malloc_r+0x88>
 8003a5a:	4629      	mov	r1, r5
 8003a5c:	4630      	mov	r0, r6
 8003a5e:	f7ff ffbf 	bl	80039e0 <sbrk_aligned>
 8003a62:	1c43      	adds	r3, r0, #1
 8003a64:	4604      	mov	r4, r0
 8003a66:	d158      	bne.n	8003b1a <_malloc_r+0xf6>
 8003a68:	f8d8 4000 	ldr.w	r4, [r8]
 8003a6c:	4627      	mov	r7, r4
 8003a6e:	2f00      	cmp	r7, #0
 8003a70:	d143      	bne.n	8003afa <_malloc_r+0xd6>
 8003a72:	2c00      	cmp	r4, #0
 8003a74:	d04b      	beq.n	8003b0e <_malloc_r+0xea>
 8003a76:	6823      	ldr	r3, [r4, #0]
 8003a78:	4639      	mov	r1, r7
 8003a7a:	4630      	mov	r0, r6
 8003a7c:	eb04 0903 	add.w	r9, r4, r3
 8003a80:	f000 f988 	bl	8003d94 <_sbrk_r>
 8003a84:	4581      	cmp	r9, r0
 8003a86:	d142      	bne.n	8003b0e <_malloc_r+0xea>
 8003a88:	6821      	ldr	r1, [r4, #0]
 8003a8a:	1a6d      	subs	r5, r5, r1
 8003a8c:	4629      	mov	r1, r5
 8003a8e:	4630      	mov	r0, r6
 8003a90:	f7ff ffa6 	bl	80039e0 <sbrk_aligned>
 8003a94:	3001      	adds	r0, #1
 8003a96:	d03a      	beq.n	8003b0e <_malloc_r+0xea>
 8003a98:	6823      	ldr	r3, [r4, #0]
 8003a9a:	442b      	add	r3, r5
 8003a9c:	6023      	str	r3, [r4, #0]
 8003a9e:	f8d8 3000 	ldr.w	r3, [r8]
 8003aa2:	685a      	ldr	r2, [r3, #4]
 8003aa4:	bb62      	cbnz	r2, 8003b00 <_malloc_r+0xdc>
 8003aa6:	f8c8 7000 	str.w	r7, [r8]
 8003aaa:	e00f      	b.n	8003acc <_malloc_r+0xa8>
 8003aac:	6822      	ldr	r2, [r4, #0]
 8003aae:	1b52      	subs	r2, r2, r5
 8003ab0:	d420      	bmi.n	8003af4 <_malloc_r+0xd0>
 8003ab2:	2a0b      	cmp	r2, #11
 8003ab4:	d917      	bls.n	8003ae6 <_malloc_r+0xc2>
 8003ab6:	1961      	adds	r1, r4, r5
 8003ab8:	42a3      	cmp	r3, r4
 8003aba:	6025      	str	r5, [r4, #0]
 8003abc:	bf18      	it	ne
 8003abe:	6059      	strne	r1, [r3, #4]
 8003ac0:	6863      	ldr	r3, [r4, #4]
 8003ac2:	bf08      	it	eq
 8003ac4:	f8c8 1000 	streq.w	r1, [r8]
 8003ac8:	5162      	str	r2, [r4, r5]
 8003aca:	604b      	str	r3, [r1, #4]
 8003acc:	4630      	mov	r0, r6
 8003ace:	f000 f82f 	bl	8003b30 <__malloc_unlock>
 8003ad2:	f104 000b 	add.w	r0, r4, #11
 8003ad6:	1d23      	adds	r3, r4, #4
 8003ad8:	f020 0007 	bic.w	r0, r0, #7
 8003adc:	1ac2      	subs	r2, r0, r3
 8003ade:	bf1c      	itt	ne
 8003ae0:	1a1b      	subne	r3, r3, r0
 8003ae2:	50a3      	strne	r3, [r4, r2]
 8003ae4:	e7af      	b.n	8003a46 <_malloc_r+0x22>
 8003ae6:	6862      	ldr	r2, [r4, #4]
 8003ae8:	42a3      	cmp	r3, r4
 8003aea:	bf0c      	ite	eq
 8003aec:	f8c8 2000 	streq.w	r2, [r8]
 8003af0:	605a      	strne	r2, [r3, #4]
 8003af2:	e7eb      	b.n	8003acc <_malloc_r+0xa8>
 8003af4:	4623      	mov	r3, r4
 8003af6:	6864      	ldr	r4, [r4, #4]
 8003af8:	e7ae      	b.n	8003a58 <_malloc_r+0x34>
 8003afa:	463c      	mov	r4, r7
 8003afc:	687f      	ldr	r7, [r7, #4]
 8003afe:	e7b6      	b.n	8003a6e <_malloc_r+0x4a>
 8003b00:	461a      	mov	r2, r3
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	42a3      	cmp	r3, r4
 8003b06:	d1fb      	bne.n	8003b00 <_malloc_r+0xdc>
 8003b08:	2300      	movs	r3, #0
 8003b0a:	6053      	str	r3, [r2, #4]
 8003b0c:	e7de      	b.n	8003acc <_malloc_r+0xa8>
 8003b0e:	230c      	movs	r3, #12
 8003b10:	6033      	str	r3, [r6, #0]
 8003b12:	4630      	mov	r0, r6
 8003b14:	f000 f80c 	bl	8003b30 <__malloc_unlock>
 8003b18:	e794      	b.n	8003a44 <_malloc_r+0x20>
 8003b1a:	6005      	str	r5, [r0, #0]
 8003b1c:	e7d6      	b.n	8003acc <_malloc_r+0xa8>
 8003b1e:	bf00      	nop
 8003b20:	20000268 	.word	0x20000268

08003b24 <__malloc_lock>:
 8003b24:	4801      	ldr	r0, [pc, #4]	@ (8003b2c <__malloc_lock+0x8>)
 8003b26:	f7ff bf0e 	b.w	8003946 <__retarget_lock_acquire_recursive>
 8003b2a:	bf00      	nop
 8003b2c:	20000260 	.word	0x20000260

08003b30 <__malloc_unlock>:
 8003b30:	4801      	ldr	r0, [pc, #4]	@ (8003b38 <__malloc_unlock+0x8>)
 8003b32:	f7ff bf09 	b.w	8003948 <__retarget_lock_release_recursive>
 8003b36:	bf00      	nop
 8003b38:	20000260 	.word	0x20000260

08003b3c <__sflush_r>:
 8003b3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b42:	0716      	lsls	r6, r2, #28
 8003b44:	4605      	mov	r5, r0
 8003b46:	460c      	mov	r4, r1
 8003b48:	d454      	bmi.n	8003bf4 <__sflush_r+0xb8>
 8003b4a:	684b      	ldr	r3, [r1, #4]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	dc02      	bgt.n	8003b56 <__sflush_r+0x1a>
 8003b50:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	dd48      	ble.n	8003be8 <__sflush_r+0xac>
 8003b56:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003b58:	2e00      	cmp	r6, #0
 8003b5a:	d045      	beq.n	8003be8 <__sflush_r+0xac>
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003b62:	682f      	ldr	r7, [r5, #0]
 8003b64:	6a21      	ldr	r1, [r4, #32]
 8003b66:	602b      	str	r3, [r5, #0]
 8003b68:	d030      	beq.n	8003bcc <__sflush_r+0x90>
 8003b6a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003b6c:	89a3      	ldrh	r3, [r4, #12]
 8003b6e:	0759      	lsls	r1, r3, #29
 8003b70:	d505      	bpl.n	8003b7e <__sflush_r+0x42>
 8003b72:	6863      	ldr	r3, [r4, #4]
 8003b74:	1ad2      	subs	r2, r2, r3
 8003b76:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003b78:	b10b      	cbz	r3, 8003b7e <__sflush_r+0x42>
 8003b7a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003b7c:	1ad2      	subs	r2, r2, r3
 8003b7e:	2300      	movs	r3, #0
 8003b80:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003b82:	6a21      	ldr	r1, [r4, #32]
 8003b84:	4628      	mov	r0, r5
 8003b86:	47b0      	blx	r6
 8003b88:	1c43      	adds	r3, r0, #1
 8003b8a:	89a3      	ldrh	r3, [r4, #12]
 8003b8c:	d106      	bne.n	8003b9c <__sflush_r+0x60>
 8003b8e:	6829      	ldr	r1, [r5, #0]
 8003b90:	291d      	cmp	r1, #29
 8003b92:	d82b      	bhi.n	8003bec <__sflush_r+0xb0>
 8003b94:	4a28      	ldr	r2, [pc, #160]	@ (8003c38 <__sflush_r+0xfc>)
 8003b96:	40ca      	lsrs	r2, r1
 8003b98:	07d6      	lsls	r6, r2, #31
 8003b9a:	d527      	bpl.n	8003bec <__sflush_r+0xb0>
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	6062      	str	r2, [r4, #4]
 8003ba0:	04d9      	lsls	r1, r3, #19
 8003ba2:	6922      	ldr	r2, [r4, #16]
 8003ba4:	6022      	str	r2, [r4, #0]
 8003ba6:	d504      	bpl.n	8003bb2 <__sflush_r+0x76>
 8003ba8:	1c42      	adds	r2, r0, #1
 8003baa:	d101      	bne.n	8003bb0 <__sflush_r+0x74>
 8003bac:	682b      	ldr	r3, [r5, #0]
 8003bae:	b903      	cbnz	r3, 8003bb2 <__sflush_r+0x76>
 8003bb0:	6560      	str	r0, [r4, #84]	@ 0x54
 8003bb2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003bb4:	602f      	str	r7, [r5, #0]
 8003bb6:	b1b9      	cbz	r1, 8003be8 <__sflush_r+0xac>
 8003bb8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003bbc:	4299      	cmp	r1, r3
 8003bbe:	d002      	beq.n	8003bc6 <__sflush_r+0x8a>
 8003bc0:	4628      	mov	r0, r5
 8003bc2:	f7ff fec3 	bl	800394c <_free_r>
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	6363      	str	r3, [r4, #52]	@ 0x34
 8003bca:	e00d      	b.n	8003be8 <__sflush_r+0xac>
 8003bcc:	2301      	movs	r3, #1
 8003bce:	4628      	mov	r0, r5
 8003bd0:	47b0      	blx	r6
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	1c50      	adds	r0, r2, #1
 8003bd6:	d1c9      	bne.n	8003b6c <__sflush_r+0x30>
 8003bd8:	682b      	ldr	r3, [r5, #0]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d0c6      	beq.n	8003b6c <__sflush_r+0x30>
 8003bde:	2b1d      	cmp	r3, #29
 8003be0:	d001      	beq.n	8003be6 <__sflush_r+0xaa>
 8003be2:	2b16      	cmp	r3, #22
 8003be4:	d11d      	bne.n	8003c22 <__sflush_r+0xe6>
 8003be6:	602f      	str	r7, [r5, #0]
 8003be8:	2000      	movs	r0, #0
 8003bea:	e021      	b.n	8003c30 <__sflush_r+0xf4>
 8003bec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003bf0:	b21b      	sxth	r3, r3
 8003bf2:	e01a      	b.n	8003c2a <__sflush_r+0xee>
 8003bf4:	690f      	ldr	r7, [r1, #16]
 8003bf6:	2f00      	cmp	r7, #0
 8003bf8:	d0f6      	beq.n	8003be8 <__sflush_r+0xac>
 8003bfa:	0793      	lsls	r3, r2, #30
 8003bfc:	680e      	ldr	r6, [r1, #0]
 8003bfe:	bf08      	it	eq
 8003c00:	694b      	ldreq	r3, [r1, #20]
 8003c02:	600f      	str	r7, [r1, #0]
 8003c04:	bf18      	it	ne
 8003c06:	2300      	movne	r3, #0
 8003c08:	1bf6      	subs	r6, r6, r7
 8003c0a:	608b      	str	r3, [r1, #8]
 8003c0c:	2e00      	cmp	r6, #0
 8003c0e:	ddeb      	ble.n	8003be8 <__sflush_r+0xac>
 8003c10:	6a21      	ldr	r1, [r4, #32]
 8003c12:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8003c16:	4633      	mov	r3, r6
 8003c18:	463a      	mov	r2, r7
 8003c1a:	4628      	mov	r0, r5
 8003c1c:	47e0      	blx	ip
 8003c1e:	2800      	cmp	r0, #0
 8003c20:	dc07      	bgt.n	8003c32 <__sflush_r+0xf6>
 8003c22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c2a:	81a3      	strh	r3, [r4, #12]
 8003c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c32:	4407      	add	r7, r0
 8003c34:	1a36      	subs	r6, r6, r0
 8003c36:	e7e9      	b.n	8003c0c <__sflush_r+0xd0>
 8003c38:	20400001 	.word	0x20400001

08003c3c <_fflush_r>:
 8003c3c:	b538      	push	{r3, r4, r5, lr}
 8003c3e:	690b      	ldr	r3, [r1, #16]
 8003c40:	4605      	mov	r5, r0
 8003c42:	460c      	mov	r4, r1
 8003c44:	b913      	cbnz	r3, 8003c4c <_fflush_r+0x10>
 8003c46:	2500      	movs	r5, #0
 8003c48:	4628      	mov	r0, r5
 8003c4a:	bd38      	pop	{r3, r4, r5, pc}
 8003c4c:	b118      	cbz	r0, 8003c56 <_fflush_r+0x1a>
 8003c4e:	6a03      	ldr	r3, [r0, #32]
 8003c50:	b90b      	cbnz	r3, 8003c56 <_fflush_r+0x1a>
 8003c52:	f7ff fc93 	bl	800357c <__sinit>
 8003c56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d0f3      	beq.n	8003c46 <_fflush_r+0xa>
 8003c5e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003c60:	07d0      	lsls	r0, r2, #31
 8003c62:	d404      	bmi.n	8003c6e <_fflush_r+0x32>
 8003c64:	0599      	lsls	r1, r3, #22
 8003c66:	d402      	bmi.n	8003c6e <_fflush_r+0x32>
 8003c68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003c6a:	f7ff fe6c 	bl	8003946 <__retarget_lock_acquire_recursive>
 8003c6e:	4628      	mov	r0, r5
 8003c70:	4621      	mov	r1, r4
 8003c72:	f7ff ff63 	bl	8003b3c <__sflush_r>
 8003c76:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003c78:	07da      	lsls	r2, r3, #31
 8003c7a:	4605      	mov	r5, r0
 8003c7c:	d4e4      	bmi.n	8003c48 <_fflush_r+0xc>
 8003c7e:	89a3      	ldrh	r3, [r4, #12]
 8003c80:	059b      	lsls	r3, r3, #22
 8003c82:	d4e1      	bmi.n	8003c48 <_fflush_r+0xc>
 8003c84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003c86:	f7ff fe5f 	bl	8003948 <__retarget_lock_release_recursive>
 8003c8a:	e7dd      	b.n	8003c48 <_fflush_r+0xc>

08003c8c <__swhatbuf_r>:
 8003c8c:	b570      	push	{r4, r5, r6, lr}
 8003c8e:	460c      	mov	r4, r1
 8003c90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c94:	2900      	cmp	r1, #0
 8003c96:	b096      	sub	sp, #88	@ 0x58
 8003c98:	4615      	mov	r5, r2
 8003c9a:	461e      	mov	r6, r3
 8003c9c:	da0d      	bge.n	8003cba <__swhatbuf_r+0x2e>
 8003c9e:	89a3      	ldrh	r3, [r4, #12]
 8003ca0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003ca4:	f04f 0100 	mov.w	r1, #0
 8003ca8:	bf14      	ite	ne
 8003caa:	2340      	movne	r3, #64	@ 0x40
 8003cac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003cb0:	2000      	movs	r0, #0
 8003cb2:	6031      	str	r1, [r6, #0]
 8003cb4:	602b      	str	r3, [r5, #0]
 8003cb6:	b016      	add	sp, #88	@ 0x58
 8003cb8:	bd70      	pop	{r4, r5, r6, pc}
 8003cba:	466a      	mov	r2, sp
 8003cbc:	f000 f848 	bl	8003d50 <_fstat_r>
 8003cc0:	2800      	cmp	r0, #0
 8003cc2:	dbec      	blt.n	8003c9e <__swhatbuf_r+0x12>
 8003cc4:	9901      	ldr	r1, [sp, #4]
 8003cc6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003cca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003cce:	4259      	negs	r1, r3
 8003cd0:	4159      	adcs	r1, r3
 8003cd2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003cd6:	e7eb      	b.n	8003cb0 <__swhatbuf_r+0x24>

08003cd8 <__smakebuf_r>:
 8003cd8:	898b      	ldrh	r3, [r1, #12]
 8003cda:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003cdc:	079d      	lsls	r5, r3, #30
 8003cde:	4606      	mov	r6, r0
 8003ce0:	460c      	mov	r4, r1
 8003ce2:	d507      	bpl.n	8003cf4 <__smakebuf_r+0x1c>
 8003ce4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003ce8:	6023      	str	r3, [r4, #0]
 8003cea:	6123      	str	r3, [r4, #16]
 8003cec:	2301      	movs	r3, #1
 8003cee:	6163      	str	r3, [r4, #20]
 8003cf0:	b003      	add	sp, #12
 8003cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cf4:	ab01      	add	r3, sp, #4
 8003cf6:	466a      	mov	r2, sp
 8003cf8:	f7ff ffc8 	bl	8003c8c <__swhatbuf_r>
 8003cfc:	9f00      	ldr	r7, [sp, #0]
 8003cfe:	4605      	mov	r5, r0
 8003d00:	4639      	mov	r1, r7
 8003d02:	4630      	mov	r0, r6
 8003d04:	f7ff fe8e 	bl	8003a24 <_malloc_r>
 8003d08:	b948      	cbnz	r0, 8003d1e <__smakebuf_r+0x46>
 8003d0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d0e:	059a      	lsls	r2, r3, #22
 8003d10:	d4ee      	bmi.n	8003cf0 <__smakebuf_r+0x18>
 8003d12:	f023 0303 	bic.w	r3, r3, #3
 8003d16:	f043 0302 	orr.w	r3, r3, #2
 8003d1a:	81a3      	strh	r3, [r4, #12]
 8003d1c:	e7e2      	b.n	8003ce4 <__smakebuf_r+0xc>
 8003d1e:	89a3      	ldrh	r3, [r4, #12]
 8003d20:	6020      	str	r0, [r4, #0]
 8003d22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d26:	81a3      	strh	r3, [r4, #12]
 8003d28:	9b01      	ldr	r3, [sp, #4]
 8003d2a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003d2e:	b15b      	cbz	r3, 8003d48 <__smakebuf_r+0x70>
 8003d30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d34:	4630      	mov	r0, r6
 8003d36:	f000 f81d 	bl	8003d74 <_isatty_r>
 8003d3a:	b128      	cbz	r0, 8003d48 <__smakebuf_r+0x70>
 8003d3c:	89a3      	ldrh	r3, [r4, #12]
 8003d3e:	f023 0303 	bic.w	r3, r3, #3
 8003d42:	f043 0301 	orr.w	r3, r3, #1
 8003d46:	81a3      	strh	r3, [r4, #12]
 8003d48:	89a3      	ldrh	r3, [r4, #12]
 8003d4a:	431d      	orrs	r5, r3
 8003d4c:	81a5      	strh	r5, [r4, #12]
 8003d4e:	e7cf      	b.n	8003cf0 <__smakebuf_r+0x18>

08003d50 <_fstat_r>:
 8003d50:	b538      	push	{r3, r4, r5, lr}
 8003d52:	4d07      	ldr	r5, [pc, #28]	@ (8003d70 <_fstat_r+0x20>)
 8003d54:	2300      	movs	r3, #0
 8003d56:	4604      	mov	r4, r0
 8003d58:	4608      	mov	r0, r1
 8003d5a:	4611      	mov	r1, r2
 8003d5c:	602b      	str	r3, [r5, #0]
 8003d5e:	f7fc fdff 	bl	8000960 <_fstat>
 8003d62:	1c43      	adds	r3, r0, #1
 8003d64:	d102      	bne.n	8003d6c <_fstat_r+0x1c>
 8003d66:	682b      	ldr	r3, [r5, #0]
 8003d68:	b103      	cbz	r3, 8003d6c <_fstat_r+0x1c>
 8003d6a:	6023      	str	r3, [r4, #0]
 8003d6c:	bd38      	pop	{r3, r4, r5, pc}
 8003d6e:	bf00      	nop
 8003d70:	2000025c 	.word	0x2000025c

08003d74 <_isatty_r>:
 8003d74:	b538      	push	{r3, r4, r5, lr}
 8003d76:	4d06      	ldr	r5, [pc, #24]	@ (8003d90 <_isatty_r+0x1c>)
 8003d78:	2300      	movs	r3, #0
 8003d7a:	4604      	mov	r4, r0
 8003d7c:	4608      	mov	r0, r1
 8003d7e:	602b      	str	r3, [r5, #0]
 8003d80:	f7fc fdfd 	bl	800097e <_isatty>
 8003d84:	1c43      	adds	r3, r0, #1
 8003d86:	d102      	bne.n	8003d8e <_isatty_r+0x1a>
 8003d88:	682b      	ldr	r3, [r5, #0]
 8003d8a:	b103      	cbz	r3, 8003d8e <_isatty_r+0x1a>
 8003d8c:	6023      	str	r3, [r4, #0]
 8003d8e:	bd38      	pop	{r3, r4, r5, pc}
 8003d90:	2000025c 	.word	0x2000025c

08003d94 <_sbrk_r>:
 8003d94:	b538      	push	{r3, r4, r5, lr}
 8003d96:	4d06      	ldr	r5, [pc, #24]	@ (8003db0 <_sbrk_r+0x1c>)
 8003d98:	2300      	movs	r3, #0
 8003d9a:	4604      	mov	r4, r0
 8003d9c:	4608      	mov	r0, r1
 8003d9e:	602b      	str	r3, [r5, #0]
 8003da0:	f7fc fe04 	bl	80009ac <_sbrk>
 8003da4:	1c43      	adds	r3, r0, #1
 8003da6:	d102      	bne.n	8003dae <_sbrk_r+0x1a>
 8003da8:	682b      	ldr	r3, [r5, #0]
 8003daa:	b103      	cbz	r3, 8003dae <_sbrk_r+0x1a>
 8003dac:	6023      	str	r3, [r4, #0]
 8003dae:	bd38      	pop	{r3, r4, r5, pc}
 8003db0:	2000025c 	.word	0x2000025c

08003db4 <_init>:
 8003db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003db6:	bf00      	nop
 8003db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dba:	bc08      	pop	{r3}
 8003dbc:	469e      	mov	lr, r3
 8003dbe:	4770      	bx	lr

08003dc0 <_fini>:
 8003dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dc2:	bf00      	nop
 8003dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dc6:	bc08      	pop	{r3}
 8003dc8:	469e      	mov	lr, r3
 8003dca:	4770      	bx	lr
