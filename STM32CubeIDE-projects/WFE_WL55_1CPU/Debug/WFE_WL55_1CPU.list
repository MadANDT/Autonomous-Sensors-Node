
WFE_WL55_1CPU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026f8  08000138  08000138  00001138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08002830  08002830  00003830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002968  08002968  00004068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002968  08002968  00004068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002968  08002968  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002968  08002968  00003968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800296c  0800296c  0000396c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08002970  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000068  080029d8  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  080029d8  000041d8  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006c9a  00000000  00000000  00004092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017de  00000000  00000000  0000ad2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  0000c510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007ce  00000000  00000000  0000cfb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bf7d  00000000  00000000  0000d786  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008af5  00000000  00000000  00029703  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ab7b2  00000000  00000000  000321f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dd9aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000304c  00000000  00000000  000dd9f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  000e0a3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	@ (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	@ (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000068 	.word	0x20000068
 8000154:	00000000 	.word	0x00000000
 8000158:	08002818 	.word	0x08002818

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	@ (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	@ (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	@ (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	2000006c 	.word	0x2000006c
 8000174:	08002818 	.word	0x08002818

08000178 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000178:	b480      	push	{r7}
 800017a:	b085      	sub	sp, #20
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000180:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000184:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000186:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	4313      	orrs	r3, r2
 800018e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000190:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000194:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	4013      	ands	r3, r2
 800019a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800019c:	68fb      	ldr	r3, [r7, #12]
}
 800019e:	bf00      	nop
 80001a0:	3714      	adds	r7, #20
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 0 */
/*int __io_putchar(int ch){
	HAL_UART_Transmit(&huart2, &ch, 1, 1000);
}*/

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b082      	sub	sp, #8
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	4603      	mov	r3, r0
 80001b0:	80fb      	strh	r3, [r7, #6]
	HAL_ResumeTick();
 80001b2:	f000 fa81 	bl	80006b8 <HAL_ResumeTick>
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);	// Toggle the blue LED pin if needed.
	printf("Réveil par pression du Bouton 1\r\n");
 80001b6:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <HAL_GPIO_EXTI_Callback+0x1c>)
 80001b8:	f001 ff9e 	bl	80020f8 <puts>
}
 80001bc:	bf00      	nop
 80001be:	3708      	adds	r7, #8
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bd80      	pop	{r7, pc}
 80001c4:	08002830 	.word	0x08002830

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 f9f0 	bl	80005b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f81a 	bl	8000208 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f878 	bl	80002c8 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	  printf("\r\n\r\nTest d'une appli mode veille sur STM32\r\n");
 80001d8:	4808      	ldr	r0, [pc, #32]	@ (80001fc <main+0x34>)
 80001da:	f001 ff8d 	bl	80020f8 <puts>
  while (1)
  {
	  printf("Exécution de la boucle While\r\n");
 80001de:	4808      	ldr	r0, [pc, #32]	@ (8000200 <main+0x38>)
 80001e0:	f001 ff8a 	bl	80020f8 <puts>
	  printf("le µCU entre en veille normale via WFE\r\n\r\n");
 80001e4:	4807      	ldr	r0, [pc, #28]	@ (8000204 <main+0x3c>)
 80001e6:	f001 ff87 	bl	80020f8 <puts>
	  //__HAL_RCC_USART2_CLK_SLEEP_DISABLE(); // Clock-gating the USART2 peripheral

	  HAL_SuspendTick();
 80001ea:	f000 fa57 	bl	800069c <HAL_SuspendTick>
	  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFE);
 80001ee:	2102      	movs	r1, #2
 80001f0:	2000      	movs	r0, #0
 80001f2:	f000 fd19 	bl	8000c28 <HAL_PWR_EnterSLEEPMode>
	  printf("Exécution de la boucle While\r\n");
 80001f6:	bf00      	nop
 80001f8:	e7f1      	b.n	80001de <main+0x16>
 80001fa:	bf00      	nop
 80001fc:	08002854 	.word	0x08002854
 8000200:	08002880 	.word	0x08002880
 8000204:	080028a0 	.word	0x080028a0

08000208 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b09a      	sub	sp, #104	@ 0x68
 800020c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800020e:	f107 0320 	add.w	r3, r7, #32
 8000212:	2248      	movs	r2, #72	@ 0x48
 8000214:	2100      	movs	r1, #0
 8000216:	4618      	mov	r0, r3
 8000218:	f002 f84e 	bl	80022b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800021c:	1d3b      	adds	r3, r7, #4
 800021e:	2200      	movs	r2, #0
 8000220:	601a      	str	r2, [r3, #0]
 8000222:	605a      	str	r2, [r3, #4]
 8000224:	609a      	str	r2, [r3, #8]
 8000226:	60da      	str	r2, [r3, #12]
 8000228:	611a      	str	r2, [r3, #16]
 800022a:	615a      	str	r2, [r3, #20]
 800022c:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800022e:	4b25      	ldr	r3, [pc, #148]	@ (80002c4 <SystemClock_Config+0xbc>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000236:	4a23      	ldr	r2, [pc, #140]	@ (80002c4 <SystemClock_Config+0xbc>)
 8000238:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800023c:	6013      	str	r3, [r2, #0]
 800023e:	4b21      	ldr	r3, [pc, #132]	@ (80002c4 <SystemClock_Config+0xbc>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000246:	603b      	str	r3, [r7, #0]
 8000248:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800024a:	2320      	movs	r3, #32
 800024c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800024e:	2301      	movs	r3, #1
 8000250:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000252:	2300      	movs	r3, #0
 8000254:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000256:	2360      	movs	r3, #96	@ 0x60
 8000258:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800025a:	2302      	movs	r3, #2
 800025c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800025e:	2301      	movs	r3, #1
 8000260:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000262:	2300      	movs	r3, #0
 8000264:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000266:	2318      	movs	r3, #24
 8000268:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800026a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800026e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000270:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000274:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000276:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800027a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800027c:	f107 0320 	add.w	r3, r7, #32
 8000280:	4618      	mov	r0, r3
 8000282:	f000 fff7 	bl	8001274 <HAL_RCC_OscConfig>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800028c:	f000 f882 	bl	8000394 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8000290:	234f      	movs	r3, #79	@ 0x4f
 8000292:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000294:	2303      	movs	r3, #3
 8000296:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000298:	2300      	movs	r3, #0
 800029a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800029c:	2300      	movs	r3, #0
 800029e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a0:	2300      	movs	r3, #0
 80002a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80002a4:	2300      	movs	r3, #0
 80002a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002a8:	1d3b      	adds	r3, r7, #4
 80002aa:	2102      	movs	r1, #2
 80002ac:	4618      	mov	r0, r3
 80002ae:	f001 fb63 	bl	8001978 <HAL_RCC_ClockConfig>
 80002b2:	4603      	mov	r3, r0
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d001      	beq.n	80002bc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80002b8:	f000 f86c 	bl	8000394 <Error_Handler>
  }
}
 80002bc:	bf00      	nop
 80002be:	3768      	adds	r7, #104	@ 0x68
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	58000400 	.word	0x58000400

080002c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b086      	sub	sp, #24
 80002cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ce:	1d3b      	adds	r3, r7, #4
 80002d0:	2200      	movs	r2, #0
 80002d2:	601a      	str	r2, [r3, #0]
 80002d4:	605a      	str	r2, [r3, #4]
 80002d6:	609a      	str	r2, [r3, #8]
 80002d8:	60da      	str	r2, [r3, #12]
 80002da:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002dc:	2002      	movs	r0, #2
 80002de:	f7ff ff4b 	bl	8000178 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002e2:	2004      	movs	r0, #4
 80002e4:	f7ff ff48 	bl	8000178 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002e8:	2001      	movs	r0, #1
 80002ea:	f7ff ff45 	bl	8000178 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80002ee:	2200      	movs	r2, #0
 80002f0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80002f4:	4825      	ldr	r0, [pc, #148]	@ (800038c <MX_GPIO_Init+0xc4>)
 80002f6:	f000 fc59 	bl	8000bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 80002fa:	2200      	movs	r2, #0
 80002fc:	2138      	movs	r1, #56	@ 0x38
 80002fe:	4824      	ldr	r0, [pc, #144]	@ (8000390 <MX_GPIO_Init+0xc8>)
 8000300:	f000 fc54 	bl	8000bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000304:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000308:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800030a:	2301      	movs	r3, #1
 800030c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800030e:	2300      	movs	r3, #0
 8000310:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000312:	2300      	movs	r3, #0
 8000314:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000316:	1d3b      	adds	r3, r7, #4
 8000318:	4619      	mov	r1, r3
 800031a:	481c      	ldr	r0, [pc, #112]	@ (800038c <MX_GPIO_Init+0xc4>)
 800031c:	f000 fae6 	bl	80008ec <HAL_GPIO_Init>

  /*Configure GPIO pins : FE_CTRL3_Pin FE_CTRL2_Pin FE_CTRL1_Pin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 8000320:	2338      	movs	r3, #56	@ 0x38
 8000322:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000324:	2301      	movs	r3, #1
 8000326:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000328:	2300      	movs	r3, #0
 800032a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800032c:	2303      	movs	r3, #3
 800032e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000330:	1d3b      	adds	r3, r7, #4
 8000332:	4619      	mov	r1, r3
 8000334:	4816      	ldr	r0, [pc, #88]	@ (8000390 <MX_GPIO_Init+0xc8>)
 8000336:	f000 fad9 	bl	80008ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800033a:	2301      	movs	r3, #1
 800033c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800033e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000342:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000344:	2301      	movs	r3, #1
 8000346:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000348:	1d3b      	adds	r3, r7, #4
 800034a:	4619      	mov	r1, r3
 800034c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000350:	f000 facc 	bl	80008ec <HAL_GPIO_Init>

  /*Configure GPIO pins : T_VCP_RX_Pin T_VCP_RXA2_Pin */
  GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8000354:	230c      	movs	r3, #12
 8000356:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000358:	2302      	movs	r3, #2
 800035a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800035c:	2300      	movs	r3, #0
 800035e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000360:	2300      	movs	r3, #0
 8000362:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000364:	2307      	movs	r3, #7
 8000366:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000368:	1d3b      	adds	r3, r7, #4
 800036a:	4619      	mov	r1, r3
 800036c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000370:	f000 fabc 	bl	80008ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000374:	2200      	movs	r2, #0
 8000376:	2100      	movs	r1, #0
 8000378:	2006      	movs	r0, #6
 800037a:	f000 fa82 	bl	8000882 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800037e:	2006      	movs	r0, #6
 8000380:	f000 fa99 	bl	80008b6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000384:	bf00      	nop
 8000386:	3718      	adds	r7, #24
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}
 800038c:	48000400 	.word	0x48000400
 8000390:	48000800 	.word	0x48000800

08000394 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000398:	b672      	cpsid	i
}
 800039a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800039c:	bf00      	nop
 800039e:	e7fd      	b.n	800039c <Error_Handler+0x8>

080003a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003a4:	bf00      	nop
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bc80      	pop	{r7}
 80003aa:	4770      	bx	lr

080003ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80003b0:	bf00      	nop
 80003b2:	e7fd      	b.n	80003b0 <NMI_Handler+0x4>

080003b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003b8:	bf00      	nop
 80003ba:	e7fd      	b.n	80003b8 <HardFault_Handler+0x4>

080003bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003c0:	bf00      	nop
 80003c2:	e7fd      	b.n	80003c0 <MemManage_Handler+0x4>

080003c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003c8:	bf00      	nop
 80003ca:	e7fd      	b.n	80003c8 <BusFault_Handler+0x4>

080003cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003d0:	bf00      	nop
 80003d2:	e7fd      	b.n	80003d0 <UsageFault_Handler+0x4>

080003d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003d8:	bf00      	nop
 80003da:	46bd      	mov	sp, r7
 80003dc:	bc80      	pop	{r7}
 80003de:	4770      	bx	lr

080003e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003e4:	bf00      	nop
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bc80      	pop	{r7}
 80003ea:	4770      	bx	lr

080003ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003f0:	bf00      	nop
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bc80      	pop	{r7}
 80003f6:	4770      	bx	lr

080003f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003fc:	f000 f932 	bl	8000664 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000400:	bf00      	nop
 8000402:	bd80      	pop	{r7, pc}

08000404 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line 0 Interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000408:	2001      	movs	r0, #1
 800040a:	f000 fbe7 	bl	8000bdc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800040e:	bf00      	nop
 8000410:	bd80      	pop	{r7, pc}

08000412 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000412:	b580      	push	{r7, lr}
 8000414:	b086      	sub	sp, #24
 8000416:	af00      	add	r7, sp, #0
 8000418:	60f8      	str	r0, [r7, #12]
 800041a:	60b9      	str	r1, [r7, #8]
 800041c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800041e:	2300      	movs	r3, #0
 8000420:	617b      	str	r3, [r7, #20]
 8000422:	e00a      	b.n	800043a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000424:	f3af 8000 	nop.w
 8000428:	4601      	mov	r1, r0
 800042a:	68bb      	ldr	r3, [r7, #8]
 800042c:	1c5a      	adds	r2, r3, #1
 800042e:	60ba      	str	r2, [r7, #8]
 8000430:	b2ca      	uxtb	r2, r1
 8000432:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000434:	697b      	ldr	r3, [r7, #20]
 8000436:	3301      	adds	r3, #1
 8000438:	617b      	str	r3, [r7, #20]
 800043a:	697a      	ldr	r2, [r7, #20]
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	429a      	cmp	r2, r3
 8000440:	dbf0      	blt.n	8000424 <_read+0x12>
  }

  return len;
 8000442:	687b      	ldr	r3, [r7, #4]
}
 8000444:	4618      	mov	r0, r3
 8000446:	3718      	adds	r7, #24
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}

0800044c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b086      	sub	sp, #24
 8000450:	af00      	add	r7, sp, #0
 8000452:	60f8      	str	r0, [r7, #12]
 8000454:	60b9      	str	r1, [r7, #8]
 8000456:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000458:	2300      	movs	r3, #0
 800045a:	617b      	str	r3, [r7, #20]
 800045c:	e009      	b.n	8000472 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800045e:	68bb      	ldr	r3, [r7, #8]
 8000460:	1c5a      	adds	r2, r3, #1
 8000462:	60ba      	str	r2, [r7, #8]
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	4618      	mov	r0, r3
 8000468:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800046c:	697b      	ldr	r3, [r7, #20]
 800046e:	3301      	adds	r3, #1
 8000470:	617b      	str	r3, [r7, #20]
 8000472:	697a      	ldr	r2, [r7, #20]
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	429a      	cmp	r2, r3
 8000478:	dbf1      	blt.n	800045e <_write+0x12>
  }
  return len;
 800047a:	687b      	ldr	r3, [r7, #4]
}
 800047c:	4618      	mov	r0, r3
 800047e:	3718      	adds	r7, #24
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}

08000484 <_close>:

int _close(int file)
{
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800048c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000490:	4618      	mov	r0, r3
 8000492:	370c      	adds	r7, #12
 8000494:	46bd      	mov	sp, r7
 8000496:	bc80      	pop	{r7}
 8000498:	4770      	bx	lr

0800049a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800049a:	b480      	push	{r7}
 800049c:	b083      	sub	sp, #12
 800049e:	af00      	add	r7, sp, #0
 80004a0:	6078      	str	r0, [r7, #4]
 80004a2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80004a4:	683b      	ldr	r3, [r7, #0]
 80004a6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80004aa:	605a      	str	r2, [r3, #4]
  return 0;
 80004ac:	2300      	movs	r3, #0
}
 80004ae:	4618      	mov	r0, r3
 80004b0:	370c      	adds	r7, #12
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bc80      	pop	{r7}
 80004b6:	4770      	bx	lr

080004b8 <_isatty>:

int _isatty(int file)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80004c0:	2301      	movs	r3, #1
}
 80004c2:	4618      	mov	r0, r3
 80004c4:	370c      	adds	r7, #12
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bc80      	pop	{r7}
 80004ca:	4770      	bx	lr

080004cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	60f8      	str	r0, [r7, #12]
 80004d4:	60b9      	str	r1, [r7, #8]
 80004d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80004d8:	2300      	movs	r3, #0
}
 80004da:	4618      	mov	r0, r3
 80004dc:	3714      	adds	r7, #20
 80004de:	46bd      	mov	sp, r7
 80004e0:	bc80      	pop	{r7}
 80004e2:	4770      	bx	lr

080004e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b086      	sub	sp, #24
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004ec:	4a14      	ldr	r2, [pc, #80]	@ (8000540 <_sbrk+0x5c>)
 80004ee:	4b15      	ldr	r3, [pc, #84]	@ (8000544 <_sbrk+0x60>)
 80004f0:	1ad3      	subs	r3, r2, r3
 80004f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004f4:	697b      	ldr	r3, [r7, #20]
 80004f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004f8:	4b13      	ldr	r3, [pc, #76]	@ (8000548 <_sbrk+0x64>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d102      	bne.n	8000506 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000500:	4b11      	ldr	r3, [pc, #68]	@ (8000548 <_sbrk+0x64>)
 8000502:	4a12      	ldr	r2, [pc, #72]	@ (800054c <_sbrk+0x68>)
 8000504:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000506:	4b10      	ldr	r3, [pc, #64]	@ (8000548 <_sbrk+0x64>)
 8000508:	681a      	ldr	r2, [r3, #0]
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	4413      	add	r3, r2
 800050e:	693a      	ldr	r2, [r7, #16]
 8000510:	429a      	cmp	r2, r3
 8000512:	d207      	bcs.n	8000524 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000514:	f001 ff1e 	bl	8002354 <__errno>
 8000518:	4603      	mov	r3, r0
 800051a:	220c      	movs	r2, #12
 800051c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800051e:	f04f 33ff 	mov.w	r3, #4294967295
 8000522:	e009      	b.n	8000538 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000524:	4b08      	ldr	r3, [pc, #32]	@ (8000548 <_sbrk+0x64>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800052a:	4b07      	ldr	r3, [pc, #28]	@ (8000548 <_sbrk+0x64>)
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	4413      	add	r3, r2
 8000532:	4a05      	ldr	r2, [pc, #20]	@ (8000548 <_sbrk+0x64>)
 8000534:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000536:	68fb      	ldr	r3, [r7, #12]
}
 8000538:	4618      	mov	r0, r3
 800053a:	3718      	adds	r7, #24
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	20010000 	.word	0x20010000
 8000544:	00000400 	.word	0x00000400
 8000548:	20000084 	.word	0x20000084
 800054c:	200001d8 	.word	0x200001d8

08000550 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000554:	bf00      	nop
 8000556:	46bd      	mov	sp, r7
 8000558:	bc80      	pop	{r7}
 800055a:	4770      	bx	lr

0800055c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800055c:	480d      	ldr	r0, [pc, #52]	@ (8000594 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800055e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000560:	f7ff fff6 	bl	8000550 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000564:	480c      	ldr	r0, [pc, #48]	@ (8000598 <LoopForever+0x6>)
  ldr r1, =_edata
 8000566:	490d      	ldr	r1, [pc, #52]	@ (800059c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000568:	4a0d      	ldr	r2, [pc, #52]	@ (80005a0 <LoopForever+0xe>)
  movs r3, #0
 800056a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800056c:	e002      	b.n	8000574 <LoopCopyDataInit>

0800056e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800056e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000570:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000572:	3304      	adds	r3, #4

08000574 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000574:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000576:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000578:	d3f9      	bcc.n	800056e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800057a:	4a0a      	ldr	r2, [pc, #40]	@ (80005a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800057c:	4c0a      	ldr	r4, [pc, #40]	@ (80005a8 <LoopForever+0x16>)
  movs r3, #0
 800057e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000580:	e001      	b.n	8000586 <LoopFillZerobss>

08000582 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000582:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000584:	3204      	adds	r2, #4

08000586 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000586:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000588:	d3fb      	bcc.n	8000582 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800058a:	f001 fee9 	bl	8002360 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800058e:	f7ff fe1b 	bl	80001c8 <main>

08000592 <LoopForever>:

LoopForever:
    b LoopForever
 8000592:	e7fe      	b.n	8000592 <LoopForever>
  ldr   r0, =_estack
 8000594:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000598:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800059c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80005a0:	08002970 	.word	0x08002970
  ldr r2, =_sbss
 80005a4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80005a8:	200001d8 	.word	0x200001d8

080005ac <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005ac:	e7fe      	b.n	80005ac <ADC_IRQHandler>
	...

080005b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005b6:	2300      	movs	r3, #0
 80005b8:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005ba:	2003      	movs	r0, #3
 80005bc:	f000 f956 	bl	800086c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80005c0:	f001 fbbc 	bl	8001d3c <HAL_RCC_GetHCLKFreq>
 80005c4:	4603      	mov	r3, r0
 80005c6:	4a09      	ldr	r2, [pc, #36]	@ (80005ec <HAL_Init+0x3c>)
 80005c8:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005ca:	2000      	movs	r0, #0
 80005cc:	f000 f810 	bl	80005f0 <HAL_InitTick>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d002      	beq.n	80005dc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80005d6:	2301      	movs	r3, #1
 80005d8:	71fb      	strb	r3, [r7, #7]
 80005da:	e001      	b.n	80005e0 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005dc:	f7ff fee0 	bl	80003a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005e0:	79fb      	ldrb	r3, [r7, #7]
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	20000000 	.word	0x20000000

080005f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80005f8:	2300      	movs	r3, #0
 80005fa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80005fc:	4b17      	ldr	r3, [pc, #92]	@ (800065c <HAL_InitTick+0x6c>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d024      	beq.n	800064e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000604:	f001 fb9a 	bl	8001d3c <HAL_RCC_GetHCLKFreq>
 8000608:	4602      	mov	r2, r0
 800060a:	4b14      	ldr	r3, [pc, #80]	@ (800065c <HAL_InitTick+0x6c>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	4619      	mov	r1, r3
 8000610:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000614:	fbb3 f3f1 	udiv	r3, r3, r1
 8000618:	fbb2 f3f3 	udiv	r3, r2, r3
 800061c:	4618      	mov	r0, r3
 800061e:	f000 f958 	bl	80008d2 <HAL_SYSTICK_Config>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d10f      	bne.n	8000648 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	2b0f      	cmp	r3, #15
 800062c:	d809      	bhi.n	8000642 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800062e:	2200      	movs	r2, #0
 8000630:	6879      	ldr	r1, [r7, #4]
 8000632:	f04f 30ff 	mov.w	r0, #4294967295
 8000636:	f000 f924 	bl	8000882 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800063a:	4a09      	ldr	r2, [pc, #36]	@ (8000660 <HAL_InitTick+0x70>)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	6013      	str	r3, [r2, #0]
 8000640:	e007      	b.n	8000652 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000642:	2301      	movs	r3, #1
 8000644:	73fb      	strb	r3, [r7, #15]
 8000646:	e004      	b.n	8000652 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000648:	2301      	movs	r3, #1
 800064a:	73fb      	strb	r3, [r7, #15]
 800064c:	e001      	b.n	8000652 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800064e:	2301      	movs	r3, #1
 8000650:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000652:	7bfb      	ldrb	r3, [r7, #15]
}
 8000654:	4618      	mov	r0, r3
 8000656:	3710      	adds	r7, #16
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	20000008 	.word	0x20000008
 8000660:	20000004 	.word	0x20000004

08000664 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000668:	4b05      	ldr	r3, [pc, #20]	@ (8000680 <HAL_IncTick+0x1c>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	461a      	mov	r2, r3
 800066e:	4b05      	ldr	r3, [pc, #20]	@ (8000684 <HAL_IncTick+0x20>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4413      	add	r3, r2
 8000674:	4a03      	ldr	r2, [pc, #12]	@ (8000684 <HAL_IncTick+0x20>)
 8000676:	6013      	str	r3, [r2, #0]
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	bc80      	pop	{r7}
 800067e:	4770      	bx	lr
 8000680:	20000008 	.word	0x20000008
 8000684:	20000088 	.word	0x20000088

08000688 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  return uwTick;
 800068c:	4b02      	ldr	r3, [pc, #8]	@ (8000698 <HAL_GetTick+0x10>)
 800068e:	681b      	ldr	r3, [r3, #0]
}
 8000690:	4618      	mov	r0, r3
 8000692:	46bd      	mov	sp, r7
 8000694:	bc80      	pop	{r7}
 8000696:	4770      	bx	lr
 8000698:	20000088 	.word	0x20000088

0800069c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80006a0:	4b04      	ldr	r3, [pc, #16]	@ (80006b4 <HAL_SuspendTick+0x18>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a03      	ldr	r2, [pc, #12]	@ (80006b4 <HAL_SuspendTick+0x18>)
 80006a6:	f023 0302 	bic.w	r3, r3, #2
 80006aa:	6013      	str	r3, [r2, #0]
}
 80006ac:	bf00      	nop
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bc80      	pop	{r7}
 80006b2:	4770      	bx	lr
 80006b4:	e000e010 	.word	0xe000e010

080006b8 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80006bc:	4b04      	ldr	r3, [pc, #16]	@ (80006d0 <HAL_ResumeTick+0x18>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a03      	ldr	r2, [pc, #12]	@ (80006d0 <HAL_ResumeTick+0x18>)
 80006c2:	f043 0302 	orr.w	r3, r3, #2
 80006c6:	6013      	str	r3, [r2, #0]
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bc80      	pop	{r7}
 80006ce:	4770      	bx	lr
 80006d0:	e000e010 	.word	0xe000e010

080006d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b085      	sub	sp, #20
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	f003 0307 	and.w	r3, r3, #7
 80006e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000718 <__NVIC_SetPriorityGrouping+0x44>)
 80006e6:	68db      	ldr	r3, [r3, #12]
 80006e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ea:	68ba      	ldr	r2, [r7, #8]
 80006ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80006f0:	4013      	ands	r3, r2
 80006f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000700:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000704:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000706:	4a04      	ldr	r2, [pc, #16]	@ (8000718 <__NVIC_SetPriorityGrouping+0x44>)
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	60d3      	str	r3, [r2, #12]
}
 800070c:	bf00      	nop
 800070e:	3714      	adds	r7, #20
 8000710:	46bd      	mov	sp, r7
 8000712:	bc80      	pop	{r7}
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	e000ed00 	.word	0xe000ed00

0800071c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000720:	4b04      	ldr	r3, [pc, #16]	@ (8000734 <__NVIC_GetPriorityGrouping+0x18>)
 8000722:	68db      	ldr	r3, [r3, #12]
 8000724:	0a1b      	lsrs	r3, r3, #8
 8000726:	f003 0307 	and.w	r3, r3, #7
}
 800072a:	4618      	mov	r0, r3
 800072c:	46bd      	mov	sp, r7
 800072e:	bc80      	pop	{r7}
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	e000ed00 	.word	0xe000ed00

08000738 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000746:	2b00      	cmp	r3, #0
 8000748:	db0b      	blt.n	8000762 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800074a:	79fb      	ldrb	r3, [r7, #7]
 800074c:	f003 021f 	and.w	r2, r3, #31
 8000750:	4906      	ldr	r1, [pc, #24]	@ (800076c <__NVIC_EnableIRQ+0x34>)
 8000752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000756:	095b      	lsrs	r3, r3, #5
 8000758:	2001      	movs	r0, #1
 800075a:	fa00 f202 	lsl.w	r2, r0, r2
 800075e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000762:	bf00      	nop
 8000764:	370c      	adds	r7, #12
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr
 800076c:	e000e100 	.word	0xe000e100

08000770 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	6039      	str	r1, [r7, #0]
 800077a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800077c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000780:	2b00      	cmp	r3, #0
 8000782:	db0a      	blt.n	800079a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	b2da      	uxtb	r2, r3
 8000788:	490c      	ldr	r1, [pc, #48]	@ (80007bc <__NVIC_SetPriority+0x4c>)
 800078a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800078e:	0112      	lsls	r2, r2, #4
 8000790:	b2d2      	uxtb	r2, r2
 8000792:	440b      	add	r3, r1
 8000794:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000798:	e00a      	b.n	80007b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	b2da      	uxtb	r2, r3
 800079e:	4908      	ldr	r1, [pc, #32]	@ (80007c0 <__NVIC_SetPriority+0x50>)
 80007a0:	79fb      	ldrb	r3, [r7, #7]
 80007a2:	f003 030f 	and.w	r3, r3, #15
 80007a6:	3b04      	subs	r3, #4
 80007a8:	0112      	lsls	r2, r2, #4
 80007aa:	b2d2      	uxtb	r2, r2
 80007ac:	440b      	add	r3, r1
 80007ae:	761a      	strb	r2, [r3, #24]
}
 80007b0:	bf00      	nop
 80007b2:	370c      	adds	r7, #12
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bc80      	pop	{r7}
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	e000e100 	.word	0xe000e100
 80007c0:	e000ed00 	.word	0xe000ed00

080007c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b089      	sub	sp, #36	@ 0x24
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	60f8      	str	r0, [r7, #12]
 80007cc:	60b9      	str	r1, [r7, #8]
 80007ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	f003 0307 	and.w	r3, r3, #7
 80007d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007d8:	69fb      	ldr	r3, [r7, #28]
 80007da:	f1c3 0307 	rsb	r3, r3, #7
 80007de:	2b04      	cmp	r3, #4
 80007e0:	bf28      	it	cs
 80007e2:	2304      	movcs	r3, #4
 80007e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007e6:	69fb      	ldr	r3, [r7, #28]
 80007e8:	3304      	adds	r3, #4
 80007ea:	2b06      	cmp	r3, #6
 80007ec:	d902      	bls.n	80007f4 <NVIC_EncodePriority+0x30>
 80007ee:	69fb      	ldr	r3, [r7, #28]
 80007f0:	3b03      	subs	r3, #3
 80007f2:	e000      	b.n	80007f6 <NVIC_EncodePriority+0x32>
 80007f4:	2300      	movs	r3, #0
 80007f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f8:	f04f 32ff 	mov.w	r2, #4294967295
 80007fc:	69bb      	ldr	r3, [r7, #24]
 80007fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000802:	43da      	mvns	r2, r3
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	401a      	ands	r2, r3
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800080c:	f04f 31ff 	mov.w	r1, #4294967295
 8000810:	697b      	ldr	r3, [r7, #20]
 8000812:	fa01 f303 	lsl.w	r3, r1, r3
 8000816:	43d9      	mvns	r1, r3
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800081c:	4313      	orrs	r3, r2
         );
}
 800081e:	4618      	mov	r0, r3
 8000820:	3724      	adds	r7, #36	@ 0x24
 8000822:	46bd      	mov	sp, r7
 8000824:	bc80      	pop	{r7}
 8000826:	4770      	bx	lr

08000828 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	3b01      	subs	r3, #1
 8000834:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000838:	d301      	bcc.n	800083e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800083a:	2301      	movs	r3, #1
 800083c:	e00f      	b.n	800085e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800083e:	4a0a      	ldr	r2, [pc, #40]	@ (8000868 <SysTick_Config+0x40>)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	3b01      	subs	r3, #1
 8000844:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000846:	210f      	movs	r1, #15
 8000848:	f04f 30ff 	mov.w	r0, #4294967295
 800084c:	f7ff ff90 	bl	8000770 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000850:	4b05      	ldr	r3, [pc, #20]	@ (8000868 <SysTick_Config+0x40>)
 8000852:	2200      	movs	r2, #0
 8000854:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000856:	4b04      	ldr	r3, [pc, #16]	@ (8000868 <SysTick_Config+0x40>)
 8000858:	2207      	movs	r2, #7
 800085a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800085c:	2300      	movs	r3, #0
}
 800085e:	4618      	mov	r0, r3
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	e000e010 	.word	0xe000e010

0800086c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000874:	6878      	ldr	r0, [r7, #4]
 8000876:	f7ff ff2d 	bl	80006d4 <__NVIC_SetPriorityGrouping>
}
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}

08000882 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000882:	b580      	push	{r7, lr}
 8000884:	b086      	sub	sp, #24
 8000886:	af00      	add	r7, sp, #0
 8000888:	4603      	mov	r3, r0
 800088a:	60b9      	str	r1, [r7, #8]
 800088c:	607a      	str	r2, [r7, #4]
 800088e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000890:	f7ff ff44 	bl	800071c <__NVIC_GetPriorityGrouping>
 8000894:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000896:	687a      	ldr	r2, [r7, #4]
 8000898:	68b9      	ldr	r1, [r7, #8]
 800089a:	6978      	ldr	r0, [r7, #20]
 800089c:	f7ff ff92 	bl	80007c4 <NVIC_EncodePriority>
 80008a0:	4602      	mov	r2, r0
 80008a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008a6:	4611      	mov	r1, r2
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff ff61 	bl	8000770 <__NVIC_SetPriority>
}
 80008ae:	bf00      	nop
 80008b0:	3718      	adds	r7, #24
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008b6:	b580      	push	{r7, lr}
 80008b8:	b082      	sub	sp, #8
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	4603      	mov	r3, r0
 80008be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff ff37 	bl	8000738 <__NVIC_EnableIRQ>
}
 80008ca:	bf00      	nop
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	b082      	sub	sp, #8
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80008da:	6878      	ldr	r0, [r7, #4]
 80008dc:	f7ff ffa4 	bl	8000828 <SysTick_Config>
 80008e0:	4603      	mov	r3, r0
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
	...

080008ec <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b087      	sub	sp, #28
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008f6:	2300      	movs	r3, #0
 80008f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008fa:	e140      	b.n	8000b7e <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	2101      	movs	r1, #1
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	fa01 f303 	lsl.w	r3, r1, r3
 8000908:	4013      	ands	r3, r2
 800090a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	2b00      	cmp	r3, #0
 8000910:	f000 8132 	beq.w	8000b78 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	f003 0303 	and.w	r3, r3, #3
 800091c:	2b01      	cmp	r3, #1
 800091e:	d005      	beq.n	800092c <HAL_GPIO_Init+0x40>
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	f003 0303 	and.w	r3, r3, #3
 8000928:	2b02      	cmp	r3, #2
 800092a:	d130      	bne.n	800098e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	689b      	ldr	r3, [r3, #8]
 8000930:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	005b      	lsls	r3, r3, #1
 8000936:	2203      	movs	r2, #3
 8000938:	fa02 f303 	lsl.w	r3, r2, r3
 800093c:	43db      	mvns	r3, r3
 800093e:	693a      	ldr	r2, [r7, #16]
 8000940:	4013      	ands	r3, r2
 8000942:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	68da      	ldr	r2, [r3, #12]
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	005b      	lsls	r3, r3, #1
 800094c:	fa02 f303 	lsl.w	r3, r2, r3
 8000950:	693a      	ldr	r2, [r7, #16]
 8000952:	4313      	orrs	r3, r2
 8000954:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	693a      	ldr	r2, [r7, #16]
 800095a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000962:	2201      	movs	r2, #1
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	fa02 f303 	lsl.w	r3, r2, r3
 800096a:	43db      	mvns	r3, r3
 800096c:	693a      	ldr	r2, [r7, #16]
 800096e:	4013      	ands	r3, r2
 8000970:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	091b      	lsrs	r3, r3, #4
 8000978:	f003 0201 	and.w	r2, r3, #1
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	fa02 f303 	lsl.w	r3, r2, r3
 8000982:	693a      	ldr	r2, [r7, #16]
 8000984:	4313      	orrs	r3, r2
 8000986:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	693a      	ldr	r2, [r7, #16]
 800098c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	685b      	ldr	r3, [r3, #4]
 8000992:	f003 0303 	and.w	r3, r3, #3
 8000996:	2b03      	cmp	r3, #3
 8000998:	d017      	beq.n	80009ca <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	68db      	ldr	r3, [r3, #12]
 800099e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	005b      	lsls	r3, r3, #1
 80009a4:	2203      	movs	r2, #3
 80009a6:	fa02 f303 	lsl.w	r3, r2, r3
 80009aa:	43db      	mvns	r3, r3
 80009ac:	693a      	ldr	r2, [r7, #16]
 80009ae:	4013      	ands	r3, r2
 80009b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	689a      	ldr	r2, [r3, #8]
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	fa02 f303 	lsl.w	r3, r2, r3
 80009be:	693a      	ldr	r2, [r7, #16]
 80009c0:	4313      	orrs	r3, r2
 80009c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	693a      	ldr	r2, [r7, #16]
 80009c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	f003 0303 	and.w	r3, r3, #3
 80009d2:	2b02      	cmp	r3, #2
 80009d4:	d123      	bne.n	8000a1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80009d6:	697b      	ldr	r3, [r7, #20]
 80009d8:	08da      	lsrs	r2, r3, #3
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	3208      	adds	r2, #8
 80009de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	f003 0307 	and.w	r3, r3, #7
 80009ea:	009b      	lsls	r3, r3, #2
 80009ec:	220f      	movs	r2, #15
 80009ee:	fa02 f303 	lsl.w	r3, r2, r3
 80009f2:	43db      	mvns	r3, r3
 80009f4:	693a      	ldr	r2, [r7, #16]
 80009f6:	4013      	ands	r3, r2
 80009f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	691a      	ldr	r2, [r3, #16]
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	f003 0307 	and.w	r3, r3, #7
 8000a04:	009b      	lsls	r3, r3, #2
 8000a06:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0a:	693a      	ldr	r2, [r7, #16]
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	08da      	lsrs	r2, r3, #3
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	3208      	adds	r2, #8
 8000a18:	6939      	ldr	r1, [r7, #16]
 8000a1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	005b      	lsls	r3, r3, #1
 8000a28:	2203      	movs	r2, #3
 8000a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2e:	43db      	mvns	r3, r3
 8000a30:	693a      	ldr	r2, [r7, #16]
 8000a32:	4013      	ands	r3, r2
 8000a34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	f003 0203 	and.w	r2, r3, #3
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	005b      	lsls	r3, r3, #1
 8000a42:	fa02 f303 	lsl.w	r3, r2, r3
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	693a      	ldr	r2, [r7, #16]
 8000a50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	f000 808c 	beq.w	8000b78 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000a60:	4a4e      	ldr	r2, [pc, #312]	@ (8000b9c <HAL_GPIO_Init+0x2b0>)
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	089b      	lsrs	r3, r3, #2
 8000a66:	3302      	adds	r3, #2
 8000a68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	f003 0303 	and.w	r3, r3, #3
 8000a74:	009b      	lsls	r3, r3, #2
 8000a76:	2207      	movs	r2, #7
 8000a78:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7c:	43db      	mvns	r3, r3
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	4013      	ands	r3, r2
 8000a82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000a8a:	d00d      	beq.n	8000aa8 <HAL_GPIO_Init+0x1bc>
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	4a44      	ldr	r2, [pc, #272]	@ (8000ba0 <HAL_GPIO_Init+0x2b4>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d007      	beq.n	8000aa4 <HAL_GPIO_Init+0x1b8>
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	4a43      	ldr	r2, [pc, #268]	@ (8000ba4 <HAL_GPIO_Init+0x2b8>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d101      	bne.n	8000aa0 <HAL_GPIO_Init+0x1b4>
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	e004      	b.n	8000aaa <HAL_GPIO_Init+0x1be>
 8000aa0:	2307      	movs	r3, #7
 8000aa2:	e002      	b.n	8000aaa <HAL_GPIO_Init+0x1be>
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	e000      	b.n	8000aaa <HAL_GPIO_Init+0x1be>
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	697a      	ldr	r2, [r7, #20]
 8000aac:	f002 0203 	and.w	r2, r2, #3
 8000ab0:	0092      	lsls	r2, r2, #2
 8000ab2:	4093      	lsls	r3, r2
 8000ab4:	693a      	ldr	r2, [r7, #16]
 8000ab6:	4313      	orrs	r3, r2
 8000ab8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000aba:	4938      	ldr	r1, [pc, #224]	@ (8000b9c <HAL_GPIO_Init+0x2b0>)
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	089b      	lsrs	r3, r3, #2
 8000ac0:	3302      	adds	r3, #2
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ac8:	4b37      	ldr	r3, [pc, #220]	@ (8000ba8 <HAL_GPIO_Init+0x2bc>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	43db      	mvns	r3, r3
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d003      	beq.n	8000aec <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8000ae4:	693a      	ldr	r2, [r7, #16]
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000aec:	4a2e      	ldr	r2, [pc, #184]	@ (8000ba8 <HAL_GPIO_Init+0x2bc>)
 8000aee:	693b      	ldr	r3, [r7, #16]
 8000af0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000af2:	4b2d      	ldr	r3, [pc, #180]	@ (8000ba8 <HAL_GPIO_Init+0x2bc>)
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	43db      	mvns	r3, r3
 8000afc:	693a      	ldr	r2, [r7, #16]
 8000afe:	4013      	ands	r3, r2
 8000b00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d003      	beq.n	8000b16 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	4313      	orrs	r3, r2
 8000b14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b16:	4a24      	ldr	r2, [pc, #144]	@ (8000ba8 <HAL_GPIO_Init+0x2bc>)
 8000b18:	693b      	ldr	r3, [r7, #16]
 8000b1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8000b1c:	4b22      	ldr	r3, [pc, #136]	@ (8000ba8 <HAL_GPIO_Init+0x2bc>)
 8000b1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000b22:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	43db      	mvns	r3, r3
 8000b28:	693a      	ldr	r2, [r7, #16]
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d003      	beq.n	8000b42 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8000b42:	4a19      	ldr	r2, [pc, #100]	@ (8000ba8 <HAL_GPIO_Init+0x2bc>)
 8000b44:	693b      	ldr	r3, [r7, #16]
 8000b46:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8000b4a:	4b17      	ldr	r3, [pc, #92]	@ (8000ba8 <HAL_GPIO_Init+0x2bc>)
 8000b4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000b50:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	43db      	mvns	r3, r3
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	4013      	ands	r3, r2
 8000b5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d003      	beq.n	8000b70 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000b68:	693a      	ldr	r2, [r7, #16]
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8000b70:	4a0d      	ldr	r2, [pc, #52]	@ (8000ba8 <HAL_GPIO_Init+0x2bc>)
 8000b72:	693b      	ldr	r3, [r7, #16]
 8000b74:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	fa22 f303 	lsr.w	r3, r2, r3
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	f47f aeb7 	bne.w	80008fc <HAL_GPIO_Init+0x10>
  }
}
 8000b8e:	bf00      	nop
 8000b90:	bf00      	nop
 8000b92:	371c      	adds	r7, #28
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bc80      	pop	{r7}
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	40010000 	.word	0x40010000
 8000ba0:	48000400 	.word	0x48000400
 8000ba4:	48000800 	.word	0x48000800
 8000ba8:	58000800 	.word	0x58000800

08000bac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	460b      	mov	r3, r1
 8000bb6:	807b      	strh	r3, [r7, #2]
 8000bb8:	4613      	mov	r3, r2
 8000bba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000bbc:	787b      	ldrb	r3, [r7, #1]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d003      	beq.n	8000bca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000bc2:	887a      	ldrh	r2, [r7, #2]
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000bc8:	e002      	b.n	8000bd0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000bca:	887a      	ldrh	r2, [r7, #2]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000bd0:	bf00      	nop
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bc80      	pop	{r7}
 8000bd8:	4770      	bx	lr
	...

08000bdc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000be6:	4b08      	ldr	r3, [pc, #32]	@ (8000c08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000be8:	68da      	ldr	r2, [r3, #12]
 8000bea:	88fb      	ldrh	r3, [r7, #6]
 8000bec:	4013      	ands	r3, r2
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d006      	beq.n	8000c00 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000bf2:	4a05      	ldr	r2, [pc, #20]	@ (8000c08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000bf4:	88fb      	ldrh	r3, [r7, #6]
 8000bf6:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000bf8:	88fb      	ldrh	r3, [r7, #6]
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff fad4 	bl	80001a8 <HAL_GPIO_EXTI_Callback>
  }
}
 8000c00:	bf00      	nop
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	58000800 	.word	0x58000800

08000c0c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000c10:	4b04      	ldr	r3, [pc, #16]	@ (8000c24 <HAL_PWR_EnableBkUpAccess+0x18>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a03      	ldr	r2, [pc, #12]	@ (8000c24 <HAL_PWR_EnableBkUpAccess+0x18>)
 8000c16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c1a:	6013      	str	r3, [r2, #0]
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bc80      	pop	{r7}
 8000c22:	4770      	bx	lr
 8000c24:	58000400 	.word	0x58000400

08000c28 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	460b      	mov	r3, r1
 8000c32:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d10c      	bne.n	8000c54 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8000c3a:	4b13      	ldr	r3, [pc, #76]	@ (8000c88 <HAL_PWR_EnterSLEEPMode+0x60>)
 8000c3c:	695b      	ldr	r3, [r3, #20]
 8000c3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000c42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000c46:	d10d      	bne.n	8000c64 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8000c48:	f000 f83c 	bl	8000cc4 <HAL_PWREx_DisableLowPowerRunMode>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d008      	beq.n	8000c64 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 8000c52:	e015      	b.n	8000c80 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8000c54:	4b0c      	ldr	r3, [pc, #48]	@ (8000c88 <HAL_PWR_EnterSLEEPMode+0x60>)
 8000c56:	695b      	ldr	r3, [r3, #20]
 8000c58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d101      	bne.n	8000c64 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8000c60:	f000 f822 	bl	8000ca8 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000c64:	4b09      	ldr	r3, [pc, #36]	@ (8000c8c <HAL_PWR_EnterSLEEPMode+0x64>)
 8000c66:	691b      	ldr	r3, [r3, #16]
 8000c68:	4a08      	ldr	r2, [pc, #32]	@ (8000c8c <HAL_PWR_EnterSLEEPMode+0x64>)
 8000c6a:	f023 0304 	bic.w	r3, r3, #4
 8000c6e:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8000c70:	78fb      	ldrb	r3, [r7, #3]
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d101      	bne.n	8000c7a <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8000c76:	bf30      	wfi
 8000c78:	e002      	b.n	8000c80 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8000c7a:	bf40      	sev
    __WFE();
 8000c7c:	bf20      	wfe
    __WFE();
 8000c7e:	bf20      	wfe
  }
}
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	58000400 	.word	0x58000400
 8000c8c:	e000ed00 	.word	0xe000ed00

08000c90 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8000c94:	4b03      	ldr	r3, [pc, #12]	@ (8000ca4 <HAL_PWREx_GetVoltageRange+0x14>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bc80      	pop	{r7}
 8000ca2:	4770      	bx	lr
 8000ca4:	58000400 	.word	0x58000400

08000ca8 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8000cac:	4b04      	ldr	r3, [pc, #16]	@ (8000cc0 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a03      	ldr	r2, [pc, #12]	@ (8000cc0 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8000cb2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cb6:	6013      	str	r3, [r2, #0]
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bc80      	pop	{r7}
 8000cbe:	4770      	bx	lr
 8000cc0:	58000400 	.word	0x58000400

08000cc4 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8000cca:	4b16      	ldr	r3, [pc, #88]	@ (8000d24 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a15      	ldr	r2, [pc, #84]	@ (8000d24 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8000cd0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000cd4:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8000cd6:	4b14      	ldr	r3, [pc, #80]	@ (8000d28 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	2232      	movs	r2, #50	@ 0x32
 8000cdc:	fb02 f303 	mul.w	r3, r2, r3
 8000ce0:	4a12      	ldr	r2, [pc, #72]	@ (8000d2c <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8000ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ce6:	0c9b      	lsrs	r3, r3, #18
 8000ce8:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8000cea:	e002      	b.n	8000cf2 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8000cf2:	4b0c      	ldr	r3, [pc, #48]	@ (8000d24 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8000cf4:	695b      	ldr	r3, [r3, #20]
 8000cf6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000cfa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000cfe:	d102      	bne.n	8000d06 <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d1f2      	bne.n	8000cec <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8000d06:	4b07      	ldr	r3, [pc, #28]	@ (8000d24 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8000d08:	695b      	ldr	r3, [r3, #20]
 8000d0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000d0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000d12:	d101      	bne.n	8000d18 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8000d14:	2303      	movs	r3, #3
 8000d16:	e000      	b.n	8000d1a <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8000d18:	2300      	movs	r3, #0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bc80      	pop	{r7}
 8000d22:	4770      	bx	lr
 8000d24:	58000400 	.word	0x58000400
 8000d28:	20000000 	.word	0x20000000
 8000d2c:	431bde83 	.word	0x431bde83

08000d30 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8000d34:	4b06      	ldr	r3, [pc, #24]	@ (8000d50 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000d40:	d101      	bne.n	8000d46 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8000d42:	2301      	movs	r3, #1
 8000d44:	e000      	b.n	8000d48 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8000d46:	2300      	movs	r3, #0
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc80      	pop	{r7}
 8000d4e:	4770      	bx	lr
 8000d50:	58000400 	.word	0x58000400

08000d54 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8000d58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000d62:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d66:	6013      	str	r3, [r2, #0]
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bc80      	pop	{r7}
 8000d6e:	4770      	bx	lr

08000d70 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8000d74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000d7e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000d82:	6013      	str	r3, [r2, #0]
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr

08000d8c <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8000d90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8000d9e:	d101      	bne.n	8000da4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8000da0:	2301      	movs	r3, #1
 8000da2:	e000      	b.n	8000da6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bc80      	pop	{r7}
 8000dac:	4770      	bx	lr

08000dae <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000db2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000dbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000dc0:	6013      	str	r3, [r2, #0]
}
 8000dc2:	bf00      	nop
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bc80      	pop	{r7}
 8000dc8:	4770      	bx	lr

08000dca <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8000dce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000dd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ddc:	6013      	str	r3, [r2, #0]
}
 8000dde:	bf00      	nop
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bc80      	pop	{r7}
 8000de4:	4770      	bx	lr

08000de6 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8000dea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000df4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8000df8:	d101      	bne.n	8000dfe <LL_RCC_HSE_IsReady+0x18>
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e000      	b.n	8000e00 <LL_RCC_HSE_IsReady+0x1a>
 8000dfe:	2300      	movs	r3, #0
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr

08000e08 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000e0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000e16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e1a:	6013      	str	r3, [r2, #0]
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bc80      	pop	{r7}
 8000e22:	4770      	bx	lr

08000e24 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8000e28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000e32:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000e36:	6013      	str	r3, [r2, #0]
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bc80      	pop	{r7}
 8000e3e:	4770      	bx	lr

08000e40 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000e44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e52:	d101      	bne.n	8000e58 <LL_RCC_HSI_IsReady+0x18>
 8000e54:	2301      	movs	r3, #1
 8000e56:	e000      	b.n	8000e5a <LL_RCC_HSI_IsReady+0x1a>
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bc80      	pop	{r7}
 8000e60:	4770      	bx	lr

08000e62 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000e62:	b480      	push	{r7}
 8000e64:	b083      	sub	sp, #12
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000e6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	061b      	lsls	r3, r3, #24
 8000e78:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	604b      	str	r3, [r1, #4]
}
 8000e80:	bf00      	nop
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bc80      	pop	{r7}
 8000e88:	4770      	bx	lr

08000e8a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8000e8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000e96:	f003 0302 	and.w	r3, r3, #2
 8000e9a:	2b02      	cmp	r3, #2
 8000e9c:	d101      	bne.n	8000ea2 <LL_RCC_LSE_IsReady+0x18>
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e000      	b.n	8000ea4 <LL_RCC_LSE_IsReady+0x1a>
 8000ea2:	2300      	movs	r3, #0
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bc80      	pop	{r7}
 8000eaa:	4770      	bx	lr

08000eac <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8000eb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000eb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000eb8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000ebc:	f043 0301 	orr.w	r3, r3, #1
 8000ec0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bc80      	pop	{r7}
 8000eca:	4770      	bx	lr

08000ecc <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8000ed0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ed4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000ed8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000edc:	f023 0301 	bic.w	r3, r3, #1
 8000ee0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bc80      	pop	{r7}
 8000eea:	4770      	bx	lr

08000eec <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8000ef0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ef4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000ef8:	f003 0302 	and.w	r3, r3, #2
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d101      	bne.n	8000f04 <LL_RCC_LSI_IsReady+0x18>
 8000f00:	2301      	movs	r3, #1
 8000f02:	e000      	b.n	8000f06 <LL_RCC_LSI_IsReady+0x1a>
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bc80      	pop	{r7}
 8000f0c:	4770      	bx	lr

08000f0e <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000f12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f1c:	f043 0301 	orr.w	r3, r3, #1
 8000f20:	6013      	str	r3, [r2, #0]
}
 8000f22:	bf00      	nop
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bc80      	pop	{r7}
 8000f28:	4770      	bx	lr

08000f2a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8000f2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f38:	f023 0301 	bic.w	r3, r3, #1
 8000f3c:	6013      	str	r3, [r2, #0]
}
 8000f3e:	bf00      	nop
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bc80      	pop	{r7}
 8000f44:	4770      	bx	lr

08000f46 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8000f4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f003 0302 	and.w	r3, r3, #2
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d101      	bne.n	8000f5c <LL_RCC_MSI_IsReady+0x16>
 8000f58:	2301      	movs	r3, #1
 8000f5a:	e000      	b.n	8000f5e <LL_RCC_MSI_IsReady+0x18>
 8000f5c:	2300      	movs	r3, #0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bc80      	pop	{r7}
 8000f64:	4770      	bx	lr

08000f66 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8000f66:	b480      	push	{r7}
 8000f68:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8000f6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f003 0308 	and.w	r3, r3, #8
 8000f74:	2b08      	cmp	r3, #8
 8000f76:	d101      	bne.n	8000f7c <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8000f78:	2301      	movs	r3, #1
 8000f7a:	e000      	b.n	8000f7e <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bc80      	pop	{r7}
 8000f84:	4770      	bx	lr

08000f86 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8000f8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr

08000f9c <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8000fa0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000fa8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr

08000fb4 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8000fbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	021b      	lsls	r3, r3, #8
 8000fca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	604b      	str	r3, [r1, #4]
}
 8000fd2:	bf00      	nop
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr

08000fdc <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000fe4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	f023 0203 	bic.w	r2, r3, #3
 8000fee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	608b      	str	r3, [r1, #8]
}
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bc80      	pop	{r7}
 8001000:	4770      	bx	lr

08001002 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001006:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	f003 030c 	and.w	r3, r3, #12
}
 8001010:	4618      	mov	r0, r3
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr

08001018 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001020:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800102a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4313      	orrs	r3, r2
 8001032:	608b      	str	r3, [r1, #8]
}
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	bc80      	pop	{r7}
 800103c:	4770      	bx	lr

0800103e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800103e:	b480      	push	{r7}
 8001040:	b083      	sub	sp, #12
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001046:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800104a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800104e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001052:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4313      	orrs	r3, r2
 800105a:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800105e:	bf00      	nop
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr

08001068 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001070:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001074:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001078:	f023 020f 	bic.w	r2, r3, #15
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	091b      	lsrs	r3, r3, #4
 8001080:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001084:	4313      	orrs	r3, r2
 8001086:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800108a:	bf00      	nop
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	bc80      	pop	{r7}
 8001092:	4770      	bx	lr

08001094 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800109c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80010a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	608b      	str	r3, [r1, #8]
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bc80      	pop	{r7}
 80010b8:	4770      	bx	lr

080010ba <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80010ba:	b480      	push	{r7}
 80010bc:	b083      	sub	sp, #12
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80010c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80010cc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	608b      	str	r3, [r1, #8]
}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	bc80      	pop	{r7}
 80010de:	4770      	bx	lr

080010e0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80010e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bc80      	pop	{r7}
 80010f4:	4770      	bx	lr

080010f6 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80010fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010fe:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001102:	011b      	lsls	r3, r3, #4
 8001104:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001108:	4618      	mov	r0, r3
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr

08001110 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001114:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800111e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001122:	6013      	str	r3, [r2, #0]
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	bc80      	pop	{r7}
 800112a:	4770      	bx	lr

0800112c <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001130:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800113a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800113e:	6013      	str	r3, [r2, #0]
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	bc80      	pop	{r7}
 8001146:	4770      	bx	lr

08001148 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800114c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001156:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800115a:	d101      	bne.n	8001160 <LL_RCC_PLL_IsReady+0x18>
 800115c:	2301      	movs	r3, #1
 800115e:	e000      	b.n	8001162 <LL_RCC_PLL_IsReady+0x1a>
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	46bd      	mov	sp, r7
 8001166:	bc80      	pop	{r7}
 8001168:	4770      	bx	lr

0800116a <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800116e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	0a1b      	lsrs	r3, r3, #8
 8001176:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800117a:	4618      	mov	r0, r3
 800117c:	46bd      	mov	sp, r7
 800117e:	bc80      	pop	{r7}
 8001180:	4770      	bx	lr

08001182 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001186:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8001190:	4618      	mov	r0, r3
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr

08001198 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800119c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bc80      	pop	{r7}
 80011ac:	4770      	bx	lr

080011ae <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80011ae:	b480      	push	{r7}
 80011b0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80011b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	f003 0303 	and.w	r3, r3, #3
}
 80011bc:	4618      	mov	r0, r3
 80011be:	46bd      	mov	sp, r7
 80011c0:	bc80      	pop	{r7}
 80011c2:	4770      	bx	lr

080011c4 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80011c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011d6:	d101      	bne.n	80011dc <LL_RCC_IsActiveFlag_HPRE+0x18>
 80011d8:	2301      	movs	r3, #1
 80011da:	e000      	b.n	80011de <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bc80      	pop	{r7}
 80011e4:	4770      	bx	lr

080011e6 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80011e6:	b480      	push	{r7}
 80011e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80011ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011ee:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80011f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80011fa:	d101      	bne.n	8001200 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80011fc:	2301      	movs	r3, #1
 80011fe:	e000      	b.n	8001202 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	46bd      	mov	sp, r7
 8001206:	bc80      	pop	{r7}
 8001208:	4770      	bx	lr

0800120a <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800120a:	b480      	push	{r7}
 800120c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800120e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001212:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001216:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800121a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800121e:	d101      	bne.n	8001224 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001220:	2301      	movs	r3, #1
 8001222:	e000      	b.n	8001226 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	46bd      	mov	sp, r7
 800122a:	bc80      	pop	{r7}
 800122c:	4770      	bx	lr

0800122e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001232:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800123c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001240:	d101      	bne.n	8001246 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001242:	2301      	movs	r3, #1
 8001244:	e000      	b.n	8001248 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001246:	2300      	movs	r3, #0
}
 8001248:	4618      	mov	r0, r3
 800124a:	46bd      	mov	sp, r7
 800124c:	bc80      	pop	{r7}
 800124e:	4770      	bx	lr

08001250 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001254:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800125e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001262:	d101      	bne.n	8001268 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001264:	2301      	movs	r3, #1
 8001266:	e000      	b.n	800126a <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001268:	2300      	movs	r3, #0
}
 800126a:	4618      	mov	r0, r3
 800126c:	46bd      	mov	sp, r7
 800126e:	bc80      	pop	{r7}
 8001270:	4770      	bx	lr
	...

08001274 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b088      	sub	sp, #32
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d101      	bne.n	8001286 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e36f      	b.n	8001966 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001286:	f7ff febc 	bl	8001002 <LL_RCC_GetSysClkSource>
 800128a:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800128c:	f7ff ff8f 	bl	80011ae <LL_RCC_PLL_GetMainSource>
 8001290:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0320 	and.w	r3, r3, #32
 800129a:	2b00      	cmp	r3, #0
 800129c:	f000 80c4 	beq.w	8001428 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d005      	beq.n	80012b2 <HAL_RCC_OscConfig+0x3e>
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	2b0c      	cmp	r3, #12
 80012aa:	d176      	bne.n	800139a <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d173      	bne.n	800139a <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6a1b      	ldr	r3, [r3, #32]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d101      	bne.n	80012be <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e353      	b.n	8001966 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80012c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 0308 	and.w	r3, r3, #8
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d005      	beq.n	80012dc <HAL_RCC_OscConfig+0x68>
 80012d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80012da:	e006      	b.n	80012ea <HAL_RCC_OscConfig+0x76>
 80012dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80012e4:	091b      	lsrs	r3, r3, #4
 80012e6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d222      	bcs.n	8001334 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012f2:	4618      	mov	r0, r3
 80012f4:	f000 fd36 	bl	8001d64 <RCC_SetFlashLatencyFromMSIRange>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e331      	b.n	8001966 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001302:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800130c:	f043 0308 	orr.w	r3, r3, #8
 8001310:	6013      	str	r3, [r2, #0]
 8001312:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001320:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001324:	4313      	orrs	r3, r2
 8001326:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff fe41 	bl	8000fb4 <LL_RCC_MSI_SetCalibTrimming>
 8001332:	e021      	b.n	8001378 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001334:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800133e:	f043 0308 	orr.w	r3, r3, #8
 8001342:	6013      	str	r3, [r2, #0]
 8001344:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001352:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001356:	4313      	orrs	r3, r2
 8001358:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff fe28 	bl	8000fb4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001368:	4618      	mov	r0, r3
 800136a:	f000 fcfb 	bl	8001d64 <RCC_SetFlashLatencyFromMSIRange>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	e2f6      	b.n	8001966 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001378:	f000 fce0 	bl	8001d3c <HAL_RCC_GetHCLKFreq>
 800137c:	4603      	mov	r3, r0
 800137e:	4aa7      	ldr	r2, [pc, #668]	@ (800161c <HAL_RCC_OscConfig+0x3a8>)
 8001380:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8001382:	4ba7      	ldr	r3, [pc, #668]	@ (8001620 <HAL_RCC_OscConfig+0x3ac>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff f932 	bl	80005f0 <HAL_InitTick>
 800138c:	4603      	mov	r3, r0
 800138e:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8001390:	7cfb      	ldrb	r3, [r7, #19]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d047      	beq.n	8001426 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8001396:	7cfb      	ldrb	r3, [r7, #19]
 8001398:	e2e5      	b.n	8001966 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6a1b      	ldr	r3, [r3, #32]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d02c      	beq.n	80013fc <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80013a2:	f7ff fdb4 	bl	8000f0e <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013a6:	f7ff f96f 	bl	8000688 <HAL_GetTick>
 80013aa:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80013ac:	e008      	b.n	80013c0 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013ae:	f7ff f96b 	bl	8000688 <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d901      	bls.n	80013c0 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 80013bc:	2303      	movs	r3, #3
 80013be:	e2d2      	b.n	8001966 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 80013c0:	f7ff fdc1 	bl	8000f46 <LL_RCC_MSI_IsReady>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d0f1      	beq.n	80013ae <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80013d4:	f043 0308 	orr.w	r3, r3, #8
 80013d8:	6013      	str	r3, [r2, #0]
 80013da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013e8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013ec:	4313      	orrs	r3, r2
 80013ee:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff fddd 	bl	8000fb4 <LL_RCC_MSI_SetCalibTrimming>
 80013fa:	e015      	b.n	8001428 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80013fc:	f7ff fd95 	bl	8000f2a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001400:	f7ff f942 	bl	8000688 <HAL_GetTick>
 8001404:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001406:	e008      	b.n	800141a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001408:	f7ff f93e 	bl	8000688 <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b02      	cmp	r3, #2
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e2a5      	b.n	8001966 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 800141a:	f7ff fd94 	bl	8000f46 <LL_RCC_MSI_IsReady>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d1f1      	bne.n	8001408 <HAL_RCC_OscConfig+0x194>
 8001424:	e000      	b.n	8001428 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001426:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0301 	and.w	r3, r3, #1
 8001430:	2b00      	cmp	r3, #0
 8001432:	d058      	beq.n	80014e6 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	2b08      	cmp	r3, #8
 8001438:	d005      	beq.n	8001446 <HAL_RCC_OscConfig+0x1d2>
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	2b0c      	cmp	r3, #12
 800143e:	d108      	bne.n	8001452 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	2b03      	cmp	r3, #3
 8001444:	d105      	bne.n	8001452 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d14b      	bne.n	80014e6 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e289      	b.n	8001966 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8001452:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001464:	4313      	orrs	r3, r2
 8001466:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001470:	d102      	bne.n	8001478 <HAL_RCC_OscConfig+0x204>
 8001472:	f7ff fc9c 	bl	8000dae <LL_RCC_HSE_Enable>
 8001476:	e00d      	b.n	8001494 <HAL_RCC_OscConfig+0x220>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8001480:	d104      	bne.n	800148c <HAL_RCC_OscConfig+0x218>
 8001482:	f7ff fc67 	bl	8000d54 <LL_RCC_HSE_EnableTcxo>
 8001486:	f7ff fc92 	bl	8000dae <LL_RCC_HSE_Enable>
 800148a:	e003      	b.n	8001494 <HAL_RCC_OscConfig+0x220>
 800148c:	f7ff fc9d 	bl	8000dca <LL_RCC_HSE_Disable>
 8001490:	f7ff fc6e 	bl	8000d70 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d012      	beq.n	80014c2 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800149c:	f7ff f8f4 	bl	8000688 <HAL_GetTick>
 80014a0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80014a2:	e008      	b.n	80014b6 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014a4:	f7ff f8f0 	bl	8000688 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b64      	cmp	r3, #100	@ 0x64
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e257      	b.n	8001966 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 80014b6:	f7ff fc96 	bl	8000de6 <LL_RCC_HSE_IsReady>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d0f1      	beq.n	80014a4 <HAL_RCC_OscConfig+0x230>
 80014c0:	e011      	b.n	80014e6 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c2:	f7ff f8e1 	bl	8000688 <HAL_GetTick>
 80014c6:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80014c8:	e008      	b.n	80014dc <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014ca:	f7ff f8dd 	bl	8000688 <HAL_GetTick>
 80014ce:	4602      	mov	r2, r0
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	2b64      	cmp	r3, #100	@ 0x64
 80014d6:	d901      	bls.n	80014dc <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80014d8:	2303      	movs	r3, #3
 80014da:	e244      	b.n	8001966 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 80014dc:	f7ff fc83 	bl	8000de6 <LL_RCC_HSE_IsReady>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d1f1      	bne.n	80014ca <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d046      	beq.n	8001580 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	2b04      	cmp	r3, #4
 80014f6:	d005      	beq.n	8001504 <HAL_RCC_OscConfig+0x290>
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	2b0c      	cmp	r3, #12
 80014fc:	d10e      	bne.n	800151c <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	2b02      	cmp	r3, #2
 8001502:	d10b      	bne.n	800151c <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	691b      	ldr	r3, [r3, #16]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d101      	bne.n	8001510 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e22a      	b.n	8001966 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	695b      	ldr	r3, [r3, #20]
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff fca4 	bl	8000e62 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800151a:	e031      	b.n	8001580 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	691b      	ldr	r3, [r3, #16]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d019      	beq.n	8001558 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001524:	f7ff fc70 	bl	8000e08 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001528:	f7ff f8ae 	bl	8000688 <HAL_GetTick>
 800152c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800152e:	e008      	b.n	8001542 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001530:	f7ff f8aa 	bl	8000688 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b02      	cmp	r3, #2
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e211      	b.n	8001966 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001542:	f7ff fc7d 	bl	8000e40 <LL_RCC_HSI_IsReady>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d0f1      	beq.n	8001530 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	695b      	ldr	r3, [r3, #20]
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff fc86 	bl	8000e62 <LL_RCC_HSI_SetCalibTrimming>
 8001556:	e013      	b.n	8001580 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001558:	f7ff fc64 	bl	8000e24 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800155c:	f7ff f894 	bl	8000688 <HAL_GetTick>
 8001560:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001562:	e008      	b.n	8001576 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001564:	f7ff f890 	bl	8000688 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b02      	cmp	r3, #2
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e1f7      	b.n	8001966 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001576:	f7ff fc63 	bl	8000e40 <LL_RCC_HSI_IsReady>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d1f1      	bne.n	8001564 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0308 	and.w	r3, r3, #8
 8001588:	2b00      	cmp	r3, #0
 800158a:	d06e      	beq.n	800166a <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d056      	beq.n	8001642 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8001594:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001598:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800159c:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	69da      	ldr	r2, [r3, #28]
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	f003 0310 	and.w	r3, r3, #16
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d031      	beq.n	8001610 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d006      	beq.n	80015c4 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d101      	bne.n	80015c4 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e1d0      	b.n	8001966 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d013      	beq.n	80015f6 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 80015ce:	f7ff fc7d 	bl	8000ecc <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80015d2:	f7ff f859 	bl	8000688 <HAL_GetTick>
 80015d6:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80015d8:	e008      	b.n	80015ec <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015da:	f7ff f855 	bl	8000688 <HAL_GetTick>
 80015de:	4602      	mov	r2, r0
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	2b11      	cmp	r3, #17
 80015e6:	d901      	bls.n	80015ec <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 80015e8:	2303      	movs	r3, #3
 80015ea:	e1bc      	b.n	8001966 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 80015ec:	f7ff fc7e 	bl	8000eec <LL_RCC_LSI_IsReady>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d1f1      	bne.n	80015da <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80015f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015fe:	f023 0210 	bic.w	r2, r3, #16
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	69db      	ldr	r3, [r3, #28]
 8001606:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800160a:	4313      	orrs	r3, r2
 800160c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001610:	f7ff fc4c 	bl	8000eac <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001614:	f7ff f838 	bl	8000688 <HAL_GetTick>
 8001618:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800161a:	e00c      	b.n	8001636 <HAL_RCC_OscConfig+0x3c2>
 800161c:	20000000 	.word	0x20000000
 8001620:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001624:	f7ff f830 	bl	8000688 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b11      	cmp	r3, #17
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e197      	b.n	8001966 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8001636:	f7ff fc59 	bl	8000eec <LL_RCC_LSI_IsReady>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d0f1      	beq.n	8001624 <HAL_RCC_OscConfig+0x3b0>
 8001640:	e013      	b.n	800166a <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001642:	f7ff fc43 	bl	8000ecc <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001646:	f7ff f81f 	bl	8000688 <HAL_GetTick>
 800164a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 800164c:	e008      	b.n	8001660 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800164e:	f7ff f81b 	bl	8000688 <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b11      	cmp	r3, #17
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e182      	b.n	8001966 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8001660:	f7ff fc44 	bl	8000eec <LL_RCC_LSI_IsReady>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1f1      	bne.n	800164e <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0304 	and.w	r3, r3, #4
 8001672:	2b00      	cmp	r3, #0
 8001674:	f000 80d8 	beq.w	8001828 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001678:	f7ff fb5a 	bl	8000d30 <LL_PWR_IsEnabledBkUpAccess>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d113      	bne.n	80016aa <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001682:	f7ff fac3 	bl	8000c0c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001686:	f7fe ffff 	bl	8000688 <HAL_GetTick>
 800168a:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800168c:	e008      	b.n	80016a0 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800168e:	f7fe fffb 	bl	8000688 <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	2b02      	cmp	r3, #2
 800169a:	d901      	bls.n	80016a0 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e162      	b.n	8001966 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80016a0:	f7ff fb46 	bl	8000d30 <LL_PWR_IsEnabledBkUpAccess>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d0f1      	beq.n	800168e <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d07b      	beq.n	80017aa <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	2b85      	cmp	r3, #133	@ 0x85
 80016b8:	d003      	beq.n	80016c2 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	2b05      	cmp	r3, #5
 80016c0:	d109      	bne.n	80016d6 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80016c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80016ce:	f043 0304 	orr.w	r3, r3, #4
 80016d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016d6:	f7fe ffd7 	bl	8000688 <HAL_GetTick>
 80016da:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80016dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80016e8:	f043 0301 	orr.w	r3, r3, #1
 80016ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80016f0:	e00a      	b.n	8001708 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016f2:	f7fe ffc9 	bl	8000688 <HAL_GetTick>
 80016f6:	4602      	mov	r2, r0
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001700:	4293      	cmp	r3, r2
 8001702:	d901      	bls.n	8001708 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e12e      	b.n	8001966 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001708:	f7ff fbbf 	bl	8000e8a <LL_RCC_LSE_IsReady>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d0ef      	beq.n	80016f2 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	2b81      	cmp	r3, #129	@ 0x81
 8001718:	d003      	beq.n	8001722 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	2b85      	cmp	r3, #133	@ 0x85
 8001720:	d121      	bne.n	8001766 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001722:	f7fe ffb1 	bl	8000688 <HAL_GetTick>
 8001726:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001728:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800172c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001730:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001734:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001738:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800173c:	e00a      	b.n	8001754 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800173e:	f7fe ffa3 	bl	8000688 <HAL_GetTick>
 8001742:	4602      	mov	r2, r0
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	f241 3288 	movw	r2, #5000	@ 0x1388
 800174c:	4293      	cmp	r3, r2
 800174e:	d901      	bls.n	8001754 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e108      	b.n	8001966 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001754:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001758:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800175c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001760:	2b00      	cmp	r3, #0
 8001762:	d0ec      	beq.n	800173e <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001764:	e060      	b.n	8001828 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001766:	f7fe ff8f 	bl	8000688 <HAL_GetTick>
 800176a:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800176c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001770:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001774:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001778:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800177c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001780:	e00a      	b.n	8001798 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001782:	f7fe ff81 	bl	8000688 <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001790:	4293      	cmp	r3, r2
 8001792:	d901      	bls.n	8001798 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e0e6      	b.n	8001966 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001798:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800179c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d1ec      	bne.n	8001782 <HAL_RCC_OscConfig+0x50e>
 80017a8:	e03e      	b.n	8001828 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017aa:	f7fe ff6d 	bl	8000688 <HAL_GetTick>
 80017ae:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80017b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80017bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80017c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80017c4:	e00a      	b.n	80017dc <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017c6:	f7fe ff5f 	bl	8000688 <HAL_GetTick>
 80017ca:	4602      	mov	r2, r0
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d901      	bls.n	80017dc <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e0c4      	b.n	8001966 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80017dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d1ec      	bne.n	80017c6 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ec:	f7fe ff4c 	bl	8000688 <HAL_GetTick>
 80017f0:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80017f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80017fe:	f023 0301 	bic.w	r3, r3, #1
 8001802:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8001806:	e00a      	b.n	800181e <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001808:	f7fe ff3e 	bl	8000688 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001816:	4293      	cmp	r3, r2
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e0a3      	b.n	8001966 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 800181e:	f7ff fb34 	bl	8000e8a <LL_RCC_LSE_IsReady>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d1ef      	bne.n	8001808 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800182c:	2b00      	cmp	r3, #0
 800182e:	f000 8099 	beq.w	8001964 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	2b0c      	cmp	r3, #12
 8001836:	d06c      	beq.n	8001912 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800183c:	2b02      	cmp	r3, #2
 800183e:	d14b      	bne.n	80018d8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001840:	f7ff fc74 	bl	800112c <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001844:	f7fe ff20 	bl	8000688 <HAL_GetTick>
 8001848:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800184c:	f7fe ff1c 	bl	8000688 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b0a      	cmp	r3, #10
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e083      	b.n	8001966 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800185e:	f7ff fc73 	bl	8001148 <LL_RCC_PLL_IsReady>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d1f1      	bne.n	800184c <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001868:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800186c:	68da      	ldr	r2, [r3, #12]
 800186e:	4b40      	ldr	r3, [pc, #256]	@ (8001970 <HAL_RCC_OscConfig+0x6fc>)
 8001870:	4013      	ands	r3, r2
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800187a:	4311      	orrs	r1, r2
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001880:	0212      	lsls	r2, r2, #8
 8001882:	4311      	orrs	r1, r2
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001888:	4311      	orrs	r1, r2
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800188e:	4311      	orrs	r1, r2
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001894:	430a      	orrs	r2, r1
 8001896:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800189a:	4313      	orrs	r3, r2
 800189c:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800189e:	f7ff fc37 	bl	8001110 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80018ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018b0:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b2:	f7fe fee9 	bl	8000688 <HAL_GetTick>
 80018b6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80018b8:	e008      	b.n	80018cc <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ba:	f7fe fee5 	bl	8000688 <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b0a      	cmp	r3, #10
 80018c6:	d901      	bls.n	80018cc <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e04c      	b.n	8001966 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80018cc:	f7ff fc3c 	bl	8001148 <LL_RCC_PLL_IsReady>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d0f1      	beq.n	80018ba <HAL_RCC_OscConfig+0x646>
 80018d6:	e045      	b.n	8001964 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018d8:	f7ff fc28 	bl	800112c <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018dc:	f7fe fed4 	bl	8000688 <HAL_GetTick>
 80018e0:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80018e2:	e008      	b.n	80018f6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018e4:	f7fe fed0 	bl	8000688 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b0a      	cmp	r3, #10
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e037      	b.n	8001966 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80018f6:	f7ff fc27 	bl	8001148 <LL_RCC_PLL_IsReady>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d1f1      	bne.n	80018e4 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8001900:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001904:	68da      	ldr	r2, [r3, #12]
 8001906:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800190a:	4b1a      	ldr	r3, [pc, #104]	@ (8001974 <HAL_RCC_OscConfig+0x700>)
 800190c:	4013      	ands	r3, r2
 800190e:	60cb      	str	r3, [r1, #12]
 8001910:	e028      	b.n	8001964 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001916:	2b01      	cmp	r3, #1
 8001918:	d101      	bne.n	800191e <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e023      	b.n	8001966 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800191e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	f003 0203 	and.w	r2, r3, #3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001930:	429a      	cmp	r2, r3
 8001932:	d115      	bne.n	8001960 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800193e:	429a      	cmp	r2, r3
 8001940:	d10e      	bne.n	8001960 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800194c:	021b      	lsls	r3, r3, #8
 800194e:	429a      	cmp	r2, r3
 8001950:	d106      	bne.n	8001960 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800195c:	429a      	cmp	r2, r3
 800195e:	d001      	beq.n	8001964 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e000      	b.n	8001966 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3720      	adds	r7, #32
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	11c1808c 	.word	0x11c1808c
 8001974:	eefefffc 	.word	0xeefefffc

08001978 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d101      	bne.n	800198c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e12c      	b.n	8001be6 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800198c:	4b98      	ldr	r3, [pc, #608]	@ (8001bf0 <HAL_RCC_ClockConfig+0x278>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0307 	and.w	r3, r3, #7
 8001994:	683a      	ldr	r2, [r7, #0]
 8001996:	429a      	cmp	r2, r3
 8001998:	d91b      	bls.n	80019d2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800199a:	4b95      	ldr	r3, [pc, #596]	@ (8001bf0 <HAL_RCC_ClockConfig+0x278>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f023 0207 	bic.w	r2, r3, #7
 80019a2:	4993      	ldr	r1, [pc, #588]	@ (8001bf0 <HAL_RCC_ClockConfig+0x278>)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019aa:	f7fe fe6d 	bl	8000688 <HAL_GetTick>
 80019ae:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019b0:	e008      	b.n	80019c4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80019b2:	f7fe fe69 	bl	8000688 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d901      	bls.n	80019c4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e110      	b.n	8001be6 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019c4:	4b8a      	ldr	r3, [pc, #552]	@ (8001bf0 <HAL_RCC_ClockConfig+0x278>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0307 	and.w	r3, r3, #7
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d1ef      	bne.n	80019b2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d016      	beq.n	8001a0c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff fb18 	bl	8001018 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80019e8:	f7fe fe4e 	bl	8000688 <HAL_GetTick>
 80019ec:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80019ee:	e008      	b.n	8001a02 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80019f0:	f7fe fe4a 	bl	8000688 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e0f1      	b.n	8001be6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001a02:	f7ff fbdf 	bl	80011c4 <LL_RCC_IsActiveFlag_HPRE>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d0f1      	beq.n	80019f0 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0320 	and.w	r3, r3, #32
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d016      	beq.n	8001a46 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	695b      	ldr	r3, [r3, #20]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff fb0e 	bl	800103e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001a22:	f7fe fe31 	bl	8000688 <HAL_GetTick>
 8001a26:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001a28:	e008      	b.n	8001a3c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001a2a:	f7fe fe2d 	bl	8000688 <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e0d4      	b.n	8001be6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001a3c:	f7ff fbd3 	bl	80011e6 <LL_RCC_IsActiveFlag_C2HPRE>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d0f1      	beq.n	8001a2a <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d016      	beq.n	8001a80 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	699b      	ldr	r3, [r3, #24]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff fb06 	bl	8001068 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001a5c:	f7fe fe14 	bl	8000688 <HAL_GetTick>
 8001a60:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001a64:	f7fe fe10 	bl	8000688 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e0b7      	b.n	8001be6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001a76:	f7ff fbc8 	bl	800120a <LL_RCC_IsActiveFlag_SHDHPRE>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d0f1      	beq.n	8001a64 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0304 	and.w	r3, r3, #4
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d016      	beq.n	8001aba <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff faff 	bl	8001094 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001a96:	f7fe fdf7 	bl	8000688 <HAL_GetTick>
 8001a9a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001a9c:	e008      	b.n	8001ab0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001a9e:	f7fe fdf3 	bl	8000688 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e09a      	b.n	8001be6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001ab0:	f7ff fbbd 	bl	800122e <LL_RCC_IsActiveFlag_PPRE1>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d0f1      	beq.n	8001a9e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0308 	and.w	r3, r3, #8
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d017      	beq.n	8001af6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff faf4 	bl	80010ba <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001ad2:	f7fe fdd9 	bl	8000688 <HAL_GetTick>
 8001ad6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001ad8:	e008      	b.n	8001aec <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001ada:	f7fe fdd5 	bl	8000688 <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d901      	bls.n	8001aec <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e07c      	b.n	8001be6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001aec:	f7ff fbb0 	bl	8001250 <LL_RCC_IsActiveFlag_PPRE2>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d0f1      	beq.n	8001ada <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d043      	beq.n	8001b8a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d106      	bne.n	8001b18 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8001b0a:	f7ff f96c 	bl	8000de6 <LL_RCC_HSE_IsReady>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d11e      	bne.n	8001b52 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e066      	b.n	8001be6 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	2b03      	cmp	r3, #3
 8001b1e:	d106      	bne.n	8001b2e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8001b20:	f7ff fb12 	bl	8001148 <LL_RCC_PLL_IsReady>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d113      	bne.n	8001b52 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e05b      	b.n	8001be6 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d106      	bne.n	8001b44 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8001b36:	f7ff fa06 	bl	8000f46 <LL_RCC_MSI_IsReady>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d108      	bne.n	8001b52 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e050      	b.n	8001be6 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8001b44:	f7ff f97c 	bl	8000e40 <LL_RCC_HSI_IsReady>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d101      	bne.n	8001b52 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e049      	b.n	8001be6 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff fa40 	bl	8000fdc <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b5c:	f7fe fd94 	bl	8000688 <HAL_GetTick>
 8001b60:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b62:	e00a      	b.n	8001b7a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b64:	f7fe fd90 	bl	8000688 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e035      	b.n	8001be6 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b7a:	f7ff fa42 	bl	8001002 <LL_RCC_GetSysClkSource>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d1ec      	bne.n	8001b64 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b8a:	4b19      	ldr	r3, [pc, #100]	@ (8001bf0 <HAL_RCC_ClockConfig+0x278>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0307 	and.w	r3, r3, #7
 8001b92:	683a      	ldr	r2, [r7, #0]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d21b      	bcs.n	8001bd0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b98:	4b15      	ldr	r3, [pc, #84]	@ (8001bf0 <HAL_RCC_ClockConfig+0x278>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f023 0207 	bic.w	r2, r3, #7
 8001ba0:	4913      	ldr	r1, [pc, #76]	@ (8001bf0 <HAL_RCC_ClockConfig+0x278>)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ba8:	f7fe fd6e 	bl	8000688 <HAL_GetTick>
 8001bac:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bae:	e008      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001bb0:	f7fe fd6a 	bl	8000688 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e011      	b.n	8001be6 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bc2:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf0 <HAL_RCC_ClockConfig+0x278>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	683a      	ldr	r2, [r7, #0]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d1ef      	bne.n	8001bb0 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001bd0:	f000 f8b4 	bl	8001d3c <HAL_RCC_GetHCLKFreq>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	4a07      	ldr	r2, [pc, #28]	@ (8001bf4 <HAL_RCC_ClockConfig+0x27c>)
 8001bd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8001bda:	4b07      	ldr	r3, [pc, #28]	@ (8001bf8 <HAL_RCC_ClockConfig+0x280>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7fe fd06 	bl	80005f0 <HAL_InitTick>
 8001be4:	4603      	mov	r3, r0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	58004000 	.word	0x58004000
 8001bf4:	20000000 	.word	0x20000000
 8001bf8:	20000004 	.word	0x20000004

08001bfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bfc:	b590      	push	{r4, r7, lr}
 8001bfe:	b087      	sub	sp, #28
 8001c00:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8001c02:	2300      	movs	r3, #0
 8001c04:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8001c06:	2300      	movs	r3, #0
 8001c08:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c0a:	f7ff f9fa 	bl	8001002 <LL_RCC_GetSysClkSource>
 8001c0e:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c10:	f7ff facd 	bl	80011ae <LL_RCC_PLL_GetMainSource>
 8001c14:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d005      	beq.n	8001c28 <HAL_RCC_GetSysClockFreq+0x2c>
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	2b0c      	cmp	r3, #12
 8001c20:	d139      	bne.n	8001c96 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d136      	bne.n	8001c96 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8001c28:	f7ff f99d 	bl	8000f66 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d115      	bne.n	8001c5e <HAL_RCC_GetSysClockFreq+0x62>
 8001c32:	f7ff f998 	bl	8000f66 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d106      	bne.n	8001c4a <HAL_RCC_GetSysClockFreq+0x4e>
 8001c3c:	f7ff f9a3 	bl	8000f86 <LL_RCC_MSI_GetRange>
 8001c40:	4603      	mov	r3, r0
 8001c42:	0a1b      	lsrs	r3, r3, #8
 8001c44:	f003 030f 	and.w	r3, r3, #15
 8001c48:	e005      	b.n	8001c56 <HAL_RCC_GetSysClockFreq+0x5a>
 8001c4a:	f7ff f9a7 	bl	8000f9c <LL_RCC_MSI_GetRangeAfterStandby>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	0a1b      	lsrs	r3, r3, #8
 8001c52:	f003 030f 	and.w	r3, r3, #15
 8001c56:	4a36      	ldr	r2, [pc, #216]	@ (8001d30 <HAL_RCC_GetSysClockFreq+0x134>)
 8001c58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c5c:	e014      	b.n	8001c88 <HAL_RCC_GetSysClockFreq+0x8c>
 8001c5e:	f7ff f982 	bl	8000f66 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d106      	bne.n	8001c76 <HAL_RCC_GetSysClockFreq+0x7a>
 8001c68:	f7ff f98d 	bl	8000f86 <LL_RCC_MSI_GetRange>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	091b      	lsrs	r3, r3, #4
 8001c70:	f003 030f 	and.w	r3, r3, #15
 8001c74:	e005      	b.n	8001c82 <HAL_RCC_GetSysClockFreq+0x86>
 8001c76:	f7ff f991 	bl	8000f9c <LL_RCC_MSI_GetRangeAfterStandby>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	091b      	lsrs	r3, r3, #4
 8001c7e:	f003 030f 	and.w	r3, r3, #15
 8001c82:	4a2b      	ldr	r2, [pc, #172]	@ (8001d30 <HAL_RCC_GetSysClockFreq+0x134>)
 8001c84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c88:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d115      	bne.n	8001cbc <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001c94:	e012      	b.n	8001cbc <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	2b04      	cmp	r3, #4
 8001c9a:	d102      	bne.n	8001ca2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c9c:	4b25      	ldr	r3, [pc, #148]	@ (8001d34 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c9e:	617b      	str	r3, [r7, #20]
 8001ca0:	e00c      	b.n	8001cbc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	2b08      	cmp	r3, #8
 8001ca6:	d109      	bne.n	8001cbc <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001ca8:	f7ff f870 	bl	8000d8c <LL_RCC_HSE_IsEnabledDiv2>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d102      	bne.n	8001cb8 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8001cb2:	4b20      	ldr	r3, [pc, #128]	@ (8001d34 <HAL_RCC_GetSysClockFreq+0x138>)
 8001cb4:	617b      	str	r3, [r7, #20]
 8001cb6:	e001      	b.n	8001cbc <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8001cb8:	4b1f      	ldr	r3, [pc, #124]	@ (8001d38 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001cba:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cbc:	f7ff f9a1 	bl	8001002 <LL_RCC_GetSysClkSource>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b0c      	cmp	r3, #12
 8001cc4:	d12f      	bne.n	8001d26 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8001cc6:	f7ff fa72 	bl	80011ae <LL_RCC_PLL_GetMainSource>
 8001cca:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d003      	beq.n	8001cda <HAL_RCC_GetSysClockFreq+0xde>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2b03      	cmp	r3, #3
 8001cd6:	d003      	beq.n	8001ce0 <HAL_RCC_GetSysClockFreq+0xe4>
 8001cd8:	e00d      	b.n	8001cf6 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8001cda:	4b16      	ldr	r3, [pc, #88]	@ (8001d34 <HAL_RCC_GetSysClockFreq+0x138>)
 8001cdc:	60fb      	str	r3, [r7, #12]
        break;
 8001cde:	e00d      	b.n	8001cfc <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001ce0:	f7ff f854 	bl	8000d8c <LL_RCC_HSE_IsEnabledDiv2>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d102      	bne.n	8001cf0 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8001cea:	4b12      	ldr	r3, [pc, #72]	@ (8001d34 <HAL_RCC_GetSysClockFreq+0x138>)
 8001cec:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8001cee:	e005      	b.n	8001cfc <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8001cf0:	4b11      	ldr	r3, [pc, #68]	@ (8001d38 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001cf2:	60fb      	str	r3, [r7, #12]
        break;
 8001cf4:	e002      	b.n	8001cfc <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	60fb      	str	r3, [r7, #12]
        break;
 8001cfa:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8001cfc:	f7ff fa35 	bl	800116a <LL_RCC_PLL_GetN>
 8001d00:	4602      	mov	r2, r0
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	fb03 f402 	mul.w	r4, r3, r2
 8001d08:	f7ff fa46 	bl	8001198 <LL_RCC_PLL_GetDivider>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	091b      	lsrs	r3, r3, #4
 8001d10:	3301      	adds	r3, #1
 8001d12:	fbb4 f4f3 	udiv	r4, r4, r3
 8001d16:	f7ff fa34 	bl	8001182 <LL_RCC_PLL_GetR>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	0f5b      	lsrs	r3, r3, #29
 8001d1e:	3301      	adds	r3, #1
 8001d20:	fbb4 f3f3 	udiv	r3, r4, r3
 8001d24:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8001d26:	697b      	ldr	r3, [r7, #20]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	371c      	adds	r7, #28
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd90      	pop	{r4, r7, pc}
 8001d30:	08002928 	.word	0x08002928
 8001d34:	00f42400 	.word	0x00f42400
 8001d38:	01e84800 	.word	0x01e84800

08001d3c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d3c:	b598      	push	{r3, r4, r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8001d40:	f7ff ff5c 	bl	8001bfc <HAL_RCC_GetSysClockFreq>
 8001d44:	4604      	mov	r4, r0
 8001d46:	f7ff f9cb 	bl	80010e0 <LL_RCC_GetAHBPrescaler>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	091b      	lsrs	r3, r3, #4
 8001d4e:	f003 030f 	and.w	r3, r3, #15
 8001d52:	4a03      	ldr	r2, [pc, #12]	@ (8001d60 <HAL_RCC_GetHCLKFreq+0x24>)
 8001d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d58:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	bd98      	pop	{r3, r4, r7, pc}
 8001d60:	080028e8 	.word	0x080028e8

08001d64 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8001d64:	b590      	push	{r4, r7, lr}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	091b      	lsrs	r3, r3, #4
 8001d70:	f003 030f 	and.w	r3, r3, #15
 8001d74:	4a10      	ldr	r2, [pc, #64]	@ (8001db8 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8001d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d7a:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8001d7c:	f7ff f9bb 	bl	80010f6 <LL_RCC_GetAHB3Prescaler>
 8001d80:	4603      	mov	r3, r0
 8001d82:	091b      	lsrs	r3, r3, #4
 8001d84:	f003 030f 	and.w	r3, r3, #15
 8001d88:	4a0c      	ldr	r2, [pc, #48]	@ (8001dbc <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8001d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d94:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	4a09      	ldr	r2, [pc, #36]	@ (8001dc0 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8001d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d9e:	0c9c      	lsrs	r4, r3, #18
 8001da0:	f7fe ff76 	bl	8000c90 <HAL_PWREx_GetVoltageRange>
 8001da4:	4603      	mov	r3, r0
 8001da6:	4619      	mov	r1, r3
 8001da8:	4620      	mov	r0, r4
 8001daa:	f000 f80b 	bl	8001dc4 <RCC_SetFlashLatency>
 8001dae:	4603      	mov	r3, r0
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3714      	adds	r7, #20
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd90      	pop	{r4, r7, pc}
 8001db8:	08002928 	.word	0x08002928
 8001dbc:	080028e8 	.word	0x080028e8
 8001dc0:	431bde83 	.word	0x431bde83

08001dc4 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b08e      	sub	sp, #56	@ 0x38
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8001dce:	4a3a      	ldr	r2, [pc, #232]	@ (8001eb8 <RCC_SetFlashLatency+0xf4>)
 8001dd0:	f107 0320 	add.w	r3, r7, #32
 8001dd4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001dd8:	6018      	str	r0, [r3, #0]
 8001dda:	3304      	adds	r3, #4
 8001ddc:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8001dde:	4a37      	ldr	r2, [pc, #220]	@ (8001ebc <RCC_SetFlashLatency+0xf8>)
 8001de0:	f107 0318 	add.w	r3, r7, #24
 8001de4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001de8:	6018      	str	r0, [r3, #0]
 8001dea:	3304      	adds	r3, #4
 8001dec:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8001dee:	4a34      	ldr	r2, [pc, #208]	@ (8001ec0 <RCC_SetFlashLatency+0xfc>)
 8001df0:	f107 030c 	add.w	r3, r7, #12
 8001df4:	ca07      	ldmia	r2, {r0, r1, r2}
 8001df6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e04:	d11b      	bne.n	8001e3e <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001e06:	2300      	movs	r3, #0
 8001e08:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e0a:	e014      	b.n	8001e36 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8001e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	3338      	adds	r3, #56	@ 0x38
 8001e12:	443b      	add	r3, r7
 8001e14:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001e18:	461a      	mov	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d807      	bhi.n	8001e30 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	3338      	adds	r3, #56	@ 0x38
 8001e26:	443b      	add	r3, r7
 8001e28:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001e2c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8001e2e:	e021      	b.n	8001e74 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e32:	3301      	adds	r3, #1
 8001e34:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d9e7      	bls.n	8001e0c <RCC_SetFlashLatency+0x48>
 8001e3c:	e01a      	b.n	8001e74 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001e3e:	2300      	movs	r3, #0
 8001e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e42:	e014      	b.n	8001e6e <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8001e44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	3338      	adds	r3, #56	@ 0x38
 8001e4a:	443b      	add	r3, r7
 8001e4c:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8001e50:	461a      	mov	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d807      	bhi.n	8001e68 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	3338      	adds	r3, #56	@ 0x38
 8001e5e:	443b      	add	r3, r7
 8001e60:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001e64:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8001e66:	e005      	b.n	8001e74 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001e68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d9e7      	bls.n	8001e44 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e74:	4b13      	ldr	r3, [pc, #76]	@ (8001ec4 <RCC_SetFlashLatency+0x100>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f023 0207 	bic.w	r2, r3, #7
 8001e7c:	4911      	ldr	r1, [pc, #68]	@ (8001ec4 <RCC_SetFlashLatency+0x100>)
 8001e7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e80:	4313      	orrs	r3, r2
 8001e82:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001e84:	f7fe fc00 	bl	8000688 <HAL_GetTick>
 8001e88:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001e8a:	e008      	b.n	8001e9e <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001e8c:	f7fe fbfc 	bl	8000688 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d901      	bls.n	8001e9e <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e007      	b.n	8001eae <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001e9e:	4b09      	ldr	r3, [pc, #36]	@ (8001ec4 <RCC_SetFlashLatency+0x100>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d1ef      	bne.n	8001e8c <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3738      	adds	r7, #56	@ 0x38
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	080028cc 	.word	0x080028cc
 8001ebc:	080028d4 	.word	0x080028d4
 8001ec0:	080028dc 	.word	0x080028dc
 8001ec4:	58004000 	.word	0x58004000

08001ec8 <std>:
 8001ec8:	2300      	movs	r3, #0
 8001eca:	b510      	push	{r4, lr}
 8001ecc:	4604      	mov	r4, r0
 8001ece:	e9c0 3300 	strd	r3, r3, [r0]
 8001ed2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001ed6:	6083      	str	r3, [r0, #8]
 8001ed8:	8181      	strh	r1, [r0, #12]
 8001eda:	6643      	str	r3, [r0, #100]	@ 0x64
 8001edc:	81c2      	strh	r2, [r0, #14]
 8001ede:	6183      	str	r3, [r0, #24]
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	2208      	movs	r2, #8
 8001ee4:	305c      	adds	r0, #92	@ 0x5c
 8001ee6:	f000 f9e7 	bl	80022b8 <memset>
 8001eea:	4b0d      	ldr	r3, [pc, #52]	@ (8001f20 <std+0x58>)
 8001eec:	6263      	str	r3, [r4, #36]	@ 0x24
 8001eee:	4b0d      	ldr	r3, [pc, #52]	@ (8001f24 <std+0x5c>)
 8001ef0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8001f28 <std+0x60>)
 8001ef4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001ef6:	4b0d      	ldr	r3, [pc, #52]	@ (8001f2c <std+0x64>)
 8001ef8:	6323      	str	r3, [r4, #48]	@ 0x30
 8001efa:	4b0d      	ldr	r3, [pc, #52]	@ (8001f30 <std+0x68>)
 8001efc:	6224      	str	r4, [r4, #32]
 8001efe:	429c      	cmp	r4, r3
 8001f00:	d006      	beq.n	8001f10 <std+0x48>
 8001f02:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001f06:	4294      	cmp	r4, r2
 8001f08:	d002      	beq.n	8001f10 <std+0x48>
 8001f0a:	33d0      	adds	r3, #208	@ 0xd0
 8001f0c:	429c      	cmp	r4, r3
 8001f0e:	d105      	bne.n	8001f1c <std+0x54>
 8001f10:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001f14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f18:	f000 ba46 	b.w	80023a8 <__retarget_lock_init_recursive>
 8001f1c:	bd10      	pop	{r4, pc}
 8001f1e:	bf00      	nop
 8001f20:	08002109 	.word	0x08002109
 8001f24:	0800212b 	.word	0x0800212b
 8001f28:	08002163 	.word	0x08002163
 8001f2c:	08002187 	.word	0x08002187
 8001f30:	2000008c 	.word	0x2000008c

08001f34 <stdio_exit_handler>:
 8001f34:	4a02      	ldr	r2, [pc, #8]	@ (8001f40 <stdio_exit_handler+0xc>)
 8001f36:	4903      	ldr	r1, [pc, #12]	@ (8001f44 <stdio_exit_handler+0x10>)
 8001f38:	4803      	ldr	r0, [pc, #12]	@ (8001f48 <stdio_exit_handler+0x14>)
 8001f3a:	f000 b869 	b.w	8002010 <_fwalk_sglue>
 8001f3e:	bf00      	nop
 8001f40:	2000000c 	.word	0x2000000c
 8001f44:	080026a1 	.word	0x080026a1
 8001f48:	2000001c 	.word	0x2000001c

08001f4c <cleanup_stdio>:
 8001f4c:	6841      	ldr	r1, [r0, #4]
 8001f4e:	4b0c      	ldr	r3, [pc, #48]	@ (8001f80 <cleanup_stdio+0x34>)
 8001f50:	4299      	cmp	r1, r3
 8001f52:	b510      	push	{r4, lr}
 8001f54:	4604      	mov	r4, r0
 8001f56:	d001      	beq.n	8001f5c <cleanup_stdio+0x10>
 8001f58:	f000 fba2 	bl	80026a0 <_fflush_r>
 8001f5c:	68a1      	ldr	r1, [r4, #8]
 8001f5e:	4b09      	ldr	r3, [pc, #36]	@ (8001f84 <cleanup_stdio+0x38>)
 8001f60:	4299      	cmp	r1, r3
 8001f62:	d002      	beq.n	8001f6a <cleanup_stdio+0x1e>
 8001f64:	4620      	mov	r0, r4
 8001f66:	f000 fb9b 	bl	80026a0 <_fflush_r>
 8001f6a:	68e1      	ldr	r1, [r4, #12]
 8001f6c:	4b06      	ldr	r3, [pc, #24]	@ (8001f88 <cleanup_stdio+0x3c>)
 8001f6e:	4299      	cmp	r1, r3
 8001f70:	d004      	beq.n	8001f7c <cleanup_stdio+0x30>
 8001f72:	4620      	mov	r0, r4
 8001f74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f78:	f000 bb92 	b.w	80026a0 <_fflush_r>
 8001f7c:	bd10      	pop	{r4, pc}
 8001f7e:	bf00      	nop
 8001f80:	2000008c 	.word	0x2000008c
 8001f84:	200000f4 	.word	0x200000f4
 8001f88:	2000015c 	.word	0x2000015c

08001f8c <global_stdio_init.part.0>:
 8001f8c:	b510      	push	{r4, lr}
 8001f8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001fbc <global_stdio_init.part.0+0x30>)
 8001f90:	4c0b      	ldr	r4, [pc, #44]	@ (8001fc0 <global_stdio_init.part.0+0x34>)
 8001f92:	4a0c      	ldr	r2, [pc, #48]	@ (8001fc4 <global_stdio_init.part.0+0x38>)
 8001f94:	601a      	str	r2, [r3, #0]
 8001f96:	4620      	mov	r0, r4
 8001f98:	2200      	movs	r2, #0
 8001f9a:	2104      	movs	r1, #4
 8001f9c:	f7ff ff94 	bl	8001ec8 <std>
 8001fa0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	2109      	movs	r1, #9
 8001fa8:	f7ff ff8e 	bl	8001ec8 <std>
 8001fac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001fb0:	2202      	movs	r2, #2
 8001fb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001fb6:	2112      	movs	r1, #18
 8001fb8:	f7ff bf86 	b.w	8001ec8 <std>
 8001fbc:	200001c4 	.word	0x200001c4
 8001fc0:	2000008c 	.word	0x2000008c
 8001fc4:	08001f35 	.word	0x08001f35

08001fc8 <__sfp_lock_acquire>:
 8001fc8:	4801      	ldr	r0, [pc, #4]	@ (8001fd0 <__sfp_lock_acquire+0x8>)
 8001fca:	f000 b9ee 	b.w	80023aa <__retarget_lock_acquire_recursive>
 8001fce:	bf00      	nop
 8001fd0:	200001cd 	.word	0x200001cd

08001fd4 <__sfp_lock_release>:
 8001fd4:	4801      	ldr	r0, [pc, #4]	@ (8001fdc <__sfp_lock_release+0x8>)
 8001fd6:	f000 b9e9 	b.w	80023ac <__retarget_lock_release_recursive>
 8001fda:	bf00      	nop
 8001fdc:	200001cd 	.word	0x200001cd

08001fe0 <__sinit>:
 8001fe0:	b510      	push	{r4, lr}
 8001fe2:	4604      	mov	r4, r0
 8001fe4:	f7ff fff0 	bl	8001fc8 <__sfp_lock_acquire>
 8001fe8:	6a23      	ldr	r3, [r4, #32]
 8001fea:	b11b      	cbz	r3, 8001ff4 <__sinit+0x14>
 8001fec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ff0:	f7ff bff0 	b.w	8001fd4 <__sfp_lock_release>
 8001ff4:	4b04      	ldr	r3, [pc, #16]	@ (8002008 <__sinit+0x28>)
 8001ff6:	6223      	str	r3, [r4, #32]
 8001ff8:	4b04      	ldr	r3, [pc, #16]	@ (800200c <__sinit+0x2c>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d1f5      	bne.n	8001fec <__sinit+0xc>
 8002000:	f7ff ffc4 	bl	8001f8c <global_stdio_init.part.0>
 8002004:	e7f2      	b.n	8001fec <__sinit+0xc>
 8002006:	bf00      	nop
 8002008:	08001f4d 	.word	0x08001f4d
 800200c:	200001c4 	.word	0x200001c4

08002010 <_fwalk_sglue>:
 8002010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002014:	4607      	mov	r7, r0
 8002016:	4688      	mov	r8, r1
 8002018:	4614      	mov	r4, r2
 800201a:	2600      	movs	r6, #0
 800201c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002020:	f1b9 0901 	subs.w	r9, r9, #1
 8002024:	d505      	bpl.n	8002032 <_fwalk_sglue+0x22>
 8002026:	6824      	ldr	r4, [r4, #0]
 8002028:	2c00      	cmp	r4, #0
 800202a:	d1f7      	bne.n	800201c <_fwalk_sglue+0xc>
 800202c:	4630      	mov	r0, r6
 800202e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002032:	89ab      	ldrh	r3, [r5, #12]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d907      	bls.n	8002048 <_fwalk_sglue+0x38>
 8002038:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800203c:	3301      	adds	r3, #1
 800203e:	d003      	beq.n	8002048 <_fwalk_sglue+0x38>
 8002040:	4629      	mov	r1, r5
 8002042:	4638      	mov	r0, r7
 8002044:	47c0      	blx	r8
 8002046:	4306      	orrs	r6, r0
 8002048:	3568      	adds	r5, #104	@ 0x68
 800204a:	e7e9      	b.n	8002020 <_fwalk_sglue+0x10>

0800204c <_puts_r>:
 800204c:	6a03      	ldr	r3, [r0, #32]
 800204e:	b570      	push	{r4, r5, r6, lr}
 8002050:	6884      	ldr	r4, [r0, #8]
 8002052:	4605      	mov	r5, r0
 8002054:	460e      	mov	r6, r1
 8002056:	b90b      	cbnz	r3, 800205c <_puts_r+0x10>
 8002058:	f7ff ffc2 	bl	8001fe0 <__sinit>
 800205c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800205e:	07db      	lsls	r3, r3, #31
 8002060:	d405      	bmi.n	800206e <_puts_r+0x22>
 8002062:	89a3      	ldrh	r3, [r4, #12]
 8002064:	0598      	lsls	r0, r3, #22
 8002066:	d402      	bmi.n	800206e <_puts_r+0x22>
 8002068:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800206a:	f000 f99e 	bl	80023aa <__retarget_lock_acquire_recursive>
 800206e:	89a3      	ldrh	r3, [r4, #12]
 8002070:	0719      	lsls	r1, r3, #28
 8002072:	d502      	bpl.n	800207a <_puts_r+0x2e>
 8002074:	6923      	ldr	r3, [r4, #16]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d135      	bne.n	80020e6 <_puts_r+0x9a>
 800207a:	4621      	mov	r1, r4
 800207c:	4628      	mov	r0, r5
 800207e:	f000 f8c5 	bl	800220c <__swsetup_r>
 8002082:	b380      	cbz	r0, 80020e6 <_puts_r+0x9a>
 8002084:	f04f 35ff 	mov.w	r5, #4294967295
 8002088:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800208a:	07da      	lsls	r2, r3, #31
 800208c:	d405      	bmi.n	800209a <_puts_r+0x4e>
 800208e:	89a3      	ldrh	r3, [r4, #12]
 8002090:	059b      	lsls	r3, r3, #22
 8002092:	d402      	bmi.n	800209a <_puts_r+0x4e>
 8002094:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002096:	f000 f989 	bl	80023ac <__retarget_lock_release_recursive>
 800209a:	4628      	mov	r0, r5
 800209c:	bd70      	pop	{r4, r5, r6, pc}
 800209e:	2b00      	cmp	r3, #0
 80020a0:	da04      	bge.n	80020ac <_puts_r+0x60>
 80020a2:	69a2      	ldr	r2, [r4, #24]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	dc17      	bgt.n	80020d8 <_puts_r+0x8c>
 80020a8:	290a      	cmp	r1, #10
 80020aa:	d015      	beq.n	80020d8 <_puts_r+0x8c>
 80020ac:	6823      	ldr	r3, [r4, #0]
 80020ae:	1c5a      	adds	r2, r3, #1
 80020b0:	6022      	str	r2, [r4, #0]
 80020b2:	7019      	strb	r1, [r3, #0]
 80020b4:	68a3      	ldr	r3, [r4, #8]
 80020b6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80020ba:	3b01      	subs	r3, #1
 80020bc:	60a3      	str	r3, [r4, #8]
 80020be:	2900      	cmp	r1, #0
 80020c0:	d1ed      	bne.n	800209e <_puts_r+0x52>
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	da11      	bge.n	80020ea <_puts_r+0x9e>
 80020c6:	4622      	mov	r2, r4
 80020c8:	210a      	movs	r1, #10
 80020ca:	4628      	mov	r0, r5
 80020cc:	f000 f85f 	bl	800218e <__swbuf_r>
 80020d0:	3001      	adds	r0, #1
 80020d2:	d0d7      	beq.n	8002084 <_puts_r+0x38>
 80020d4:	250a      	movs	r5, #10
 80020d6:	e7d7      	b.n	8002088 <_puts_r+0x3c>
 80020d8:	4622      	mov	r2, r4
 80020da:	4628      	mov	r0, r5
 80020dc:	f000 f857 	bl	800218e <__swbuf_r>
 80020e0:	3001      	adds	r0, #1
 80020e2:	d1e7      	bne.n	80020b4 <_puts_r+0x68>
 80020e4:	e7ce      	b.n	8002084 <_puts_r+0x38>
 80020e6:	3e01      	subs	r6, #1
 80020e8:	e7e4      	b.n	80020b4 <_puts_r+0x68>
 80020ea:	6823      	ldr	r3, [r4, #0]
 80020ec:	1c5a      	adds	r2, r3, #1
 80020ee:	6022      	str	r2, [r4, #0]
 80020f0:	220a      	movs	r2, #10
 80020f2:	701a      	strb	r2, [r3, #0]
 80020f4:	e7ee      	b.n	80020d4 <_puts_r+0x88>
	...

080020f8 <puts>:
 80020f8:	4b02      	ldr	r3, [pc, #8]	@ (8002104 <puts+0xc>)
 80020fa:	4601      	mov	r1, r0
 80020fc:	6818      	ldr	r0, [r3, #0]
 80020fe:	f7ff bfa5 	b.w	800204c <_puts_r>
 8002102:	bf00      	nop
 8002104:	20000018 	.word	0x20000018

08002108 <__sread>:
 8002108:	b510      	push	{r4, lr}
 800210a:	460c      	mov	r4, r1
 800210c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002110:	f000 f8fc 	bl	800230c <_read_r>
 8002114:	2800      	cmp	r0, #0
 8002116:	bfab      	itete	ge
 8002118:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800211a:	89a3      	ldrhlt	r3, [r4, #12]
 800211c:	181b      	addge	r3, r3, r0
 800211e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002122:	bfac      	ite	ge
 8002124:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002126:	81a3      	strhlt	r3, [r4, #12]
 8002128:	bd10      	pop	{r4, pc}

0800212a <__swrite>:
 800212a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800212e:	461f      	mov	r7, r3
 8002130:	898b      	ldrh	r3, [r1, #12]
 8002132:	05db      	lsls	r3, r3, #23
 8002134:	4605      	mov	r5, r0
 8002136:	460c      	mov	r4, r1
 8002138:	4616      	mov	r6, r2
 800213a:	d505      	bpl.n	8002148 <__swrite+0x1e>
 800213c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002140:	2302      	movs	r3, #2
 8002142:	2200      	movs	r2, #0
 8002144:	f000 f8d0 	bl	80022e8 <_lseek_r>
 8002148:	89a3      	ldrh	r3, [r4, #12]
 800214a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800214e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002152:	81a3      	strh	r3, [r4, #12]
 8002154:	4632      	mov	r2, r6
 8002156:	463b      	mov	r3, r7
 8002158:	4628      	mov	r0, r5
 800215a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800215e:	f000 b8e7 	b.w	8002330 <_write_r>

08002162 <__sseek>:
 8002162:	b510      	push	{r4, lr}
 8002164:	460c      	mov	r4, r1
 8002166:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800216a:	f000 f8bd 	bl	80022e8 <_lseek_r>
 800216e:	1c43      	adds	r3, r0, #1
 8002170:	89a3      	ldrh	r3, [r4, #12]
 8002172:	bf15      	itete	ne
 8002174:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002176:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800217a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800217e:	81a3      	strheq	r3, [r4, #12]
 8002180:	bf18      	it	ne
 8002182:	81a3      	strhne	r3, [r4, #12]
 8002184:	bd10      	pop	{r4, pc}

08002186 <__sclose>:
 8002186:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800218a:	f000 b89d 	b.w	80022c8 <_close_r>

0800218e <__swbuf_r>:
 800218e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002190:	460e      	mov	r6, r1
 8002192:	4614      	mov	r4, r2
 8002194:	4605      	mov	r5, r0
 8002196:	b118      	cbz	r0, 80021a0 <__swbuf_r+0x12>
 8002198:	6a03      	ldr	r3, [r0, #32]
 800219a:	b90b      	cbnz	r3, 80021a0 <__swbuf_r+0x12>
 800219c:	f7ff ff20 	bl	8001fe0 <__sinit>
 80021a0:	69a3      	ldr	r3, [r4, #24]
 80021a2:	60a3      	str	r3, [r4, #8]
 80021a4:	89a3      	ldrh	r3, [r4, #12]
 80021a6:	071a      	lsls	r2, r3, #28
 80021a8:	d501      	bpl.n	80021ae <__swbuf_r+0x20>
 80021aa:	6923      	ldr	r3, [r4, #16]
 80021ac:	b943      	cbnz	r3, 80021c0 <__swbuf_r+0x32>
 80021ae:	4621      	mov	r1, r4
 80021b0:	4628      	mov	r0, r5
 80021b2:	f000 f82b 	bl	800220c <__swsetup_r>
 80021b6:	b118      	cbz	r0, 80021c0 <__swbuf_r+0x32>
 80021b8:	f04f 37ff 	mov.w	r7, #4294967295
 80021bc:	4638      	mov	r0, r7
 80021be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021c0:	6823      	ldr	r3, [r4, #0]
 80021c2:	6922      	ldr	r2, [r4, #16]
 80021c4:	1a98      	subs	r0, r3, r2
 80021c6:	6963      	ldr	r3, [r4, #20]
 80021c8:	b2f6      	uxtb	r6, r6
 80021ca:	4283      	cmp	r3, r0
 80021cc:	4637      	mov	r7, r6
 80021ce:	dc05      	bgt.n	80021dc <__swbuf_r+0x4e>
 80021d0:	4621      	mov	r1, r4
 80021d2:	4628      	mov	r0, r5
 80021d4:	f000 fa64 	bl	80026a0 <_fflush_r>
 80021d8:	2800      	cmp	r0, #0
 80021da:	d1ed      	bne.n	80021b8 <__swbuf_r+0x2a>
 80021dc:	68a3      	ldr	r3, [r4, #8]
 80021de:	3b01      	subs	r3, #1
 80021e0:	60a3      	str	r3, [r4, #8]
 80021e2:	6823      	ldr	r3, [r4, #0]
 80021e4:	1c5a      	adds	r2, r3, #1
 80021e6:	6022      	str	r2, [r4, #0]
 80021e8:	701e      	strb	r6, [r3, #0]
 80021ea:	6962      	ldr	r2, [r4, #20]
 80021ec:	1c43      	adds	r3, r0, #1
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d004      	beq.n	80021fc <__swbuf_r+0x6e>
 80021f2:	89a3      	ldrh	r3, [r4, #12]
 80021f4:	07db      	lsls	r3, r3, #31
 80021f6:	d5e1      	bpl.n	80021bc <__swbuf_r+0x2e>
 80021f8:	2e0a      	cmp	r6, #10
 80021fa:	d1df      	bne.n	80021bc <__swbuf_r+0x2e>
 80021fc:	4621      	mov	r1, r4
 80021fe:	4628      	mov	r0, r5
 8002200:	f000 fa4e 	bl	80026a0 <_fflush_r>
 8002204:	2800      	cmp	r0, #0
 8002206:	d0d9      	beq.n	80021bc <__swbuf_r+0x2e>
 8002208:	e7d6      	b.n	80021b8 <__swbuf_r+0x2a>
	...

0800220c <__swsetup_r>:
 800220c:	b538      	push	{r3, r4, r5, lr}
 800220e:	4b29      	ldr	r3, [pc, #164]	@ (80022b4 <__swsetup_r+0xa8>)
 8002210:	4605      	mov	r5, r0
 8002212:	6818      	ldr	r0, [r3, #0]
 8002214:	460c      	mov	r4, r1
 8002216:	b118      	cbz	r0, 8002220 <__swsetup_r+0x14>
 8002218:	6a03      	ldr	r3, [r0, #32]
 800221a:	b90b      	cbnz	r3, 8002220 <__swsetup_r+0x14>
 800221c:	f7ff fee0 	bl	8001fe0 <__sinit>
 8002220:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002224:	0719      	lsls	r1, r3, #28
 8002226:	d422      	bmi.n	800226e <__swsetup_r+0x62>
 8002228:	06da      	lsls	r2, r3, #27
 800222a:	d407      	bmi.n	800223c <__swsetup_r+0x30>
 800222c:	2209      	movs	r2, #9
 800222e:	602a      	str	r2, [r5, #0]
 8002230:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002234:	81a3      	strh	r3, [r4, #12]
 8002236:	f04f 30ff 	mov.w	r0, #4294967295
 800223a:	e033      	b.n	80022a4 <__swsetup_r+0x98>
 800223c:	0758      	lsls	r0, r3, #29
 800223e:	d512      	bpl.n	8002266 <__swsetup_r+0x5a>
 8002240:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002242:	b141      	cbz	r1, 8002256 <__swsetup_r+0x4a>
 8002244:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002248:	4299      	cmp	r1, r3
 800224a:	d002      	beq.n	8002252 <__swsetup_r+0x46>
 800224c:	4628      	mov	r0, r5
 800224e:	f000 f8af 	bl	80023b0 <_free_r>
 8002252:	2300      	movs	r3, #0
 8002254:	6363      	str	r3, [r4, #52]	@ 0x34
 8002256:	89a3      	ldrh	r3, [r4, #12]
 8002258:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800225c:	81a3      	strh	r3, [r4, #12]
 800225e:	2300      	movs	r3, #0
 8002260:	6063      	str	r3, [r4, #4]
 8002262:	6923      	ldr	r3, [r4, #16]
 8002264:	6023      	str	r3, [r4, #0]
 8002266:	89a3      	ldrh	r3, [r4, #12]
 8002268:	f043 0308 	orr.w	r3, r3, #8
 800226c:	81a3      	strh	r3, [r4, #12]
 800226e:	6923      	ldr	r3, [r4, #16]
 8002270:	b94b      	cbnz	r3, 8002286 <__swsetup_r+0x7a>
 8002272:	89a3      	ldrh	r3, [r4, #12]
 8002274:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002278:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800227c:	d003      	beq.n	8002286 <__swsetup_r+0x7a>
 800227e:	4621      	mov	r1, r4
 8002280:	4628      	mov	r0, r5
 8002282:	f000 fa5b 	bl	800273c <__smakebuf_r>
 8002286:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800228a:	f013 0201 	ands.w	r2, r3, #1
 800228e:	d00a      	beq.n	80022a6 <__swsetup_r+0x9a>
 8002290:	2200      	movs	r2, #0
 8002292:	60a2      	str	r2, [r4, #8]
 8002294:	6962      	ldr	r2, [r4, #20]
 8002296:	4252      	negs	r2, r2
 8002298:	61a2      	str	r2, [r4, #24]
 800229a:	6922      	ldr	r2, [r4, #16]
 800229c:	b942      	cbnz	r2, 80022b0 <__swsetup_r+0xa4>
 800229e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80022a2:	d1c5      	bne.n	8002230 <__swsetup_r+0x24>
 80022a4:	bd38      	pop	{r3, r4, r5, pc}
 80022a6:	0799      	lsls	r1, r3, #30
 80022a8:	bf58      	it	pl
 80022aa:	6962      	ldrpl	r2, [r4, #20]
 80022ac:	60a2      	str	r2, [r4, #8]
 80022ae:	e7f4      	b.n	800229a <__swsetup_r+0x8e>
 80022b0:	2000      	movs	r0, #0
 80022b2:	e7f7      	b.n	80022a4 <__swsetup_r+0x98>
 80022b4:	20000018 	.word	0x20000018

080022b8 <memset>:
 80022b8:	4402      	add	r2, r0
 80022ba:	4603      	mov	r3, r0
 80022bc:	4293      	cmp	r3, r2
 80022be:	d100      	bne.n	80022c2 <memset+0xa>
 80022c0:	4770      	bx	lr
 80022c2:	f803 1b01 	strb.w	r1, [r3], #1
 80022c6:	e7f9      	b.n	80022bc <memset+0x4>

080022c8 <_close_r>:
 80022c8:	b538      	push	{r3, r4, r5, lr}
 80022ca:	4d06      	ldr	r5, [pc, #24]	@ (80022e4 <_close_r+0x1c>)
 80022cc:	2300      	movs	r3, #0
 80022ce:	4604      	mov	r4, r0
 80022d0:	4608      	mov	r0, r1
 80022d2:	602b      	str	r3, [r5, #0]
 80022d4:	f7fe f8d6 	bl	8000484 <_close>
 80022d8:	1c43      	adds	r3, r0, #1
 80022da:	d102      	bne.n	80022e2 <_close_r+0x1a>
 80022dc:	682b      	ldr	r3, [r5, #0]
 80022de:	b103      	cbz	r3, 80022e2 <_close_r+0x1a>
 80022e0:	6023      	str	r3, [r4, #0]
 80022e2:	bd38      	pop	{r3, r4, r5, pc}
 80022e4:	200001c8 	.word	0x200001c8

080022e8 <_lseek_r>:
 80022e8:	b538      	push	{r3, r4, r5, lr}
 80022ea:	4d07      	ldr	r5, [pc, #28]	@ (8002308 <_lseek_r+0x20>)
 80022ec:	4604      	mov	r4, r0
 80022ee:	4608      	mov	r0, r1
 80022f0:	4611      	mov	r1, r2
 80022f2:	2200      	movs	r2, #0
 80022f4:	602a      	str	r2, [r5, #0]
 80022f6:	461a      	mov	r2, r3
 80022f8:	f7fe f8e8 	bl	80004cc <_lseek>
 80022fc:	1c43      	adds	r3, r0, #1
 80022fe:	d102      	bne.n	8002306 <_lseek_r+0x1e>
 8002300:	682b      	ldr	r3, [r5, #0]
 8002302:	b103      	cbz	r3, 8002306 <_lseek_r+0x1e>
 8002304:	6023      	str	r3, [r4, #0]
 8002306:	bd38      	pop	{r3, r4, r5, pc}
 8002308:	200001c8 	.word	0x200001c8

0800230c <_read_r>:
 800230c:	b538      	push	{r3, r4, r5, lr}
 800230e:	4d07      	ldr	r5, [pc, #28]	@ (800232c <_read_r+0x20>)
 8002310:	4604      	mov	r4, r0
 8002312:	4608      	mov	r0, r1
 8002314:	4611      	mov	r1, r2
 8002316:	2200      	movs	r2, #0
 8002318:	602a      	str	r2, [r5, #0]
 800231a:	461a      	mov	r2, r3
 800231c:	f7fe f879 	bl	8000412 <_read>
 8002320:	1c43      	adds	r3, r0, #1
 8002322:	d102      	bne.n	800232a <_read_r+0x1e>
 8002324:	682b      	ldr	r3, [r5, #0]
 8002326:	b103      	cbz	r3, 800232a <_read_r+0x1e>
 8002328:	6023      	str	r3, [r4, #0]
 800232a:	bd38      	pop	{r3, r4, r5, pc}
 800232c:	200001c8 	.word	0x200001c8

08002330 <_write_r>:
 8002330:	b538      	push	{r3, r4, r5, lr}
 8002332:	4d07      	ldr	r5, [pc, #28]	@ (8002350 <_write_r+0x20>)
 8002334:	4604      	mov	r4, r0
 8002336:	4608      	mov	r0, r1
 8002338:	4611      	mov	r1, r2
 800233a:	2200      	movs	r2, #0
 800233c:	602a      	str	r2, [r5, #0]
 800233e:	461a      	mov	r2, r3
 8002340:	f7fe f884 	bl	800044c <_write>
 8002344:	1c43      	adds	r3, r0, #1
 8002346:	d102      	bne.n	800234e <_write_r+0x1e>
 8002348:	682b      	ldr	r3, [r5, #0]
 800234a:	b103      	cbz	r3, 800234e <_write_r+0x1e>
 800234c:	6023      	str	r3, [r4, #0]
 800234e:	bd38      	pop	{r3, r4, r5, pc}
 8002350:	200001c8 	.word	0x200001c8

08002354 <__errno>:
 8002354:	4b01      	ldr	r3, [pc, #4]	@ (800235c <__errno+0x8>)
 8002356:	6818      	ldr	r0, [r3, #0]
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	20000018 	.word	0x20000018

08002360 <__libc_init_array>:
 8002360:	b570      	push	{r4, r5, r6, lr}
 8002362:	4d0d      	ldr	r5, [pc, #52]	@ (8002398 <__libc_init_array+0x38>)
 8002364:	4c0d      	ldr	r4, [pc, #52]	@ (800239c <__libc_init_array+0x3c>)
 8002366:	1b64      	subs	r4, r4, r5
 8002368:	10a4      	asrs	r4, r4, #2
 800236a:	2600      	movs	r6, #0
 800236c:	42a6      	cmp	r6, r4
 800236e:	d109      	bne.n	8002384 <__libc_init_array+0x24>
 8002370:	4d0b      	ldr	r5, [pc, #44]	@ (80023a0 <__libc_init_array+0x40>)
 8002372:	4c0c      	ldr	r4, [pc, #48]	@ (80023a4 <__libc_init_array+0x44>)
 8002374:	f000 fa50 	bl	8002818 <_init>
 8002378:	1b64      	subs	r4, r4, r5
 800237a:	10a4      	asrs	r4, r4, #2
 800237c:	2600      	movs	r6, #0
 800237e:	42a6      	cmp	r6, r4
 8002380:	d105      	bne.n	800238e <__libc_init_array+0x2e>
 8002382:	bd70      	pop	{r4, r5, r6, pc}
 8002384:	f855 3b04 	ldr.w	r3, [r5], #4
 8002388:	4798      	blx	r3
 800238a:	3601      	adds	r6, #1
 800238c:	e7ee      	b.n	800236c <__libc_init_array+0xc>
 800238e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002392:	4798      	blx	r3
 8002394:	3601      	adds	r6, #1
 8002396:	e7f2      	b.n	800237e <__libc_init_array+0x1e>
 8002398:	08002968 	.word	0x08002968
 800239c:	08002968 	.word	0x08002968
 80023a0:	08002968 	.word	0x08002968
 80023a4:	0800296c 	.word	0x0800296c

080023a8 <__retarget_lock_init_recursive>:
 80023a8:	4770      	bx	lr

080023aa <__retarget_lock_acquire_recursive>:
 80023aa:	4770      	bx	lr

080023ac <__retarget_lock_release_recursive>:
 80023ac:	4770      	bx	lr
	...

080023b0 <_free_r>:
 80023b0:	b538      	push	{r3, r4, r5, lr}
 80023b2:	4605      	mov	r5, r0
 80023b4:	2900      	cmp	r1, #0
 80023b6:	d041      	beq.n	800243c <_free_r+0x8c>
 80023b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80023bc:	1f0c      	subs	r4, r1, #4
 80023be:	2b00      	cmp	r3, #0
 80023c0:	bfb8      	it	lt
 80023c2:	18e4      	addlt	r4, r4, r3
 80023c4:	f000 f8e0 	bl	8002588 <__malloc_lock>
 80023c8:	4a1d      	ldr	r2, [pc, #116]	@ (8002440 <_free_r+0x90>)
 80023ca:	6813      	ldr	r3, [r2, #0]
 80023cc:	b933      	cbnz	r3, 80023dc <_free_r+0x2c>
 80023ce:	6063      	str	r3, [r4, #4]
 80023d0:	6014      	str	r4, [r2, #0]
 80023d2:	4628      	mov	r0, r5
 80023d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80023d8:	f000 b8dc 	b.w	8002594 <__malloc_unlock>
 80023dc:	42a3      	cmp	r3, r4
 80023de:	d908      	bls.n	80023f2 <_free_r+0x42>
 80023e0:	6820      	ldr	r0, [r4, #0]
 80023e2:	1821      	adds	r1, r4, r0
 80023e4:	428b      	cmp	r3, r1
 80023e6:	bf01      	itttt	eq
 80023e8:	6819      	ldreq	r1, [r3, #0]
 80023ea:	685b      	ldreq	r3, [r3, #4]
 80023ec:	1809      	addeq	r1, r1, r0
 80023ee:	6021      	streq	r1, [r4, #0]
 80023f0:	e7ed      	b.n	80023ce <_free_r+0x1e>
 80023f2:	461a      	mov	r2, r3
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	b10b      	cbz	r3, 80023fc <_free_r+0x4c>
 80023f8:	42a3      	cmp	r3, r4
 80023fa:	d9fa      	bls.n	80023f2 <_free_r+0x42>
 80023fc:	6811      	ldr	r1, [r2, #0]
 80023fe:	1850      	adds	r0, r2, r1
 8002400:	42a0      	cmp	r0, r4
 8002402:	d10b      	bne.n	800241c <_free_r+0x6c>
 8002404:	6820      	ldr	r0, [r4, #0]
 8002406:	4401      	add	r1, r0
 8002408:	1850      	adds	r0, r2, r1
 800240a:	4283      	cmp	r3, r0
 800240c:	6011      	str	r1, [r2, #0]
 800240e:	d1e0      	bne.n	80023d2 <_free_r+0x22>
 8002410:	6818      	ldr	r0, [r3, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	6053      	str	r3, [r2, #4]
 8002416:	4408      	add	r0, r1
 8002418:	6010      	str	r0, [r2, #0]
 800241a:	e7da      	b.n	80023d2 <_free_r+0x22>
 800241c:	d902      	bls.n	8002424 <_free_r+0x74>
 800241e:	230c      	movs	r3, #12
 8002420:	602b      	str	r3, [r5, #0]
 8002422:	e7d6      	b.n	80023d2 <_free_r+0x22>
 8002424:	6820      	ldr	r0, [r4, #0]
 8002426:	1821      	adds	r1, r4, r0
 8002428:	428b      	cmp	r3, r1
 800242a:	bf04      	itt	eq
 800242c:	6819      	ldreq	r1, [r3, #0]
 800242e:	685b      	ldreq	r3, [r3, #4]
 8002430:	6063      	str	r3, [r4, #4]
 8002432:	bf04      	itt	eq
 8002434:	1809      	addeq	r1, r1, r0
 8002436:	6021      	streq	r1, [r4, #0]
 8002438:	6054      	str	r4, [r2, #4]
 800243a:	e7ca      	b.n	80023d2 <_free_r+0x22>
 800243c:	bd38      	pop	{r3, r4, r5, pc}
 800243e:	bf00      	nop
 8002440:	200001d4 	.word	0x200001d4

08002444 <sbrk_aligned>:
 8002444:	b570      	push	{r4, r5, r6, lr}
 8002446:	4e0f      	ldr	r6, [pc, #60]	@ (8002484 <sbrk_aligned+0x40>)
 8002448:	460c      	mov	r4, r1
 800244a:	6831      	ldr	r1, [r6, #0]
 800244c:	4605      	mov	r5, r0
 800244e:	b911      	cbnz	r1, 8002456 <sbrk_aligned+0x12>
 8002450:	f000 f9d2 	bl	80027f8 <_sbrk_r>
 8002454:	6030      	str	r0, [r6, #0]
 8002456:	4621      	mov	r1, r4
 8002458:	4628      	mov	r0, r5
 800245a:	f000 f9cd 	bl	80027f8 <_sbrk_r>
 800245e:	1c43      	adds	r3, r0, #1
 8002460:	d103      	bne.n	800246a <sbrk_aligned+0x26>
 8002462:	f04f 34ff 	mov.w	r4, #4294967295
 8002466:	4620      	mov	r0, r4
 8002468:	bd70      	pop	{r4, r5, r6, pc}
 800246a:	1cc4      	adds	r4, r0, #3
 800246c:	f024 0403 	bic.w	r4, r4, #3
 8002470:	42a0      	cmp	r0, r4
 8002472:	d0f8      	beq.n	8002466 <sbrk_aligned+0x22>
 8002474:	1a21      	subs	r1, r4, r0
 8002476:	4628      	mov	r0, r5
 8002478:	f000 f9be 	bl	80027f8 <_sbrk_r>
 800247c:	3001      	adds	r0, #1
 800247e:	d1f2      	bne.n	8002466 <sbrk_aligned+0x22>
 8002480:	e7ef      	b.n	8002462 <sbrk_aligned+0x1e>
 8002482:	bf00      	nop
 8002484:	200001d0 	.word	0x200001d0

08002488 <_malloc_r>:
 8002488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800248c:	1ccd      	adds	r5, r1, #3
 800248e:	f025 0503 	bic.w	r5, r5, #3
 8002492:	3508      	adds	r5, #8
 8002494:	2d0c      	cmp	r5, #12
 8002496:	bf38      	it	cc
 8002498:	250c      	movcc	r5, #12
 800249a:	2d00      	cmp	r5, #0
 800249c:	4606      	mov	r6, r0
 800249e:	db01      	blt.n	80024a4 <_malloc_r+0x1c>
 80024a0:	42a9      	cmp	r1, r5
 80024a2:	d904      	bls.n	80024ae <_malloc_r+0x26>
 80024a4:	230c      	movs	r3, #12
 80024a6:	6033      	str	r3, [r6, #0]
 80024a8:	2000      	movs	r0, #0
 80024aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80024ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002584 <_malloc_r+0xfc>
 80024b2:	f000 f869 	bl	8002588 <__malloc_lock>
 80024b6:	f8d8 3000 	ldr.w	r3, [r8]
 80024ba:	461c      	mov	r4, r3
 80024bc:	bb44      	cbnz	r4, 8002510 <_malloc_r+0x88>
 80024be:	4629      	mov	r1, r5
 80024c0:	4630      	mov	r0, r6
 80024c2:	f7ff ffbf 	bl	8002444 <sbrk_aligned>
 80024c6:	1c43      	adds	r3, r0, #1
 80024c8:	4604      	mov	r4, r0
 80024ca:	d158      	bne.n	800257e <_malloc_r+0xf6>
 80024cc:	f8d8 4000 	ldr.w	r4, [r8]
 80024d0:	4627      	mov	r7, r4
 80024d2:	2f00      	cmp	r7, #0
 80024d4:	d143      	bne.n	800255e <_malloc_r+0xd6>
 80024d6:	2c00      	cmp	r4, #0
 80024d8:	d04b      	beq.n	8002572 <_malloc_r+0xea>
 80024da:	6823      	ldr	r3, [r4, #0]
 80024dc:	4639      	mov	r1, r7
 80024de:	4630      	mov	r0, r6
 80024e0:	eb04 0903 	add.w	r9, r4, r3
 80024e4:	f000 f988 	bl	80027f8 <_sbrk_r>
 80024e8:	4581      	cmp	r9, r0
 80024ea:	d142      	bne.n	8002572 <_malloc_r+0xea>
 80024ec:	6821      	ldr	r1, [r4, #0]
 80024ee:	1a6d      	subs	r5, r5, r1
 80024f0:	4629      	mov	r1, r5
 80024f2:	4630      	mov	r0, r6
 80024f4:	f7ff ffa6 	bl	8002444 <sbrk_aligned>
 80024f8:	3001      	adds	r0, #1
 80024fa:	d03a      	beq.n	8002572 <_malloc_r+0xea>
 80024fc:	6823      	ldr	r3, [r4, #0]
 80024fe:	442b      	add	r3, r5
 8002500:	6023      	str	r3, [r4, #0]
 8002502:	f8d8 3000 	ldr.w	r3, [r8]
 8002506:	685a      	ldr	r2, [r3, #4]
 8002508:	bb62      	cbnz	r2, 8002564 <_malloc_r+0xdc>
 800250a:	f8c8 7000 	str.w	r7, [r8]
 800250e:	e00f      	b.n	8002530 <_malloc_r+0xa8>
 8002510:	6822      	ldr	r2, [r4, #0]
 8002512:	1b52      	subs	r2, r2, r5
 8002514:	d420      	bmi.n	8002558 <_malloc_r+0xd0>
 8002516:	2a0b      	cmp	r2, #11
 8002518:	d917      	bls.n	800254a <_malloc_r+0xc2>
 800251a:	1961      	adds	r1, r4, r5
 800251c:	42a3      	cmp	r3, r4
 800251e:	6025      	str	r5, [r4, #0]
 8002520:	bf18      	it	ne
 8002522:	6059      	strne	r1, [r3, #4]
 8002524:	6863      	ldr	r3, [r4, #4]
 8002526:	bf08      	it	eq
 8002528:	f8c8 1000 	streq.w	r1, [r8]
 800252c:	5162      	str	r2, [r4, r5]
 800252e:	604b      	str	r3, [r1, #4]
 8002530:	4630      	mov	r0, r6
 8002532:	f000 f82f 	bl	8002594 <__malloc_unlock>
 8002536:	f104 000b 	add.w	r0, r4, #11
 800253a:	1d23      	adds	r3, r4, #4
 800253c:	f020 0007 	bic.w	r0, r0, #7
 8002540:	1ac2      	subs	r2, r0, r3
 8002542:	bf1c      	itt	ne
 8002544:	1a1b      	subne	r3, r3, r0
 8002546:	50a3      	strne	r3, [r4, r2]
 8002548:	e7af      	b.n	80024aa <_malloc_r+0x22>
 800254a:	6862      	ldr	r2, [r4, #4]
 800254c:	42a3      	cmp	r3, r4
 800254e:	bf0c      	ite	eq
 8002550:	f8c8 2000 	streq.w	r2, [r8]
 8002554:	605a      	strne	r2, [r3, #4]
 8002556:	e7eb      	b.n	8002530 <_malloc_r+0xa8>
 8002558:	4623      	mov	r3, r4
 800255a:	6864      	ldr	r4, [r4, #4]
 800255c:	e7ae      	b.n	80024bc <_malloc_r+0x34>
 800255e:	463c      	mov	r4, r7
 8002560:	687f      	ldr	r7, [r7, #4]
 8002562:	e7b6      	b.n	80024d2 <_malloc_r+0x4a>
 8002564:	461a      	mov	r2, r3
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	42a3      	cmp	r3, r4
 800256a:	d1fb      	bne.n	8002564 <_malloc_r+0xdc>
 800256c:	2300      	movs	r3, #0
 800256e:	6053      	str	r3, [r2, #4]
 8002570:	e7de      	b.n	8002530 <_malloc_r+0xa8>
 8002572:	230c      	movs	r3, #12
 8002574:	6033      	str	r3, [r6, #0]
 8002576:	4630      	mov	r0, r6
 8002578:	f000 f80c 	bl	8002594 <__malloc_unlock>
 800257c:	e794      	b.n	80024a8 <_malloc_r+0x20>
 800257e:	6005      	str	r5, [r0, #0]
 8002580:	e7d6      	b.n	8002530 <_malloc_r+0xa8>
 8002582:	bf00      	nop
 8002584:	200001d4 	.word	0x200001d4

08002588 <__malloc_lock>:
 8002588:	4801      	ldr	r0, [pc, #4]	@ (8002590 <__malloc_lock+0x8>)
 800258a:	f7ff bf0e 	b.w	80023aa <__retarget_lock_acquire_recursive>
 800258e:	bf00      	nop
 8002590:	200001cc 	.word	0x200001cc

08002594 <__malloc_unlock>:
 8002594:	4801      	ldr	r0, [pc, #4]	@ (800259c <__malloc_unlock+0x8>)
 8002596:	f7ff bf09 	b.w	80023ac <__retarget_lock_release_recursive>
 800259a:	bf00      	nop
 800259c:	200001cc 	.word	0x200001cc

080025a0 <__sflush_r>:
 80025a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80025a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025a6:	0716      	lsls	r6, r2, #28
 80025a8:	4605      	mov	r5, r0
 80025aa:	460c      	mov	r4, r1
 80025ac:	d454      	bmi.n	8002658 <__sflush_r+0xb8>
 80025ae:	684b      	ldr	r3, [r1, #4]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	dc02      	bgt.n	80025ba <__sflush_r+0x1a>
 80025b4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	dd48      	ble.n	800264c <__sflush_r+0xac>
 80025ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80025bc:	2e00      	cmp	r6, #0
 80025be:	d045      	beq.n	800264c <__sflush_r+0xac>
 80025c0:	2300      	movs	r3, #0
 80025c2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80025c6:	682f      	ldr	r7, [r5, #0]
 80025c8:	6a21      	ldr	r1, [r4, #32]
 80025ca:	602b      	str	r3, [r5, #0]
 80025cc:	d030      	beq.n	8002630 <__sflush_r+0x90>
 80025ce:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80025d0:	89a3      	ldrh	r3, [r4, #12]
 80025d2:	0759      	lsls	r1, r3, #29
 80025d4:	d505      	bpl.n	80025e2 <__sflush_r+0x42>
 80025d6:	6863      	ldr	r3, [r4, #4]
 80025d8:	1ad2      	subs	r2, r2, r3
 80025da:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80025dc:	b10b      	cbz	r3, 80025e2 <__sflush_r+0x42>
 80025de:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80025e0:	1ad2      	subs	r2, r2, r3
 80025e2:	2300      	movs	r3, #0
 80025e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80025e6:	6a21      	ldr	r1, [r4, #32]
 80025e8:	4628      	mov	r0, r5
 80025ea:	47b0      	blx	r6
 80025ec:	1c43      	adds	r3, r0, #1
 80025ee:	89a3      	ldrh	r3, [r4, #12]
 80025f0:	d106      	bne.n	8002600 <__sflush_r+0x60>
 80025f2:	6829      	ldr	r1, [r5, #0]
 80025f4:	291d      	cmp	r1, #29
 80025f6:	d82b      	bhi.n	8002650 <__sflush_r+0xb0>
 80025f8:	4a28      	ldr	r2, [pc, #160]	@ (800269c <__sflush_r+0xfc>)
 80025fa:	40ca      	lsrs	r2, r1
 80025fc:	07d6      	lsls	r6, r2, #31
 80025fe:	d527      	bpl.n	8002650 <__sflush_r+0xb0>
 8002600:	2200      	movs	r2, #0
 8002602:	6062      	str	r2, [r4, #4]
 8002604:	04d9      	lsls	r1, r3, #19
 8002606:	6922      	ldr	r2, [r4, #16]
 8002608:	6022      	str	r2, [r4, #0]
 800260a:	d504      	bpl.n	8002616 <__sflush_r+0x76>
 800260c:	1c42      	adds	r2, r0, #1
 800260e:	d101      	bne.n	8002614 <__sflush_r+0x74>
 8002610:	682b      	ldr	r3, [r5, #0]
 8002612:	b903      	cbnz	r3, 8002616 <__sflush_r+0x76>
 8002614:	6560      	str	r0, [r4, #84]	@ 0x54
 8002616:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002618:	602f      	str	r7, [r5, #0]
 800261a:	b1b9      	cbz	r1, 800264c <__sflush_r+0xac>
 800261c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002620:	4299      	cmp	r1, r3
 8002622:	d002      	beq.n	800262a <__sflush_r+0x8a>
 8002624:	4628      	mov	r0, r5
 8002626:	f7ff fec3 	bl	80023b0 <_free_r>
 800262a:	2300      	movs	r3, #0
 800262c:	6363      	str	r3, [r4, #52]	@ 0x34
 800262e:	e00d      	b.n	800264c <__sflush_r+0xac>
 8002630:	2301      	movs	r3, #1
 8002632:	4628      	mov	r0, r5
 8002634:	47b0      	blx	r6
 8002636:	4602      	mov	r2, r0
 8002638:	1c50      	adds	r0, r2, #1
 800263a:	d1c9      	bne.n	80025d0 <__sflush_r+0x30>
 800263c:	682b      	ldr	r3, [r5, #0]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d0c6      	beq.n	80025d0 <__sflush_r+0x30>
 8002642:	2b1d      	cmp	r3, #29
 8002644:	d001      	beq.n	800264a <__sflush_r+0xaa>
 8002646:	2b16      	cmp	r3, #22
 8002648:	d11d      	bne.n	8002686 <__sflush_r+0xe6>
 800264a:	602f      	str	r7, [r5, #0]
 800264c:	2000      	movs	r0, #0
 800264e:	e021      	b.n	8002694 <__sflush_r+0xf4>
 8002650:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002654:	b21b      	sxth	r3, r3
 8002656:	e01a      	b.n	800268e <__sflush_r+0xee>
 8002658:	690f      	ldr	r7, [r1, #16]
 800265a:	2f00      	cmp	r7, #0
 800265c:	d0f6      	beq.n	800264c <__sflush_r+0xac>
 800265e:	0793      	lsls	r3, r2, #30
 8002660:	680e      	ldr	r6, [r1, #0]
 8002662:	bf08      	it	eq
 8002664:	694b      	ldreq	r3, [r1, #20]
 8002666:	600f      	str	r7, [r1, #0]
 8002668:	bf18      	it	ne
 800266a:	2300      	movne	r3, #0
 800266c:	1bf6      	subs	r6, r6, r7
 800266e:	608b      	str	r3, [r1, #8]
 8002670:	2e00      	cmp	r6, #0
 8002672:	ddeb      	ble.n	800264c <__sflush_r+0xac>
 8002674:	6a21      	ldr	r1, [r4, #32]
 8002676:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800267a:	4633      	mov	r3, r6
 800267c:	463a      	mov	r2, r7
 800267e:	4628      	mov	r0, r5
 8002680:	47e0      	blx	ip
 8002682:	2800      	cmp	r0, #0
 8002684:	dc07      	bgt.n	8002696 <__sflush_r+0xf6>
 8002686:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800268a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800268e:	81a3      	strh	r3, [r4, #12]
 8002690:	f04f 30ff 	mov.w	r0, #4294967295
 8002694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002696:	4407      	add	r7, r0
 8002698:	1a36      	subs	r6, r6, r0
 800269a:	e7e9      	b.n	8002670 <__sflush_r+0xd0>
 800269c:	20400001 	.word	0x20400001

080026a0 <_fflush_r>:
 80026a0:	b538      	push	{r3, r4, r5, lr}
 80026a2:	690b      	ldr	r3, [r1, #16]
 80026a4:	4605      	mov	r5, r0
 80026a6:	460c      	mov	r4, r1
 80026a8:	b913      	cbnz	r3, 80026b0 <_fflush_r+0x10>
 80026aa:	2500      	movs	r5, #0
 80026ac:	4628      	mov	r0, r5
 80026ae:	bd38      	pop	{r3, r4, r5, pc}
 80026b0:	b118      	cbz	r0, 80026ba <_fflush_r+0x1a>
 80026b2:	6a03      	ldr	r3, [r0, #32]
 80026b4:	b90b      	cbnz	r3, 80026ba <_fflush_r+0x1a>
 80026b6:	f7ff fc93 	bl	8001fe0 <__sinit>
 80026ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d0f3      	beq.n	80026aa <_fflush_r+0xa>
 80026c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80026c4:	07d0      	lsls	r0, r2, #31
 80026c6:	d404      	bmi.n	80026d2 <_fflush_r+0x32>
 80026c8:	0599      	lsls	r1, r3, #22
 80026ca:	d402      	bmi.n	80026d2 <_fflush_r+0x32>
 80026cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80026ce:	f7ff fe6c 	bl	80023aa <__retarget_lock_acquire_recursive>
 80026d2:	4628      	mov	r0, r5
 80026d4:	4621      	mov	r1, r4
 80026d6:	f7ff ff63 	bl	80025a0 <__sflush_r>
 80026da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80026dc:	07da      	lsls	r2, r3, #31
 80026de:	4605      	mov	r5, r0
 80026e0:	d4e4      	bmi.n	80026ac <_fflush_r+0xc>
 80026e2:	89a3      	ldrh	r3, [r4, #12]
 80026e4:	059b      	lsls	r3, r3, #22
 80026e6:	d4e1      	bmi.n	80026ac <_fflush_r+0xc>
 80026e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80026ea:	f7ff fe5f 	bl	80023ac <__retarget_lock_release_recursive>
 80026ee:	e7dd      	b.n	80026ac <_fflush_r+0xc>

080026f0 <__swhatbuf_r>:
 80026f0:	b570      	push	{r4, r5, r6, lr}
 80026f2:	460c      	mov	r4, r1
 80026f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026f8:	2900      	cmp	r1, #0
 80026fa:	b096      	sub	sp, #88	@ 0x58
 80026fc:	4615      	mov	r5, r2
 80026fe:	461e      	mov	r6, r3
 8002700:	da0d      	bge.n	800271e <__swhatbuf_r+0x2e>
 8002702:	89a3      	ldrh	r3, [r4, #12]
 8002704:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002708:	f04f 0100 	mov.w	r1, #0
 800270c:	bf14      	ite	ne
 800270e:	2340      	movne	r3, #64	@ 0x40
 8002710:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002714:	2000      	movs	r0, #0
 8002716:	6031      	str	r1, [r6, #0]
 8002718:	602b      	str	r3, [r5, #0]
 800271a:	b016      	add	sp, #88	@ 0x58
 800271c:	bd70      	pop	{r4, r5, r6, pc}
 800271e:	466a      	mov	r2, sp
 8002720:	f000 f848 	bl	80027b4 <_fstat_r>
 8002724:	2800      	cmp	r0, #0
 8002726:	dbec      	blt.n	8002702 <__swhatbuf_r+0x12>
 8002728:	9901      	ldr	r1, [sp, #4]
 800272a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800272e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002732:	4259      	negs	r1, r3
 8002734:	4159      	adcs	r1, r3
 8002736:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800273a:	e7eb      	b.n	8002714 <__swhatbuf_r+0x24>

0800273c <__smakebuf_r>:
 800273c:	898b      	ldrh	r3, [r1, #12]
 800273e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002740:	079d      	lsls	r5, r3, #30
 8002742:	4606      	mov	r6, r0
 8002744:	460c      	mov	r4, r1
 8002746:	d507      	bpl.n	8002758 <__smakebuf_r+0x1c>
 8002748:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800274c:	6023      	str	r3, [r4, #0]
 800274e:	6123      	str	r3, [r4, #16]
 8002750:	2301      	movs	r3, #1
 8002752:	6163      	str	r3, [r4, #20]
 8002754:	b003      	add	sp, #12
 8002756:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002758:	ab01      	add	r3, sp, #4
 800275a:	466a      	mov	r2, sp
 800275c:	f7ff ffc8 	bl	80026f0 <__swhatbuf_r>
 8002760:	9f00      	ldr	r7, [sp, #0]
 8002762:	4605      	mov	r5, r0
 8002764:	4639      	mov	r1, r7
 8002766:	4630      	mov	r0, r6
 8002768:	f7ff fe8e 	bl	8002488 <_malloc_r>
 800276c:	b948      	cbnz	r0, 8002782 <__smakebuf_r+0x46>
 800276e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002772:	059a      	lsls	r2, r3, #22
 8002774:	d4ee      	bmi.n	8002754 <__smakebuf_r+0x18>
 8002776:	f023 0303 	bic.w	r3, r3, #3
 800277a:	f043 0302 	orr.w	r3, r3, #2
 800277e:	81a3      	strh	r3, [r4, #12]
 8002780:	e7e2      	b.n	8002748 <__smakebuf_r+0xc>
 8002782:	89a3      	ldrh	r3, [r4, #12]
 8002784:	6020      	str	r0, [r4, #0]
 8002786:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800278a:	81a3      	strh	r3, [r4, #12]
 800278c:	9b01      	ldr	r3, [sp, #4]
 800278e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002792:	b15b      	cbz	r3, 80027ac <__smakebuf_r+0x70>
 8002794:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002798:	4630      	mov	r0, r6
 800279a:	f000 f81d 	bl	80027d8 <_isatty_r>
 800279e:	b128      	cbz	r0, 80027ac <__smakebuf_r+0x70>
 80027a0:	89a3      	ldrh	r3, [r4, #12]
 80027a2:	f023 0303 	bic.w	r3, r3, #3
 80027a6:	f043 0301 	orr.w	r3, r3, #1
 80027aa:	81a3      	strh	r3, [r4, #12]
 80027ac:	89a3      	ldrh	r3, [r4, #12]
 80027ae:	431d      	orrs	r5, r3
 80027b0:	81a5      	strh	r5, [r4, #12]
 80027b2:	e7cf      	b.n	8002754 <__smakebuf_r+0x18>

080027b4 <_fstat_r>:
 80027b4:	b538      	push	{r3, r4, r5, lr}
 80027b6:	4d07      	ldr	r5, [pc, #28]	@ (80027d4 <_fstat_r+0x20>)
 80027b8:	2300      	movs	r3, #0
 80027ba:	4604      	mov	r4, r0
 80027bc:	4608      	mov	r0, r1
 80027be:	4611      	mov	r1, r2
 80027c0:	602b      	str	r3, [r5, #0]
 80027c2:	f7fd fe6a 	bl	800049a <_fstat>
 80027c6:	1c43      	adds	r3, r0, #1
 80027c8:	d102      	bne.n	80027d0 <_fstat_r+0x1c>
 80027ca:	682b      	ldr	r3, [r5, #0]
 80027cc:	b103      	cbz	r3, 80027d0 <_fstat_r+0x1c>
 80027ce:	6023      	str	r3, [r4, #0]
 80027d0:	bd38      	pop	{r3, r4, r5, pc}
 80027d2:	bf00      	nop
 80027d4:	200001c8 	.word	0x200001c8

080027d8 <_isatty_r>:
 80027d8:	b538      	push	{r3, r4, r5, lr}
 80027da:	4d06      	ldr	r5, [pc, #24]	@ (80027f4 <_isatty_r+0x1c>)
 80027dc:	2300      	movs	r3, #0
 80027de:	4604      	mov	r4, r0
 80027e0:	4608      	mov	r0, r1
 80027e2:	602b      	str	r3, [r5, #0]
 80027e4:	f7fd fe68 	bl	80004b8 <_isatty>
 80027e8:	1c43      	adds	r3, r0, #1
 80027ea:	d102      	bne.n	80027f2 <_isatty_r+0x1a>
 80027ec:	682b      	ldr	r3, [r5, #0]
 80027ee:	b103      	cbz	r3, 80027f2 <_isatty_r+0x1a>
 80027f0:	6023      	str	r3, [r4, #0]
 80027f2:	bd38      	pop	{r3, r4, r5, pc}
 80027f4:	200001c8 	.word	0x200001c8

080027f8 <_sbrk_r>:
 80027f8:	b538      	push	{r3, r4, r5, lr}
 80027fa:	4d06      	ldr	r5, [pc, #24]	@ (8002814 <_sbrk_r+0x1c>)
 80027fc:	2300      	movs	r3, #0
 80027fe:	4604      	mov	r4, r0
 8002800:	4608      	mov	r0, r1
 8002802:	602b      	str	r3, [r5, #0]
 8002804:	f7fd fe6e 	bl	80004e4 <_sbrk>
 8002808:	1c43      	adds	r3, r0, #1
 800280a:	d102      	bne.n	8002812 <_sbrk_r+0x1a>
 800280c:	682b      	ldr	r3, [r5, #0]
 800280e:	b103      	cbz	r3, 8002812 <_sbrk_r+0x1a>
 8002810:	6023      	str	r3, [r4, #0]
 8002812:	bd38      	pop	{r3, r4, r5, pc}
 8002814:	200001c8 	.word	0x200001c8

08002818 <_init>:
 8002818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800281a:	bf00      	nop
 800281c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800281e:	bc08      	pop	{r3}
 8002820:	469e      	mov	lr, r3
 8002822:	4770      	bx	lr

08002824 <_fini>:
 8002824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002826:	bf00      	nop
 8002828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800282a:	bc08      	pop	{r3}
 800282c:	469e      	mov	lr, r3
 800282e:	4770      	bx	lr
