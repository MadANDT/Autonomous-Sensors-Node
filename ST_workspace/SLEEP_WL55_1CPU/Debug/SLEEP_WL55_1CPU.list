
SLEEP_WL55_1CPU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f40  08000138  08000138  00001138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  08005078  08005078  00006078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800520c  0800520c  00007040  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800520c  0800520c  0000620c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005214  08005214  00007040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005214  08005214  00006214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005218  08005218  00006218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000040  20000000  0800521c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  20000040  0800525c  00007040  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  0800525c  000071b8  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY
 12 .debug_info   000118dc  00000000  00000000  0000706a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028a6  00000000  00000000  00018946  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f8  00000000  00000000  0001b1f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cdc  00000000  00000000  0001c2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c990  00000000  00000000  0001cfc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000104ac  00000000  00000000  00039954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b15d3  00000000  00000000  00049e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fb3d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004614  00000000  00000000  000fb418  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000ffa2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	@ (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	@ (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000040 	.word	0x20000040
 8000154:	00000000 	.word	0x00000000
 8000158:	08005060 	.word	0x08005060

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	@ (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	@ (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	@ (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000044 	.word	0x20000044
 8000174:	08005060 	.word	0x08005060

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_uldivmod>:
 8000188:	b953      	cbnz	r3, 80001a0 <__aeabi_uldivmod+0x18>
 800018a:	b94a      	cbnz	r2, 80001a0 <__aeabi_uldivmod+0x18>
 800018c:	2900      	cmp	r1, #0
 800018e:	bf08      	it	eq
 8000190:	2800      	cmpeq	r0, #0
 8000192:	bf1c      	itt	ne
 8000194:	f04f 31ff 	movne.w	r1, #4294967295
 8000198:	f04f 30ff 	movne.w	r0, #4294967295
 800019c:	f000 b988 	b.w	80004b0 <__aeabi_idiv0>
 80001a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a8:	f000 f806 	bl	80001b8 <__udivmoddi4>
 80001ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b4:	b004      	add	sp, #16
 80001b6:	4770      	bx	lr

080001b8 <__udivmoddi4>:
 80001b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001bc:	9d08      	ldr	r5, [sp, #32]
 80001be:	468e      	mov	lr, r1
 80001c0:	4604      	mov	r4, r0
 80001c2:	4688      	mov	r8, r1
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d14a      	bne.n	800025e <__udivmoddi4+0xa6>
 80001c8:	428a      	cmp	r2, r1
 80001ca:	4617      	mov	r7, r2
 80001cc:	d962      	bls.n	8000294 <__udivmoddi4+0xdc>
 80001ce:	fab2 f682 	clz	r6, r2
 80001d2:	b14e      	cbz	r6, 80001e8 <__udivmoddi4+0x30>
 80001d4:	f1c6 0320 	rsb	r3, r6, #32
 80001d8:	fa01 f806 	lsl.w	r8, r1, r6
 80001dc:	fa20 f303 	lsr.w	r3, r0, r3
 80001e0:	40b7      	lsls	r7, r6
 80001e2:	ea43 0808 	orr.w	r8, r3, r8
 80001e6:	40b4      	lsls	r4, r6
 80001e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80001ec:	fa1f fc87 	uxth.w	ip, r7
 80001f0:	fbb8 f1fe 	udiv	r1, r8, lr
 80001f4:	0c23      	lsrs	r3, r4, #16
 80001f6:	fb0e 8811 	mls	r8, lr, r1, r8
 80001fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001fe:	fb01 f20c 	mul.w	r2, r1, ip
 8000202:	429a      	cmp	r2, r3
 8000204:	d909      	bls.n	800021a <__udivmoddi4+0x62>
 8000206:	18fb      	adds	r3, r7, r3
 8000208:	f101 30ff 	add.w	r0, r1, #4294967295
 800020c:	f080 80ea 	bcs.w	80003e4 <__udivmoddi4+0x22c>
 8000210:	429a      	cmp	r2, r3
 8000212:	f240 80e7 	bls.w	80003e4 <__udivmoddi4+0x22c>
 8000216:	3902      	subs	r1, #2
 8000218:	443b      	add	r3, r7
 800021a:	1a9a      	subs	r2, r3, r2
 800021c:	b2a3      	uxth	r3, r4
 800021e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000222:	fb0e 2210 	mls	r2, lr, r0, r2
 8000226:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800022a:	fb00 fc0c 	mul.w	ip, r0, ip
 800022e:	459c      	cmp	ip, r3
 8000230:	d909      	bls.n	8000246 <__udivmoddi4+0x8e>
 8000232:	18fb      	adds	r3, r7, r3
 8000234:	f100 32ff 	add.w	r2, r0, #4294967295
 8000238:	f080 80d6 	bcs.w	80003e8 <__udivmoddi4+0x230>
 800023c:	459c      	cmp	ip, r3
 800023e:	f240 80d3 	bls.w	80003e8 <__udivmoddi4+0x230>
 8000242:	443b      	add	r3, r7
 8000244:	3802      	subs	r0, #2
 8000246:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800024a:	eba3 030c 	sub.w	r3, r3, ip
 800024e:	2100      	movs	r1, #0
 8000250:	b11d      	cbz	r5, 800025a <__udivmoddi4+0xa2>
 8000252:	40f3      	lsrs	r3, r6
 8000254:	2200      	movs	r2, #0
 8000256:	e9c5 3200 	strd	r3, r2, [r5]
 800025a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800025e:	428b      	cmp	r3, r1
 8000260:	d905      	bls.n	800026e <__udivmoddi4+0xb6>
 8000262:	b10d      	cbz	r5, 8000268 <__udivmoddi4+0xb0>
 8000264:	e9c5 0100 	strd	r0, r1, [r5]
 8000268:	2100      	movs	r1, #0
 800026a:	4608      	mov	r0, r1
 800026c:	e7f5      	b.n	800025a <__udivmoddi4+0xa2>
 800026e:	fab3 f183 	clz	r1, r3
 8000272:	2900      	cmp	r1, #0
 8000274:	d146      	bne.n	8000304 <__udivmoddi4+0x14c>
 8000276:	4573      	cmp	r3, lr
 8000278:	d302      	bcc.n	8000280 <__udivmoddi4+0xc8>
 800027a:	4282      	cmp	r2, r0
 800027c:	f200 8105 	bhi.w	800048a <__udivmoddi4+0x2d2>
 8000280:	1a84      	subs	r4, r0, r2
 8000282:	eb6e 0203 	sbc.w	r2, lr, r3
 8000286:	2001      	movs	r0, #1
 8000288:	4690      	mov	r8, r2
 800028a:	2d00      	cmp	r5, #0
 800028c:	d0e5      	beq.n	800025a <__udivmoddi4+0xa2>
 800028e:	e9c5 4800 	strd	r4, r8, [r5]
 8000292:	e7e2      	b.n	800025a <__udivmoddi4+0xa2>
 8000294:	2a00      	cmp	r2, #0
 8000296:	f000 8090 	beq.w	80003ba <__udivmoddi4+0x202>
 800029a:	fab2 f682 	clz	r6, r2
 800029e:	2e00      	cmp	r6, #0
 80002a0:	f040 80a4 	bne.w	80003ec <__udivmoddi4+0x234>
 80002a4:	1a8a      	subs	r2, r1, r2
 80002a6:	0c03      	lsrs	r3, r0, #16
 80002a8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ac:	b280      	uxth	r0, r0
 80002ae:	b2bc      	uxth	r4, r7
 80002b0:	2101      	movs	r1, #1
 80002b2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002b6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002be:	fb04 f20c 	mul.w	r2, r4, ip
 80002c2:	429a      	cmp	r2, r3
 80002c4:	d907      	bls.n	80002d6 <__udivmoddi4+0x11e>
 80002c6:	18fb      	adds	r3, r7, r3
 80002c8:	f10c 38ff 	add.w	r8, ip, #4294967295
 80002cc:	d202      	bcs.n	80002d4 <__udivmoddi4+0x11c>
 80002ce:	429a      	cmp	r2, r3
 80002d0:	f200 80e0 	bhi.w	8000494 <__udivmoddi4+0x2dc>
 80002d4:	46c4      	mov	ip, r8
 80002d6:	1a9b      	subs	r3, r3, r2
 80002d8:	fbb3 f2fe 	udiv	r2, r3, lr
 80002dc:	fb0e 3312 	mls	r3, lr, r2, r3
 80002e0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80002e4:	fb02 f404 	mul.w	r4, r2, r4
 80002e8:	429c      	cmp	r4, r3
 80002ea:	d907      	bls.n	80002fc <__udivmoddi4+0x144>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f102 30ff 	add.w	r0, r2, #4294967295
 80002f2:	d202      	bcs.n	80002fa <__udivmoddi4+0x142>
 80002f4:	429c      	cmp	r4, r3
 80002f6:	f200 80ca 	bhi.w	800048e <__udivmoddi4+0x2d6>
 80002fa:	4602      	mov	r2, r0
 80002fc:	1b1b      	subs	r3, r3, r4
 80002fe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000302:	e7a5      	b.n	8000250 <__udivmoddi4+0x98>
 8000304:	f1c1 0620 	rsb	r6, r1, #32
 8000308:	408b      	lsls	r3, r1
 800030a:	fa22 f706 	lsr.w	r7, r2, r6
 800030e:	431f      	orrs	r7, r3
 8000310:	fa0e f401 	lsl.w	r4, lr, r1
 8000314:	fa20 f306 	lsr.w	r3, r0, r6
 8000318:	fa2e fe06 	lsr.w	lr, lr, r6
 800031c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000320:	4323      	orrs	r3, r4
 8000322:	fa00 f801 	lsl.w	r8, r0, r1
 8000326:	fa1f fc87 	uxth.w	ip, r7
 800032a:	fbbe f0f9 	udiv	r0, lr, r9
 800032e:	0c1c      	lsrs	r4, r3, #16
 8000330:	fb09 ee10 	mls	lr, r9, r0, lr
 8000334:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000338:	fb00 fe0c 	mul.w	lr, r0, ip
 800033c:	45a6      	cmp	lr, r4
 800033e:	fa02 f201 	lsl.w	r2, r2, r1
 8000342:	d909      	bls.n	8000358 <__udivmoddi4+0x1a0>
 8000344:	193c      	adds	r4, r7, r4
 8000346:	f100 3aff 	add.w	sl, r0, #4294967295
 800034a:	f080 809c 	bcs.w	8000486 <__udivmoddi4+0x2ce>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f240 8099 	bls.w	8000486 <__udivmoddi4+0x2ce>
 8000354:	3802      	subs	r0, #2
 8000356:	443c      	add	r4, r7
 8000358:	eba4 040e 	sub.w	r4, r4, lr
 800035c:	fa1f fe83 	uxth.w	lr, r3
 8000360:	fbb4 f3f9 	udiv	r3, r4, r9
 8000364:	fb09 4413 	mls	r4, r9, r3, r4
 8000368:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800036c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000370:	45a4      	cmp	ip, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x1ce>
 8000374:	193c      	adds	r4, r7, r4
 8000376:	f103 3eff 	add.w	lr, r3, #4294967295
 800037a:	f080 8082 	bcs.w	8000482 <__udivmoddi4+0x2ca>
 800037e:	45a4      	cmp	ip, r4
 8000380:	d97f      	bls.n	8000482 <__udivmoddi4+0x2ca>
 8000382:	3b02      	subs	r3, #2
 8000384:	443c      	add	r4, r7
 8000386:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800038a:	eba4 040c 	sub.w	r4, r4, ip
 800038e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000392:	4564      	cmp	r4, ip
 8000394:	4673      	mov	r3, lr
 8000396:	46e1      	mov	r9, ip
 8000398:	d362      	bcc.n	8000460 <__udivmoddi4+0x2a8>
 800039a:	d05f      	beq.n	800045c <__udivmoddi4+0x2a4>
 800039c:	b15d      	cbz	r5, 80003b6 <__udivmoddi4+0x1fe>
 800039e:	ebb8 0203 	subs.w	r2, r8, r3
 80003a2:	eb64 0409 	sbc.w	r4, r4, r9
 80003a6:	fa04 f606 	lsl.w	r6, r4, r6
 80003aa:	fa22 f301 	lsr.w	r3, r2, r1
 80003ae:	431e      	orrs	r6, r3
 80003b0:	40cc      	lsrs	r4, r1
 80003b2:	e9c5 6400 	strd	r6, r4, [r5]
 80003b6:	2100      	movs	r1, #0
 80003b8:	e74f      	b.n	800025a <__udivmoddi4+0xa2>
 80003ba:	fbb1 fcf2 	udiv	ip, r1, r2
 80003be:	0c01      	lsrs	r1, r0, #16
 80003c0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80003c4:	b280      	uxth	r0, r0
 80003c6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80003ca:	463b      	mov	r3, r7
 80003cc:	4638      	mov	r0, r7
 80003ce:	463c      	mov	r4, r7
 80003d0:	46b8      	mov	r8, r7
 80003d2:	46be      	mov	lr, r7
 80003d4:	2620      	movs	r6, #32
 80003d6:	fbb1 f1f7 	udiv	r1, r1, r7
 80003da:	eba2 0208 	sub.w	r2, r2, r8
 80003de:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80003e2:	e766      	b.n	80002b2 <__udivmoddi4+0xfa>
 80003e4:	4601      	mov	r1, r0
 80003e6:	e718      	b.n	800021a <__udivmoddi4+0x62>
 80003e8:	4610      	mov	r0, r2
 80003ea:	e72c      	b.n	8000246 <__udivmoddi4+0x8e>
 80003ec:	f1c6 0220 	rsb	r2, r6, #32
 80003f0:	fa2e f302 	lsr.w	r3, lr, r2
 80003f4:	40b7      	lsls	r7, r6
 80003f6:	40b1      	lsls	r1, r6
 80003f8:	fa20 f202 	lsr.w	r2, r0, r2
 80003fc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000400:	430a      	orrs	r2, r1
 8000402:	fbb3 f8fe 	udiv	r8, r3, lr
 8000406:	b2bc      	uxth	r4, r7
 8000408:	fb0e 3318 	mls	r3, lr, r8, r3
 800040c:	0c11      	lsrs	r1, r2, #16
 800040e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000412:	fb08 f904 	mul.w	r9, r8, r4
 8000416:	40b0      	lsls	r0, r6
 8000418:	4589      	cmp	r9, r1
 800041a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800041e:	b280      	uxth	r0, r0
 8000420:	d93e      	bls.n	80004a0 <__udivmoddi4+0x2e8>
 8000422:	1879      	adds	r1, r7, r1
 8000424:	f108 3cff 	add.w	ip, r8, #4294967295
 8000428:	d201      	bcs.n	800042e <__udivmoddi4+0x276>
 800042a:	4589      	cmp	r9, r1
 800042c:	d81f      	bhi.n	800046e <__udivmoddi4+0x2b6>
 800042e:	eba1 0109 	sub.w	r1, r1, r9
 8000432:	fbb1 f9fe 	udiv	r9, r1, lr
 8000436:	fb09 f804 	mul.w	r8, r9, r4
 800043a:	fb0e 1119 	mls	r1, lr, r9, r1
 800043e:	b292      	uxth	r2, r2
 8000440:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000444:	4542      	cmp	r2, r8
 8000446:	d229      	bcs.n	800049c <__udivmoddi4+0x2e4>
 8000448:	18ba      	adds	r2, r7, r2
 800044a:	f109 31ff 	add.w	r1, r9, #4294967295
 800044e:	d2c4      	bcs.n	80003da <__udivmoddi4+0x222>
 8000450:	4542      	cmp	r2, r8
 8000452:	d2c2      	bcs.n	80003da <__udivmoddi4+0x222>
 8000454:	f1a9 0102 	sub.w	r1, r9, #2
 8000458:	443a      	add	r2, r7
 800045a:	e7be      	b.n	80003da <__udivmoddi4+0x222>
 800045c:	45f0      	cmp	r8, lr
 800045e:	d29d      	bcs.n	800039c <__udivmoddi4+0x1e4>
 8000460:	ebbe 0302 	subs.w	r3, lr, r2
 8000464:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000468:	3801      	subs	r0, #1
 800046a:	46e1      	mov	r9, ip
 800046c:	e796      	b.n	800039c <__udivmoddi4+0x1e4>
 800046e:	eba7 0909 	sub.w	r9, r7, r9
 8000472:	4449      	add	r1, r9
 8000474:	f1a8 0c02 	sub.w	ip, r8, #2
 8000478:	fbb1 f9fe 	udiv	r9, r1, lr
 800047c:	fb09 f804 	mul.w	r8, r9, r4
 8000480:	e7db      	b.n	800043a <__udivmoddi4+0x282>
 8000482:	4673      	mov	r3, lr
 8000484:	e77f      	b.n	8000386 <__udivmoddi4+0x1ce>
 8000486:	4650      	mov	r0, sl
 8000488:	e766      	b.n	8000358 <__udivmoddi4+0x1a0>
 800048a:	4608      	mov	r0, r1
 800048c:	e6fd      	b.n	800028a <__udivmoddi4+0xd2>
 800048e:	443b      	add	r3, r7
 8000490:	3a02      	subs	r2, #2
 8000492:	e733      	b.n	80002fc <__udivmoddi4+0x144>
 8000494:	f1ac 0c02 	sub.w	ip, ip, #2
 8000498:	443b      	add	r3, r7
 800049a:	e71c      	b.n	80002d6 <__udivmoddi4+0x11e>
 800049c:	4649      	mov	r1, r9
 800049e:	e79c      	b.n	80003da <__udivmoddi4+0x222>
 80004a0:	eba1 0109 	sub.w	r1, r1, r9
 80004a4:	46c4      	mov	ip, r8
 80004a6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004aa:	fb09 f804 	mul.w	r8, r9, r4
 80004ae:	e7c4      	b.n	800043a <__udivmoddi4+0x282>

080004b0 <__aeabi_idiv0>:
 80004b0:	4770      	bx	lr
 80004b2:	bf00      	nop

080004b4 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80004bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80004c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80004c4:	f023 0218 	bic.w	r2, r3, #24
 80004c8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	4313      	orrs	r3, r2
 80004d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80004d4:	bf00      	nop
 80004d6:	370c      	adds	r7, #12
 80004d8:	46bd      	mov	sp, r7
 80004da:	bc80      	pop	{r7}
 80004dc:	4770      	bx	lr

080004de <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004de:	b480      	push	{r7}
 80004e0:	b085      	sub	sp, #20
 80004e2:	af00      	add	r7, sp, #0
 80004e4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80004ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80004ec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	4313      	orrs	r3, r2
 80004f4:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80004fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	4013      	ands	r3, r2
 8000500:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000502:	68fb      	ldr	r3, [r7, #12]
}
 8000504:	bf00      	nop
 8000506:	3714      	adds	r7, #20
 8000508:	46bd      	mov	sp, r7
 800050a:	bc80      	pop	{r7}
 800050c:	4770      	bx	lr
	...

08000510 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 0 */
char *str = {0};

uint8_t Rx_data;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000510:	b590      	push	{r4, r7, lr}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(huart, &Rx_data, 1);
 8000518:	2201      	movs	r2, #1
 800051a:	490d      	ldr	r1, [pc, #52]	@ (8000550 <HAL_UART_RxCpltCallback+0x40>)
 800051c:	6878      	ldr	r0, [r7, #4]
 800051e:	f002 fdb5 	bl	800308c <HAL_UART_Receive_IT>
	str = "Wake up from SLEEP by UART.\r\n";
 8000522:	4b0c      	ldr	r3, [pc, #48]	@ (8000554 <HAL_UART_RxCpltCallback+0x44>)
 8000524:	4a0c      	ldr	r2, [pc, #48]	@ (8000558 <HAL_UART_RxCpltCallback+0x48>)
 8000526:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(huart, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8000528:	4b0a      	ldr	r3, [pc, #40]	@ (8000554 <HAL_UART_RxCpltCallback+0x44>)
 800052a:	681c      	ldr	r4, [r3, #0]
 800052c:	4b09      	ldr	r3, [pc, #36]	@ (8000554 <HAL_UART_RxCpltCallback+0x44>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4618      	mov	r0, r3
 8000532:	f7ff fe21 	bl	8000178 <strlen>
 8000536:	4603      	mov	r3, r0
 8000538:	b29a      	uxth	r2, r3
 800053a:	f04f 33ff 	mov.w	r3, #4294967295
 800053e:	4621      	mov	r1, r4
 8000540:	6878      	ldr	r0, [r7, #4]
 8000542:	f002 fd1c 	bl	8002f7e <HAL_UART_Transmit>
}
 8000546:	bf00      	nop
 8000548:	370c      	adds	r7, #12
 800054a:	46bd      	mov	sp, r7
 800054c:	bd90      	pop	{r4, r7, pc}
 800054e:	bf00      	nop
 8000550:	20000104 	.word	0x20000104
 8000554:	20000100 	.word	0x20000100
 8000558:	08005078 	.word	0x08005078

0800055c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800055c:	b590      	push	{r4, r7, lr}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
 8000562:	4603      	mov	r3, r0
 8000564:	80fb      	strh	r3, [r7, #6]
	str = "Wake up from SLEEP by EXTI (from GPIO).\r\n";
 8000566:	4b0c      	ldr	r3, [pc, #48]	@ (8000598 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000568:	4a0c      	ldr	r2, [pc, #48]	@ (800059c <HAL_GPIO_EXTI_Callback+0x40>)
 800056a:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 800056c:	4b0a      	ldr	r3, [pc, #40]	@ (8000598 <HAL_GPIO_EXTI_Callback+0x3c>)
 800056e:	681c      	ldr	r4, [r3, #0]
 8000570:	4b09      	ldr	r3, [pc, #36]	@ (8000598 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4618      	mov	r0, r3
 8000576:	f7ff fdff 	bl	8000178 <strlen>
 800057a:	4603      	mov	r3, r0
 800057c:	b29a      	uxth	r2, r3
 800057e:	f04f 33ff 	mov.w	r3, #4294967295
 8000582:	4621      	mov	r1, r4
 8000584:	4806      	ldr	r0, [pc, #24]	@ (80005a0 <HAL_GPIO_EXTI_Callback+0x44>)
 8000586:	f002 fcfa 	bl	8002f7e <HAL_UART_Transmit>
	HAL_PWR_DisableSleepOnExit();
 800058a:	f001 f915 	bl	80017b8 <HAL_PWR_DisableSleepOnExit>
}
 800058e:	bf00      	nop
 8000590:	370c      	adds	r7, #12
 8000592:	46bd      	mov	sp, r7
 8000594:	bd90      	pop	{r4, r7, pc}
 8000596:	bf00      	nop
 8000598:	20000100 	.word	0x20000100
 800059c:	08005098 	.word	0x08005098
 80005a0:	2000006c 	.word	0x2000006c

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b590      	push	{r4, r7, lr}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005aa:	f000 fc33 	bl	8000e14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ae:	f000 f887 	bl	80006c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b2:	f000 f929 	bl	8000808 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005b6:	f000 f8db 	bl	8000770 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_RED);
 80005ba:	2002      	movs	r0, #2
 80005bc:	f000 faa8 	bl	8000b10 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 80005c0:	2101      	movs	r1, #1
 80005c2:	2000      	movs	r0, #0
 80005c4:	f000 fade 	bl	8000b84 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80005c8:	4b36      	ldr	r3, [pc, #216]	@ (80006a4 <main+0x100>)
 80005ca:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005ce:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80005d0:	4b34      	ldr	r3, [pc, #208]	@ (80006a4 <main+0x100>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80005d6:	4b33      	ldr	r3, [pc, #204]	@ (80006a4 <main+0x100>)
 80005d8:	2200      	movs	r2, #0
 80005da:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80005dc:	4b31      	ldr	r3, [pc, #196]	@ (80006a4 <main+0x100>)
 80005de:	2200      	movs	r2, #0
 80005e0:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80005e2:	4b30      	ldr	r3, [pc, #192]	@ (80006a4 <main+0x100>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80005e8:	492e      	ldr	r1, [pc, #184]	@ (80006a4 <main+0x100>)
 80005ea:	2000      	movs	r0, #0
 80005ec:	f000 fb6c 	bl	8000cc8 <BSP_COM_Init>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <main+0x56>
  {
    Error_Handler();
 80005f6:	f000 f95d 	bl	80008b4 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_IT(&huart1, &Rx_data, 1);
 80005fa:	2201      	movs	r2, #1
 80005fc:	492a      	ldr	r1, [pc, #168]	@ (80006a8 <main+0x104>)
 80005fe:	482b      	ldr	r0, [pc, #172]	@ (80006ac <main+0x108>)
 8000600:	f002 fd44 	bl	800308c <HAL_UART_Receive_IT>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  str = "Going into SLEEP mode in 6 seconds.\r\n";
 8000604:	4b2a      	ldr	r3, [pc, #168]	@ (80006b0 <main+0x10c>)
 8000606:	4a2b      	ldr	r2, [pc, #172]	@ (80006b4 <main+0x110>)
 8000608:	601a      	str	r2, [r3, #0]
	  HAL_UART_Transmit(&huart1, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 800060a:	4b29      	ldr	r3, [pc, #164]	@ (80006b0 <main+0x10c>)
 800060c:	681c      	ldr	r4, [r3, #0]
 800060e:	4b28      	ldr	r3, [pc, #160]	@ (80006b0 <main+0x10c>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4618      	mov	r0, r3
 8000614:	f7ff fdb0 	bl	8000178 <strlen>
 8000618:	4603      	mov	r3, r0
 800061a:	b29a      	uxth	r2, r3
 800061c:	f04f 33ff 	mov.w	r3, #4294967295
 8000620:	4621      	mov	r1, r4
 8000622:	4822      	ldr	r0, [pc, #136]	@ (80006ac <main+0x108>)
 8000624:	f002 fcab 	bl	8002f7e <HAL_UART_Transmit>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
 8000628:	2201      	movs	r2, #1
 800062a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800062e:	4822      	ldr	r0, [pc, #136]	@ (80006b8 <main+0x114>)
 8000630:	f001 f82a 	bl	8001688 <HAL_GPIO_WritePin>
	  HAL_Delay(6000);
 8000634:	f241 7070 	movw	r0, #6000	@ 0x1770
 8000638:	f000 fc62 	bl	8000f00 <HAL_Delay>

	  /* Suspend Tick increment to prevent wakeup by Systick interrupt.
	   * Otherwise the Systick will wake up the device within 1 ms (HAL time base).
	   */
	  HAL_SuspendTick();
 800063c:	f000 fc84 	bl	8000f48 <HAL_SuspendTick>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0); // indicate undergoing SLEEP mode
 8000640:	2200      	movs	r2, #0
 8000642:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000646:	481c      	ldr	r0, [pc, #112]	@ (80006b8 <main+0x114>)
 8000648:	f001 f81e 	bl	8001688 <HAL_GPIO_WritePin>

	  HAL_PWR_EnableSleepOnExit();
 800064c:	f001 f8a6 	bl	800179c <HAL_PWR_EnableSleepOnExit>

	  // Enter the SLEEP mode
	  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI); // interrupt for wake up
 8000650:	2101      	movs	r1, #1
 8000652:	2000      	movs	r0, #0
 8000654:	f001 f86e 	bl	8001734 <HAL_PWR_EnterSLEEPMode>

	  /* #### Device is sleeping #### */

	  HAL_ResumeTick();
 8000658:	f000 fc84 	bl	8000f64 <HAL_ResumeTick>

	  str = "Woke up from SLEEP mode.\r\n";
 800065c:	4b14      	ldr	r3, [pc, #80]	@ (80006b0 <main+0x10c>)
 800065e:	4a17      	ldr	r2, [pc, #92]	@ (80006bc <main+0x118>)
 8000660:	601a      	str	r2, [r3, #0]
	  HAL_UART_Transmit(&huart1, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8000662:	4b13      	ldr	r3, [pc, #76]	@ (80006b0 <main+0x10c>)
 8000664:	681c      	ldr	r4, [r3, #0]
 8000666:	4b12      	ldr	r3, [pc, #72]	@ (80006b0 <main+0x10c>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4618      	mov	r0, r3
 800066c:	f7ff fd84 	bl	8000178 <strlen>
 8000670:	4603      	mov	r3, r0
 8000672:	b29a      	uxth	r2, r3
 8000674:	f04f 33ff 	mov.w	r3, #4294967295
 8000678:	4621      	mov	r1, r4
 800067a:	480c      	ldr	r0, [pc, #48]	@ (80006ac <main+0x108>)
 800067c:	f002 fc7f 	bl	8002f7e <HAL_UART_Transmit>

	  //Blinking LED on PB_9 (green LED)
	  for (int i = 0; i < 16 ; i++){
 8000680:	2300      	movs	r3, #0
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	e00a      	b.n	800069c <main+0xf8>
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 8000686:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800068a:	480b      	ldr	r0, [pc, #44]	@ (80006b8 <main+0x114>)
 800068c:	f001 f813 	bl	80016b6 <HAL_GPIO_TogglePin>
		  HAL_Delay(250);
 8000690:	20fa      	movs	r0, #250	@ 0xfa
 8000692:	f000 fc35 	bl	8000f00 <HAL_Delay>
	  for (int i = 0; i < 16 ; i++){
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	3301      	adds	r3, #1
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	2b0f      	cmp	r3, #15
 80006a0:	ddf1      	ble.n	8000686 <main+0xe2>
	  str = "Going into SLEEP mode in 6 seconds.\r\n";
 80006a2:	e7af      	b.n	8000604 <main+0x60>
 80006a4:	2000005c 	.word	0x2000005c
 80006a8:	20000104 	.word	0x20000104
 80006ac:	2000006c 	.word	0x2000006c
 80006b0:	20000100 	.word	0x20000100
 80006b4:	080050c4 	.word	0x080050c4
 80006b8:	48000400 	.word	0x48000400
 80006bc:	080050ec 	.word	0x080050ec

080006c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b09a      	sub	sp, #104	@ 0x68
 80006c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c6:	f107 0320 	add.w	r3, r7, #32
 80006ca:	2248      	movs	r2, #72	@ 0x48
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f004 fc9a 	bl	8005008 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d4:	1d3b      	adds	r3, r7, #4
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
 80006e0:	611a      	str	r2, [r3, #16]
 80006e2:	615a      	str	r2, [r3, #20]
 80006e4:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006e6:	f001 f817 	bl	8001718 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006ea:	2000      	movs	r0, #0
 80006ec:	f7ff fee2 	bl	80004b4 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006f0:	4b1e      	ldr	r3, [pc, #120]	@ (800076c <SystemClock_Config+0xac>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80006f8:	4a1c      	ldr	r2, [pc, #112]	@ (800076c <SystemClock_Config+0xac>)
 80006fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80006fe:	6013      	str	r3, [r2, #0]
 8000700:	4b1a      	ldr	r3, [pc, #104]	@ (800076c <SystemClock_Config+0xac>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000708:	603b      	str	r3, [r7, #0]
 800070a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800070c:	2324      	movs	r3, #36	@ 0x24
 800070e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000710:	2381      	movs	r3, #129	@ 0x81
 8000712:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000714:	2301      	movs	r3, #1
 8000716:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000718:	2300      	movs	r3, #0
 800071a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800071c:	2360      	movs	r3, #96	@ 0x60
 800071e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000720:	2300      	movs	r3, #0
 8000722:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000724:	f107 0320 	add.w	r3, r7, #32
 8000728:	4618      	mov	r0, r3
 800072a:	f001 fb5b 	bl	8001de4 <HAL_RCC_OscConfig>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000734:	f000 f8be 	bl	80008b4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8000738:	234f      	movs	r3, #79	@ 0x4f
 800073a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800073c:	2300      	movs	r3, #0
 800073e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000750:	1d3b      	adds	r3, r7, #4
 8000752:	2100      	movs	r1, #0
 8000754:	4618      	mov	r0, r3
 8000756:	f001 fec7 	bl	80024e8 <HAL_RCC_ClockConfig>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000760:	f000 f8a8 	bl	80008b4 <Error_Handler>
  }
}
 8000764:	bf00      	nop
 8000766:	3768      	adds	r7, #104	@ 0x68
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	58000400 	.word	0x58000400

08000770 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000774:	4b22      	ldr	r3, [pc, #136]	@ (8000800 <MX_USART1_UART_Init+0x90>)
 8000776:	4a23      	ldr	r2, [pc, #140]	@ (8000804 <MX_USART1_UART_Init+0x94>)
 8000778:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800077a:	4b21      	ldr	r3, [pc, #132]	@ (8000800 <MX_USART1_UART_Init+0x90>)
 800077c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000780:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000782:	4b1f      	ldr	r3, [pc, #124]	@ (8000800 <MX_USART1_UART_Init+0x90>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000788:	4b1d      	ldr	r3, [pc, #116]	@ (8000800 <MX_USART1_UART_Init+0x90>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800078e:	4b1c      	ldr	r3, [pc, #112]	@ (8000800 <MX_USART1_UART_Init+0x90>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000794:	4b1a      	ldr	r3, [pc, #104]	@ (8000800 <MX_USART1_UART_Init+0x90>)
 8000796:	220c      	movs	r2, #12
 8000798:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079a:	4b19      	ldr	r3, [pc, #100]	@ (8000800 <MX_USART1_UART_Init+0x90>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a0:	4b17      	ldr	r3, [pc, #92]	@ (8000800 <MX_USART1_UART_Init+0x90>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007a6:	4b16      	ldr	r3, [pc, #88]	@ (8000800 <MX_USART1_UART_Init+0x90>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007ac:	4b14      	ldr	r3, [pc, #80]	@ (8000800 <MX_USART1_UART_Init+0x90>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007b2:	4b13      	ldr	r3, [pc, #76]	@ (8000800 <MX_USART1_UART_Init+0x90>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007b8:	4811      	ldr	r0, [pc, #68]	@ (8000800 <MX_USART1_UART_Init+0x90>)
 80007ba:	f002 fb90 	bl	8002ede <HAL_UART_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80007c4:	f000 f876 	bl	80008b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007c8:	2100      	movs	r1, #0
 80007ca:	480d      	ldr	r0, [pc, #52]	@ (8000800 <MX_USART1_UART_Init+0x90>)
 80007cc:	f004 fb53 	bl	8004e76 <HAL_UARTEx_SetTxFifoThreshold>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80007d6:	f000 f86d 	bl	80008b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007da:	2100      	movs	r1, #0
 80007dc:	4808      	ldr	r0, [pc, #32]	@ (8000800 <MX_USART1_UART_Init+0x90>)
 80007de:	f004 fb88 	bl	8004ef2 <HAL_UARTEx_SetRxFifoThreshold>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80007e8:	f000 f864 	bl	80008b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80007ec:	4804      	ldr	r0, [pc, #16]	@ (8000800 <MX_USART1_UART_Init+0x90>)
 80007ee:	f004 fb0a 	bl	8004e06 <HAL_UARTEx_DisableFifoMode>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80007f8:	f000 f85c 	bl	80008b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	2000006c 	.word	0x2000006c
 8000804:	40013800 	.word	0x40013800

08000808 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b086      	sub	sp, #24
 800080c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080e:	1d3b      	adds	r3, r7, #4
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
 800081a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081c:	2001      	movs	r0, #1
 800081e:	f7ff fe5e 	bl	80004de <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000822:	2004      	movs	r0, #4
 8000824:	f7ff fe5b 	bl	80004de <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000828:	2002      	movs	r0, #2
 800082a:	f7ff fe58 	bl	80004de <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000834:	481d      	ldr	r0, [pc, #116]	@ (80008ac <MX_GPIO_Init+0xa4>)
 8000836:	f000 ff27 	bl	8001688 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	2138      	movs	r1, #56	@ 0x38
 800083e:	481c      	ldr	r0, [pc, #112]	@ (80008b0 <MX_GPIO_Init+0xa8>)
 8000840:	f000 ff22 	bl	8001688 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000844:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000848:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084a:	2301      	movs	r3, #1
 800084c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000852:	2300      	movs	r3, #0
 8000854:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	4619      	mov	r1, r3
 800085a:	4814      	ldr	r0, [pc, #80]	@ (80008ac <MX_GPIO_Init+0xa4>)
 800085c:	f000 fdb4 	bl	80013c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FE_CTRL3_Pin FE_CTRL2_Pin FE_CTRL1_Pin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 8000860:	2338      	movs	r3, #56	@ 0x38
 8000862:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000864:	2301      	movs	r3, #1
 8000866:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800086c:	2303      	movs	r3, #3
 800086e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000870:	1d3b      	adds	r3, r7, #4
 8000872:	4619      	mov	r1, r3
 8000874:	480e      	ldr	r0, [pc, #56]	@ (80008b0 <MX_GPIO_Init+0xa8>)
 8000876:	f000 fda7 	bl	80013c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800087a:	2302      	movs	r3, #2
 800087c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800087e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000882:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	4619      	mov	r1, r3
 800088c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000890:	f000 fd9a 	bl	80013c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000894:	2200      	movs	r2, #0
 8000896:	2100      	movs	r1, #0
 8000898:	2007      	movs	r0, #7
 800089a:	f000 fc48 	bl	800112e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800089e:	2007      	movs	r0, #7
 80008a0:	f000 fc5f 	bl	8001162 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008a4:	bf00      	nop
 80008a6:	3718      	adds	r7, #24
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	48000400 	.word	0x48000400
 80008b0:	48000800 	.word	0x48000800

080008b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b8:	b672      	cpsid	i
}
 80008ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008bc:	bf00      	nop
 80008be:	e7fd      	b.n	80008bc <Error_Handler+0x8>

080008c0 <LL_AHB2_GRP1_EnableClock>:
{
 80008c0:	b480      	push	{r7}
 80008c2:	b085      	sub	sp, #20
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80008c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80008cc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80008ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	4313      	orrs	r3, r2
 80008d6:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80008d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80008dc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	4013      	ands	r3, r2
 80008e2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008e4:	68fb      	ldr	r3, [r7, #12]
}
 80008e6:	bf00      	nop
 80008e8:	3714      	adds	r7, #20
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr

080008f0 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b085      	sub	sp, #20
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80008f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80008fc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80008fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	4313      	orrs	r3, r2
 8000906:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000908:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800090c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4013      	ands	r3, r2
 8000912:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000914:	68fb      	ldr	r3, [r7, #12]
}
 8000916:	bf00      	nop
 8000918:	3714      	adds	r7, #20
 800091a:	46bd      	mov	sp, r7
 800091c:	bc80      	pop	{r7}
 800091e:	4770      	bx	lr

08000920 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	bc80      	pop	{r7}
 800092a:	4770      	bx	lr

0800092c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b096      	sub	sp, #88	@ 0x58
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000934:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000944:	f107 030c 	add.w	r3, r7, #12
 8000948:	2238      	movs	r2, #56	@ 0x38
 800094a:	2100      	movs	r1, #0
 800094c:	4618      	mov	r0, r3
 800094e:	f004 fb5b 	bl	8005008 <memset>
  if(huart->Instance==USART1)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4a1b      	ldr	r2, [pc, #108]	@ (80009c4 <HAL_UART_MspInit+0x98>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d12f      	bne.n	80009bc <HAL_UART_MspInit+0x90>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800095c:	2301      	movs	r3, #1
 800095e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000960:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8000964:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000966:	f107 030c 	add.w	r3, r7, #12
 800096a:	4618      	mov	r0, r3
 800096c:	f002 f97c 	bl	8002c68 <HAL_RCCEx_PeriphCLKConfig>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000976:	f7ff ff9d 	bl	80008b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800097a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800097e:	f7ff ffb7 	bl	80008f0 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000982:	2001      	movs	r0, #1
 8000984:	f7ff ff9c 	bl	80008c0 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8000988:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800098c:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098e:	2302      	movs	r3, #2
 8000990:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000996:	2300      	movs	r3, #0
 8000998:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800099a:	2307      	movs	r3, #7
 800099c:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80009a2:	4619      	mov	r1, r3
 80009a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009a8:	f000 fd0e 	bl	80013c8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80009ac:	2200      	movs	r2, #0
 80009ae:	2100      	movs	r1, #0
 80009b0:	2024      	movs	r0, #36	@ 0x24
 80009b2:	f000 fbbc 	bl	800112e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009b6:	2024      	movs	r0, #36	@ 0x24
 80009b8:	f000 fbd3 	bl	8001162 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80009bc:	bf00      	nop
 80009be:	3758      	adds	r7, #88	@ 0x58
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	40013800 	.word	0x40013800

080009c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009cc:	bf00      	nop
 80009ce:	e7fd      	b.n	80009cc <NMI_Handler+0x4>

080009d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d4:	bf00      	nop
 80009d6:	e7fd      	b.n	80009d4 <HardFault_Handler+0x4>

080009d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009dc:	bf00      	nop
 80009de:	e7fd      	b.n	80009dc <MemManage_Handler+0x4>

080009e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009e4:	bf00      	nop
 80009e6:	e7fd      	b.n	80009e4 <BusFault_Handler+0x4>

080009e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009ec:	bf00      	nop
 80009ee:	e7fd      	b.n	80009ec <UsageFault_Handler+0x4>

080009f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009f4:	bf00      	nop
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bc80      	pop	{r7}
 80009fa:	4770      	bx	lr

080009fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bc80      	pop	{r7}
 8000a06:	4770      	bx	lr

08000a08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bc80      	pop	{r7}
 8000a12:	4770      	bx	lr

08000a14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a18:	f000 fa56 	bl	8000ec8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line 0 Interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_SW1);
 8000a24:	2000      	movs	r0, #0
 8000a26:	f000 f933 	bl	8000c90 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000a32:	2002      	movs	r0, #2
 8000a34:	f000 fe58 	bl	80016e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a40:	4802      	ldr	r0, [pc, #8]	@ (8000a4c <USART1_IRQHandler+0x10>)
 8000a42:	f002 fb6f 	bl	8003124 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	2000006c 	.word	0x2000006c

08000a50 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bc80      	pop	{r7}
 8000a5a:	4770      	bx	lr

08000a5c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a5c:	480d      	ldr	r0, [pc, #52]	@ (8000a94 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a5e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a60:	f7ff fff6 	bl	8000a50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a64:	480c      	ldr	r0, [pc, #48]	@ (8000a98 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a66:	490d      	ldr	r1, [pc, #52]	@ (8000a9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a68:	4a0d      	ldr	r2, [pc, #52]	@ (8000aa0 <LoopForever+0xe>)
  movs r3, #0
 8000a6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a6c:	e002      	b.n	8000a74 <LoopCopyDataInit>

08000a6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a72:	3304      	adds	r3, #4

08000a74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a78:	d3f9      	bcc.n	8000a6e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000aa4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a7c:	4c0a      	ldr	r4, [pc, #40]	@ (8000aa8 <LoopForever+0x16>)
  movs r3, #0
 8000a7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a80:	e001      	b.n	8000a86 <LoopFillZerobss>

08000a82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a84:	3204      	adds	r2, #4

08000a86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a88:	d3fb      	bcc.n	8000a82 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a8a:	f004 fac5 	bl	8005018 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a8e:	f7ff fd89 	bl	80005a4 <main>

08000a92 <LoopForever>:

LoopForever:
    b LoopForever
 8000a92:	e7fe      	b.n	8000a92 <LoopForever>
  ldr   r0, =_estack
 8000a94:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000a98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a9c:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 8000aa0:	0800521c 	.word	0x0800521c
  ldr r2, =_sbss
 8000aa4:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8000aa8:	200001b8 	.word	0x200001b8

08000aac <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000aac:	e7fe      	b.n	8000aac <ADC_IRQHandler>

08000aae <LL_AHB2_GRP1_EnableClock>:
{
 8000aae:	b480      	push	{r7}
 8000ab0:	b085      	sub	sp, #20
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000ab6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000aba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000abc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	4313      	orrs	r3, r2
 8000ac4:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ac6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000aca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	4013      	ands	r3, r2
 8000ad0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ad2:	68fb      	ldr	r3, [r7, #12]
}
 8000ad4:	bf00      	nop
 8000ad6:	3714      	adds	r7, #20
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bc80      	pop	{r7}
 8000adc:	4770      	bx	lr

08000ade <LL_APB1_GRP2_EnableClock>:
{
 8000ade:	b480      	push	{r7}
 8000ae0:	b085      	sub	sp, #20
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000ae6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000aea:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000aec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	4313      	orrs	r3, r2
 8000af4:	65cb      	str	r3, [r1, #92]	@ 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000af6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000afa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	4013      	ands	r3, r2
 8000b00:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b02:	68fb      	ldr	r3, [r7, #12]
}
 8000b04:	bf00      	nop
 8000b06:	3714      	adds	r7, #20
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bc80      	pop	{r7}
 8000b0c:	4770      	bx	lr
	...

08000b10 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b088      	sub	sp, #32
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8000b1a:	f107 030c 	add.w	r3, r7, #12
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	60da      	str	r2, [r3, #12]
 8000b28:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000b2a:	2002      	movs	r0, #2
 8000b2c:	f7ff ffbf 	bl	8000aae <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	4a12      	ldr	r2, [pc, #72]	@ (8000b7c <BSP_LED_Init+0x6c>)
 8000b34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b38:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b42:	2302      	movs	r3, #2
 8000b44:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	4a0d      	ldr	r2, [pc, #52]	@ (8000b80 <BSP_LED_Init+0x70>)
 8000b4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b4e:	f107 020c 	add.w	r2, r7, #12
 8000b52:	4611      	mov	r1, r2
 8000b54:	4618      	mov	r0, r3
 8000b56:	f000 fc37 	bl	80013c8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000b5a:	79fb      	ldrb	r3, [r7, #7]
 8000b5c:	4a08      	ldr	r2, [pc, #32]	@ (8000b80 <BSP_LED_Init+0x70>)
 8000b5e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000b62:	79fb      	ldrb	r3, [r7, #7]
 8000b64:	4a05      	ldr	r2, [pc, #20]	@ (8000b7c <BSP_LED_Init+0x6c>)
 8000b66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	f000 fd8b 	bl	8001688 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000b72:	2300      	movs	r3, #0
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3720      	adds	r7, #32
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	080051c4 	.word	0x080051c4
 8000b80:	20000004 	.word	0x20000004

08000b84 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b088      	sub	sp, #32
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	460a      	mov	r2, r1
 8000b8e:	71fb      	strb	r3, [r7, #7]
 8000b90:	4613      	mov	r3, r2
 8000b92:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure = {0};
 8000b94:	f107 030c 	add.w	r3, r7, #12
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]
  static BSP_EXTI_LineCallback button_callback[BUTTONn] = {BUTTON_SW1_EXTI_Callback, BUTTON_SW2_EXTI_Callback, BUTTON_SW3_EXTI_Callback};
  static uint32_t button_interrupt_priority[BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY, BSP_BUTTON_USER_IT_PRIORITY, BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t button_exti_line[BUTTONn] = {BUTTON_SW1_EXTI_LINE, BUTTON_SW2_EXTI_LINE, BUTTON_SW3_EXTI_LINE};

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8000ba4:	79fb      	ldrb	r3, [r7, #7]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d103      	bne.n	8000bb2 <BSP_PB_Init+0x2e>
 8000baa:	2001      	movs	r0, #1
 8000bac:	f7ff ff7f 	bl	8000aae <LL_AHB2_GRP1_EnableClock>
 8000bb0:	e00c      	b.n	8000bcc <BSP_PB_Init+0x48>
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d103      	bne.n	8000bc0 <BSP_PB_Init+0x3c>
 8000bb8:	2001      	movs	r0, #1
 8000bba:	f7ff ff78 	bl	8000aae <LL_AHB2_GRP1_EnableClock>
 8000bbe:	e005      	b.n	8000bcc <BSP_PB_Init+0x48>
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
 8000bc2:	2b02      	cmp	r3, #2
 8000bc4:	d102      	bne.n	8000bcc <BSP_PB_Init+0x48>
 8000bc6:	2004      	movs	r0, #4
 8000bc8:	f7ff ff71 	bl	8000aae <LL_AHB2_GRP1_EnableClock>
  
  gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	4a29      	ldr	r2, [pc, #164]	@ (8000c74 <BSP_PB_Init+0xf0>)
 8000bd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bd4:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8000bde:	79bb      	ldrb	r3, [r7, #6]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d10c      	bne.n	8000bfe <BSP_PB_Init+0x7a>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000be4:	2300      	movs	r3, #0
 8000be6:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	4a23      	ldr	r2, [pc, #140]	@ (8000c78 <BSP_PB_Init+0xf4>)
 8000bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bf0:	f107 020c 	add.w	r2, r7, #12
 8000bf4:	4611      	mov	r1, r2
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f000 fbe6 	bl	80013c8 <HAL_GPIO_Init>
 8000bfc:	e035      	b.n	8000c6a <BSP_PB_Init+0xe6>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 8000bfe:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000c02:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000c04:	79fb      	ldrb	r3, [r7, #7]
 8000c06:	4a1c      	ldr	r2, [pc, #112]	@ (8000c78 <BSP_PB_Init+0xf4>)
 8000c08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c0c:	f107 020c 	add.w	r2, r7, #12
 8000c10:	4611      	mov	r1, r2
 8000c12:	4618      	mov	r0, r3
 8000c14:	f000 fbd8 	bl	80013c8 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], button_exti_line[Button]);
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	00db      	lsls	r3, r3, #3
 8000c1c:	4a17      	ldr	r2, [pc, #92]	@ (8000c7c <BSP_PB_Init+0xf8>)
 8000c1e:	441a      	add	r2, r3
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	4917      	ldr	r1, [pc, #92]	@ (8000c80 <BSP_PB_Init+0xfc>)
 8000c24:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4610      	mov	r0, r2
 8000c2c:	f000 fb89 	bl	8001342 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, button_callback[Button]);
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	00db      	lsls	r3, r3, #3
 8000c34:	4a11      	ldr	r2, [pc, #68]	@ (8000c7c <BSP_PB_Init+0xf8>)
 8000c36:	1898      	adds	r0, r3, r2
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	4a12      	ldr	r2, [pc, #72]	@ (8000c84 <BSP_PB_Init+0x100>)
 8000c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c40:	461a      	mov	r2, r3
 8000c42:	2100      	movs	r1, #0
 8000c44:	f000 fb64 	bl	8001310 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), button_interrupt_priority[Button], 0x00);
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	4a0f      	ldr	r2, [pc, #60]	@ (8000c88 <BSP_PB_Init+0x104>)
 8000c4c:	56d0      	ldrsb	r0, [r2, r3]
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	4a0e      	ldr	r2, [pc, #56]	@ (8000c8c <BSP_PB_Init+0x108>)
 8000c52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c56:	2200      	movs	r2, #0
 8000c58:	4619      	mov	r1, r3
 8000c5a:	f000 fa68 	bl	800112e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	4a09      	ldr	r2, [pc, #36]	@ (8000c88 <BSP_PB_Init+0x104>)
 8000c62:	56d3      	ldrsb	r3, [r2, r3]
 8000c64:	4618      	mov	r0, r3
 8000c66:	f000 fa7c 	bl	8001162 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8000c6a:	2300      	movs	r3, #0
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3720      	adds	r7, #32
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	080051cc 	.word	0x080051cc
 8000c78:	20000010 	.word	0x20000010
 8000c7c:	20000108 	.word	0x20000108
 8000c80:	080051d8 	.word	0x080051d8
 8000c84:	20000020 	.word	0x20000020
 8000c88:	080051d4 	.word	0x080051d4
 8000c8c:	2000002c 	.word	0x2000002c

08000c90 <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	00db      	lsls	r3, r3, #3
 8000c9e:	4a04      	ldr	r2, [pc, #16]	@ (8000cb0 <BSP_PB_IRQHandler+0x20>)
 8000ca0:	4413      	add	r3, r2
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f000 fb60 	bl	8001368 <HAL_EXTI_IRQHandler>
}
 8000ca8:	bf00      	nop
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	20000108 	.word	0x20000108

08000cb4 <BSP_PB_Callback>:
  *           @arg BUTTON_SW2
  *           @arg BUTTON_SW3
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8000cbe:	bf00      	nop
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bc80      	pop	{r7}
 8000cc6:	4770      	bx	lr

08000cc8 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	6039      	str	r1, [r7, #0]
 8000cd2:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d903      	bls.n	8000ce6 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000cde:	f06f 0301 	mvn.w	r3, #1
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	e018      	b.n	8000d18 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	2294      	movs	r2, #148	@ 0x94
 8000cea:	fb02 f303 	mul.w	r3, r2, r3
 8000cee:	4a0d      	ldr	r2, [pc, #52]	@ (8000d24 <BSP_COM_Init+0x5c>)
 8000cf0:	4413      	add	r3, r2
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f000 f85f 	bl	8000db6 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	2294      	movs	r2, #148	@ 0x94
 8000cfc:	fb02 f303 	mul.w	r3, r2, r3
 8000d00:	4a08      	ldr	r2, [pc, #32]	@ (8000d24 <BSP_COM_Init+0x5c>)
 8000d02:	4413      	add	r3, r2
 8000d04:	6839      	ldr	r1, [r7, #0]
 8000d06:	4618      	mov	r0, r3
 8000d08:	f000 f80e 	bl	8000d28 <MX_LPUART1_Init>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d002      	beq.n	8000d18 <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8000d12:	f06f 0303 	mvn.w	r3, #3
 8000d16:	e000      	b.n	8000d1a <BSP_COM_Init+0x52>
    }
  }

  return ret;
 8000d18:	68fb      	ldr	r3, [r7, #12]
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3710      	adds	r7, #16
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20000120 	.word	0x20000120

08000d28 <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8000d32:	4b15      	ldr	r3, [pc, #84]	@ (8000d88 <MX_LPUART1_Init+0x60>)
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	220c      	movs	r2, #12
 8000d46:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	895b      	ldrh	r3, [r3, #10]
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685a      	ldr	r2, [r3, #4]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	891b      	ldrh	r3, [r3, #8]
 8000d5e:	461a      	mov	r2, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	899b      	ldrh	r3, [r3, #12]
 8000d68:	461a      	mov	r2, r3
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000d74:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f002 f8b1 	bl	8002ede <HAL_UART_Init>
 8000d7c:	4603      	mov	r3, r0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	2000001c 	.word	0x2000001c

08000d8c <BUTTON_SW1_EXTI_Callback>:
/**
  * @brief  Button SW1 EXTI line detection callback.
  * @retval None
  */
static void BUTTON_SW1_EXTI_Callback(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_SW1);
 8000d90:	2000      	movs	r0, #0
 8000d92:	f7ff ff8f 	bl	8000cb4 <BSP_PB_Callback>
}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <BUTTON_SW2_EXTI_Callback>:
/**
  * @brief  Button SW2 EXTI line detection callback.
  * @retval None
  */
static void BUTTON_SW2_EXTI_Callback(void)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_SW2);
 8000d9e:	2001      	movs	r0, #1
 8000da0:	f7ff ff88 	bl	8000cb4 <BSP_PB_Callback>
}
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <BUTTON_SW3_EXTI_Callback>:
/**
  * @brief  Button SW3 EXTI line detection callback.
  * @retval None
  */
static void BUTTON_SW3_EXTI_Callback(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_SW3);
 8000dac:	2002      	movs	r0, #2
 8000dae:	f7ff ff81 	bl	8000cb4 <BSP_PB_Callback>
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b088      	sub	sp, #32
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	f7ff fe75 	bl	8000aae <LL_AHB2_GRP1_EnableClock>
  COM1_RX_GPIO_CLK_ENABLE();
 8000dc4:	2001      	movs	r0, #1
 8000dc6:	f7ff fe72 	bl	8000aae <LL_AHB2_GRP1_EnableClock>

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8000dca:	2001      	movs	r0, #1
 8000dcc:	f7ff fe87 	bl	8000ade <LL_APB1_GRP2_EnableClock>

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8000dd0:	2304      	movs	r3, #4
 8000dd2:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8000de0:	2308      	movs	r3, #8
 8000de2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8000de4:	f107 030c 	add.w	r3, r7, #12
 8000de8:	4619      	mov	r1, r3
 8000dea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dee:	f000 faeb 	bl	80013c8 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8000df2:	2308      	movs	r3, #8
 8000df4:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000df6:	2302      	movs	r3, #2
 8000df8:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8000dfa:	2308      	movs	r3, #8
 8000dfc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8000dfe:	f107 030c 	add.w	r3, r7, #12
 8000e02:	4619      	mov	r1, r3
 8000e04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e08:	f000 fade 	bl	80013c8 <HAL_GPIO_Init>
}
 8000e0c:	bf00      	nop
 8000e0e:	3720      	adds	r7, #32
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e1e:	2003      	movs	r0, #3
 8000e20:	f000 f97a 	bl	8001118 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000e24:	f001 fd42 	bl	80028ac <HAL_RCC_GetHCLKFreq>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	4a09      	ldr	r2, [pc, #36]	@ (8000e50 <HAL_Init+0x3c>)
 8000e2c:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e2e:	2000      	movs	r0, #0
 8000e30:	f000 f810 	bl	8000e54 <HAL_InitTick>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d002      	beq.n	8000e40 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	71fb      	strb	r3, [r7, #7]
 8000e3e:	e001      	b.n	8000e44 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e40:	f7ff fd6e 	bl	8000920 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e44:	79fb      	ldrb	r3, [r7, #7]
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000000 	.word	0x20000000

08000e54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e60:	4b17      	ldr	r3, [pc, #92]	@ (8000ec0 <HAL_InitTick+0x6c>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d024      	beq.n	8000eb2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e68:	f001 fd20 	bl	80028ac <HAL_RCC_GetHCLKFreq>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	4b14      	ldr	r3, [pc, #80]	@ (8000ec0 <HAL_InitTick+0x6c>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	4619      	mov	r1, r3
 8000e74:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e78:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e80:	4618      	mov	r0, r3
 8000e82:	f000 f97c 	bl	800117e <HAL_SYSTICK_Config>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d10f      	bne.n	8000eac <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2b0f      	cmp	r3, #15
 8000e90:	d809      	bhi.n	8000ea6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e92:	2200      	movs	r2, #0
 8000e94:	6879      	ldr	r1, [r7, #4]
 8000e96:	f04f 30ff 	mov.w	r0, #4294967295
 8000e9a:	f000 f948 	bl	800112e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e9e:	4a09      	ldr	r2, [pc, #36]	@ (8000ec4 <HAL_InitTick+0x70>)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6013      	str	r3, [r2, #0]
 8000ea4:	e007      	b.n	8000eb6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	73fb      	strb	r3, [r7, #15]
 8000eaa:	e004      	b.n	8000eb6 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000eac:	2301      	movs	r3, #1
 8000eae:	73fb      	strb	r3, [r7, #15]
 8000eb0:	e001      	b.n	8000eb6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3710      	adds	r7, #16
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	2000003c 	.word	0x2000003c
 8000ec4:	20000038 	.word	0x20000038

08000ec8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ecc:	4b05      	ldr	r3, [pc, #20]	@ (8000ee4 <HAL_IncTick+0x1c>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	4b05      	ldr	r3, [pc, #20]	@ (8000ee8 <HAL_IncTick+0x20>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	4a03      	ldr	r2, [pc, #12]	@ (8000ee8 <HAL_IncTick+0x20>)
 8000eda:	6013      	str	r3, [r2, #0]
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr
 8000ee4:	2000003c 	.word	0x2000003c
 8000ee8:	200001b4 	.word	0x200001b4

08000eec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef0:	4b02      	ldr	r3, [pc, #8]	@ (8000efc <HAL_GetTick+0x10>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bc80      	pop	{r7}
 8000efa:	4770      	bx	lr
 8000efc:	200001b4 	.word	0x200001b4

08000f00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f08:	f7ff fff0 	bl	8000eec <HAL_GetTick>
 8000f0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f18:	d005      	beq.n	8000f26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f44 <HAL_Delay+0x44>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	461a      	mov	r2, r3
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	4413      	add	r3, r2
 8000f24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f26:	bf00      	nop
 8000f28:	f7ff ffe0 	bl	8000eec <HAL_GetTick>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	68fa      	ldr	r2, [r7, #12]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d8f7      	bhi.n	8000f28 <HAL_Delay+0x28>
  {
  }
}
 8000f38:	bf00      	nop
 8000f3a:	bf00      	nop
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	2000003c 	.word	0x2000003c

08000f48 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000f4c:	4b04      	ldr	r3, [pc, #16]	@ (8000f60 <HAL_SuspendTick+0x18>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a03      	ldr	r2, [pc, #12]	@ (8000f60 <HAL_SuspendTick+0x18>)
 8000f52:	f023 0302 	bic.w	r3, r3, #2
 8000f56:	6013      	str	r3, [r2, #0]
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bc80      	pop	{r7}
 8000f5e:	4770      	bx	lr
 8000f60:	e000e010 	.word	0xe000e010

08000f64 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000f68:	4b04      	ldr	r3, [pc, #16]	@ (8000f7c <HAL_ResumeTick+0x18>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a03      	ldr	r2, [pc, #12]	@ (8000f7c <HAL_ResumeTick+0x18>)
 8000f6e:	f043 0302 	orr.w	r3, r3, #2
 8000f72:	6013      	str	r3, [r2, #0]
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bc80      	pop	{r7}
 8000f7a:	4770      	bx	lr
 8000f7c:	e000e010 	.word	0xe000e010

08000f80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f90:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f96:	68ba      	ldr	r2, [r7, #8]
 8000f98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fa8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fb2:	4a04      	ldr	r2, [pc, #16]	@ (8000fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	60d3      	str	r3, [r2, #12]
}
 8000fb8:	bf00      	nop
 8000fba:	3714      	adds	r7, #20
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bc80      	pop	{r7}
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fcc:	4b04      	ldr	r3, [pc, #16]	@ (8000fe0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	0a1b      	lsrs	r3, r3, #8
 8000fd2:	f003 0307 	and.w	r3, r3, #7
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bc80      	pop	{r7}
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	db0b      	blt.n	800100e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	f003 021f 	and.w	r2, r3, #31
 8000ffc:	4906      	ldr	r1, [pc, #24]	@ (8001018 <__NVIC_EnableIRQ+0x34>)
 8000ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001002:	095b      	lsrs	r3, r3, #5
 8001004:	2001      	movs	r0, #1
 8001006:	fa00 f202 	lsl.w	r2, r0, r2
 800100a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800100e:	bf00      	nop
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr
 8001018:	e000e100 	.word	0xe000e100

0800101c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	6039      	str	r1, [r7, #0]
 8001026:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102c:	2b00      	cmp	r3, #0
 800102e:	db0a      	blt.n	8001046 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	b2da      	uxtb	r2, r3
 8001034:	490c      	ldr	r1, [pc, #48]	@ (8001068 <__NVIC_SetPriority+0x4c>)
 8001036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103a:	0112      	lsls	r2, r2, #4
 800103c:	b2d2      	uxtb	r2, r2
 800103e:	440b      	add	r3, r1
 8001040:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001044:	e00a      	b.n	800105c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	b2da      	uxtb	r2, r3
 800104a:	4908      	ldr	r1, [pc, #32]	@ (800106c <__NVIC_SetPriority+0x50>)
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	f003 030f 	and.w	r3, r3, #15
 8001052:	3b04      	subs	r3, #4
 8001054:	0112      	lsls	r2, r2, #4
 8001056:	b2d2      	uxtb	r2, r2
 8001058:	440b      	add	r3, r1
 800105a:	761a      	strb	r2, [r3, #24]
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	bc80      	pop	{r7}
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	e000e100 	.word	0xe000e100
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001070:	b480      	push	{r7}
 8001072:	b089      	sub	sp, #36	@ 0x24
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	f003 0307 	and.w	r3, r3, #7
 8001082:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	f1c3 0307 	rsb	r3, r3, #7
 800108a:	2b04      	cmp	r3, #4
 800108c:	bf28      	it	cs
 800108e:	2304      	movcs	r3, #4
 8001090:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	3304      	adds	r3, #4
 8001096:	2b06      	cmp	r3, #6
 8001098:	d902      	bls.n	80010a0 <NVIC_EncodePriority+0x30>
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	3b03      	subs	r3, #3
 800109e:	e000      	b.n	80010a2 <NVIC_EncodePriority+0x32>
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a4:	f04f 32ff 	mov.w	r2, #4294967295
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	43da      	mvns	r2, r3
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	401a      	ands	r2, r3
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010b8:	f04f 31ff 	mov.w	r1, #4294967295
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	fa01 f303 	lsl.w	r3, r1, r3
 80010c2:	43d9      	mvns	r1, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c8:	4313      	orrs	r3, r2
         );
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3724      	adds	r7, #36	@ 0x24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bc80      	pop	{r7}
 80010d2:	4770      	bx	lr

080010d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3b01      	subs	r3, #1
 80010e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010e4:	d301      	bcc.n	80010ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010e6:	2301      	movs	r3, #1
 80010e8:	e00f      	b.n	800110a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001114 <SysTick_Config+0x40>)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3b01      	subs	r3, #1
 80010f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010f2:	210f      	movs	r1, #15
 80010f4:	f04f 30ff 	mov.w	r0, #4294967295
 80010f8:	f7ff ff90 	bl	800101c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010fc:	4b05      	ldr	r3, [pc, #20]	@ (8001114 <SysTick_Config+0x40>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001102:	4b04      	ldr	r3, [pc, #16]	@ (8001114 <SysTick_Config+0x40>)
 8001104:	2207      	movs	r2, #7
 8001106:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001108:	2300      	movs	r3, #0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	e000e010 	.word	0xe000e010

08001118 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f7ff ff2d 	bl	8000f80 <__NVIC_SetPriorityGrouping>
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b086      	sub	sp, #24
 8001132:	af00      	add	r7, sp, #0
 8001134:	4603      	mov	r3, r0
 8001136:	60b9      	str	r1, [r7, #8]
 8001138:	607a      	str	r2, [r7, #4]
 800113a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800113c:	f7ff ff44 	bl	8000fc8 <__NVIC_GetPriorityGrouping>
 8001140:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	68b9      	ldr	r1, [r7, #8]
 8001146:	6978      	ldr	r0, [r7, #20]
 8001148:	f7ff ff92 	bl	8001070 <NVIC_EncodePriority>
 800114c:	4602      	mov	r2, r0
 800114e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001152:	4611      	mov	r1, r2
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff ff61 	bl	800101c <__NVIC_SetPriority>
}
 800115a:	bf00      	nop
 800115c:	3718      	adds	r7, #24
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b082      	sub	sp, #8
 8001166:	af00      	add	r7, sp, #0
 8001168:	4603      	mov	r3, r0
 800116a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800116c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff ff37 	bl	8000fe4 <__NVIC_EnableIRQ>
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b082      	sub	sp, #8
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f7ff ffa4 	bl	80010d4 <SysTick_Config>
 800118c:	4603      	mov	r3, r0
}
 800118e:	4618      	mov	r0, r3
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001196:	b480      	push	{r7}
 8001198:	b083      	sub	sp, #12
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d101      	bne.n	80011a8 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	e04f      	b.n	8001248 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d008      	beq.n	80011c6 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2204      	movs	r2, #4
 80011b8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2200      	movs	r2, #0
 80011be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e040      	b.n	8001248 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f022 020e 	bic.w	r2, r2, #14
 80011d4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80011e4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f022 0201 	bic.w	r2, r2, #1
 80011f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011fa:	f003 021c 	and.w	r2, r3, #28
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001202:	2101      	movs	r1, #1
 8001204:	fa01 f202 	lsl.w	r2, r1, r2
 8001208:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001212:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001218:	2b00      	cmp	r3, #0
 800121a:	d00c      	beq.n	8001236 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001226:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800122a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001234:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2201      	movs	r2, #1
 800123a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2200      	movs	r2, #0
 8001242:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8001246:	2300      	movs	r3, #0
}
 8001248:	4618      	mov	r0, r3
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	bc80      	pop	{r7}
 8001250:	4770      	bx	lr

08001252 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b084      	sub	sp, #16
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800125a:	2300      	movs	r3, #0
 800125c:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001264:	b2db      	uxtb	r3, r3
 8001266:	2b02      	cmp	r3, #2
 8001268:	d005      	beq.n	8001276 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2204      	movs	r2, #4
 800126e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	73fb      	strb	r3, [r7, #15]
 8001274:	e047      	b.n	8001306 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f022 020e 	bic.w	r2, r2, #14
 8001284:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f022 0201 	bic.w	r2, r2, #1
 8001294:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80012a4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012aa:	f003 021c 	and.w	r2, r3, #28
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b2:	2101      	movs	r1, #1
 80012b4:	fa01 f202 	lsl.w	r2, r1, r2
 80012b8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80012c2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d00c      	beq.n	80012e6 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012d6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80012da:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80012e4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2201      	movs	r2, #1
 80012ea:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2200      	movs	r2, #0
 80012f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d003      	beq.n	8001306 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	4798      	blx	r3
    }
  }
  return status;
 8001306:	7bfb      	ldrb	r3, [r7, #15]
}
 8001308:	4618      	mov	r0, r3
 800130a:	3710      	adds	r7, #16
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8001310:	b480      	push	{r7}
 8001312:	b087      	sub	sp, #28
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	460b      	mov	r3, r1
 800131a:	607a      	str	r2, [r7, #4]
 800131c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800131e:	2300      	movs	r3, #0
 8001320:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8001322:	7afb      	ldrb	r3, [r7, #11]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d103      	bne.n	8001330 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	605a      	str	r2, [r3, #4]
      break;
 800132e:	e002      	b.n	8001336 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	75fb      	strb	r3, [r7, #23]
      break;
 8001334:	bf00      	nop
  }

  return status;
 8001336:	7dfb      	ldrb	r3, [r7, #23]
}
 8001338:	4618      	mov	r0, r3
 800133a:	371c      	adds	r7, #28
 800133c:	46bd      	mov	sp, r7
 800133e:	bc80      	pop	{r7}
 8001340:	4770      	bx	lr

08001342 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001342:	b480      	push	{r7}
 8001344:	b083      	sub	sp, #12
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
 800134a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d101      	bne.n	8001356 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e003      	b.n	800135e <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	683a      	ldr	r2, [r7, #0]
 800135a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800135c:	2300      	movs	r3, #0
  }
}
 800135e:	4618      	mov	r0, r3
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	bc80      	pop	{r7}
 8001366:	4770      	bx	lr

08001368 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	0c1b      	lsrs	r3, r3, #16
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 031f 	and.w	r3, r3, #31
 8001384:	2201      	movs	r2, #1
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	015b      	lsls	r3, r3, #5
 8001390:	f103 43b0 	add.w	r3, r3, #1476395008	@ 0x58000000
 8001394:	f603 030c 	addw	r3, r3, #2060	@ 0x80c
 8001398:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	4013      	ands	r3, r2
 80013a2:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d009      	beq.n	80013be <HAL_EXTI_IRQHandler+0x56>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d002      	beq.n	80013be <HAL_EXTI_IRQHandler+0x56>
    {
      hexti->PendingCallback();
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	4798      	blx	r3
    }
  }
}
 80013be:	bf00      	nop
 80013c0:	3718      	adds	r7, #24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
	...

080013c8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b087      	sub	sp, #28
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013d2:	2300      	movs	r3, #0
 80013d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013d6:	e140      	b.n	800165a <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	2101      	movs	r1, #1
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	fa01 f303 	lsl.w	r3, r1, r3
 80013e4:	4013      	ands	r3, r2
 80013e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	f000 8132 	beq.w	8001654 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f003 0303 	and.w	r3, r3, #3
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d005      	beq.n	8001408 <HAL_GPIO_Init+0x40>
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f003 0303 	and.w	r3, r3, #3
 8001404:	2b02      	cmp	r3, #2
 8001406:	d130      	bne.n	800146a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	2203      	movs	r2, #3
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	43db      	mvns	r3, r3
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	4013      	ands	r3, r2
 800141e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	68da      	ldr	r2, [r3, #12]
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	4313      	orrs	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800143e:	2201      	movs	r2, #1
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	43db      	mvns	r3, r3
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	4013      	ands	r3, r2
 800144c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	091b      	lsrs	r3, r3, #4
 8001454:	f003 0201 	and.w	r2, r3, #1
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	4313      	orrs	r3, r2
 8001462:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f003 0303 	and.w	r3, r3, #3
 8001472:	2b03      	cmp	r3, #3
 8001474:	d017      	beq.n	80014a6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	2203      	movs	r2, #3
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	43db      	mvns	r3, r3
 8001488:	693a      	ldr	r2, [r7, #16]
 800148a:	4013      	ands	r3, r2
 800148c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	689a      	ldr	r2, [r3, #8]
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	4313      	orrs	r3, r2
 800149e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f003 0303 	and.w	r3, r3, #3
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d123      	bne.n	80014fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	08da      	lsrs	r2, r3, #3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	3208      	adds	r2, #8
 80014ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	f003 0307 	and.w	r3, r3, #7
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	220f      	movs	r2, #15
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	43db      	mvns	r3, r3
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	4013      	ands	r3, r2
 80014d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	691a      	ldr	r2, [r3, #16]
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	f003 0307 	and.w	r3, r3, #7
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	08da      	lsrs	r2, r3, #3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3208      	adds	r2, #8
 80014f4:	6939      	ldr	r1, [r7, #16]
 80014f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	2203      	movs	r2, #3
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	43db      	mvns	r3, r3
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	4013      	ands	r3, r2
 8001510:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f003 0203 	and.w	r2, r3, #3
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	4313      	orrs	r3, r2
 8001526:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001536:	2b00      	cmp	r3, #0
 8001538:	f000 808c 	beq.w	8001654 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800153c:	4a4e      	ldr	r2, [pc, #312]	@ (8001678 <HAL_GPIO_Init+0x2b0>)
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	089b      	lsrs	r3, r3, #2
 8001542:	3302      	adds	r3, #2
 8001544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001548:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	f003 0303 	and.w	r3, r3, #3
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	2207      	movs	r2, #7
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	43db      	mvns	r3, r3
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	4013      	ands	r3, r2
 800155e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001566:	d00d      	beq.n	8001584 <HAL_GPIO_Init+0x1bc>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4a44      	ldr	r2, [pc, #272]	@ (800167c <HAL_GPIO_Init+0x2b4>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d007      	beq.n	8001580 <HAL_GPIO_Init+0x1b8>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4a43      	ldr	r2, [pc, #268]	@ (8001680 <HAL_GPIO_Init+0x2b8>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d101      	bne.n	800157c <HAL_GPIO_Init+0x1b4>
 8001578:	2302      	movs	r3, #2
 800157a:	e004      	b.n	8001586 <HAL_GPIO_Init+0x1be>
 800157c:	2307      	movs	r3, #7
 800157e:	e002      	b.n	8001586 <HAL_GPIO_Init+0x1be>
 8001580:	2301      	movs	r3, #1
 8001582:	e000      	b.n	8001586 <HAL_GPIO_Init+0x1be>
 8001584:	2300      	movs	r3, #0
 8001586:	697a      	ldr	r2, [r7, #20]
 8001588:	f002 0203 	and.w	r2, r2, #3
 800158c:	0092      	lsls	r2, r2, #2
 800158e:	4093      	lsls	r3, r2
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	4313      	orrs	r3, r2
 8001594:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001596:	4938      	ldr	r1, [pc, #224]	@ (8001678 <HAL_GPIO_Init+0x2b0>)
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	089b      	lsrs	r3, r3, #2
 800159c:	3302      	adds	r3, #2
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015a4:	4b37      	ldr	r3, [pc, #220]	@ (8001684 <HAL_GPIO_Init+0x2bc>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	43db      	mvns	r3, r3
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	4013      	ands	r3, r2
 80015b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d003      	beq.n	80015c8 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80015c0:	693a      	ldr	r2, [r7, #16]
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015c8:	4a2e      	ldr	r2, [pc, #184]	@ (8001684 <HAL_GPIO_Init+0x2bc>)
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80015ce:	4b2d      	ldr	r3, [pc, #180]	@ (8001684 <HAL_GPIO_Init+0x2bc>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	43db      	mvns	r3, r3
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	4013      	ands	r3, r2
 80015dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d003      	beq.n	80015f2 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015f2:	4a24      	ldr	r2, [pc, #144]	@ (8001684 <HAL_GPIO_Init+0x2bc>)
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80015f8:	4b22      	ldr	r3, [pc, #136]	@ (8001684 <HAL_GPIO_Init+0x2bc>)
 80015fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80015fe:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	43db      	mvns	r3, r3
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	4013      	ands	r3, r2
 8001608:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d003      	beq.n	800161e <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	4313      	orrs	r3, r2
 800161c:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800161e:	4a19      	ldr	r2, [pc, #100]	@ (8001684 <HAL_GPIO_Init+0x2bc>)
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8001626:	4b17      	ldr	r3, [pc, #92]	@ (8001684 <HAL_GPIO_Init+0x2bc>)
 8001628:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800162c:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	43db      	mvns	r3, r3
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	4013      	ands	r3, r2
 8001636:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d003      	beq.n	800164c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001644:	693a      	ldr	r2, [r7, #16]
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	4313      	orrs	r3, r2
 800164a:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 800164c:	4a0d      	ldr	r2, [pc, #52]	@ (8001684 <HAL_GPIO_Init+0x2bc>)
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	3301      	adds	r3, #1
 8001658:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	fa22 f303 	lsr.w	r3, r2, r3
 8001664:	2b00      	cmp	r3, #0
 8001666:	f47f aeb7 	bne.w	80013d8 <HAL_GPIO_Init+0x10>
  }
}
 800166a:	bf00      	nop
 800166c:	bf00      	nop
 800166e:	371c      	adds	r7, #28
 8001670:	46bd      	mov	sp, r7
 8001672:	bc80      	pop	{r7}
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	40010000 	.word	0x40010000
 800167c:	48000400 	.word	0x48000400
 8001680:	48000800 	.word	0x48000800
 8001684:	58000800 	.word	0x58000800

08001688 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	460b      	mov	r3, r1
 8001692:	807b      	strh	r3, [r7, #2]
 8001694:	4613      	mov	r3, r2
 8001696:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001698:	787b      	ldrb	r3, [r7, #1]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d003      	beq.n	80016a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800169e:	887a      	ldrh	r2, [r7, #2]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016a4:	e002      	b.n	80016ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016a6:	887a      	ldrh	r2, [r7, #2]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bc80      	pop	{r7}
 80016b4:	4770      	bx	lr

080016b6 <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016b6:	b480      	push	{r7}
 80016b8:	b085      	sub	sp, #20
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
 80016be:	460b      	mov	r3, r1
 80016c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	695b      	ldr	r3, [r3, #20]
 80016c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016c8:	887a      	ldrh	r2, [r7, #2]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	4013      	ands	r3, r2
 80016ce:	041a      	lsls	r2, r3, #16
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	43d9      	mvns	r1, r3
 80016d4:	887b      	ldrh	r3, [r7, #2]
 80016d6:	400b      	ands	r3, r1
 80016d8:	431a      	orrs	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	619a      	str	r2, [r3, #24]
}
 80016de:	bf00      	nop
 80016e0:	3714      	adds	r7, #20
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bc80      	pop	{r7}
 80016e6:	4770      	bx	lr

080016e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80016f2:	4b08      	ldr	r3, [pc, #32]	@ (8001714 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016f4:	68da      	ldr	r2, [r3, #12]
 80016f6:	88fb      	ldrh	r3, [r7, #6]
 80016f8:	4013      	ands	r3, r2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d006      	beq.n	800170c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016fe:	4a05      	ldr	r2, [pc, #20]	@ (8001714 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001700:	88fb      	ldrh	r3, [r7, #6]
 8001702:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001704:	88fb      	ldrh	r3, [r7, #6]
 8001706:	4618      	mov	r0, r3
 8001708:	f7fe ff28 	bl	800055c <HAL_GPIO_EXTI_Callback>
  }
}
 800170c:	bf00      	nop
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	58000800 	.word	0x58000800

08001718 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800171c:	4b04      	ldr	r3, [pc, #16]	@ (8001730 <HAL_PWR_EnableBkUpAccess+0x18>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a03      	ldr	r2, [pc, #12]	@ (8001730 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001722:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001726:	6013      	str	r3, [r2, #0]
}
 8001728:	bf00      	nop
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr
 8001730:	58000400 	.word	0x58000400

08001734 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	460b      	mov	r3, r1
 800173e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d10c      	bne.n	8001760 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8001746:	4b13      	ldr	r3, [pc, #76]	@ (8001794 <HAL_PWR_EnterSLEEPMode+0x60>)
 8001748:	695b      	ldr	r3, [r3, #20]
 800174a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800174e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001752:	d10d      	bne.n	8001770 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8001754:	f000 f858 	bl	8001808 <HAL_PWREx_DisableLowPowerRunMode>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d008      	beq.n	8001770 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 800175e:	e015      	b.n	800178c <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8001760:	4b0c      	ldr	r3, [pc, #48]	@ (8001794 <HAL_PWR_EnterSLEEPMode+0x60>)
 8001762:	695b      	ldr	r3, [r3, #20]
 8001764:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001768:	2b00      	cmp	r3, #0
 800176a:	d101      	bne.n	8001770 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 800176c:	f000 f83e 	bl	80017ec <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001770:	4b09      	ldr	r3, [pc, #36]	@ (8001798 <HAL_PWR_EnterSLEEPMode+0x64>)
 8001772:	691b      	ldr	r3, [r3, #16]
 8001774:	4a08      	ldr	r2, [pc, #32]	@ (8001798 <HAL_PWR_EnterSLEEPMode+0x64>)
 8001776:	f023 0304 	bic.w	r3, r3, #4
 800177a:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800177c:	78fb      	ldrb	r3, [r7, #3]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d101      	bne.n	8001786 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001782:	bf30      	wfi
 8001784:	e002      	b.n	800178c <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8001786:	bf40      	sev
    __WFE();
 8001788:	bf20      	wfe
    __WFE();
 800178a:	bf20      	wfe
  }
}
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	58000400 	.word	0x58000400
 8001798:	e000ed00 	.word	0xe000ed00

0800179c <HAL_PWR_EnableSleepOnExit>:
  *         Setting this bit is useful when the processor is expected to run only on
  *         interruptions handling.
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 80017a0:	4b04      	ldr	r3, [pc, #16]	@ (80017b4 <HAL_PWR_EnableSleepOnExit+0x18>)
 80017a2:	691b      	ldr	r3, [r3, #16]
 80017a4:	4a03      	ldr	r2, [pc, #12]	@ (80017b4 <HAL_PWR_EnableSleepOnExit+0x18>)
 80017a6:	f043 0302 	orr.w	r3, r3, #2
 80017aa:	6113      	str	r3, [r2, #16]
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr
 80017b4:	e000ed00 	.word	0xe000ed00

080017b8 <HAL_PWR_DisableSleepOnExit>:
  * @note   Clear SLEEPONEXIT bit of SCR register. When this bit is set, the processor
  *         re-enters SLEEP mode when an interruption handling is over.
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 80017bc:	4b04      	ldr	r3, [pc, #16]	@ (80017d0 <HAL_PWR_DisableSleepOnExit+0x18>)
 80017be:	691b      	ldr	r3, [r3, #16]
 80017c0:	4a03      	ldr	r2, [pc, #12]	@ (80017d0 <HAL_PWR_DisableSleepOnExit+0x18>)
 80017c2:	f023 0302 	bic.w	r3, r3, #2
 80017c6:	6113      	str	r3, [r2, #16]
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bc80      	pop	{r7}
 80017ce:	4770      	bx	lr
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80017d8:	4b03      	ldr	r3, [pc, #12]	@ (80017e8 <HAL_PWREx_GetVoltageRange+0x14>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bc80      	pop	{r7}
 80017e6:	4770      	bx	lr
 80017e8:	58000400 	.word	0x58000400

080017ec <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 80017f0:	4b04      	ldr	r3, [pc, #16]	@ (8001804 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a03      	ldr	r2, [pc, #12]	@ (8001804 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80017f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017fa:	6013      	str	r3, [r2, #0]
}
 80017fc:	bf00      	nop
 80017fe:	46bd      	mov	sp, r7
 8001800:	bc80      	pop	{r7}
 8001802:	4770      	bx	lr
 8001804:	58000400 	.word	0x58000400

08001808 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800180e:	4b16      	ldr	r3, [pc, #88]	@ (8001868 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a15      	ldr	r2, [pc, #84]	@ (8001868 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8001814:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001818:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 800181a:	4b14      	ldr	r3, [pc, #80]	@ (800186c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2232      	movs	r2, #50	@ 0x32
 8001820:	fb02 f303 	mul.w	r3, r2, r3
 8001824:	4a12      	ldr	r2, [pc, #72]	@ (8001870 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8001826:	fba2 2303 	umull	r2, r3, r2, r3
 800182a:	0c9b      	lsrs	r3, r3, #18
 800182c:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800182e:	e002      	b.n	8001836 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	3b01      	subs	r3, #1
 8001834:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8001836:	4b0c      	ldr	r3, [pc, #48]	@ (8001868 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8001838:	695b      	ldr	r3, [r3, #20]
 800183a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800183e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001842:	d102      	bne.n	800184a <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1f2      	bne.n	8001830 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800184a:	4b07      	ldr	r3, [pc, #28]	@ (8001868 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 800184c:	695b      	ldr	r3, [r3, #20]
 800184e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001852:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001856:	d101      	bne.n	800185c <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e000      	b.n	800185e <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	bc80      	pop	{r7}
 8001866:	4770      	bx	lr
 8001868:	58000400 	.word	0x58000400
 800186c:	20000000 	.word	0x20000000
 8001870:	431bde83 	.word	0x431bde83

08001874 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8001878:	4b06      	ldr	r3, [pc, #24]	@ (8001894 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001880:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001884:	d101      	bne.n	800188a <LL_PWR_IsEnabledBkUpAccess+0x16>
 8001886:	2301      	movs	r3, #1
 8001888:	e000      	b.n	800188c <LL_PWR_IsEnabledBkUpAccess+0x18>
 800188a:	2300      	movs	r3, #0
}
 800188c:	4618      	mov	r0, r3
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr
 8001894:	58000400 	.word	0x58000400

08001898 <LL_RCC_HSE_EnableTcxo>:
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800189c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80018a6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80018aa:	6013      	str	r3, [r2, #0]
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr

080018b4 <LL_RCC_HSE_DisableTcxo>:
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80018b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80018c2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80018c6:	6013      	str	r3, [r2, #0]
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr

080018d0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80018d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80018e2:	d101      	bne.n	80018e8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80018e4:	2301      	movs	r3, #1
 80018e6:	e000      	b.n	80018ea <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bc80      	pop	{r7}
 80018f0:	4770      	bx	lr

080018f2 <LL_RCC_HSE_Enable>:
{
 80018f2:	b480      	push	{r7}
 80018f4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80018f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001900:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001904:	6013      	str	r3, [r2, #0]
}
 8001906:	bf00      	nop
 8001908:	46bd      	mov	sp, r7
 800190a:	bc80      	pop	{r7}
 800190c:	4770      	bx	lr

0800190e <LL_RCC_HSE_Disable>:
{
 800190e:	b480      	push	{r7}
 8001910:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001912:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800191c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001920:	6013      	str	r3, [r2, #0]
}
 8001922:	bf00      	nop
 8001924:	46bd      	mov	sp, r7
 8001926:	bc80      	pop	{r7}
 8001928:	4770      	bx	lr

0800192a <LL_RCC_HSE_IsReady>:
{
 800192a:	b480      	push	{r7}
 800192c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800192e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001938:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800193c:	d101      	bne.n	8001942 <LL_RCC_HSE_IsReady+0x18>
 800193e:	2301      	movs	r3, #1
 8001940:	e000      	b.n	8001944 <LL_RCC_HSE_IsReady+0x1a>
 8001942:	2300      	movs	r3, #0
}
 8001944:	4618      	mov	r0, r3
 8001946:	46bd      	mov	sp, r7
 8001948:	bc80      	pop	{r7}
 800194a:	4770      	bx	lr

0800194c <LL_RCC_HSI_Enable>:
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001950:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800195a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800195e:	6013      	str	r3, [r2, #0]
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	bc80      	pop	{r7}
 8001966:	4770      	bx	lr

08001968 <LL_RCC_HSI_Disable>:
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800196c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001976:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800197a:	6013      	str	r3, [r2, #0]
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	bc80      	pop	{r7}
 8001982:	4770      	bx	lr

08001984 <LL_RCC_HSI_IsReady>:
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001988:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001992:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001996:	d101      	bne.n	800199c <LL_RCC_HSI_IsReady+0x18>
 8001998:	2301      	movs	r3, #1
 800199a:	e000      	b.n	800199e <LL_RCC_HSI_IsReady+0x1a>
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bc80      	pop	{r7}
 80019a4:	4770      	bx	lr

080019a6 <LL_RCC_HSI_SetCalibTrimming>:
{
 80019a6:	b480      	push	{r7}
 80019a8:	b083      	sub	sp, #12
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80019ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	061b      	lsls	r3, r3, #24
 80019bc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80019c0:	4313      	orrs	r3, r2
 80019c2:	604b      	str	r3, [r1, #4]
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bc80      	pop	{r7}
 80019cc:	4770      	bx	lr

080019ce <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80019d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d101      	bne.n	80019e6 <LL_RCC_LSE_IsReady+0x18>
 80019e2:	2301      	movs	r3, #1
 80019e4:	e000      	b.n	80019e8 <LL_RCC_LSE_IsReady+0x1a>
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr

080019f0 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80019f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a00:	f043 0301 	orr.w	r3, r3, #1
 8001a04:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001a08:	bf00      	nop
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr

08001a10 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001a14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a1c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a20:	f023 0301 	bic.w	r3, r3, #1
 8001a24:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr

08001a30 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8001a34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a3c:	f003 0302 	and.w	r3, r3, #2
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d101      	bne.n	8001a48 <LL_RCC_LSI_IsReady+0x18>
 8001a44:	2301      	movs	r3, #1
 8001a46:	e000      	b.n	8001a4a <LL_RCC_LSI_IsReady+0x1a>
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bc80      	pop	{r7}
 8001a50:	4770      	bx	lr

08001a52 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001a52:	b480      	push	{r7}
 8001a54:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001a56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	6013      	str	r3, [r2, #0]
}
 8001a66:	bf00      	nop
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bc80      	pop	{r7}
 8001a6c:	4770      	bx	lr

08001a6e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001a72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a7c:	f023 0301 	bic.w	r3, r3, #1
 8001a80:	6013      	str	r3, [r2, #0]
}
 8001a82:	bf00      	nop
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bc80      	pop	{r7}
 8001a88:	4770      	bx	lr

08001a8a <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001a8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d101      	bne.n	8001aa0 <LL_RCC_MSI_IsReady+0x16>
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e000      	b.n	8001aa2 <LL_RCC_MSI_IsReady+0x18>
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bc80      	pop	{r7}
 8001aa8:	4770      	bx	lr

08001aaa <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8001aae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0308 	and.w	r3, r3, #8
 8001ab8:	2b08      	cmp	r3, #8
 8001aba:	d101      	bne.n	8001ac0 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001abc:	2301      	movs	r3, #1
 8001abe:	e000      	b.n	8001ac2 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bc80      	pop	{r7}
 8001ac8:	4770      	bx	lr

08001aca <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001aca:	b480      	push	{r7}
 8001acc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8001ace:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bc80      	pop	{r7}
 8001ade:	4770      	bx	lr

08001ae0 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001ae4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ae8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001aec:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bc80      	pop	{r7}
 8001af6:	4770      	bx	lr

08001af8 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001b00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	021b      	lsls	r3, r3, #8
 8001b0e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001b12:	4313      	orrs	r3, r2
 8001b14:	604b      	str	r3, [r1, #4]
}
 8001b16:	bf00      	nop
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bc80      	pop	{r7}
 8001b1e:	4770      	bx	lr

08001b20 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001b28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f023 0203 	bic.w	r2, r3, #3
 8001b32:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	608b      	str	r3, [r1, #8]
}
 8001b3c:	bf00      	nop
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bc80      	pop	{r7}
 8001b44:	4770      	bx	lr

08001b46 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001b46:	b480      	push	{r7}
 8001b48:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001b4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f003 030c 	and.w	r3, r3, #12
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bc80      	pop	{r7}
 8001b5a:	4770      	bx	lr

08001b5c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001b64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b6e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	608b      	str	r3, [r1, #8]
}
 8001b78:	bf00      	nop
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bc80      	pop	{r7}
 8001b80:	4770      	bx	lr

08001b82 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001b82:	b480      	push	{r7}
 8001b84:	b083      	sub	sp, #12
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001b8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b8e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001b92:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b96:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bc80      	pop	{r7}
 8001baa:	4770      	bx	lr

08001bac <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001bb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bb8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001bbc:	f023 020f 	bic.w	r2, r3, #15
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	091b      	lsrs	r3, r3, #4
 8001bc4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bc80      	pop	{r7}
 8001bd6:	4770      	bx	lr

08001bd8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001be0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001bea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	608b      	str	r3, [r1, #8]
}
 8001bf4:	bf00      	nop
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bc80      	pop	{r7}
 8001bfc:	4770      	bx	lr

08001bfe <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	b083      	sub	sp, #12
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001c06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c10:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	608b      	str	r3, [r1, #8]
}
 8001c1a:	bf00      	nop
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bc80      	pop	{r7}
 8001c22:	4770      	bx	lr

08001c24 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001c28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bc80      	pop	{r7}
 8001c38:	4770      	bx	lr

08001c3a <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001c3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c42:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001c46:	011b      	lsls	r3, r3, #4
 8001c48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr

08001c54 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001c58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bc80      	pop	{r7}
 8001c68:	4770      	bx	lr

08001c6a <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001c6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr

08001c80 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001c84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c92:	6013      	str	r3, [r2, #0]
}
 8001c94:	bf00      	nop
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bc80      	pop	{r7}
 8001c9a:	4770      	bx	lr

08001c9c <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001ca0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001caa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001cae:	6013      	str	r3, [r2, #0]
}
 8001cb0:	bf00      	nop
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bc80      	pop	{r7}
 8001cb6:	4770      	bx	lr

08001cb8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001cbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cc6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001cca:	d101      	bne.n	8001cd0 <LL_RCC_PLL_IsReady+0x18>
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e000      	b.n	8001cd2 <LL_RCC_PLL_IsReady+0x1a>
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bc80      	pop	{r7}
 8001cd8:	4770      	bx	lr

08001cda <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001cde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	0a1b      	lsrs	r3, r3, #8
 8001ce6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bc80      	pop	{r7}
 8001cf0:	4770      	bx	lr

08001cf2 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001cf6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bc80      	pop	{r7}
 8001d06:	4770      	bx	lr

08001d08 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001d0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bc80      	pop	{r7}
 8001d1c:	4770      	bx	lr

08001d1e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001d22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	f003 0303 	and.w	r3, r3, #3
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bc80      	pop	{r7}
 8001d32:	4770      	bx	lr

08001d34 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001d38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d46:	d101      	bne.n	8001d4c <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e000      	b.n	8001d4e <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bc80      	pop	{r7}
 8001d54:	4770      	bx	lr

08001d56 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001d56:	b480      	push	{r7}
 8001d58:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001d5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d5e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001d62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d66:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001d6a:	d101      	bne.n	8001d70 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e000      	b.n	8001d72 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bc80      	pop	{r7}
 8001d78:	4770      	bx	lr

08001d7a <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001d7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d82:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001d86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d8e:	d101      	bne.n	8001d94 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001d90:	2301      	movs	r3, #1
 8001d92:	e000      	b.n	8001d96 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bc80      	pop	{r7}
 8001d9c:	4770      	bx	lr

08001d9e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001da2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001db0:	d101      	bne.n	8001db6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001db2:	2301      	movs	r3, #1
 8001db4:	e000      	b.n	8001db8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bc80      	pop	{r7}
 8001dbe:	4770      	bx	lr

08001dc0 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001dc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001dce:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001dd2:	d101      	bne.n	8001dd8 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e000      	b.n	8001dda <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bc80      	pop	{r7}
 8001de0:	4770      	bx	lr
	...

08001de4 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b088      	sub	sp, #32
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d101      	bne.n	8001df6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e36f      	b.n	80024d6 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001df6:	f7ff fea6 	bl	8001b46 <LL_RCC_GetSysClkSource>
 8001dfa:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dfc:	f7ff ff8f 	bl	8001d1e <LL_RCC_PLL_GetMainSource>
 8001e00:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0320 	and.w	r3, r3, #32
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	f000 80c4 	beq.w	8001f98 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d005      	beq.n	8001e22 <HAL_RCC_OscConfig+0x3e>
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	2b0c      	cmp	r3, #12
 8001e1a:	d176      	bne.n	8001f0a <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d173      	bne.n	8001f0a <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a1b      	ldr	r3, [r3, #32]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d101      	bne.n	8001e2e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e353      	b.n	80024d6 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0308 	and.w	r3, r3, #8
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d005      	beq.n	8001e4c <HAL_RCC_OscConfig+0x68>
 8001e40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e4a:	e006      	b.n	8001e5a <HAL_RCC_OscConfig+0x76>
 8001e4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e54:	091b      	lsrs	r3, r3, #4
 8001e56:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d222      	bcs.n	8001ea4 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e62:	4618      	mov	r0, r3
 8001e64:	f000 fd5a 	bl	800291c <RCC_SetFlashLatencyFromMSIRange>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e331      	b.n	80024d6 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e7c:	f043 0308 	orr.w	r3, r3, #8
 8001e80:	6013      	str	r3, [r2, #0]
 8001e82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e90:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001e94:	4313      	orrs	r3, r2
 8001e96:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff fe2b 	bl	8001af8 <LL_RCC_MSI_SetCalibTrimming>
 8001ea2:	e021      	b.n	8001ee8 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ea4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001eae:	f043 0308 	orr.w	r3, r3, #8
 8001eb2:	6013      	str	r3, [r2, #0]
 8001eb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ec2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff fe12 	bl	8001af8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f000 fd1f 	bl	800291c <RCC_SetFlashLatencyFromMSIRange>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e2f6      	b.n	80024d6 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001ee8:	f000 fce0 	bl	80028ac <HAL_RCC_GetHCLKFreq>
 8001eec:	4603      	mov	r3, r0
 8001eee:	4aa7      	ldr	r2, [pc, #668]	@ (800218c <HAL_RCC_OscConfig+0x3a8>)
 8001ef0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8001ef2:	4ba7      	ldr	r3, [pc, #668]	@ (8002190 <HAL_RCC_OscConfig+0x3ac>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7fe ffac 	bl	8000e54 <HAL_InitTick>
 8001efc:	4603      	mov	r3, r0
 8001efe:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8001f00:	7cfb      	ldrb	r3, [r7, #19]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d047      	beq.n	8001f96 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8001f06:	7cfb      	ldrb	r3, [r7, #19]
 8001f08:	e2e5      	b.n	80024d6 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a1b      	ldr	r3, [r3, #32]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d02c      	beq.n	8001f6c <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f12:	f7ff fd9e 	bl	8001a52 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f16:	f7fe ffe9 	bl	8000eec <HAL_GetTick>
 8001f1a:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001f1c:	e008      	b.n	8001f30 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f1e:	f7fe ffe5 	bl	8000eec <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e2d2      	b.n	80024d6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001f30:	f7ff fdab 	bl	8001a8a <LL_RCC_MSI_IsReady>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d0f1      	beq.n	8001f1e <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f44:	f043 0308 	orr.w	r3, r3, #8
 8001f48:	6013      	str	r3, [r2, #0]
 8001f4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f58:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff fdc7 	bl	8001af8 <LL_RCC_MSI_SetCalibTrimming>
 8001f6a:	e015      	b.n	8001f98 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f6c:	f7ff fd7f 	bl	8001a6e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f70:	f7fe ffbc 	bl	8000eec <HAL_GetTick>
 8001f74:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f78:	f7fe ffb8 	bl	8000eec <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e2a5      	b.n	80024d6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001f8a:	f7ff fd7e 	bl	8001a8a <LL_RCC_MSI_IsReady>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d1f1      	bne.n	8001f78 <HAL_RCC_OscConfig+0x194>
 8001f94:	e000      	b.n	8001f98 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001f96:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0301 	and.w	r3, r3, #1
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d058      	beq.n	8002056 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	2b08      	cmp	r3, #8
 8001fa8:	d005      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x1d2>
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	2b0c      	cmp	r3, #12
 8001fae:	d108      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	2b03      	cmp	r3, #3
 8001fb4:	d105      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d14b      	bne.n	8002056 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e289      	b.n	80024d6 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8001fc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fe0:	d102      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x204>
 8001fe2:	f7ff fc86 	bl	80018f2 <LL_RCC_HSE_Enable>
 8001fe6:	e00d      	b.n	8002004 <HAL_RCC_OscConfig+0x220>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8001ff0:	d104      	bne.n	8001ffc <HAL_RCC_OscConfig+0x218>
 8001ff2:	f7ff fc51 	bl	8001898 <LL_RCC_HSE_EnableTcxo>
 8001ff6:	f7ff fc7c 	bl	80018f2 <LL_RCC_HSE_Enable>
 8001ffa:	e003      	b.n	8002004 <HAL_RCC_OscConfig+0x220>
 8001ffc:	f7ff fc87 	bl	800190e <LL_RCC_HSE_Disable>
 8002000:	f7ff fc58 	bl	80018b4 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d012      	beq.n	8002032 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200c:	f7fe ff6e 	bl	8000eec <HAL_GetTick>
 8002010:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002014:	f7fe ff6a 	bl	8000eec <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b64      	cmp	r3, #100	@ 0x64
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e257      	b.n	80024d6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002026:	f7ff fc80 	bl	800192a <LL_RCC_HSE_IsReady>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d0f1      	beq.n	8002014 <HAL_RCC_OscConfig+0x230>
 8002030:	e011      	b.n	8002056 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002032:	f7fe ff5b 	bl	8000eec <HAL_GetTick>
 8002036:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002038:	e008      	b.n	800204c <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800203a:	f7fe ff57 	bl	8000eec <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b64      	cmp	r3, #100	@ 0x64
 8002046:	d901      	bls.n	800204c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e244      	b.n	80024d6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 800204c:	f7ff fc6d 	bl	800192a <LL_RCC_HSE_IsReady>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d1f1      	bne.n	800203a <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d046      	beq.n	80020f0 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	2b04      	cmp	r3, #4
 8002066:	d005      	beq.n	8002074 <HAL_RCC_OscConfig+0x290>
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	2b0c      	cmp	r3, #12
 800206c:	d10e      	bne.n	800208c <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	2b02      	cmp	r3, #2
 8002072:	d10b      	bne.n	800208c <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	691b      	ldr	r3, [r3, #16]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d101      	bne.n	8002080 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e22a      	b.n	80024d6 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	695b      	ldr	r3, [r3, #20]
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff fc8e 	bl	80019a6 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800208a:	e031      	b.n	80020f0 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d019      	beq.n	80020c8 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002094:	f7ff fc5a 	bl	800194c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002098:	f7fe ff28 	bl	8000eec <HAL_GetTick>
 800209c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020a0:	f7fe ff24 	bl	8000eec <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e211      	b.n	80024d6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 80020b2:	f7ff fc67 	bl	8001984 <LL_RCC_HSI_IsReady>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d0f1      	beq.n	80020a0 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	695b      	ldr	r3, [r3, #20]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff fc70 	bl	80019a6 <LL_RCC_HSI_SetCalibTrimming>
 80020c6:	e013      	b.n	80020f0 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020c8:	f7ff fc4e 	bl	8001968 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020cc:	f7fe ff0e 	bl	8000eec <HAL_GetTick>
 80020d0:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020d4:	f7fe ff0a 	bl	8000eec <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e1f7      	b.n	80024d6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 80020e6:	f7ff fc4d 	bl	8001984 <LL_RCC_HSI_IsReady>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1f1      	bne.n	80020d4 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0308 	and.w	r3, r3, #8
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d06e      	beq.n	80021da <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d056      	beq.n	80021b2 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8002104:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002108:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800210c:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	69da      	ldr	r2, [r3, #28]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f003 0310 	and.w	r3, r3, #16
 8002118:	429a      	cmp	r2, r3
 800211a:	d031      	beq.n	8002180 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d006      	beq.n	8002134 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800212c:	2b00      	cmp	r3, #0
 800212e:	d101      	bne.n	8002134 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e1d0      	b.n	80024d6 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b00      	cmp	r3, #0
 800213c:	d013      	beq.n	8002166 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 800213e:	f7ff fc67 	bl	8001a10 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002142:	f7fe fed3 	bl	8000eec <HAL_GetTick>
 8002146:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8002148:	e008      	b.n	800215c <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800214a:	f7fe fecf 	bl	8000eec <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b11      	cmp	r3, #17
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e1bc      	b.n	80024d6 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 800215c:	f7ff fc68 	bl	8001a30 <LL_RCC_LSI_IsReady>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1f1      	bne.n	800214a <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8002166:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800216a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800216e:	f023 0210 	bic.w	r2, r3, #16
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800217a:	4313      	orrs	r3, r2
 800217c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002180:	f7ff fc36 	bl	80019f0 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002184:	f7fe feb2 	bl	8000eec <HAL_GetTick>
 8002188:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800218a:	e00c      	b.n	80021a6 <HAL_RCC_OscConfig+0x3c2>
 800218c:	20000000 	.word	0x20000000
 8002190:	20000038 	.word	0x20000038
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002194:	f7fe feaa 	bl	8000eec <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b11      	cmp	r3, #17
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e197      	b.n	80024d6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 80021a6:	f7ff fc43 	bl	8001a30 <LL_RCC_LSI_IsReady>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d0f1      	beq.n	8002194 <HAL_RCC_OscConfig+0x3b0>
 80021b0:	e013      	b.n	80021da <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021b2:	f7ff fc2d 	bl	8001a10 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021b6:	f7fe fe99 	bl	8000eec <HAL_GetTick>
 80021ba:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80021bc:	e008      	b.n	80021d0 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021be:	f7fe fe95 	bl	8000eec <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	2b11      	cmp	r3, #17
 80021ca:	d901      	bls.n	80021d0 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e182      	b.n	80024d6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 80021d0:	f7ff fc2e 	bl	8001a30 <LL_RCC_LSI_IsReady>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1f1      	bne.n	80021be <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0304 	and.w	r3, r3, #4
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f000 80d8 	beq.w	8002398 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80021e8:	f7ff fb44 	bl	8001874 <LL_PWR_IsEnabledBkUpAccess>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d113      	bne.n	800221a <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80021f2:	f7ff fa91 	bl	8001718 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021f6:	f7fe fe79 	bl	8000eec <HAL_GetTick>
 80021fa:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80021fc:	e008      	b.n	8002210 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021fe:	f7fe fe75 	bl	8000eec <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e162      	b.n	80024d6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002210:	f7ff fb30 	bl	8001874 <LL_PWR_IsEnabledBkUpAccess>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d0f1      	beq.n	80021fe <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d07b      	beq.n	800231a <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	2b85      	cmp	r3, #133	@ 0x85
 8002228:	d003      	beq.n	8002232 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	2b05      	cmp	r3, #5
 8002230:	d109      	bne.n	8002246 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002232:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002236:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800223a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800223e:	f043 0304 	orr.w	r3, r3, #4
 8002242:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002246:	f7fe fe51 	bl	8000eec <HAL_GetTick>
 800224a:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800224c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002250:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002254:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002258:	f043 0301 	orr.w	r3, r3, #1
 800225c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002260:	e00a      	b.n	8002278 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002262:	f7fe fe43 	bl	8000eec <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002270:	4293      	cmp	r3, r2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e12e      	b.n	80024d6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002278:	f7ff fba9 	bl	80019ce <LL_RCC_LSE_IsReady>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d0ef      	beq.n	8002262 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	2b81      	cmp	r3, #129	@ 0x81
 8002288:	d003      	beq.n	8002292 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	2b85      	cmp	r3, #133	@ 0x85
 8002290:	d121      	bne.n	80022d6 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002292:	f7fe fe2b 	bl	8000eec <HAL_GetTick>
 8002296:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002298:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800229c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80022a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80022ac:	e00a      	b.n	80022c4 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ae:	f7fe fe1d 	bl	8000eec <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022bc:	4293      	cmp	r3, r2
 80022be:	d901      	bls.n	80022c4 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e108      	b.n	80024d6 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80022c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d0ec      	beq.n	80022ae <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80022d4:	e060      	b.n	8002398 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d6:	f7fe fe09 	bl	8000eec <HAL_GetTick>
 80022da:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80022dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80022e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80022ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80022f0:	e00a      	b.n	8002308 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022f2:	f7fe fdfb 	bl	8000eec <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002300:	4293      	cmp	r3, r2
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e0e6      	b.n	80024d6 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002308:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800230c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002310:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002314:	2b00      	cmp	r3, #0
 8002316:	d1ec      	bne.n	80022f2 <HAL_RCC_OscConfig+0x50e>
 8002318:	e03e      	b.n	8002398 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800231a:	f7fe fde7 	bl	8000eec <HAL_GetTick>
 800231e:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002320:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002324:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002328:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800232c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002330:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002334:	e00a      	b.n	800234c <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002336:	f7fe fdd9 	bl	8000eec <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002344:	4293      	cmp	r3, r2
 8002346:	d901      	bls.n	800234c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e0c4      	b.n	80024d6 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800234c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002350:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002354:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002358:	2b00      	cmp	r3, #0
 800235a:	d1ec      	bne.n	8002336 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800235c:	f7fe fdc6 	bl	8000eec <HAL_GetTick>
 8002360:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002362:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002366:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800236a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800236e:	f023 0301 	bic.w	r3, r3, #1
 8002372:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002376:	e00a      	b.n	800238e <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002378:	f7fe fdb8 	bl	8000eec <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002386:	4293      	cmp	r3, r2
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e0a3      	b.n	80024d6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 800238e:	f7ff fb1e 	bl	80019ce <LL_RCC_LSE_IsReady>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d1ef      	bne.n	8002378 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800239c:	2b00      	cmp	r3, #0
 800239e:	f000 8099 	beq.w	80024d4 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	2b0c      	cmp	r3, #12
 80023a6:	d06c      	beq.n	8002482 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d14b      	bne.n	8002448 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023b0:	f7ff fc74 	bl	8001c9c <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b4:	f7fe fd9a 	bl	8000eec <HAL_GetTick>
 80023b8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023bc:	f7fe fd96 	bl	8000eec <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b0a      	cmp	r3, #10
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e083      	b.n	80024d6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80023ce:	f7ff fc73 	bl	8001cb8 <LL_RCC_PLL_IsReady>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d1f1      	bne.n	80023bc <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023dc:	68da      	ldr	r2, [r3, #12]
 80023de:	4b40      	ldr	r3, [pc, #256]	@ (80024e0 <HAL_RCC_OscConfig+0x6fc>)
 80023e0:	4013      	ands	r3, r2
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80023ea:	4311      	orrs	r1, r2
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80023f0:	0212      	lsls	r2, r2, #8
 80023f2:	4311      	orrs	r1, r2
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80023f8:	4311      	orrs	r1, r2
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80023fe:	4311      	orrs	r1, r2
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002404:	430a      	orrs	r2, r1
 8002406:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800240a:	4313      	orrs	r3, r2
 800240c:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800240e:	f7ff fc37 	bl	8001c80 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002412:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800241c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002420:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002422:	f7fe fd63 	bl	8000eec <HAL_GetTick>
 8002426:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8002428:	e008      	b.n	800243c <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800242a:	f7fe fd5f 	bl	8000eec <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	2b0a      	cmp	r3, #10
 8002436:	d901      	bls.n	800243c <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e04c      	b.n	80024d6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 800243c:	f7ff fc3c 	bl	8001cb8 <LL_RCC_PLL_IsReady>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d0f1      	beq.n	800242a <HAL_RCC_OscConfig+0x646>
 8002446:	e045      	b.n	80024d4 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002448:	f7ff fc28 	bl	8001c9c <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800244c:	f7fe fd4e 	bl	8000eec <HAL_GetTick>
 8002450:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002452:	e008      	b.n	8002466 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002454:	f7fe fd4a 	bl	8000eec <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b0a      	cmp	r3, #10
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e037      	b.n	80024d6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002466:	f7ff fc27 	bl	8001cb8 <LL_RCC_PLL_IsReady>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1f1      	bne.n	8002454 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002470:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002474:	68da      	ldr	r2, [r3, #12]
 8002476:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800247a:	4b1a      	ldr	r3, [pc, #104]	@ (80024e4 <HAL_RCC_OscConfig+0x700>)
 800247c:	4013      	ands	r3, r2
 800247e:	60cb      	str	r3, [r1, #12]
 8002480:	e028      	b.n	80024d4 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002486:	2b01      	cmp	r3, #1
 8002488:	d101      	bne.n	800248e <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e023      	b.n	80024d6 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800248e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	f003 0203 	and.w	r2, r3, #3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d115      	bne.n	80024d0 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d10e      	bne.n	80024d0 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024bc:	021b      	lsls	r3, r3, #8
 80024be:	429a      	cmp	r2, r3
 80024c0:	d106      	bne.n	80024d0 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d001      	beq.n	80024d4 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e000      	b.n	80024d6 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3720      	adds	r7, #32
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	11c1808c 	.word	0x11c1808c
 80024e4:	eefefffc 	.word	0xeefefffc

080024e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d101      	bne.n	80024fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e12c      	b.n	8002756 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024fc:	4b98      	ldr	r3, [pc, #608]	@ (8002760 <HAL_RCC_ClockConfig+0x278>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0307 	and.w	r3, r3, #7
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	429a      	cmp	r2, r3
 8002508:	d91b      	bls.n	8002542 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800250a:	4b95      	ldr	r3, [pc, #596]	@ (8002760 <HAL_RCC_ClockConfig+0x278>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f023 0207 	bic.w	r2, r3, #7
 8002512:	4993      	ldr	r1, [pc, #588]	@ (8002760 <HAL_RCC_ClockConfig+0x278>)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	4313      	orrs	r3, r2
 8002518:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800251a:	f7fe fce7 	bl	8000eec <HAL_GetTick>
 800251e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002520:	e008      	b.n	8002534 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002522:	f7fe fce3 	bl	8000eec <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b02      	cmp	r3, #2
 800252e:	d901      	bls.n	8002534 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e110      	b.n	8002756 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002534:	4b8a      	ldr	r3, [pc, #552]	@ (8002760 <HAL_RCC_ClockConfig+0x278>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0307 	and.w	r3, r3, #7
 800253c:	683a      	ldr	r2, [r7, #0]
 800253e:	429a      	cmp	r2, r3
 8002540:	d1ef      	bne.n	8002522 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d016      	beq.n	800257c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	4618      	mov	r0, r3
 8002554:	f7ff fb02 	bl	8001b5c <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002558:	f7fe fcc8 	bl	8000eec <HAL_GetTick>
 800255c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800255e:	e008      	b.n	8002572 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002560:	f7fe fcc4 	bl	8000eec <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e0f1      	b.n	8002756 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002572:	f7ff fbdf 	bl	8001d34 <LL_RCC_IsActiveFlag_HPRE>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d0f1      	beq.n	8002560 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0320 	and.w	r3, r3, #32
 8002584:	2b00      	cmp	r3, #0
 8002586:	d016      	beq.n	80025b6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff faf8 	bl	8001b82 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002592:	f7fe fcab 	bl	8000eec <HAL_GetTick>
 8002596:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002598:	e008      	b.n	80025ac <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800259a:	f7fe fca7 	bl	8000eec <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e0d4      	b.n	8002756 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80025ac:	f7ff fbd3 	bl	8001d56 <LL_RCC_IsActiveFlag_C2HPRE>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d0f1      	beq.n	800259a <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d016      	beq.n	80025f0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7ff faf0 	bl	8001bac <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80025cc:	f7fe fc8e 	bl	8000eec <HAL_GetTick>
 80025d0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80025d4:	f7fe fc8a 	bl	8000eec <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e0b7      	b.n	8002756 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80025e6:	f7ff fbc8 	bl	8001d7a <LL_RCC_IsActiveFlag_SHDHPRE>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d0f1      	beq.n	80025d4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d016      	beq.n	800262a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff fae9 	bl	8001bd8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002606:	f7fe fc71 	bl	8000eec <HAL_GetTick>
 800260a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800260c:	e008      	b.n	8002620 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800260e:	f7fe fc6d 	bl	8000eec <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e09a      	b.n	8002756 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002620:	f7ff fbbd 	bl	8001d9e <LL_RCC_IsActiveFlag_PPRE1>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d0f1      	beq.n	800260e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0308 	and.w	r3, r3, #8
 8002632:	2b00      	cmp	r3, #0
 8002634:	d017      	beq.n	8002666 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	4618      	mov	r0, r3
 800263e:	f7ff fade 	bl	8001bfe <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002642:	f7fe fc53 	bl	8000eec <HAL_GetTick>
 8002646:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002648:	e008      	b.n	800265c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800264a:	f7fe fc4f 	bl	8000eec <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d901      	bls.n	800265c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e07c      	b.n	8002756 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800265c:	f7ff fbb0 	bl	8001dc0 <LL_RCC_IsActiveFlag_PPRE2>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d0f1      	beq.n	800264a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	2b00      	cmp	r3, #0
 8002670:	d043      	beq.n	80026fa <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	2b02      	cmp	r3, #2
 8002678:	d106      	bne.n	8002688 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800267a:	f7ff f956 	bl	800192a <LL_RCC_HSE_IsReady>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d11e      	bne.n	80026c2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e066      	b.n	8002756 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	2b03      	cmp	r3, #3
 800268e:	d106      	bne.n	800269e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002690:	f7ff fb12 	bl	8001cb8 <LL_RCC_PLL_IsReady>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d113      	bne.n	80026c2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e05b      	b.n	8002756 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d106      	bne.n	80026b4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80026a6:	f7ff f9f0 	bl	8001a8a <LL_RCC_MSI_IsReady>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d108      	bne.n	80026c2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e050      	b.n	8002756 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80026b4:	f7ff f966 	bl	8001984 <LL_RCC_HSI_IsReady>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d101      	bne.n	80026c2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e049      	b.n	8002756 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff fa2a 	bl	8001b20 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026cc:	f7fe fc0e 	bl	8000eec <HAL_GetTick>
 80026d0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026d2:	e00a      	b.n	80026ea <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026d4:	f7fe fc0a 	bl	8000eec <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e035      	b.n	8002756 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ea:	f7ff fa2c 	bl	8001b46 <LL_RCC_GetSysClkSource>
 80026ee:	4602      	mov	r2, r0
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d1ec      	bne.n	80026d4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026fa:	4b19      	ldr	r3, [pc, #100]	@ (8002760 <HAL_RCC_ClockConfig+0x278>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0307 	and.w	r3, r3, #7
 8002702:	683a      	ldr	r2, [r7, #0]
 8002704:	429a      	cmp	r2, r3
 8002706:	d21b      	bcs.n	8002740 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002708:	4b15      	ldr	r3, [pc, #84]	@ (8002760 <HAL_RCC_ClockConfig+0x278>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f023 0207 	bic.w	r2, r3, #7
 8002710:	4913      	ldr	r1, [pc, #76]	@ (8002760 <HAL_RCC_ClockConfig+0x278>)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	4313      	orrs	r3, r2
 8002716:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002718:	f7fe fbe8 	bl	8000eec <HAL_GetTick>
 800271c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800271e:	e008      	b.n	8002732 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002720:	f7fe fbe4 	bl	8000eec <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b02      	cmp	r3, #2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e011      	b.n	8002756 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002732:	4b0b      	ldr	r3, [pc, #44]	@ (8002760 <HAL_RCC_ClockConfig+0x278>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	683a      	ldr	r2, [r7, #0]
 800273c:	429a      	cmp	r2, r3
 800273e:	d1ef      	bne.n	8002720 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002740:	f000 f8b4 	bl	80028ac <HAL_RCC_GetHCLKFreq>
 8002744:	4603      	mov	r3, r0
 8002746:	4a07      	ldr	r2, [pc, #28]	@ (8002764 <HAL_RCC_ClockConfig+0x27c>)
 8002748:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 800274a:	4b07      	ldr	r3, [pc, #28]	@ (8002768 <HAL_RCC_ClockConfig+0x280>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f7fe fb80 	bl	8000e54 <HAL_InitTick>
 8002754:	4603      	mov	r3, r0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	58004000 	.word	0x58004000
 8002764:	20000000 	.word	0x20000000
 8002768:	20000038 	.word	0x20000038

0800276c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800276c:	b590      	push	{r4, r7, lr}
 800276e:	b087      	sub	sp, #28
 8002770:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8002772:	2300      	movs	r3, #0
 8002774:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8002776:	2300      	movs	r3, #0
 8002778:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800277a:	f7ff f9e4 	bl	8001b46 <LL_RCC_GetSysClkSource>
 800277e:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002780:	f7ff facd 	bl	8001d1e <LL_RCC_PLL_GetMainSource>
 8002784:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d005      	beq.n	8002798 <HAL_RCC_GetSysClockFreq+0x2c>
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	2b0c      	cmp	r3, #12
 8002790:	d139      	bne.n	8002806 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2b01      	cmp	r3, #1
 8002796:	d136      	bne.n	8002806 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002798:	f7ff f987 	bl	8001aaa <LL_RCC_MSI_IsEnabledRangeSelect>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d115      	bne.n	80027ce <HAL_RCC_GetSysClockFreq+0x62>
 80027a2:	f7ff f982 	bl	8001aaa <LL_RCC_MSI_IsEnabledRangeSelect>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d106      	bne.n	80027ba <HAL_RCC_GetSysClockFreq+0x4e>
 80027ac:	f7ff f98d 	bl	8001aca <LL_RCC_MSI_GetRange>
 80027b0:	4603      	mov	r3, r0
 80027b2:	0a1b      	lsrs	r3, r3, #8
 80027b4:	f003 030f 	and.w	r3, r3, #15
 80027b8:	e005      	b.n	80027c6 <HAL_RCC_GetSysClockFreq+0x5a>
 80027ba:	f7ff f991 	bl	8001ae0 <LL_RCC_MSI_GetRangeAfterStandby>
 80027be:	4603      	mov	r3, r0
 80027c0:	0a1b      	lsrs	r3, r3, #8
 80027c2:	f003 030f 	and.w	r3, r3, #15
 80027c6:	4a36      	ldr	r2, [pc, #216]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0x134>)
 80027c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027cc:	e014      	b.n	80027f8 <HAL_RCC_GetSysClockFreq+0x8c>
 80027ce:	f7ff f96c 	bl	8001aaa <LL_RCC_MSI_IsEnabledRangeSelect>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d106      	bne.n	80027e6 <HAL_RCC_GetSysClockFreq+0x7a>
 80027d8:	f7ff f977 	bl	8001aca <LL_RCC_MSI_GetRange>
 80027dc:	4603      	mov	r3, r0
 80027de:	091b      	lsrs	r3, r3, #4
 80027e0:	f003 030f 	and.w	r3, r3, #15
 80027e4:	e005      	b.n	80027f2 <HAL_RCC_GetSysClockFreq+0x86>
 80027e6:	f7ff f97b 	bl	8001ae0 <LL_RCC_MSI_GetRangeAfterStandby>
 80027ea:	4603      	mov	r3, r0
 80027ec:	091b      	lsrs	r3, r3, #4
 80027ee:	f003 030f 	and.w	r3, r3, #15
 80027f2:	4a2b      	ldr	r2, [pc, #172]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0x134>)
 80027f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027f8:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d115      	bne.n	800282c <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002804:	e012      	b.n	800282c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	2b04      	cmp	r3, #4
 800280a:	d102      	bne.n	8002812 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800280c:	4b25      	ldr	r3, [pc, #148]	@ (80028a4 <HAL_RCC_GetSysClockFreq+0x138>)
 800280e:	617b      	str	r3, [r7, #20]
 8002810:	e00c      	b.n	800282c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	2b08      	cmp	r3, #8
 8002816:	d109      	bne.n	800282c <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002818:	f7ff f85a 	bl	80018d0 <LL_RCC_HSE_IsEnabledDiv2>
 800281c:	4603      	mov	r3, r0
 800281e:	2b01      	cmp	r3, #1
 8002820:	d102      	bne.n	8002828 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002822:	4b20      	ldr	r3, [pc, #128]	@ (80028a4 <HAL_RCC_GetSysClockFreq+0x138>)
 8002824:	617b      	str	r3, [r7, #20]
 8002826:	e001      	b.n	800282c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002828:	4b1f      	ldr	r3, [pc, #124]	@ (80028a8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800282a:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800282c:	f7ff f98b 	bl	8001b46 <LL_RCC_GetSysClkSource>
 8002830:	4603      	mov	r3, r0
 8002832:	2b0c      	cmp	r3, #12
 8002834:	d12f      	bne.n	8002896 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002836:	f7ff fa72 	bl	8001d1e <LL_RCC_PLL_GetMainSource>
 800283a:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2b02      	cmp	r3, #2
 8002840:	d003      	beq.n	800284a <HAL_RCC_GetSysClockFreq+0xde>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2b03      	cmp	r3, #3
 8002846:	d003      	beq.n	8002850 <HAL_RCC_GetSysClockFreq+0xe4>
 8002848:	e00d      	b.n	8002866 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800284a:	4b16      	ldr	r3, [pc, #88]	@ (80028a4 <HAL_RCC_GetSysClockFreq+0x138>)
 800284c:	60fb      	str	r3, [r7, #12]
        break;
 800284e:	e00d      	b.n	800286c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002850:	f7ff f83e 	bl	80018d0 <LL_RCC_HSE_IsEnabledDiv2>
 8002854:	4603      	mov	r3, r0
 8002856:	2b01      	cmp	r3, #1
 8002858:	d102      	bne.n	8002860 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800285a:	4b12      	ldr	r3, [pc, #72]	@ (80028a4 <HAL_RCC_GetSysClockFreq+0x138>)
 800285c:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800285e:	e005      	b.n	800286c <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8002860:	4b11      	ldr	r3, [pc, #68]	@ (80028a8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002862:	60fb      	str	r3, [r7, #12]
        break;
 8002864:	e002      	b.n	800286c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	60fb      	str	r3, [r7, #12]
        break;
 800286a:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800286c:	f7ff fa35 	bl	8001cda <LL_RCC_PLL_GetN>
 8002870:	4602      	mov	r2, r0
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	fb03 f402 	mul.w	r4, r3, r2
 8002878:	f7ff fa46 	bl	8001d08 <LL_RCC_PLL_GetDivider>
 800287c:	4603      	mov	r3, r0
 800287e:	091b      	lsrs	r3, r3, #4
 8002880:	3301      	adds	r3, #1
 8002882:	fbb4 f4f3 	udiv	r4, r4, r3
 8002886:	f7ff fa34 	bl	8001cf2 <LL_RCC_PLL_GetR>
 800288a:	4603      	mov	r3, r0
 800288c:	0f5b      	lsrs	r3, r3, #29
 800288e:	3301      	adds	r3, #1
 8002890:	fbb4 f3f3 	udiv	r3, r4, r3
 8002894:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002896:	697b      	ldr	r3, [r7, #20]
}
 8002898:	4618      	mov	r0, r3
 800289a:	371c      	adds	r7, #28
 800289c:	46bd      	mov	sp, r7
 800289e:	bd90      	pop	{r4, r7, pc}
 80028a0:	08005184 	.word	0x08005184
 80028a4:	00f42400 	.word	0x00f42400
 80028a8:	01e84800 	.word	0x01e84800

080028ac <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028ac:	b598      	push	{r3, r4, r7, lr}
 80028ae:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80028b0:	f7ff ff5c 	bl	800276c <HAL_RCC_GetSysClockFreq>
 80028b4:	4604      	mov	r4, r0
 80028b6:	f7ff f9b5 	bl	8001c24 <LL_RCC_GetAHBPrescaler>
 80028ba:	4603      	mov	r3, r0
 80028bc:	091b      	lsrs	r3, r3, #4
 80028be:	f003 030f 	and.w	r3, r3, #15
 80028c2:	4a03      	ldr	r2, [pc, #12]	@ (80028d0 <HAL_RCC_GetHCLKFreq+0x24>)
 80028c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028c8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	bd98      	pop	{r3, r4, r7, pc}
 80028d0:	08005124 	.word	0x08005124

080028d4 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028d4:	b598      	push	{r3, r4, r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80028d8:	f7ff ffe8 	bl	80028ac <HAL_RCC_GetHCLKFreq>
 80028dc:	4604      	mov	r4, r0
 80028de:	f7ff f9b9 	bl	8001c54 <LL_RCC_GetAPB1Prescaler>
 80028e2:	4603      	mov	r3, r0
 80028e4:	0a1b      	lsrs	r3, r3, #8
 80028e6:	4a03      	ldr	r2, [pc, #12]	@ (80028f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ec:	fa24 f303 	lsr.w	r3, r4, r3
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	bd98      	pop	{r3, r4, r7, pc}
 80028f4:	08005164 	.word	0x08005164

080028f8 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028f8:	b598      	push	{r3, r4, r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80028fc:	f7ff ffd6 	bl	80028ac <HAL_RCC_GetHCLKFreq>
 8002900:	4604      	mov	r4, r0
 8002902:	f7ff f9b2 	bl	8001c6a <LL_RCC_GetAPB2Prescaler>
 8002906:	4603      	mov	r3, r0
 8002908:	0adb      	lsrs	r3, r3, #11
 800290a:	4a03      	ldr	r2, [pc, #12]	@ (8002918 <HAL_RCC_GetPCLK2Freq+0x20>)
 800290c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002910:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002914:	4618      	mov	r0, r3
 8002916:	bd98      	pop	{r3, r4, r7, pc}
 8002918:	08005164 	.word	0x08005164

0800291c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800291c:	b590      	push	{r4, r7, lr}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	091b      	lsrs	r3, r3, #4
 8002928:	f003 030f 	and.w	r3, r3, #15
 800292c:	4a10      	ldr	r2, [pc, #64]	@ (8002970 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800292e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002932:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8002934:	f7ff f981 	bl	8001c3a <LL_RCC_GetAHB3Prescaler>
 8002938:	4603      	mov	r3, r0
 800293a:	091b      	lsrs	r3, r3, #4
 800293c:	f003 030f 	and.w	r3, r3, #15
 8002940:	4a0c      	ldr	r2, [pc, #48]	@ (8002974 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8002942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	fbb2 f3f3 	udiv	r3, r2, r3
 800294c:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	4a09      	ldr	r2, [pc, #36]	@ (8002978 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8002952:	fba2 2303 	umull	r2, r3, r2, r3
 8002956:	0c9c      	lsrs	r4, r3, #18
 8002958:	f7fe ff3c 	bl	80017d4 <HAL_PWREx_GetVoltageRange>
 800295c:	4603      	mov	r3, r0
 800295e:	4619      	mov	r1, r3
 8002960:	4620      	mov	r0, r4
 8002962:	f000 f80b 	bl	800297c <RCC_SetFlashLatency>
 8002966:	4603      	mov	r3, r0
}
 8002968:	4618      	mov	r0, r3
 800296a:	3714      	adds	r7, #20
 800296c:	46bd      	mov	sp, r7
 800296e:	bd90      	pop	{r4, r7, pc}
 8002970:	08005184 	.word	0x08005184
 8002974:	08005124 	.word	0x08005124
 8002978:	431bde83 	.word	0x431bde83

0800297c <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b08e      	sub	sp, #56	@ 0x38
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8002986:	4a3a      	ldr	r2, [pc, #232]	@ (8002a70 <RCC_SetFlashLatency+0xf4>)
 8002988:	f107 0320 	add.w	r3, r7, #32
 800298c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002990:	6018      	str	r0, [r3, #0]
 8002992:	3304      	adds	r3, #4
 8002994:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8002996:	4a37      	ldr	r2, [pc, #220]	@ (8002a74 <RCC_SetFlashLatency+0xf8>)
 8002998:	f107 0318 	add.w	r3, r7, #24
 800299c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80029a0:	6018      	str	r0, [r3, #0]
 80029a2:	3304      	adds	r3, #4
 80029a4:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80029a6:	4a34      	ldr	r2, [pc, #208]	@ (8002a78 <RCC_SetFlashLatency+0xfc>)
 80029a8:	f107 030c 	add.w	r3, r7, #12
 80029ac:	ca07      	ldmia	r2, {r0, r1, r2}
 80029ae:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80029b2:	2300      	movs	r3, #0
 80029b4:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80029bc:	d11b      	bne.n	80029f6 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80029be:	2300      	movs	r3, #0
 80029c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80029c2:	e014      	b.n	80029ee <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80029c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	3338      	adds	r3, #56	@ 0x38
 80029ca:	443b      	add	r3, r7
 80029cc:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80029d0:	461a      	mov	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d807      	bhi.n	80029e8 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80029d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	3338      	adds	r3, #56	@ 0x38
 80029de:	443b      	add	r3, r7
 80029e0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80029e4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80029e6:	e021      	b.n	8002a2c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80029e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ea:	3301      	adds	r3, #1
 80029ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80029ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d9e7      	bls.n	80029c4 <RCC_SetFlashLatency+0x48>
 80029f4:	e01a      	b.n	8002a2c <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80029f6:	2300      	movs	r3, #0
 80029f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029fa:	e014      	b.n	8002a26 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80029fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	3338      	adds	r3, #56	@ 0x38
 8002a02:	443b      	add	r3, r7
 8002a04:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8002a08:	461a      	mov	r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d807      	bhi.n	8002a20 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002a10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	3338      	adds	r3, #56	@ 0x38
 8002a16:	443b      	add	r3, r7
 8002a18:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002a1c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002a1e:	e005      	b.n	8002a2c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002a20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a22:	3301      	adds	r3, #1
 8002a24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d9e7      	bls.n	80029fc <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a2c:	4b13      	ldr	r3, [pc, #76]	@ (8002a7c <RCC_SetFlashLatency+0x100>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f023 0207 	bic.w	r2, r3, #7
 8002a34:	4911      	ldr	r1, [pc, #68]	@ (8002a7c <RCC_SetFlashLatency+0x100>)
 8002a36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002a3c:	f7fe fa56 	bl	8000eec <HAL_GetTick>
 8002a40:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002a42:	e008      	b.n	8002a56 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002a44:	f7fe fa52 	bl	8000eec <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d901      	bls.n	8002a56 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e007      	b.n	8002a66 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002a56:	4b09      	ldr	r3, [pc, #36]	@ (8002a7c <RCC_SetFlashLatency+0x100>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0307 	and.w	r3, r3, #7
 8002a5e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d1ef      	bne.n	8002a44 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3738      	adds	r7, #56	@ 0x38
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	08005108 	.word	0x08005108
 8002a74:	08005110 	.word	0x08005110
 8002a78:	08005118 	.word	0x08005118
 8002a7c:	58004000 	.word	0x58004000

08002a80 <LL_RCC_LSE_IsReady>:
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002a84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a8c:	f003 0302 	and.w	r3, r3, #2
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d101      	bne.n	8002a98 <LL_RCC_LSE_IsReady+0x18>
 8002a94:	2301      	movs	r3, #1
 8002a96:	e000      	b.n	8002a9a <LL_RCC_LSE_IsReady+0x1a>
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bc80      	pop	{r7}
 8002aa0:	4770      	bx	lr

08002aa2 <LL_RCC_SetUSARTClockSource>:
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	b083      	sub	sp, #12
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8002aaa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002aae:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	0c1b      	lsrs	r3, r3, #16
 8002ab6:	43db      	mvns	r3, r3
 8002ab8:	401a      	ands	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002ac8:	bf00      	nop
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bc80      	pop	{r7}
 8002ad0:	4770      	bx	lr

08002ad2 <LL_RCC_SetI2SClockSource>:
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b083      	sub	sp, #12
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8002ada:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ae2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ae6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002af2:	bf00      	nop
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bc80      	pop	{r7}
 8002afa:	4770      	bx	lr

08002afc <LL_RCC_SetLPUARTClockSource>:
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002b04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b0c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002b10:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bc80      	pop	{r7}
 8002b24:	4770      	bx	lr

08002b26 <LL_RCC_SetI2CClockSource>:
{
 8002b26:	b480      	push	{r7}
 8002b28:	b083      	sub	sp, #12
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002b2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b32:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	091b      	lsrs	r3, r3, #4
 8002b3a:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8002b3e:	43db      	mvns	r3, r3
 8002b40:	401a      	ands	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	011b      	lsls	r3, r3, #4
 8002b46:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8002b4a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bc80      	pop	{r7}
 8002b5c:	4770      	bx	lr

08002b5e <LL_RCC_SetLPTIMClockSource>:
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b083      	sub	sp, #12
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002b66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b6a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	0c1b      	lsrs	r3, r3, #16
 8002b72:	041b      	lsls	r3, r3, #16
 8002b74:	43db      	mvns	r3, r3
 8002b76:	401a      	ands	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	041b      	lsls	r3, r3, #16
 8002b7c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b80:	4313      	orrs	r3, r2
 8002b82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002b86:	bf00      	nop
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bc80      	pop	{r7}
 8002b8e:	4770      	bx	lr

08002b90 <LL_RCC_SetRNGClockSource>:
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002b98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ba0:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002ba4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002bb0:	bf00      	nop
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bc80      	pop	{r7}
 8002bb8:	4770      	bx	lr

08002bba <LL_RCC_SetADCClockSource>:
{
 8002bba:	b480      	push	{r7}
 8002bbc:	b083      	sub	sp, #12
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002bc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bca:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002bce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bc80      	pop	{r7}
 8002be2:	4770      	bx	lr

08002be4 <LL_RCC_SetRTCClockSource>:
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002bec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bf4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002bf8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bc80      	pop	{r7}
 8002c0c:	4770      	bx	lr

08002c0e <LL_RCC_GetRTCClockSource>:
{
 8002c0e:	b480      	push	{r7}
 8002c10:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002c12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bc80      	pop	{r7}
 8002c24:	4770      	bx	lr

08002c26 <LL_RCC_ForceBackupDomainReset>:
{
 8002c26:	b480      	push	{r7}
 8002c28:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002c2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c32:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c3a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002c3e:	bf00      	nop
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bc80      	pop	{r7}
 8002c44:	4770      	bx	lr

08002c46 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002c46:	b480      	push	{r7}
 8002c48:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002c4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c52:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c5a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002c5e:	bf00      	nop
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bc80      	pop	{r7}
 8002c64:	4770      	bx	lr
	...

08002c68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b086      	sub	sp, #24
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8002c70:	2300      	movs	r3, #0
 8002c72:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8002c74:	2300      	movs	r3, #0
 8002c76:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002c78:	2300      	movs	r3, #0
 8002c7a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d058      	beq.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8002c88:	f7fe fd46 	bl	8001718 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c8c:	f7fe f92e 	bl	8000eec <HAL_GetTick>
 8002c90:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002c92:	e009      	b.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c94:	f7fe f92a 	bl	8000eec <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d902      	bls.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	74fb      	strb	r3, [r7, #19]
        break;
 8002ca6:	e006      	b.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002ca8:	4b7b      	ldr	r3, [pc, #492]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002cb4:	d1ee      	bne.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8002cb6:	7cfb      	ldrb	r3, [r7, #19]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d13c      	bne.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002cbc:	f7ff ffa7 	bl	8002c0e <LL_RCC_GetRTCClockSource>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d00f      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002cca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cd6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002cd8:	f7ff ffa5 	bl	8002c26 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cdc:	f7ff ffb3 	bl	8002c46 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ce0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	f003 0302 	and.w	r3, r3, #2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d014      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf4:	f7fe f8fa 	bl	8000eec <HAL_GetTick>
 8002cf8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8002cfa:	e00b      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cfc:	f7fe f8f6 	bl	8000eec <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d902      	bls.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	74fb      	strb	r3, [r7, #19]
            break;
 8002d12:	e004      	b.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8002d14:	f7ff feb4 	bl	8002a80 <LL_RCC_LSE_IsReady>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d1ee      	bne.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8002d1e:	7cfb      	ldrb	r3, [r7, #19]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d105      	bne.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7ff ff5b 	bl	8002be4 <LL_RCC_SetRTCClockSource>
 8002d2e:	e004      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d30:	7cfb      	ldrb	r3, [r7, #19]
 8002d32:	74bb      	strb	r3, [r7, #18]
 8002d34:	e001      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d36:	7cfb      	ldrb	r3, [r7, #19]
 8002d38:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d004      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7ff fea9 	bl	8002aa2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d004      	beq.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff fe9e 	bl	8002aa2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0320 	and.w	r3, r3, #32
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d004      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7ff fec0 	bl	8002afc <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d004      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a1b      	ldr	r3, [r3, #32]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7ff fee6 	bl	8002b5e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d004      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7ff fedb 	bl	8002b5e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d004      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7ff fed0 	bl	8002b5e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d004      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7ff fea9 	bl	8002b26 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d004      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7ff fe9e 	bl	8002b26 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d004      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7ff fe93 	bl	8002b26 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0310 	and.w	r3, r3, #16
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d011      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7ff fe5e 	bl	8002ad2 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e1e:	d107      	bne.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8002e20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e2e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d010      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7ff fea5 	bl	8002b90 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d107      	bne.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002e4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e58:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e5c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d011      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7ff fea3 	bl	8002bba <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e7c:	d107      	bne.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002e7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e8c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8002e8e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3718      	adds	r7, #24
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	58000400 	.word	0x58000400

08002e9c <LL_RCC_GetUSARTClockSource>:
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8002ea4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ea8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	401a      	ands	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	041b      	lsls	r3, r3, #16
 8002eb4:	4313      	orrs	r3, r2
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bc80      	pop	{r7}
 8002ebe:	4770      	bx	lr

08002ec0 <LL_RCC_GetLPUARTClockSource>:
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8002ec8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ecc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4013      	ands	r3, r2
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bc80      	pop	{r7}
 8002edc:	4770      	bx	lr

08002ede <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b082      	sub	sp, #8
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d101      	bne.n	8002ef0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e042      	b.n	8002f76 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d106      	bne.n	8002f08 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f7fd fd12 	bl	800092c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2224      	movs	r2, #36	@ 0x24
 8002f0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f022 0201 	bic.w	r2, r2, #1
 8002f1e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d002      	beq.n	8002f2e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f000 feb1 	bl	8003c90 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 fc3a 	bl	80037a8 <UART_SetConfig>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d101      	bne.n	8002f3e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e01b      	b.n	8002f76 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	685a      	ldr	r2, [r3, #4]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f4c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	689a      	ldr	r2, [r3, #8]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f5c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f042 0201 	orr.w	r2, r2, #1
 8002f6c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 ff2f 	bl	8003dd2 <UART_CheckIdleState>
 8002f74:	4603      	mov	r3, r0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b08a      	sub	sp, #40	@ 0x28
 8002f82:	af02      	add	r7, sp, #8
 8002f84:	60f8      	str	r0, [r7, #12]
 8002f86:	60b9      	str	r1, [r7, #8]
 8002f88:	603b      	str	r3, [r7, #0]
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f94:	2b20      	cmp	r3, #32
 8002f96:	d173      	bne.n	8003080 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d002      	beq.n	8002fa4 <HAL_UART_Transmit+0x26>
 8002f9e:	88fb      	ldrh	r3, [r7, #6]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d101      	bne.n	8002fa8 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e06c      	b.n	8003082 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2221      	movs	r2, #33	@ 0x21
 8002fb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fb8:	f7fd ff98 	bl	8000eec <HAL_GetTick>
 8002fbc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	88fa      	ldrh	r2, [r7, #6]
 8002fc2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	88fa      	ldrh	r2, [r7, #6]
 8002fca:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fd6:	d108      	bne.n	8002fea <HAL_UART_Transmit+0x6c>
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d104      	bne.n	8002fea <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	61bb      	str	r3, [r7, #24]
 8002fe8:	e003      	b.n	8002ff2 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ff2:	e02c      	b.n	800304e <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	9300      	str	r3, [sp, #0]
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	2180      	movs	r1, #128	@ 0x80
 8002ffe:	68f8      	ldr	r0, [r7, #12]
 8003000:	f000 ff35 	bl	8003e6e <UART_WaitOnFlagUntilTimeout>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e039      	b.n	8003082 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d10b      	bne.n	800302c <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	881b      	ldrh	r3, [r3, #0]
 8003018:	461a      	mov	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003022:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	3302      	adds	r3, #2
 8003028:	61bb      	str	r3, [r7, #24]
 800302a:	e007      	b.n	800303c <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	781a      	ldrb	r2, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	3301      	adds	r3, #1
 800303a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003042:	b29b      	uxth	r3, r3
 8003044:	3b01      	subs	r3, #1
 8003046:	b29a      	uxth	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003054:	b29b      	uxth	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1cc      	bne.n	8002ff4 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	9300      	str	r3, [sp, #0]
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	2200      	movs	r2, #0
 8003062:	2140      	movs	r1, #64	@ 0x40
 8003064:	68f8      	ldr	r0, [r7, #12]
 8003066:	f000 ff02 	bl	8003e6e <UART_WaitOnFlagUntilTimeout>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d001      	beq.n	8003074 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e006      	b.n	8003082 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2220      	movs	r2, #32
 8003078:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800307c:	2300      	movs	r3, #0
 800307e:	e000      	b.n	8003082 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8003080:	2302      	movs	r3, #2
  }
}
 8003082:	4618      	mov	r0, r3
 8003084:	3720      	adds	r7, #32
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
	...

0800308c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b08a      	sub	sp, #40	@ 0x28
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	4613      	mov	r3, r2
 8003098:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030a0:	2b20      	cmp	r3, #32
 80030a2:	d137      	bne.n	8003114 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d002      	beq.n	80030b0 <HAL_UART_Receive_IT+0x24>
 80030aa:	88fb      	ldrh	r3, [r7, #6]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d101      	bne.n	80030b4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e030      	b.n	8003116 <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a18      	ldr	r2, [pc, #96]	@ (8003120 <HAL_UART_Receive_IT+0x94>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d01f      	beq.n	8003104 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d018      	beq.n	8003104 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	e853 3f00 	ldrex	r3, [r3]
 80030de:	613b      	str	r3, [r7, #16]
   return(result);
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80030e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	461a      	mov	r2, r3
 80030ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f0:	623b      	str	r3, [r7, #32]
 80030f2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030f4:	69f9      	ldr	r1, [r7, #28]
 80030f6:	6a3a      	ldr	r2, [r7, #32]
 80030f8:	e841 2300 	strex	r3, r2, [r1]
 80030fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1e6      	bne.n	80030d2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003104:	88fb      	ldrh	r3, [r7, #6]
 8003106:	461a      	mov	r2, r3
 8003108:	68b9      	ldr	r1, [r7, #8]
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f000 ff7e 	bl	800400c <UART_Start_Receive_IT>
 8003110:	4603      	mov	r3, r0
 8003112:	e000      	b.n	8003116 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003114:	2302      	movs	r3, #2
  }
}
 8003116:	4618      	mov	r0, r3
 8003118:	3728      	adds	r7, #40	@ 0x28
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	40008000 	.word	0x40008000

08003124 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b0ba      	sub	sp, #232	@ 0xe8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	69db      	ldr	r3, [r3, #28]
 8003132:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800314a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800314e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003152:	4013      	ands	r3, r2
 8003154:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003158:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800315c:	2b00      	cmp	r3, #0
 800315e:	d11b      	bne.n	8003198 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003160:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003164:	f003 0320 	and.w	r3, r3, #32
 8003168:	2b00      	cmp	r3, #0
 800316a:	d015      	beq.n	8003198 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800316c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003170:	f003 0320 	and.w	r3, r3, #32
 8003174:	2b00      	cmp	r3, #0
 8003176:	d105      	bne.n	8003184 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003178:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800317c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d009      	beq.n	8003198 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003188:	2b00      	cmp	r3, #0
 800318a:	f000 82e3 	beq.w	8003754 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	4798      	blx	r3
      }
      return;
 8003196:	e2dd      	b.n	8003754 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003198:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800319c:	2b00      	cmp	r3, #0
 800319e:	f000 8123 	beq.w	80033e8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80031a2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80031a6:	4b8d      	ldr	r3, [pc, #564]	@ (80033dc <HAL_UART_IRQHandler+0x2b8>)
 80031a8:	4013      	ands	r3, r2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d106      	bne.n	80031bc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80031ae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80031b2:	4b8b      	ldr	r3, [pc, #556]	@ (80033e0 <HAL_UART_IRQHandler+0x2bc>)
 80031b4:	4013      	ands	r3, r2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	f000 8116 	beq.w	80033e8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80031bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d011      	beq.n	80031ec <HAL_UART_IRQHandler+0xc8>
 80031c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d00b      	beq.n	80031ec <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2201      	movs	r2, #1
 80031da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031e2:	f043 0201 	orr.w	r2, r3, #1
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80031ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031f0:	f003 0302 	and.w	r3, r3, #2
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d011      	beq.n	800321c <HAL_UART_IRQHandler+0xf8>
 80031f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031fc:	f003 0301 	and.w	r3, r3, #1
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00b      	beq.n	800321c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2202      	movs	r2, #2
 800320a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003212:	f043 0204 	orr.w	r2, r3, #4
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800321c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003220:	f003 0304 	and.w	r3, r3, #4
 8003224:	2b00      	cmp	r3, #0
 8003226:	d011      	beq.n	800324c <HAL_UART_IRQHandler+0x128>
 8003228:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800322c:	f003 0301 	and.w	r3, r3, #1
 8003230:	2b00      	cmp	r3, #0
 8003232:	d00b      	beq.n	800324c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2204      	movs	r2, #4
 800323a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003242:	f043 0202 	orr.w	r2, r3, #2
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800324c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003250:	f003 0308 	and.w	r3, r3, #8
 8003254:	2b00      	cmp	r3, #0
 8003256:	d017      	beq.n	8003288 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003258:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800325c:	f003 0320 	and.w	r3, r3, #32
 8003260:	2b00      	cmp	r3, #0
 8003262:	d105      	bne.n	8003270 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003264:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003268:	4b5c      	ldr	r3, [pc, #368]	@ (80033dc <HAL_UART_IRQHandler+0x2b8>)
 800326a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00b      	beq.n	8003288 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2208      	movs	r2, #8
 8003276:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800327e:	f043 0208 	orr.w	r2, r3, #8
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003288:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800328c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003290:	2b00      	cmp	r3, #0
 8003292:	d012      	beq.n	80032ba <HAL_UART_IRQHandler+0x196>
 8003294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003298:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d00c      	beq.n	80032ba <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80032a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032b0:	f043 0220 	orr.w	r2, r3, #32
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f000 8249 	beq.w	8003758 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80032c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032ca:	f003 0320 	and.w	r3, r3, #32
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d013      	beq.n	80032fa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80032d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032d6:	f003 0320 	and.w	r3, r3, #32
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d105      	bne.n	80032ea <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80032de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d007      	beq.n	80032fa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d003      	beq.n	80032fa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003300:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800330e:	2b40      	cmp	r3, #64	@ 0x40
 8003310:	d005      	beq.n	800331e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003312:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003316:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800331a:	2b00      	cmp	r3, #0
 800331c:	d054      	beq.n	80033c8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 ff94 	bl	800424c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800332e:	2b40      	cmp	r3, #64	@ 0x40
 8003330:	d146      	bne.n	80033c0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	3308      	adds	r3, #8
 8003338:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800333c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003340:	e853 3f00 	ldrex	r3, [r3]
 8003344:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003348:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800334c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003350:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	3308      	adds	r3, #8
 800335a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800335e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003362:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003366:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800336a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800336e:	e841 2300 	strex	r3, r2, [r1]
 8003372:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003376:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1d9      	bne.n	8003332 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003384:	2b00      	cmp	r3, #0
 8003386:	d017      	beq.n	80033b8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800338e:	4a15      	ldr	r2, [pc, #84]	@ (80033e4 <HAL_UART_IRQHandler+0x2c0>)
 8003390:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003398:	4618      	mov	r0, r3
 800339a:	f7fd ff5a 	bl	8001252 <HAL_DMA_Abort_IT>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d019      	beq.n	80033d8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80033aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80033b2:	4610      	mov	r0, r2
 80033b4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033b6:	e00f      	b.n	80033d8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f000 f9e0 	bl	800377e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033be:	e00b      	b.n	80033d8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f000 f9dc 	bl	800377e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033c6:	e007      	b.n	80033d8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f000 f9d8 	bl	800377e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80033d6:	e1bf      	b.n	8003758 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033d8:	bf00      	nop
    return;
 80033da:	e1bd      	b.n	8003758 <HAL_UART_IRQHandler+0x634>
 80033dc:	10000001 	.word	0x10000001
 80033e0:	04000120 	.word	0x04000120
 80033e4:	08004317 	.word	0x08004317

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	f040 8153 	bne.w	8003698 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80033f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033f6:	f003 0310 	and.w	r3, r3, #16
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f000 814c 	beq.w	8003698 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003400:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003404:	f003 0310 	and.w	r3, r3, #16
 8003408:	2b00      	cmp	r3, #0
 800340a:	f000 8145 	beq.w	8003698 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2210      	movs	r2, #16
 8003414:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003420:	2b40      	cmp	r3, #64	@ 0x40
 8003422:	f040 80bb 	bne.w	800359c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003434:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003438:	2b00      	cmp	r3, #0
 800343a:	f000 818f 	beq.w	800375c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003444:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003448:	429a      	cmp	r2, r3
 800344a:	f080 8187 	bcs.w	800375c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003454:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0320 	and.w	r3, r3, #32
 8003466:	2b00      	cmp	r3, #0
 8003468:	f040 8087 	bne.w	800357a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003474:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003478:	e853 3f00 	ldrex	r3, [r3]
 800347c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003480:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003484:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003488:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	461a      	mov	r2, r3
 8003492:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003496:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800349a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800349e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80034a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80034a6:	e841 2300 	strex	r3, r2, [r1]
 80034aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80034ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1da      	bne.n	800346c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	3308      	adds	r3, #8
 80034bc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034c0:	e853 3f00 	ldrex	r3, [r3]
 80034c4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80034c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80034c8:	f023 0301 	bic.w	r3, r3, #1
 80034cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	3308      	adds	r3, #8
 80034d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80034da:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80034de:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80034e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80034e6:	e841 2300 	strex	r3, r2, [r1]
 80034ea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80034ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1e1      	bne.n	80034b6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	3308      	adds	r3, #8
 80034f8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80034fc:	e853 3f00 	ldrex	r3, [r3]
 8003500:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003502:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003504:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003508:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	3308      	adds	r3, #8
 8003512:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003516:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003518:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800351a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800351c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800351e:	e841 2300 	strex	r3, r2, [r1]
 8003522:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003524:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1e3      	bne.n	80034f2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2220      	movs	r2, #32
 800352e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800353e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003540:	e853 3f00 	ldrex	r3, [r3]
 8003544:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003546:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003548:	f023 0310 	bic.w	r3, r3, #16
 800354c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	461a      	mov	r2, r3
 8003556:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800355a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800355c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800355e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003560:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003562:	e841 2300 	strex	r3, r2, [r1]
 8003566:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003568:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1e4      	bne.n	8003538 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003574:	4618      	mov	r0, r3
 8003576:	f7fd fe0e 	bl	8001196 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2202      	movs	r2, #2
 800357e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800358c:	b29b      	uxth	r3, r3
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	b29b      	uxth	r3, r3
 8003592:	4619      	mov	r1, r3
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 f8fb 	bl	8003790 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800359a:	e0df      	b.n	800375c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	f000 80d1 	beq.w	8003760 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80035be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f000 80cc 	beq.w	8003760 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035d0:	e853 3f00 	ldrex	r3, [r3]
 80035d4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80035d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80035dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	461a      	mov	r2, r3
 80035e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80035ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80035ec:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80035f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80035f2:	e841 2300 	strex	r3, r2, [r1]
 80035f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80035f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d1e4      	bne.n	80035c8 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	3308      	adds	r3, #8
 8003604:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003608:	e853 3f00 	ldrex	r3, [r3]
 800360c:	623b      	str	r3, [r7, #32]
   return(result);
 800360e:	6a3b      	ldr	r3, [r7, #32]
 8003610:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003614:	f023 0301 	bic.w	r3, r3, #1
 8003618:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	3308      	adds	r3, #8
 8003622:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003626:	633a      	str	r2, [r7, #48]	@ 0x30
 8003628:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800362a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800362c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800362e:	e841 2300 	strex	r3, r2, [r1]
 8003632:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1e1      	bne.n	80035fe <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2220      	movs	r2, #32
 800363e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	e853 3f00 	ldrex	r3, [r3]
 800365a:	60fb      	str	r3, [r7, #12]
   return(result);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f023 0310 	bic.w	r3, r3, #16
 8003662:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	461a      	mov	r2, r3
 800366c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003670:	61fb      	str	r3, [r7, #28]
 8003672:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003674:	69b9      	ldr	r1, [r7, #24]
 8003676:	69fa      	ldr	r2, [r7, #28]
 8003678:	e841 2300 	strex	r3, r2, [r1]
 800367c:	617b      	str	r3, [r7, #20]
   return(result);
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1e4      	bne.n	800364e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2202      	movs	r2, #2
 8003688:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800368a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800368e:	4619      	mov	r1, r3
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f000 f87d 	bl	8003790 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003696:	e063      	b.n	8003760 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003698:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800369c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d00e      	beq.n	80036c2 <HAL_UART_IRQHandler+0x59e>
 80036a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d008      	beq.n	80036c2 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80036b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f001 fb88 	bl	8004dd0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80036c0:	e051      	b.n	8003766 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80036c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d014      	beq.n	80036f8 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80036ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d105      	bne.n	80036e6 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80036da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d008      	beq.n	80036f8 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d03a      	beq.n	8003764 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	4798      	blx	r3
    }
    return;
 80036f6:	e035      	b.n	8003764 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80036f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003700:	2b00      	cmp	r3, #0
 8003702:	d009      	beq.n	8003718 <HAL_UART_IRQHandler+0x5f4>
 8003704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003708:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800370c:	2b00      	cmp	r3, #0
 800370e:	d003      	beq.n	8003718 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 fe16 	bl	8004342 <UART_EndTransmit_IT>
    return;
 8003716:	e026      	b.n	8003766 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800371c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d009      	beq.n	8003738 <HAL_UART_IRQHandler+0x614>
 8003724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003728:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d003      	beq.n	8003738 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f001 fb5f 	bl	8004df4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003736:	e016      	b.n	8003766 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800373c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d010      	beq.n	8003766 <HAL_UART_IRQHandler+0x642>
 8003744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003748:	2b00      	cmp	r3, #0
 800374a:	da0c      	bge.n	8003766 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f001 fb48 	bl	8004de2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003752:	e008      	b.n	8003766 <HAL_UART_IRQHandler+0x642>
      return;
 8003754:	bf00      	nop
 8003756:	e006      	b.n	8003766 <HAL_UART_IRQHandler+0x642>
    return;
 8003758:	bf00      	nop
 800375a:	e004      	b.n	8003766 <HAL_UART_IRQHandler+0x642>
      return;
 800375c:	bf00      	nop
 800375e:	e002      	b.n	8003766 <HAL_UART_IRQHandler+0x642>
      return;
 8003760:	bf00      	nop
 8003762:	e000      	b.n	8003766 <HAL_UART_IRQHandler+0x642>
    return;
 8003764:	bf00      	nop
  }
}
 8003766:	37e8      	adds	r7, #232	@ 0xe8
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	bc80      	pop	{r7}
 800377c:	4770      	bx	lr

0800377e <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800377e:	b480      	push	{r7}
 8003780:	b083      	sub	sp, #12
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003786:	bf00      	nop
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	bc80      	pop	{r7}
 800378e:	4770      	bx	lr

08003790 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	460b      	mov	r3, r1
 800379a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bc80      	pop	{r7}
 80037a4:	4770      	bx	lr
	...

080037a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037ac:	b08c      	sub	sp, #48	@ 0x30
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80037b2:	2300      	movs	r3, #0
 80037b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	689a      	ldr	r2, [r3, #8]
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	431a      	orrs	r2, r3
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	431a      	orrs	r2, r3
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	69db      	ldr	r3, [r3, #28]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	4b94      	ldr	r3, [pc, #592]	@ (8003a28 <UART_SetConfig+0x280>)
 80037d8:	4013      	ands	r3, r2
 80037da:	697a      	ldr	r2, [r7, #20]
 80037dc:	6812      	ldr	r2, [r2, #0]
 80037de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80037e0:	430b      	orrs	r3, r1
 80037e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	68da      	ldr	r2, [r3, #12]
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	430a      	orrs	r2, r1
 80037f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a89      	ldr	r2, [pc, #548]	@ (8003a2c <UART_SetConfig+0x284>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d004      	beq.n	8003814 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	6a1b      	ldr	r3, [r3, #32]
 800380e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003810:	4313      	orrs	r3, r2
 8003812:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800381e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	6812      	ldr	r2, [r2, #0]
 8003826:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003828:	430b      	orrs	r3, r1
 800382a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003832:	f023 010f 	bic.w	r1, r3, #15
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	430a      	orrs	r2, r1
 8003840:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a7a      	ldr	r2, [pc, #488]	@ (8003a30 <UART_SetConfig+0x288>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d127      	bne.n	800389c <UART_SetConfig+0xf4>
 800384c:	2003      	movs	r0, #3
 800384e:	f7ff fb25 	bl	8002e9c <LL_RCC_GetUSARTClockSource>
 8003852:	4603      	mov	r3, r0
 8003854:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8003858:	2b03      	cmp	r3, #3
 800385a:	d81b      	bhi.n	8003894 <UART_SetConfig+0xec>
 800385c:	a201      	add	r2, pc, #4	@ (adr r2, 8003864 <UART_SetConfig+0xbc>)
 800385e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003862:	bf00      	nop
 8003864:	08003875 	.word	0x08003875
 8003868:	08003885 	.word	0x08003885
 800386c:	0800387d 	.word	0x0800387d
 8003870:	0800388d 	.word	0x0800388d
 8003874:	2301      	movs	r3, #1
 8003876:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800387a:	e080      	b.n	800397e <UART_SetConfig+0x1d6>
 800387c:	2302      	movs	r3, #2
 800387e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003882:	e07c      	b.n	800397e <UART_SetConfig+0x1d6>
 8003884:	2304      	movs	r3, #4
 8003886:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800388a:	e078      	b.n	800397e <UART_SetConfig+0x1d6>
 800388c:	2308      	movs	r3, #8
 800388e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003892:	e074      	b.n	800397e <UART_SetConfig+0x1d6>
 8003894:	2310      	movs	r3, #16
 8003896:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800389a:	e070      	b.n	800397e <UART_SetConfig+0x1d6>
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a64      	ldr	r2, [pc, #400]	@ (8003a34 <UART_SetConfig+0x28c>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d138      	bne.n	8003918 <UART_SetConfig+0x170>
 80038a6:	200c      	movs	r0, #12
 80038a8:	f7ff faf8 	bl	8002e9c <LL_RCC_GetUSARTClockSource>
 80038ac:	4603      	mov	r3, r0
 80038ae:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 80038b2:	2b0c      	cmp	r3, #12
 80038b4:	d82c      	bhi.n	8003910 <UART_SetConfig+0x168>
 80038b6:	a201      	add	r2, pc, #4	@ (adr r2, 80038bc <UART_SetConfig+0x114>)
 80038b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038bc:	080038f1 	.word	0x080038f1
 80038c0:	08003911 	.word	0x08003911
 80038c4:	08003911 	.word	0x08003911
 80038c8:	08003911 	.word	0x08003911
 80038cc:	08003901 	.word	0x08003901
 80038d0:	08003911 	.word	0x08003911
 80038d4:	08003911 	.word	0x08003911
 80038d8:	08003911 	.word	0x08003911
 80038dc:	080038f9 	.word	0x080038f9
 80038e0:	08003911 	.word	0x08003911
 80038e4:	08003911 	.word	0x08003911
 80038e8:	08003911 	.word	0x08003911
 80038ec:	08003909 	.word	0x08003909
 80038f0:	2300      	movs	r3, #0
 80038f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038f6:	e042      	b.n	800397e <UART_SetConfig+0x1d6>
 80038f8:	2302      	movs	r3, #2
 80038fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038fe:	e03e      	b.n	800397e <UART_SetConfig+0x1d6>
 8003900:	2304      	movs	r3, #4
 8003902:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003906:	e03a      	b.n	800397e <UART_SetConfig+0x1d6>
 8003908:	2308      	movs	r3, #8
 800390a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800390e:	e036      	b.n	800397e <UART_SetConfig+0x1d6>
 8003910:	2310      	movs	r3, #16
 8003912:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003916:	e032      	b.n	800397e <UART_SetConfig+0x1d6>
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a43      	ldr	r2, [pc, #268]	@ (8003a2c <UART_SetConfig+0x284>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d12a      	bne.n	8003978 <UART_SetConfig+0x1d0>
 8003922:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8003926:	f7ff facb 	bl	8002ec0 <LL_RCC_GetLPUARTClockSource>
 800392a:	4603      	mov	r3, r0
 800392c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003930:	d01a      	beq.n	8003968 <UART_SetConfig+0x1c0>
 8003932:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003936:	d81b      	bhi.n	8003970 <UART_SetConfig+0x1c8>
 8003938:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800393c:	d00c      	beq.n	8003958 <UART_SetConfig+0x1b0>
 800393e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003942:	d815      	bhi.n	8003970 <UART_SetConfig+0x1c8>
 8003944:	2b00      	cmp	r3, #0
 8003946:	d003      	beq.n	8003950 <UART_SetConfig+0x1a8>
 8003948:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800394c:	d008      	beq.n	8003960 <UART_SetConfig+0x1b8>
 800394e:	e00f      	b.n	8003970 <UART_SetConfig+0x1c8>
 8003950:	2300      	movs	r3, #0
 8003952:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003956:	e012      	b.n	800397e <UART_SetConfig+0x1d6>
 8003958:	2302      	movs	r3, #2
 800395a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800395e:	e00e      	b.n	800397e <UART_SetConfig+0x1d6>
 8003960:	2304      	movs	r3, #4
 8003962:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003966:	e00a      	b.n	800397e <UART_SetConfig+0x1d6>
 8003968:	2308      	movs	r3, #8
 800396a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800396e:	e006      	b.n	800397e <UART_SetConfig+0x1d6>
 8003970:	2310      	movs	r3, #16
 8003972:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003976:	e002      	b.n	800397e <UART_SetConfig+0x1d6>
 8003978:	2310      	movs	r3, #16
 800397a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a2a      	ldr	r2, [pc, #168]	@ (8003a2c <UART_SetConfig+0x284>)
 8003984:	4293      	cmp	r3, r2
 8003986:	f040 80a4 	bne.w	8003ad2 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800398a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800398e:	2b08      	cmp	r3, #8
 8003990:	d823      	bhi.n	80039da <UART_SetConfig+0x232>
 8003992:	a201      	add	r2, pc, #4	@ (adr r2, 8003998 <UART_SetConfig+0x1f0>)
 8003994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003998:	080039bd 	.word	0x080039bd
 800399c:	080039db 	.word	0x080039db
 80039a0:	080039c5 	.word	0x080039c5
 80039a4:	080039db 	.word	0x080039db
 80039a8:	080039cb 	.word	0x080039cb
 80039ac:	080039db 	.word	0x080039db
 80039b0:	080039db 	.word	0x080039db
 80039b4:	080039db 	.word	0x080039db
 80039b8:	080039d3 	.word	0x080039d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039bc:	f7fe ff8a 	bl	80028d4 <HAL_RCC_GetPCLK1Freq>
 80039c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80039c2:	e010      	b.n	80039e6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039c4:	4b1c      	ldr	r3, [pc, #112]	@ (8003a38 <UART_SetConfig+0x290>)
 80039c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80039c8:	e00d      	b.n	80039e6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039ca:	f7fe fecf 	bl	800276c <HAL_RCC_GetSysClockFreq>
 80039ce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80039d0:	e009      	b.n	80039e6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80039d8:	e005      	b.n	80039e6 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80039da:	2300      	movs	r3, #0
 80039dc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80039e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80039e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f000 8137 	beq.w	8003c5c <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f2:	4a12      	ldr	r2, [pc, #72]	@ (8003a3c <UART_SetConfig+0x294>)
 80039f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039f8:	461a      	mov	r2, r3
 80039fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a00:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	685a      	ldr	r2, [r3, #4]
 8003a06:	4613      	mov	r3, r2
 8003a08:	005b      	lsls	r3, r3, #1
 8003a0a:	4413      	add	r3, r2
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d305      	bcc.n	8003a1e <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003a18:	69ba      	ldr	r2, [r7, #24]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d910      	bls.n	8003a40 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003a24:	e11a      	b.n	8003c5c <UART_SetConfig+0x4b4>
 8003a26:	bf00      	nop
 8003a28:	cfff69f3 	.word	0xcfff69f3
 8003a2c:	40008000 	.word	0x40008000
 8003a30:	40013800 	.word	0x40013800
 8003a34:	40004400 	.word	0x40004400
 8003a38:	00f42400 	.word	0x00f42400
 8003a3c:	080051e4 	.word	0x080051e4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a42:	2200      	movs	r2, #0
 8003a44:	60bb      	str	r3, [r7, #8]
 8003a46:	60fa      	str	r2, [r7, #12]
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a4c:	4a8e      	ldr	r2, [pc, #568]	@ (8003c88 <UART_SetConfig+0x4e0>)
 8003a4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	2200      	movs	r2, #0
 8003a56:	603b      	str	r3, [r7, #0]
 8003a58:	607a      	str	r2, [r7, #4]
 8003a5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a5e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003a62:	f7fc fb91 	bl	8000188 <__aeabi_uldivmod>
 8003a66:	4602      	mov	r2, r0
 8003a68:	460b      	mov	r3, r1
 8003a6a:	4610      	mov	r0, r2
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	f04f 0200 	mov.w	r2, #0
 8003a72:	f04f 0300 	mov.w	r3, #0
 8003a76:	020b      	lsls	r3, r1, #8
 8003a78:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003a7c:	0202      	lsls	r2, r0, #8
 8003a7e:	6979      	ldr	r1, [r7, #20]
 8003a80:	6849      	ldr	r1, [r1, #4]
 8003a82:	0849      	lsrs	r1, r1, #1
 8003a84:	2000      	movs	r0, #0
 8003a86:	460c      	mov	r4, r1
 8003a88:	4605      	mov	r5, r0
 8003a8a:	eb12 0804 	adds.w	r8, r2, r4
 8003a8e:	eb43 0905 	adc.w	r9, r3, r5
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	469a      	mov	sl, r3
 8003a9a:	4693      	mov	fp, r2
 8003a9c:	4652      	mov	r2, sl
 8003a9e:	465b      	mov	r3, fp
 8003aa0:	4640      	mov	r0, r8
 8003aa2:	4649      	mov	r1, r9
 8003aa4:	f7fc fb70 	bl	8000188 <__aeabi_uldivmod>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	460b      	mov	r3, r1
 8003aac:	4613      	mov	r3, r2
 8003aae:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ab0:	6a3b      	ldr	r3, [r7, #32]
 8003ab2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ab6:	d308      	bcc.n	8003aca <UART_SetConfig+0x322>
 8003ab8:	6a3b      	ldr	r3, [r7, #32]
 8003aba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003abe:	d204      	bcs.n	8003aca <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	6a3a      	ldr	r2, [r7, #32]
 8003ac6:	60da      	str	r2, [r3, #12]
 8003ac8:	e0c8      	b.n	8003c5c <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003ad0:	e0c4      	b.n	8003c5c <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	69db      	ldr	r3, [r3, #28]
 8003ad6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ada:	d167      	bne.n	8003bac <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8003adc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003ae0:	2b08      	cmp	r3, #8
 8003ae2:	d828      	bhi.n	8003b36 <UART_SetConfig+0x38e>
 8003ae4:	a201      	add	r2, pc, #4	@ (adr r2, 8003aec <UART_SetConfig+0x344>)
 8003ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aea:	bf00      	nop
 8003aec:	08003b11 	.word	0x08003b11
 8003af0:	08003b19 	.word	0x08003b19
 8003af4:	08003b21 	.word	0x08003b21
 8003af8:	08003b37 	.word	0x08003b37
 8003afc:	08003b27 	.word	0x08003b27
 8003b00:	08003b37 	.word	0x08003b37
 8003b04:	08003b37 	.word	0x08003b37
 8003b08:	08003b37 	.word	0x08003b37
 8003b0c:	08003b2f 	.word	0x08003b2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b10:	f7fe fee0 	bl	80028d4 <HAL_RCC_GetPCLK1Freq>
 8003b14:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003b16:	e014      	b.n	8003b42 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b18:	f7fe feee 	bl	80028f8 <HAL_RCC_GetPCLK2Freq>
 8003b1c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003b1e:	e010      	b.n	8003b42 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b20:	4b5a      	ldr	r3, [pc, #360]	@ (8003c8c <UART_SetConfig+0x4e4>)
 8003b22:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003b24:	e00d      	b.n	8003b42 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b26:	f7fe fe21 	bl	800276c <HAL_RCC_GetSysClockFreq>
 8003b2a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003b2c:	e009      	b.n	8003b42 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b32:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003b34:	e005      	b.n	8003b42 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8003b36:	2300      	movs	r3, #0
 8003b38:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003b40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f000 8089 	beq.w	8003c5c <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b4e:	4a4e      	ldr	r2, [pc, #312]	@ (8003c88 <UART_SetConfig+0x4e0>)
 8003b50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b54:	461a      	mov	r2, r3
 8003b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b58:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b5c:	005a      	lsls	r2, r3, #1
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	085b      	lsrs	r3, r3, #1
 8003b64:	441a      	add	r2, r3
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b6e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b70:	6a3b      	ldr	r3, [r7, #32]
 8003b72:	2b0f      	cmp	r3, #15
 8003b74:	d916      	bls.n	8003ba4 <UART_SetConfig+0x3fc>
 8003b76:	6a3b      	ldr	r3, [r7, #32]
 8003b78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b7c:	d212      	bcs.n	8003ba4 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b7e:	6a3b      	ldr	r3, [r7, #32]
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	f023 030f 	bic.w	r3, r3, #15
 8003b86:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b88:	6a3b      	ldr	r3, [r7, #32]
 8003b8a:	085b      	lsrs	r3, r3, #1
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	f003 0307 	and.w	r3, r3, #7
 8003b92:	b29a      	uxth	r2, r3
 8003b94:	8bfb      	ldrh	r3, [r7, #30]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	8bfa      	ldrh	r2, [r7, #30]
 8003ba0:	60da      	str	r2, [r3, #12]
 8003ba2:	e05b      	b.n	8003c5c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003baa:	e057      	b.n	8003c5c <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003bac:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003bb0:	2b08      	cmp	r3, #8
 8003bb2:	d828      	bhi.n	8003c06 <UART_SetConfig+0x45e>
 8003bb4:	a201      	add	r2, pc, #4	@ (adr r2, 8003bbc <UART_SetConfig+0x414>)
 8003bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bba:	bf00      	nop
 8003bbc:	08003be1 	.word	0x08003be1
 8003bc0:	08003be9 	.word	0x08003be9
 8003bc4:	08003bf1 	.word	0x08003bf1
 8003bc8:	08003c07 	.word	0x08003c07
 8003bcc:	08003bf7 	.word	0x08003bf7
 8003bd0:	08003c07 	.word	0x08003c07
 8003bd4:	08003c07 	.word	0x08003c07
 8003bd8:	08003c07 	.word	0x08003c07
 8003bdc:	08003bff 	.word	0x08003bff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003be0:	f7fe fe78 	bl	80028d4 <HAL_RCC_GetPCLK1Freq>
 8003be4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003be6:	e014      	b.n	8003c12 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003be8:	f7fe fe86 	bl	80028f8 <HAL_RCC_GetPCLK2Freq>
 8003bec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003bee:	e010      	b.n	8003c12 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bf0:	4b26      	ldr	r3, [pc, #152]	@ (8003c8c <UART_SetConfig+0x4e4>)
 8003bf2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003bf4:	e00d      	b.n	8003c12 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bf6:	f7fe fdb9 	bl	800276c <HAL_RCC_GetSysClockFreq>
 8003bfa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003bfc:	e009      	b.n	8003c12 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bfe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c02:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003c04:	e005      	b.n	8003c12 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8003c06:	2300      	movs	r3, #0
 8003c08:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003c10:	bf00      	nop
    }

    if (pclk != 0U)
 8003c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d021      	beq.n	8003c5c <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c1c:	4a1a      	ldr	r2, [pc, #104]	@ (8003c88 <UART_SetConfig+0x4e0>)
 8003c1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c22:	461a      	mov	r2, r3
 8003c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c26:	fbb3 f2f2 	udiv	r2, r3, r2
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	085b      	lsrs	r3, r3, #1
 8003c30:	441a      	add	r2, r3
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c3a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c3c:	6a3b      	ldr	r3, [r7, #32]
 8003c3e:	2b0f      	cmp	r3, #15
 8003c40:	d909      	bls.n	8003c56 <UART_SetConfig+0x4ae>
 8003c42:	6a3b      	ldr	r3, [r7, #32]
 8003c44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c48:	d205      	bcs.n	8003c56 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c4a:	6a3b      	ldr	r3, [r7, #32]
 8003c4c:	b29a      	uxth	r2, r3
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	60da      	str	r2, [r3, #12]
 8003c54:	e002      	b.n	8003c5c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	2200      	movs	r2, #0
 8003c76:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003c78:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3730      	adds	r7, #48	@ 0x30
 8003c80:	46bd      	mov	sp, r7
 8003c82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c86:	bf00      	nop
 8003c88:	080051e4 	.word	0x080051e4
 8003c8c:	00f42400 	.word	0x00f42400

08003c90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c9c:	f003 0308 	and.w	r3, r3, #8
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00a      	beq.n	8003cba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00a      	beq.n	8003cdc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ce0:	f003 0302 	and.w	r3, r3, #2
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00a      	beq.n	8003cfe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d02:	f003 0304 	and.w	r3, r3, #4
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00a      	beq.n	8003d20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d24:	f003 0310 	and.w	r3, r3, #16
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00a      	beq.n	8003d42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d46:	f003 0320 	and.w	r3, r3, #32
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00a      	beq.n	8003d64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	430a      	orrs	r2, r1
 8003d62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d01a      	beq.n	8003da6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	430a      	orrs	r2, r1
 8003d84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d8e:	d10a      	bne.n	8003da6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	430a      	orrs	r2, r1
 8003da4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003daa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00a      	beq.n	8003dc8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	605a      	str	r2, [r3, #4]
  }
}
 8003dc8:	bf00      	nop
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bc80      	pop	{r7}
 8003dd0:	4770      	bx	lr

08003dd2 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	b086      	sub	sp, #24
 8003dd6:	af02      	add	r7, sp, #8
 8003dd8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003de2:	f7fd f883 	bl	8000eec <HAL_GetTick>
 8003de6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0308 	and.w	r3, r3, #8
 8003df2:	2b08      	cmp	r3, #8
 8003df4:	d10e      	bne.n	8003e14 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003df6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003dfa:	9300      	str	r3, [sp, #0]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 f832 	bl	8003e6e <UART_WaitOnFlagUntilTimeout>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d001      	beq.n	8003e14 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e028      	b.n	8003e66 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0304 	and.w	r3, r3, #4
 8003e1e:	2b04      	cmp	r3, #4
 8003e20:	d10e      	bne.n	8003e40 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e22:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003e26:	9300      	str	r3, [sp, #0]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f000 f81c 	bl	8003e6e <UART_WaitOnFlagUntilTimeout>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d001      	beq.n	8003e40 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e012      	b.n	8003e66 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2220      	movs	r2, #32
 8003e44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2220      	movs	r2, #32
 8003e4c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3710      	adds	r7, #16
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}

08003e6e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b09c      	sub	sp, #112	@ 0x70
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	60f8      	str	r0, [r7, #12]
 8003e76:	60b9      	str	r1, [r7, #8]
 8003e78:	603b      	str	r3, [r7, #0]
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e7e:	e0af      	b.n	8003fe0 <UART_WaitOnFlagUntilTimeout+0x172>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e86:	f000 80ab 	beq.w	8003fe0 <UART_WaitOnFlagUntilTimeout+0x172>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e8a:	f7fd f82f 	bl	8000eec <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d302      	bcc.n	8003ea0 <UART_WaitOnFlagUntilTimeout+0x32>
 8003e9a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d140      	bne.n	8003f22 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ea8:	e853 3f00 	ldrex	r3, [r3]
 8003eac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003eae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003eb0:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003eb4:	667b      	str	r3, [r7, #100]	@ 0x64
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	461a      	mov	r2, r3
 8003ebc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ebe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003ec0:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003ec4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003ec6:	e841 2300 	strex	r3, r2, [r1]
 8003eca:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8003ecc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1e6      	bne.n	8003ea0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	3308      	adds	r3, #8
 8003ed8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003edc:	e853 3f00 	ldrex	r3, [r3]
 8003ee0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ee4:	f023 0301 	bic.w	r3, r3, #1
 8003ee8:	663b      	str	r3, [r7, #96]	@ 0x60
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	3308      	adds	r3, #8
 8003ef0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003ef2:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003ef4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003ef8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003efa:	e841 2300 	strex	r3, r2, [r1]
 8003efe:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003f00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1e5      	bne.n	8003ed2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2220      	movs	r2, #32
 8003f0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2220      	movs	r2, #32
 8003f12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e06f      	b.n	8004002 <UART_WaitOnFlagUntilTimeout+0x194>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0304 	and.w	r3, r3, #4
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d057      	beq.n	8003fe0 <UART_WaitOnFlagUntilTimeout+0x172>
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	2b80      	cmp	r3, #128	@ 0x80
 8003f34:	d054      	beq.n	8003fe0 <UART_WaitOnFlagUntilTimeout+0x172>
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	2b40      	cmp	r3, #64	@ 0x40
 8003f3a:	d051      	beq.n	8003fe0 <UART_WaitOnFlagUntilTimeout+0x172>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	69db      	ldr	r3, [r3, #28]
 8003f42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f46:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f4a:	d149      	bne.n	8003fe0 <UART_WaitOnFlagUntilTimeout+0x172>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003f54:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f5e:	e853 3f00 	ldrex	r3, [r3]
 8003f62:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f66:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003f6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	461a      	mov	r2, r3
 8003f72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f74:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f76:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f78:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003f7a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003f7c:	e841 2300 	strex	r3, r2, [r1]
 8003f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003f82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d1e6      	bne.n	8003f56 <UART_WaitOnFlagUntilTimeout+0xe8>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	3308      	adds	r3, #8
 8003f8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	e853 3f00 	ldrex	r3, [r3]
 8003f96:	613b      	str	r3, [r7, #16]
   return(result);
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	f023 0301 	bic.w	r3, r3, #1
 8003f9e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	3308      	adds	r3, #8
 8003fa6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003fa8:	623a      	str	r2, [r7, #32]
 8003faa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fac:	69f9      	ldr	r1, [r7, #28]
 8003fae:	6a3a      	ldr	r2, [r7, #32]
 8003fb0:	e841 2300 	strex	r3, r2, [r1]
 8003fb4:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1e5      	bne.n	8003f88 <UART_WaitOnFlagUntilTimeout+0x11a>

          huart->gState = HAL_UART_STATE_READY;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2220      	movs	r2, #32
 8003fc0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2220      	movs	r2, #32
 8003fc8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2220      	movs	r2, #32
 8003fd0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e010      	b.n	8004002 <UART_WaitOnFlagUntilTimeout+0x194>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	69da      	ldr	r2, [r3, #28]
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	4013      	ands	r3, r2
 8003fea:	68ba      	ldr	r2, [r7, #8]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	bf0c      	ite	eq
 8003ff0:	2301      	moveq	r3, #1
 8003ff2:	2300      	movne	r3, #0
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	79fb      	ldrb	r3, [r7, #7]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	f43f af40 	beq.w	8003e80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	3770      	adds	r7, #112	@ 0x70
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
	...

0800400c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800400c:	b480      	push	{r7}
 800400e:	b0a3      	sub	sp, #140	@ 0x8c
 8004010:	af00      	add	r7, sp, #0
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	4613      	mov	r3, r2
 8004018:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	68ba      	ldr	r2, [r7, #8]
 800401e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	88fa      	ldrh	r2, [r7, #6]
 8004024:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	88fa      	ldrh	r2, [r7, #6]
 800402c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2200      	movs	r2, #0
 8004034:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800403e:	d10e      	bne.n	800405e <UART_Start_Receive_IT+0x52>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d105      	bne.n	8004054 <UART_Start_Receive_IT+0x48>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800404e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004052:	e02d      	b.n	80040b0 <UART_Start_Receive_IT+0xa4>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	22ff      	movs	r2, #255	@ 0xff
 8004058:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800405c:	e028      	b.n	80040b0 <UART_Start_Receive_IT+0xa4>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d10d      	bne.n	8004082 <UART_Start_Receive_IT+0x76>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d104      	bne.n	8004078 <UART_Start_Receive_IT+0x6c>
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	22ff      	movs	r2, #255	@ 0xff
 8004072:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004076:	e01b      	b.n	80040b0 <UART_Start_Receive_IT+0xa4>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	227f      	movs	r2, #127	@ 0x7f
 800407c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004080:	e016      	b.n	80040b0 <UART_Start_Receive_IT+0xa4>
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800408a:	d10d      	bne.n	80040a8 <UART_Start_Receive_IT+0x9c>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d104      	bne.n	800409e <UART_Start_Receive_IT+0x92>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	227f      	movs	r2, #127	@ 0x7f
 8004098:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800409c:	e008      	b.n	80040b0 <UART_Start_Receive_IT+0xa4>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	223f      	movs	r2, #63	@ 0x3f
 80040a2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80040a6:	e003      	b.n	80040b0 <UART_Start_Receive_IT+0xa4>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2222      	movs	r2, #34	@ 0x22
 80040bc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	3308      	adds	r3, #8
 80040c6:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040ca:	e853 3f00 	ldrex	r3, [r3]
 80040ce:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80040d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80040d2:	f043 0301 	orr.w	r3, r3, #1
 80040d6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	3308      	adds	r3, #8
 80040e0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80040e4:	673a      	str	r2, [r7, #112]	@ 0x70
 80040e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e8:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80040ea:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80040ec:	e841 2300 	strex	r3, r2, [r1]
 80040f0:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80040f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1e3      	bne.n	80040c0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80040fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004100:	d14f      	bne.n	80041a2 <UART_Start_Receive_IT+0x196>
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004108:	88fa      	ldrh	r2, [r7, #6]
 800410a:	429a      	cmp	r2, r3
 800410c:	d349      	bcc.n	80041a2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004116:	d107      	bne.n	8004128 <UART_Start_Receive_IT+0x11c>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d103      	bne.n	8004128 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	4a46      	ldr	r2, [pc, #280]	@ (800423c <UART_Start_Receive_IT+0x230>)
 8004124:	675a      	str	r2, [r3, #116]	@ 0x74
 8004126:	e002      	b.n	800412e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	4a45      	ldr	r2, [pc, #276]	@ (8004240 <UART_Start_Receive_IT+0x234>)
 800412c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d01a      	beq.n	800416c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800413e:	e853 3f00 	ldrex	r3, [r3]
 8004142:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004144:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004146:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800414a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	461a      	mov	r2, r3
 8004154:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004158:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800415a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800415e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004160:	e841 2300 	strex	r3, r2, [r1]
 8004164:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8004166:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1e4      	bne.n	8004136 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	3308      	adds	r3, #8
 8004172:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004174:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004176:	e853 3f00 	ldrex	r3, [r3]
 800417a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800417c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800417e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004182:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	3308      	adds	r3, #8
 800418a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800418c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800418e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004190:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004192:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004194:	e841 2300 	strex	r3, r2, [r1]
 8004198:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800419a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800419c:	2b00      	cmp	r3, #0
 800419e:	d1e5      	bne.n	800416c <UART_Start_Receive_IT+0x160>
 80041a0:	e046      	b.n	8004230 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041aa:	d107      	bne.n	80041bc <UART_Start_Receive_IT+0x1b0>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d103      	bne.n	80041bc <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	4a23      	ldr	r2, [pc, #140]	@ (8004244 <UART_Start_Receive_IT+0x238>)
 80041b8:	675a      	str	r2, [r3, #116]	@ 0x74
 80041ba:	e002      	b.n	80041c2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	4a22      	ldr	r2, [pc, #136]	@ (8004248 <UART_Start_Receive_IT+0x23c>)
 80041c0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d019      	beq.n	80041fe <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041d2:	e853 3f00 	ldrex	r3, [r3]
 80041d6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80041d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041da:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80041de:	677b      	str	r3, [r7, #116]	@ 0x74
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	461a      	mov	r2, r3
 80041e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80041e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80041ea:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80041ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80041f0:	e841 2300 	strex	r3, r2, [r1]
 80041f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80041f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1e6      	bne.n	80041ca <UART_Start_Receive_IT+0x1be>
 80041fc:	e018      	b.n	8004230 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	e853 3f00 	ldrex	r3, [r3]
 800420a:	613b      	str	r3, [r7, #16]
   return(result);
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	f043 0320 	orr.w	r3, r3, #32
 8004212:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	461a      	mov	r2, r3
 800421a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800421c:	623b      	str	r3, [r7, #32]
 800421e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004220:	69f9      	ldr	r1, [r7, #28]
 8004222:	6a3a      	ldr	r2, [r7, #32]
 8004224:	e841 2300 	strex	r3, r2, [r1]
 8004228:	61bb      	str	r3, [r7, #24]
   return(result);
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1e6      	bne.n	80041fe <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	378c      	adds	r7, #140	@ 0x8c
 8004236:	46bd      	mov	sp, r7
 8004238:	bc80      	pop	{r7}
 800423a:	4770      	bx	lr
 800423c:	08004a69 	.word	0x08004a69
 8004240:	08004709 	.word	0x08004709
 8004244:	08004551 	.word	0x08004551
 8004248:	08004399 	.word	0x08004399

0800424c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800424c:	b480      	push	{r7}
 800424e:	b095      	sub	sp, #84	@ 0x54
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800425a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800425c:	e853 3f00 	ldrex	r3, [r3]
 8004260:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004264:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004268:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	461a      	mov	r2, r3
 8004270:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004272:	643b      	str	r3, [r7, #64]	@ 0x40
 8004274:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004276:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004278:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800427a:	e841 2300 	strex	r3, r2, [r1]
 800427e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1e6      	bne.n	8004254 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	3308      	adds	r3, #8
 800428c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800428e:	6a3b      	ldr	r3, [r7, #32]
 8004290:	e853 3f00 	ldrex	r3, [r3]
 8004294:	61fb      	str	r3, [r7, #28]
   return(result);
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800429c:	f023 0301 	bic.w	r3, r3, #1
 80042a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	3308      	adds	r3, #8
 80042a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042b2:	e841 2300 	strex	r3, r2, [r1]
 80042b6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80042b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d1e3      	bne.n	8004286 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d118      	bne.n	80042f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	e853 3f00 	ldrex	r3, [r3]
 80042d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	f023 0310 	bic.w	r3, r3, #16
 80042da:	647b      	str	r3, [r7, #68]	@ 0x44
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	461a      	mov	r2, r3
 80042e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042e4:	61bb      	str	r3, [r7, #24]
 80042e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e8:	6979      	ldr	r1, [r7, #20]
 80042ea:	69ba      	ldr	r2, [r7, #24]
 80042ec:	e841 2300 	strex	r3, r2, [r1]
 80042f0:	613b      	str	r3, [r7, #16]
   return(result);
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1e6      	bne.n	80042c6 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2220      	movs	r2, #32
 80042fc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800430c:	bf00      	nop
 800430e:	3754      	adds	r7, #84	@ 0x54
 8004310:	46bd      	mov	sp, r7
 8004312:	bc80      	pop	{r7}
 8004314:	4770      	bx	lr

08004316 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004316:	b580      	push	{r7, lr}
 8004318:	b084      	sub	sp, #16
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004322:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2200      	movs	r2, #0
 8004328:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004334:	68f8      	ldr	r0, [r7, #12]
 8004336:	f7ff fa22 	bl	800377e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800433a:	bf00      	nop
 800433c:	3710      	adds	r7, #16
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}

08004342 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004342:	b580      	push	{r7, lr}
 8004344:	b088      	sub	sp, #32
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	e853 3f00 	ldrex	r3, [r3]
 8004356:	60bb      	str	r3, [r7, #8]
   return(result);
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800435e:	61fb      	str	r3, [r7, #28]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	461a      	mov	r2, r3
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	61bb      	str	r3, [r7, #24]
 800436a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800436c:	6979      	ldr	r1, [r7, #20]
 800436e:	69ba      	ldr	r2, [r7, #24]
 8004370:	e841 2300 	strex	r3, r2, [r1]
 8004374:	613b      	str	r3, [r7, #16]
   return(result);
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1e6      	bne.n	800434a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2220      	movs	r2, #32
 8004380:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f7ff f9ee 	bl	800376c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004390:	bf00      	nop
 8004392:	3720      	adds	r7, #32
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b09c      	sub	sp, #112	@ 0x70
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80043a6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80043b0:	2b22      	cmp	r3, #34	@ 0x22
 80043b2:	f040 80be 	bne.w	8004532 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043bc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80043c0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80043c4:	b2d9      	uxtb	r1, r3
 80043c6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80043ca:	b2da      	uxtb	r2, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043d0:	400a      	ands	r2, r1
 80043d2:	b2d2      	uxtb	r2, r2
 80043d4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043da:	1c5a      	adds	r2, r3, #1
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	3b01      	subs	r3, #1
 80043ea:	b29a      	uxth	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	f040 80a1 	bne.w	8004542 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004406:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004408:	e853 3f00 	ldrex	r3, [r3]
 800440c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800440e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004410:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004414:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	461a      	mov	r2, r3
 800441c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800441e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004420:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004422:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004424:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004426:	e841 2300 	strex	r3, r2, [r1]
 800442a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800442c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1e6      	bne.n	8004400 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	3308      	adds	r3, #8
 8004438:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800443a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800443c:	e853 3f00 	ldrex	r3, [r3]
 8004440:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004442:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004444:	f023 0301 	bic.w	r3, r3, #1
 8004448:	667b      	str	r3, [r7, #100]	@ 0x64
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	3308      	adds	r3, #8
 8004450:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004452:	647a      	str	r2, [r7, #68]	@ 0x44
 8004454:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004456:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004458:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800445a:	e841 2300 	strex	r3, r2, [r1]
 800445e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004460:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1e5      	bne.n	8004432 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2220      	movs	r2, #32
 800446a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a33      	ldr	r2, [pc, #204]	@ (800454c <UART_RxISR_8BIT+0x1b4>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d01f      	beq.n	80044c4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d018      	beq.n	80044c4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800449a:	e853 3f00 	ldrex	r3, [r3]
 800449e:	623b      	str	r3, [r7, #32]
   return(result);
 80044a0:	6a3b      	ldr	r3, [r7, #32]
 80044a2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80044a6:	663b      	str	r3, [r7, #96]	@ 0x60
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	461a      	mov	r2, r3
 80044ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80044b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80044b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80044b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044b8:	e841 2300 	strex	r3, r2, [r1]
 80044bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80044be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1e6      	bne.n	8004492 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d12e      	bne.n	800452a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	e853 3f00 	ldrex	r3, [r3]
 80044de:	60fb      	str	r3, [r7, #12]
   return(result);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f023 0310 	bic.w	r3, r3, #16
 80044e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	461a      	mov	r2, r3
 80044ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044f0:	61fb      	str	r3, [r7, #28]
 80044f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f4:	69b9      	ldr	r1, [r7, #24]
 80044f6:	69fa      	ldr	r2, [r7, #28]
 80044f8:	e841 2300 	strex	r3, r2, [r1]
 80044fc:	617b      	str	r3, [r7, #20]
   return(result);
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d1e6      	bne.n	80044d2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	69db      	ldr	r3, [r3, #28]
 800450a:	f003 0310 	and.w	r3, r3, #16
 800450e:	2b10      	cmp	r3, #16
 8004510:	d103      	bne.n	800451a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2210      	movs	r2, #16
 8004518:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004520:	4619      	mov	r1, r3
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f7ff f934 	bl	8003790 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004528:	e00b      	b.n	8004542 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f7fb fff0 	bl	8000510 <HAL_UART_RxCpltCallback>
}
 8004530:	e007      	b.n	8004542 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	699a      	ldr	r2, [r3, #24]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f042 0208 	orr.w	r2, r2, #8
 8004540:	619a      	str	r2, [r3, #24]
}
 8004542:	bf00      	nop
 8004544:	3770      	adds	r7, #112	@ 0x70
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	40008000 	.word	0x40008000

08004550 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b09c      	sub	sp, #112	@ 0x70
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800455e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004568:	2b22      	cmp	r3, #34	@ 0x22
 800456a:	f040 80be 	bne.w	80046ea <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004574:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800457c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800457e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8004582:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004586:	4013      	ands	r3, r2
 8004588:	b29a      	uxth	r2, r3
 800458a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800458c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004592:	1c9a      	adds	r2, r3, #2
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800459e:	b29b      	uxth	r3, r3
 80045a0:	3b01      	subs	r3, #1
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	f040 80a1 	bne.w	80046fa <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045c0:	e853 3f00 	ldrex	r3, [r3]
 80045c4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80045c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80045cc:	667b      	str	r3, [r7, #100]	@ 0x64
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	461a      	mov	r2, r3
 80045d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80045d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80045d8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045da:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80045dc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80045de:	e841 2300 	strex	r3, r2, [r1]
 80045e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80045e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1e6      	bne.n	80045b8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	3308      	adds	r3, #8
 80045f0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045f4:	e853 3f00 	ldrex	r3, [r3]
 80045f8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80045fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045fc:	f023 0301 	bic.w	r3, r3, #1
 8004600:	663b      	str	r3, [r7, #96]	@ 0x60
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	3308      	adds	r3, #8
 8004608:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800460a:	643a      	str	r2, [r7, #64]	@ 0x40
 800460c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800460e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004610:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004612:	e841 2300 	strex	r3, r2, [r1]
 8004616:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800461a:	2b00      	cmp	r3, #0
 800461c:	d1e5      	bne.n	80045ea <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2220      	movs	r2, #32
 8004622:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a33      	ldr	r2, [pc, #204]	@ (8004704 <UART_RxISR_16BIT+0x1b4>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d01f      	beq.n	800467c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d018      	beq.n	800467c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004650:	6a3b      	ldr	r3, [r7, #32]
 8004652:	e853 3f00 	ldrex	r3, [r3]
 8004656:	61fb      	str	r3, [r7, #28]
   return(result);
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800465e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	461a      	mov	r2, r3
 8004666:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004668:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800466a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800466c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800466e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004670:	e841 2300 	strex	r3, r2, [r1]
 8004674:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1e6      	bne.n	800464a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004680:	2b01      	cmp	r3, #1
 8004682:	d12e      	bne.n	80046e2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	e853 3f00 	ldrex	r3, [r3]
 8004696:	60bb      	str	r3, [r7, #8]
   return(result);
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	f023 0310 	bic.w	r3, r3, #16
 800469e:	65bb      	str	r3, [r7, #88]	@ 0x58
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	461a      	mov	r2, r3
 80046a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80046a8:	61bb      	str	r3, [r7, #24]
 80046aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ac:	6979      	ldr	r1, [r7, #20]
 80046ae:	69ba      	ldr	r2, [r7, #24]
 80046b0:	e841 2300 	strex	r3, r2, [r1]
 80046b4:	613b      	str	r3, [r7, #16]
   return(result);
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1e6      	bne.n	800468a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	69db      	ldr	r3, [r3, #28]
 80046c2:	f003 0310 	and.w	r3, r3, #16
 80046c6:	2b10      	cmp	r3, #16
 80046c8:	d103      	bne.n	80046d2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2210      	movs	r2, #16
 80046d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80046d8:	4619      	mov	r1, r3
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f7ff f858 	bl	8003790 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80046e0:	e00b      	b.n	80046fa <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f7fb ff14 	bl	8000510 <HAL_UART_RxCpltCallback>
}
 80046e8:	e007      	b.n	80046fa <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	699a      	ldr	r2, [r3, #24]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f042 0208 	orr.w	r2, r2, #8
 80046f8:	619a      	str	r2, [r3, #24]
}
 80046fa:	bf00      	nop
 80046fc:	3770      	adds	r7, #112	@ 0x70
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	40008000 	.word	0x40008000

08004708 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b0ac      	sub	sp, #176	@ 0xb0
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004716:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	69db      	ldr	r3, [r3, #28]
 8004720:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800473e:	2b22      	cmp	r3, #34	@ 0x22
 8004740:	f040 8182 	bne.w	8004a48 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800474a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800474e:	e125      	b.n	800499c <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004756:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800475a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800475e:	b2d9      	uxtb	r1, r3
 8004760:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8004764:	b2da      	uxtb	r2, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800476a:	400a      	ands	r2, r1
 800476c:	b2d2      	uxtb	r2, r2
 800476e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004774:	1c5a      	adds	r2, r3, #1
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004780:	b29b      	uxth	r3, r3
 8004782:	3b01      	subs	r3, #1
 8004784:	b29a      	uxth	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	69db      	ldr	r3, [r3, #28]
 8004792:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004796:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800479a:	f003 0307 	and.w	r3, r3, #7
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d053      	beq.n	800484a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80047a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80047a6:	f003 0301 	and.w	r3, r3, #1
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d011      	beq.n	80047d2 <UART_RxISR_8BIT_FIFOEN+0xca>
 80047ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80047b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00b      	beq.n	80047d2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2201      	movs	r2, #1
 80047c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047c8:	f043 0201 	orr.w	r2, r3, #1
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80047d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80047d6:	f003 0302 	and.w	r3, r3, #2
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d011      	beq.n	8004802 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80047de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80047e2:	f003 0301 	and.w	r3, r3, #1
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00b      	beq.n	8004802 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2202      	movs	r2, #2
 80047f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047f8:	f043 0204 	orr.w	r2, r3, #4
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004802:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004806:	f003 0304 	and.w	r3, r3, #4
 800480a:	2b00      	cmp	r3, #0
 800480c:	d011      	beq.n	8004832 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800480e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004812:	f003 0301 	and.w	r3, r3, #1
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00b      	beq.n	8004832 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2204      	movs	r2, #4
 8004820:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004828:	f043 0202 	orr.w	r2, r3, #2
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004838:	2b00      	cmp	r3, #0
 800483a:	d006      	beq.n	800484a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f7fe ff9e 	bl	800377e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004850:	b29b      	uxth	r3, r3
 8004852:	2b00      	cmp	r3, #0
 8004854:	f040 80a2 	bne.w	800499c <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800485e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004860:	e853 3f00 	ldrex	r3, [r3]
 8004864:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8004866:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004868:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800486c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	461a      	mov	r2, r3
 8004876:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800487a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800487c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800487e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8004880:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004882:	e841 2300 	strex	r3, r2, [r1]
 8004886:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8004888:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800488a:	2b00      	cmp	r3, #0
 800488c:	d1e4      	bne.n	8004858 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	3308      	adds	r3, #8
 8004894:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004896:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004898:	e853 3f00 	ldrex	r3, [r3]
 800489c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800489e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80048a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048a4:	f023 0301 	bic.w	r3, r3, #1
 80048a8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	3308      	adds	r3, #8
 80048b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80048b6:	66ba      	str	r2, [r7, #104]	@ 0x68
 80048b8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ba:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80048bc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80048be:	e841 2300 	strex	r3, r2, [r1]
 80048c2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80048c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1e1      	bne.n	800488e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2220      	movs	r2, #32
 80048ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a5f      	ldr	r2, [pc, #380]	@ (8004a60 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d021      	beq.n	800492c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d01a      	beq.n	800492c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048fe:	e853 3f00 	ldrex	r3, [r3]
 8004902:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004904:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004906:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800490a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	461a      	mov	r2, r3
 8004914:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004918:	657b      	str	r3, [r7, #84]	@ 0x54
 800491a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800491c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800491e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004920:	e841 2300 	strex	r3, r2, [r1]
 8004924:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004926:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004928:	2b00      	cmp	r3, #0
 800492a:	d1e4      	bne.n	80048f6 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004930:	2b01      	cmp	r3, #1
 8004932:	d130      	bne.n	8004996 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004940:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004942:	e853 3f00 	ldrex	r3, [r3]
 8004946:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800494a:	f023 0310 	bic.w	r3, r3, #16
 800494e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	461a      	mov	r2, r3
 8004958:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800495c:	643b      	str	r3, [r7, #64]	@ 0x40
 800495e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004960:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004962:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004964:	e841 2300 	strex	r3, r2, [r1]
 8004968:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800496a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800496c:	2b00      	cmp	r3, #0
 800496e:	d1e4      	bne.n	800493a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	69db      	ldr	r3, [r3, #28]
 8004976:	f003 0310 	and.w	r3, r3, #16
 800497a:	2b10      	cmp	r3, #16
 800497c:	d103      	bne.n	8004986 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2210      	movs	r2, #16
 8004984:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800498c:	4619      	mov	r1, r3
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f7fe fefe 	bl	8003790 <HAL_UARTEx_RxEventCallback>
 8004994:	e002      	b.n	800499c <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f7fb fdba 	bl	8000510 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800499c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d006      	beq.n	80049b2 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 80049a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80049a8:	f003 0320 	and.w	r3, r3, #32
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	f47f aecf 	bne.w	8004750 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80049b8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80049bc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d049      	beq.n	8004a58 <UART_RxISR_8BIT_FIFOEN+0x350>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80049ca:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d242      	bcs.n	8004a58 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	3308      	adds	r3, #8
 80049d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049da:	6a3b      	ldr	r3, [r7, #32]
 80049dc:	e853 3f00 	ldrex	r3, [r3]
 80049e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	3308      	adds	r3, #8
 80049f2:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80049f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80049f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80049fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049fe:	e841 2300 	strex	r3, r2, [r1]
 8004a02:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d1e3      	bne.n	80049d2 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a15      	ldr	r2, [pc, #84]	@ (8004a64 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8004a0e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	e853 3f00 	ldrex	r3, [r3]
 8004a1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	f043 0320 	orr.w	r3, r3, #32
 8004a24:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004a32:	61bb      	str	r3, [r7, #24]
 8004a34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a36:	6979      	ldr	r1, [r7, #20]
 8004a38:	69ba      	ldr	r2, [r7, #24]
 8004a3a:	e841 2300 	strex	r3, r2, [r1]
 8004a3e:	613b      	str	r3, [r7, #16]
   return(result);
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d1e4      	bne.n	8004a10 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004a46:	e007      	b.n	8004a58 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	699a      	ldr	r2, [r3, #24]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f042 0208 	orr.w	r2, r2, #8
 8004a56:	619a      	str	r2, [r3, #24]
}
 8004a58:	bf00      	nop
 8004a5a:	37b0      	adds	r7, #176	@ 0xb0
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	40008000 	.word	0x40008000
 8004a64:	08004399 	.word	0x08004399

08004a68 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b0ae      	sub	sp, #184	@ 0xb8
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004a76:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	69db      	ldr	r3, [r3, #28]
 8004a80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a9e:	2b22      	cmp	r3, #34	@ 0x22
 8004aa0:	f040 8186 	bne.w	8004db0 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004aaa:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004aae:	e129      	b.n	8004d04 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab6:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004abe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8004ac2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8004ac6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8004aca:	4013      	ands	r3, r2
 8004acc:	b29a      	uxth	r2, r3
 8004ace:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004ad2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ad8:	1c9a      	adds	r2, r3, #2
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	b29a      	uxth	r2, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	69db      	ldr	r3, [r3, #28]
 8004af6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004afa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004afe:	f003 0307 	and.w	r3, r3, #7
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d053      	beq.n	8004bae <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004b06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004b0a:	f003 0301 	and.w	r3, r3, #1
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d011      	beq.n	8004b36 <UART_RxISR_16BIT_FIFOEN+0xce>
 8004b12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004b16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00b      	beq.n	8004b36 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2201      	movs	r2, #1
 8004b24:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b2c:	f043 0201 	orr.w	r2, r3, #1
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b36:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004b3a:	f003 0302 	and.w	r3, r3, #2
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d011      	beq.n	8004b66 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8004b42:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004b46:	f003 0301 	and.w	r3, r3, #1
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d00b      	beq.n	8004b66 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2202      	movs	r2, #2
 8004b54:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b5c:	f043 0204 	orr.w	r2, r3, #4
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004b6a:	f003 0304 	and.w	r3, r3, #4
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d011      	beq.n	8004b96 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8004b72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004b76:	f003 0301 	and.w	r3, r3, #1
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00b      	beq.n	8004b96 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2204      	movs	r2, #4
 8004b84:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b8c:	f043 0202 	orr.w	r2, r3, #2
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d006      	beq.n	8004bae <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f7fe fdec 	bl	800377e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	f040 80a4 	bne.w	8004d04 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004bc4:	e853 3f00 	ldrex	r3, [r3]
 8004bc8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004bca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004bcc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004bd0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	461a      	mov	r2, r3
 8004bda:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004bde:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004be2:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004be6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004bea:	e841 2300 	strex	r3, r2, [r1]
 8004bee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004bf0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d1e2      	bne.n	8004bbc <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	3308      	adds	r3, #8
 8004bfc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bfe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c00:	e853 3f00 	ldrex	r3, [r3]
 8004c04:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004c06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c08:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c0c:	f023 0301 	bic.w	r3, r3, #1
 8004c10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	3308      	adds	r3, #8
 8004c1a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8004c1e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004c20:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c22:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004c24:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004c26:	e841 2300 	strex	r3, r2, [r1]
 8004c2a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004c2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d1e1      	bne.n	8004bf6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2220      	movs	r2, #32
 8004c36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a5f      	ldr	r2, [pc, #380]	@ (8004dc8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d021      	beq.n	8004c94 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d01a      	beq.n	8004c94 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c66:	e853 3f00 	ldrex	r3, [r3]
 8004c6a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004c6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c6e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004c72:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004c80:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004c82:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c84:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004c86:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004c88:	e841 2300 	strex	r3, r2, [r1]
 8004c8c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004c8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d1e4      	bne.n	8004c5e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d130      	bne.n	8004cfe <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004caa:	e853 3f00 	ldrex	r3, [r3]
 8004cae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004cb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cb2:	f023 0310 	bic.w	r3, r3, #16
 8004cb6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004cc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cc6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004cca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ccc:	e841 2300 	strex	r3, r2, [r1]
 8004cd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004cd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d1e4      	bne.n	8004ca2 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	69db      	ldr	r3, [r3, #28]
 8004cde:	f003 0310 	and.w	r3, r3, #16
 8004ce2:	2b10      	cmp	r3, #16
 8004ce4:	d103      	bne.n	8004cee <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2210      	movs	r2, #16
 8004cec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f7fe fd4a 	bl	8003790 <HAL_UARTEx_RxEventCallback>
 8004cfc:	e002      	b.n	8004d04 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f7fb fc06 	bl	8000510 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004d04:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d006      	beq.n	8004d1a <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8004d0c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004d10:	f003 0320 	and.w	r3, r3, #32
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	f47f aecb 	bne.w	8004ab0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004d20:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004d24:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d049      	beq.n	8004dc0 <UART_RxISR_16BIT_FIFOEN+0x358>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004d32:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d242      	bcs.n	8004dc0 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	3308      	adds	r3, #8
 8004d40:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d44:	e853 3f00 	ldrex	r3, [r3]
 8004d48:	623b      	str	r3, [r7, #32]
   return(result);
 8004d4a:	6a3b      	ldr	r3, [r7, #32]
 8004d4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	3308      	adds	r3, #8
 8004d5a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8004d5e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d66:	e841 2300 	strex	r3, r2, [r1]
 8004d6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d1e3      	bne.n	8004d3a <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a15      	ldr	r2, [pc, #84]	@ (8004dcc <UART_RxISR_16BIT_FIFOEN+0x364>)
 8004d76:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	e853 3f00 	ldrex	r3, [r3]
 8004d84:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f043 0320 	orr.w	r3, r3, #32
 8004d8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	461a      	mov	r2, r3
 8004d96:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004d9a:	61fb      	str	r3, [r7, #28]
 8004d9c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d9e:	69b9      	ldr	r1, [r7, #24]
 8004da0:	69fa      	ldr	r2, [r7, #28]
 8004da2:	e841 2300 	strex	r3, r2, [r1]
 8004da6:	617b      	str	r3, [r7, #20]
   return(result);
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d1e4      	bne.n	8004d78 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004dae:	e007      	b.n	8004dc0 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	699a      	ldr	r2, [r3, #24]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f042 0208 	orr.w	r2, r2, #8
 8004dbe:	619a      	str	r2, [r3, #24]
}
 8004dc0:	bf00      	nop
 8004dc2:	37b8      	adds	r7, #184	@ 0xb8
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	40008000 	.word	0x40008000
 8004dcc:	08004551 	.word	0x08004551

08004dd0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004dd8:	bf00      	nop
 8004dda:	370c      	adds	r7, #12
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bc80      	pop	{r7}
 8004de0:	4770      	bx	lr

08004de2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004de2:	b480      	push	{r7}
 8004de4:	b083      	sub	sp, #12
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004dea:	bf00      	nop
 8004dec:	370c      	adds	r7, #12
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bc80      	pop	{r7}
 8004df2:	4770      	bx	lr

08004df4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004dfc:	bf00      	nop
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bc80      	pop	{r7}
 8004e04:	4770      	bx	lr

08004e06 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004e06:	b480      	push	{r7}
 8004e08:	b085      	sub	sp, #20
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d101      	bne.n	8004e1c <HAL_UARTEx_DisableFifoMode+0x16>
 8004e18:	2302      	movs	r3, #2
 8004e1a:	e027      	b.n	8004e6c <HAL_UARTEx_DisableFifoMode+0x66>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2224      	movs	r2, #36	@ 0x24
 8004e28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f022 0201 	bic.w	r2, r2, #1
 8004e42:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004e4a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2220      	movs	r2, #32
 8004e5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3714      	adds	r7, #20
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bc80      	pop	{r7}
 8004e74:	4770      	bx	lr

08004e76 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004e76:	b580      	push	{r7, lr}
 8004e78:	b084      	sub	sp, #16
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	6078      	str	r0, [r7, #4]
 8004e7e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d101      	bne.n	8004e8e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004e8a:	2302      	movs	r3, #2
 8004e8c:	e02d      	b.n	8004eea <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2201      	movs	r2, #1
 8004e92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2224      	movs	r2, #36	@ 0x24
 8004e9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f022 0201 	bic.w	r2, r2, #1
 8004eb4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	683a      	ldr	r2, [r7, #0]
 8004ec6:	430a      	orrs	r2, r1
 8004ec8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 f850 	bl	8004f70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	68fa      	ldr	r2, [r7, #12]
 8004ed6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2220      	movs	r2, #32
 8004edc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3710      	adds	r7, #16
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}

08004ef2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004ef2:	b580      	push	{r7, lr}
 8004ef4:	b084      	sub	sp, #16
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
 8004efa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d101      	bne.n	8004f0a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004f06:	2302      	movs	r3, #2
 8004f08:	e02d      	b.n	8004f66 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2224      	movs	r2, #36	@ 0x24
 8004f16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f022 0201 	bic.w	r2, r2, #1
 8004f30:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	683a      	ldr	r2, [r7, #0]
 8004f42:	430a      	orrs	r2, r1
 8004f44:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 f812 	bl	8004f70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68fa      	ldr	r2, [r7, #12]
 8004f52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2220      	movs	r2, #32
 8004f58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3710      	adds	r7, #16
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
	...

08004f70 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b085      	sub	sp, #20
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d108      	bne.n	8004f92 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004f90:	e031      	b.n	8004ff6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004f92:	2308      	movs	r3, #8
 8004f94:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004f96:	2308      	movs	r3, #8
 8004f98:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	0e5b      	lsrs	r3, r3, #25
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	f003 0307 	and.w	r3, r3, #7
 8004fa8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	0f5b      	lsrs	r3, r3, #29
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	f003 0307 	and.w	r3, r3, #7
 8004fb8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004fba:	7bbb      	ldrb	r3, [r7, #14]
 8004fbc:	7b3a      	ldrb	r2, [r7, #12]
 8004fbe:	4910      	ldr	r1, [pc, #64]	@ (8005000 <UARTEx_SetNbDataToProcess+0x90>)
 8004fc0:	5c8a      	ldrb	r2, [r1, r2]
 8004fc2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004fc6:	7b3a      	ldrb	r2, [r7, #12]
 8004fc8:	490e      	ldr	r1, [pc, #56]	@ (8005004 <UARTEx_SetNbDataToProcess+0x94>)
 8004fca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004fcc:	fb93 f3f2 	sdiv	r3, r3, r2
 8004fd0:	b29a      	uxth	r2, r3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004fd8:	7bfb      	ldrb	r3, [r7, #15]
 8004fda:	7b7a      	ldrb	r2, [r7, #13]
 8004fdc:	4908      	ldr	r1, [pc, #32]	@ (8005000 <UARTEx_SetNbDataToProcess+0x90>)
 8004fde:	5c8a      	ldrb	r2, [r1, r2]
 8004fe0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004fe4:	7b7a      	ldrb	r2, [r7, #13]
 8004fe6:	4907      	ldr	r1, [pc, #28]	@ (8005004 <UARTEx_SetNbDataToProcess+0x94>)
 8004fe8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004fea:	fb93 f3f2 	sdiv	r3, r3, r2
 8004fee:	b29a      	uxth	r2, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004ff6:	bf00      	nop
 8004ff8:	3714      	adds	r7, #20
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bc80      	pop	{r7}
 8004ffe:	4770      	bx	lr
 8005000:	080051fc 	.word	0x080051fc
 8005004:	08005204 	.word	0x08005204

08005008 <memset>:
 8005008:	4402      	add	r2, r0
 800500a:	4603      	mov	r3, r0
 800500c:	4293      	cmp	r3, r2
 800500e:	d100      	bne.n	8005012 <memset+0xa>
 8005010:	4770      	bx	lr
 8005012:	f803 1b01 	strb.w	r1, [r3], #1
 8005016:	e7f9      	b.n	800500c <memset+0x4>

08005018 <__libc_init_array>:
 8005018:	b570      	push	{r4, r5, r6, lr}
 800501a:	4d0d      	ldr	r5, [pc, #52]	@ (8005050 <__libc_init_array+0x38>)
 800501c:	4c0d      	ldr	r4, [pc, #52]	@ (8005054 <__libc_init_array+0x3c>)
 800501e:	1b64      	subs	r4, r4, r5
 8005020:	10a4      	asrs	r4, r4, #2
 8005022:	2600      	movs	r6, #0
 8005024:	42a6      	cmp	r6, r4
 8005026:	d109      	bne.n	800503c <__libc_init_array+0x24>
 8005028:	4d0b      	ldr	r5, [pc, #44]	@ (8005058 <__libc_init_array+0x40>)
 800502a:	4c0c      	ldr	r4, [pc, #48]	@ (800505c <__libc_init_array+0x44>)
 800502c:	f000 f818 	bl	8005060 <_init>
 8005030:	1b64      	subs	r4, r4, r5
 8005032:	10a4      	asrs	r4, r4, #2
 8005034:	2600      	movs	r6, #0
 8005036:	42a6      	cmp	r6, r4
 8005038:	d105      	bne.n	8005046 <__libc_init_array+0x2e>
 800503a:	bd70      	pop	{r4, r5, r6, pc}
 800503c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005040:	4798      	blx	r3
 8005042:	3601      	adds	r6, #1
 8005044:	e7ee      	b.n	8005024 <__libc_init_array+0xc>
 8005046:	f855 3b04 	ldr.w	r3, [r5], #4
 800504a:	4798      	blx	r3
 800504c:	3601      	adds	r6, #1
 800504e:	e7f2      	b.n	8005036 <__libc_init_array+0x1e>
 8005050:	08005214 	.word	0x08005214
 8005054:	08005214 	.word	0x08005214
 8005058:	08005214 	.word	0x08005214
 800505c:	08005218 	.word	0x08005218

08005060 <_init>:
 8005060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005062:	bf00      	nop
 8005064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005066:	bc08      	pop	{r3}
 8005068:	469e      	mov	lr, r3
 800506a:	4770      	bx	lr

0800506c <_fini>:
 800506c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800506e:	bf00      	nop
 8005070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005072:	bc08      	pop	{r3}
 8005074:	469e      	mov	lr, r3
 8005076:	4770      	bx	lr
